var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.078,1,4.045]],["body/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.09,1,6.787,2,0.843,3,0.068,4,0.046,5,0.052,6,5.616,7,3.498,8,5.026,9,5.616,10,0.129,11,0.187,12,0.848,13,8.902,14,7.822,15,3.016,16,0.16,17,0.006,18,6.393,19,0.218,20,6.023,21,3.369,22,6.362,23,4.347,24,5.616,25,5.616,26,2.919,27,0.068,28,1.41,29,1.106,30,6.592,31,4.116,32,0.783,33,6.592,34,1.625,35,4.217,36,2.1,37,1.923,38,2.596,39,2.996,40,4.116,41,2.654,42,2.771,43,5.026,44,2.207,45,5.026,46,7.355,47,1.664,48,3.498,49,2.018,50,3.369,51,5.612,52,5.616,53,5.616,54,2.541,55,2.064,56,5.616,57,2.438,58,5.616,59,5.616,60,5.616,61,1.701,62,5.616,63,5.616,64,4.93,65,5.616,66,2.438,67,4.638,68,2.45,69,7.366,70,4.928,71,5.616,72,3.379,73,2.616,74,1.868,75,3.757,76,3.32,77,8.219,78,5.616,79,5.616,80,5.616,81,1.868,82,5.397,83,3.263,84,5.026,85,5.616,86,5.397,87,5.616,88,0.004,89,0.004]],["title/classes/BaseFormAccessor.html",[90,0.463,91,3.791]],["body/classes/BaseFormAccessor.html",[3,0.071,4,0.063,5,0.071,17,0.005,27,0.071,74,2.58,88,0.005,89,0.005,90,0.85,91,6.961,92,4.653,93,7.757,94,6.942,95,7.757,96,0.957,97,3.749,98,4.374,99,4.507,100,6.405,101,3.749,102,3.838,103,6.942,104,6.942,105,4.812,106,2.085,107,5.684,108,7.757,109,1.164]],["title/interfaces/BaseStore.html",[0,0.078,110,3.589]],["body/interfaces/BaseStore.html",[0,0.147,2,0.966,3,0.059,4,0.052,5,0.059,10,0.148,11,0.204,16,0.2,17,0.006,19,0.233,27,0.085,28,1.756,29,1.483,68,3.204,88,0.004,89,0.004,98,3.628,110,5.888,111,4.98,112,4.98,113,5.693,114,3.355,115,5.693,116,7.311,117,4.98,118,3.991,119,6.445,120,4.304,121,6.319,122,3.365,123,4.985,124,3.432,125,4.98,126,5.375,127,3.859,128,2.85,129,5.888,130,3.628,131,3.432,132,5.888,133,3.738,134,3.991,135,2.04,136,2.634,137,1.316,138,5.504,139,2.685,140,4.304,141,4.304,142,4.304,143,4.304]],["title/interfaces/BaseStoreActions.html",[0,0.078,129,3.589]],["body/interfaces/BaseStoreActions.html",[0,0.146,2,0.951,3,0.058,4,0.051,5,0.058,10,0.146,11,0.202,12,0.726,16,0.212,17,0.006,19,0.231,27,0.084,28,1.213,29,1.37,68,3.192,88,0.004,89,0.004,98,3.573,110,4.643,111,4.904,112,4.904,113,3.931,114,3.339,115,4.937,116,6.735,117,4.904,118,3.931,119,6.821,120,4.239,121,6.29,122,3.352,123,4.937,124,3.38,125,4.904,126,6.29,127,3.8,128,2.807,129,6.376,130,3.573,131,3.38,132,5.832,133,3.682,134,3.931,135,2.009,136,2.594,137,1.54,138,5.474,139,3.809,140,4.239,141,4.239,142,4.239,143,4.239,144,4.245]],["title/interfaces/BaseStoreAssets.html",[0,0.078,127,2.938]],["body/interfaces/BaseStoreAssets.html",[0,0.147,2,0.975,3,0.06,4,0.053,5,0.06,10,0.149,11,0.205,16,0.192,17,0.006,19,0.234,27,0.085,28,1.243,29,1.382,68,2.927,88,0.004,89,0.004,98,3.664,110,4.761,111,5.029,112,5.029,113,4.031,114,2.871,115,5.015,116,6.812,117,5.029,118,4.031,119,6.46,120,4.346,121,6.337,122,3.373,123,5.713,124,3.466,125,5.029,126,5.408,127,4.849,128,4.08,129,6.748,130,5.193,131,4.912,132,6.748,133,3.775,134,4.031,135,2.061,136,2.66,137,1.324,138,5.523,139,2.711,140,4.346,141,4.346,142,4.346,143,4.346]],["title/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.078,145,3.589]],["body/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.14,2,1.117,3,0.069,4,0.06,5,0.069,10,0.171,11,0.223,12,0.801,16,0.191,17,0.005,19,0.198,27,0.081,88,0.005,89,0.005,115,5.983,145,6.433,146,5.761,147,4.979,148,4.197,149,6.661,150,8.804,151,6.103,152,1.304,153,6.795,154,4.979,155,5.454,156,4.618]],["title/interfaces/BaseStoreSelectors.html",[0,0.078,132,3.589]],["body/interfaces/BaseStoreSelectors.html",[0,0.147,2,0.966,3,0.059,4,0.052,5,0.059,10,0.148,11,0.204,16,0.2,17,0.006,19,0.233,27,0.085,28,1.231,29,1.378,68,2.914,88,0.004,89,0.004,98,5.175,110,4.714,111,4.98,112,4.98,113,3.991,114,2.854,115,4.985,116,6.782,117,4.98,118,3.991,119,6.445,120,4.304,121,6.809,122,3.365,123,4.985,124,3.432,125,4.98,126,5.375,127,3.859,128,2.85,129,5.888,130,3.628,131,3.432,132,6.42,133,3.738,134,3.991,135,2.04,136,2.634,137,1.316,138,5.504,139,2.685,140,4.304,141,6.139,142,6.139,143,6.139]],["title/interfaces/BasicEntityAdapterReducerActions.html",[0,0.078,157,4.045]],["body/interfaces/BasicEntityAdapterReducerActions.html",[0,0.137,2,1.081,3,0.066,4,0.058,5,0.066,10,0.165,11,0.218,16,0.216,17,0.006,19,0.191,27,0.079,29,1.292,49,1.563,68,2.394,88,0.005,89,0.005,113,4.466,114,2.557,124,3.84,128,3.189,135,3.025,137,1.562,154,4.816,157,7.106,158,5.275,159,5.275,160,6.442,161,6.381,162,3.981,163,7.702,164,4.816,165,6.442,166,6.442,167,5.944,168,6.442,169,5.944,170,5.028,171,1.701,172,6.442,173,4.63]],["title/interfaces/BasicEntityState.html",[0,0.078,170,3.421]],["body/interfaces/BasicEntityState.html",[0,0.139,2,1.096,3,0.067,4,0.059,5,0.067,10,0.168,11,0.22,16,0.213,17,0.005,19,0.194,27,0.08,29,1.303,49,1.585,68,2.428,88,0.005,89,0.005,113,4.53,114,2.593,124,3.895,128,3.235,135,2.316,137,1.196,144,4.63,154,4.885,157,6.029,158,5.35,159,5.35,160,6.534,161,4.885,162,3.047,163,8.288,164,4.885,165,6.534,166,6.534,167,6.029,168,6.534,169,6.029,170,6.062,171,2.051,172,8.576,173,4.697]],["title/pipes/BtwPipe.html",[174,1.483,175,4.384]],["body/pipes/BtwPipe.html",[3,0.058,4,0.051,5,0.058,10,0.182,12,0.573,16,0.137,17,0.006,19,0.167,27,0.058,32,1.415,34,1.818,42,1.792,44,2.12,47,1.603,49,1.719,66,2.728,88,0.004,89,0.004,90,0.594,96,0.775,152,1.342,174,2.397,175,8.144,176,3.266,177,3.769,178,6.284,179,1.714,180,1.419,181,9.1,182,2.72,183,1.137,184,1.242,185,4.339,186,5.297,187,0.775,188,6.284,189,7.917,190,3.076,191,4.115,192,6.873,193,1.549,194,2.434,195,6.352,196,1.137,197,6.284,198,6.284,199,6.284,200,3.769,201,6.284,202,6.284,203,2.479,204,4.339,205,0.473,206,1.846,207,5.189,208,6.284,209,3.769,210,6.284,211,4.605,212,7.917,213,6.284,214,6.284,215,5.624,216,6.284,217,6.284,218,4.864,219,5.624,220,6.284,221,6.284,222,7.917,223,5.189,224,6.284,225,6.284]],["title/interfaces/ComponentTypeWrapper.html",[0,0.078,226,4.384]],["body/interfaces/ComponentTypeWrapper.html",[0,0.151,2,0.97,3,0.06,4,0.052,5,0.06,7,3.428,17,0.006,19,0.233,21,3.875,27,0.06,34,1.87,42,1.842,44,1.505,47,1.631,49,1.906,61,1.956,70,4.322,88,0.004,89,0.004,90,0.83,91,6.236,96,0.797,100,5.335,109,1.484,203,3.178,205,0.487,226,7.856,227,6.46,228,6.46,229,6.46,230,5.903,231,5.389,232,8.056,233,4.187,234,4.543,235,7.209,236,5.903,237,3.428,238,3.012,239,7.209,240,5.626,241,7.809,242,9.19,243,8.056,244,7.209,245,1.526,246,5.782,247,5.335,248,6.46,249,4.512,250,4.322,251,7.209,252,6.46,253,6.433,254,6.795,255,3.736,256,6.433,257,7.209,258,6.46]],["title/injectables/EffectsService.html",[259,1.417,260,4.045]],["body/injectables/EffectsService.html",[3,0.064,4,0.057,5,0.064,10,0.16,12,0.77,16,0.184,17,0.006,19,0.251,27,0.064,29,1.363,44,2.115,88,0.004,89,0.004,90,0.659,147,4.663,152,1.228,180,1.382,183,1.527,184,1.54,187,1.041,193,2.081,196,1.527,205,0.525,259,2.442,260,6.969,261,2.966,262,6.969,263,6.969,264,6.969,265,8.44,266,6.969,267,8.44,268,3.018,269,8.44,270,6.969,271,1.846,272,1.718,273,2.21,274,3.221,275,6.969,276,6.969,277,6.969,278,6.969,279,6.969,280,6.969,281,6.969]],["title/interfaces/EntityStoreActions.html",[0,0.078,282,3.791]],["body/interfaces/EntityStoreActions.html",[0,0.134,2,0.88,3,0.054,4,0.048,5,0.054,10,0.135,11,0.192,12,0.691,16,0.215,17,0.006,19,0.223,27,0.077,29,1.137,68,2.949,88,0.004,89,0.004,114,3.149,115,5.696,119,6.936,120,3.92,121,6.142,122,3.513,123,4.697,124,3.126,126,6.142,128,2.596,130,4.27,131,3.126,135,2.912,137,1.503,138,5.927,139,3.7,140,3.92,141,3.92,142,3.92,143,3.92,144,4.039,158,4.294,159,4.294,161,6.142,162,3.832,170,4.093,274,2.708,282,6.493,283,4.536,284,4.839,285,4.294,286,3.635,287,5.861,288,4.839,289,4.839,290,4.839,291,4.839]],["title/interfaces/EntityStoreAssets.html",[0,0.078,286,3.039]],["body/interfaces/EntityStoreAssets.html",[0,0.137,2,0.921,3,0.057,4,0.05,5,0.057,10,0.141,11,0.198,16,0.187,17,0.006,19,0.228,27,0.079,29,1.17,68,2.04,88,0.004,89,0.004,114,2.178,115,5.777,119,6.739,120,4.103,121,6.229,122,3.56,123,5.595,124,3.272,126,5.216,128,3.996,130,5.251,131,4.811,135,2.473,137,1.277,138,5.972,139,2.559,140,4.103,141,4.103,142,4.103,143,4.103,158,4.494,159,4.494,161,5.216,162,3.254,170,4.284,274,2.835,282,6.981,283,4.747,284,5.064,285,4.494,286,4.837,287,6.981,288,5.064,289,5.064,290,5.064,291,5.064]],["title/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.078,155,3.589]],["body/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.139,2,1.101,3,0.068,4,0.059,5,0.068,10,0.169,11,0.221,12,0.876,16,0.202,17,0.005,19,0.195,27,0.08,88,0.005,89,0.005,115,5.954,145,5.376,146,5.679,147,4.908,148,4.137,149,6.566,150,8.77,151,6.079,152,1.298,153,7.429,154,4.908,155,6.378,156,5.954]],["title/interfaces/EntityStoreSelectors.html",[0,0.078,287,3.791]],["body/interfaces/EntityStoreSelectors.html",[0,0.137,2,0.917,3,0.056,4,0.05,5,0.056,10,0.14,11,0.197,16,0.196,17,0.006,19,0.227,27,0.079,29,1.167,68,2.032,88,0.004,89,0.004,114,2.17,115,5.77,119,6.735,120,4.087,121,6.766,122,3.532,123,4.824,124,3.258,126,5.203,128,2.706,130,4.386,131,3.258,135,2.466,137,1.273,138,5.968,139,2.549,140,4.087,141,6.025,142,6.025,143,6.025,158,4.476,159,4.476,161,5.203,162,3.245,170,4.266,274,2.823,282,6.019,283,4.728,284,5.044,285,4.476,286,3.79,287,6.622,288,7.437,289,5.044,290,5.044,291,5.044]],["title/directives/FocusClickDirective.html",[292,0.714,293,2.314]],["body/directives/FocusClickDirective.html",[3,0.049,4,0.043,5,0.049,10,0.123,11,0.181,12,0.488,15,2.922,16,0.155,17,0.006,19,0.142,27,0.049,32,1.119,47,1.625,66,3.485,76,3.054,81,2.374,88,0.004,89,0.004,90,0.506,135,2.264,137,0.877,177,3.212,179,1.461,180,0.877,182,2.452,183,1.291,184,1.549,187,1.155,193,1.32,196,1.291,200,3.212,203,2.112,205,0.403,292,1.386,293,4.214,294,1.283,295,9.511,296,9.511,297,5.355,298,2.097,299,8.918,300,1.59,301,6.228,302,7.137,303,8.562,304,2.229,305,4.025,306,6.353,307,7.137,308,1.167,309,7.137,310,3.924,311,3.201,312,7.137,313,7.137,314,7.137,315,3.531,316,7.137,317,1.549,318,7.137,319,4.665,320,4.527,321,5.355,322,7.184,323,5.37,324,3.166,325,6.274,326,8.028,327,8.028,328,4.98,329,7.662,330,3.632,331,6.387,332,4.4,333,3.912,334,3.583,335,2.373,336,5.355,337,5.355,338,3.112,339,4.775,340,3.212,341,1.621,342,4.792,343,3.531,344,3.322,345,3.112,346,3.74,347,2.588,348,5.355,349,3.02,350,2.192,351,3.02,352,4.422,353,7.137,354,6.387,355,5.355,356,5.355,357,3.924,358,3.322,359,5.355,360,5.355]],["title/directives/FormAccessorContainer.html",[292,0.714,361,2.314]],["body/directives/FormAccessorContainer.html",[2,0.606,3,0.037,4,0.033,5,0.037,10,0.093,11,0.149,12,0.691,15,1.653,16,0.165,17,0.006,19,0.223,21,2.422,26,2.099,27,0.037,32,1.207,34,2.506,35,4.794,42,1.151,49,1.273,57,3.492,61,1.775,66,1.753,73,1.434,83,1.789,88,0.003,89,0.003,90,0.382,91,4.539,94,3.614,96,0.934,99,5.694,100,4.842,101,1.952,103,3.614,106,2.384,109,1.396,122,3.098,180,1.24,183,1.061,184,1.475,187,1.068,193,1.868,196,1.455,203,2.988,205,0.304,206,1.722,250,2.702,251,3.614,272,0.996,292,0.855,294,0.968,300,1.455,304,2.77,308,1.024,317,1.683,335,1.789,347,4.056,350,3.101,361,2.77,362,8.869,363,8.679,364,8.869,365,4.038,366,3.059,367,3.191,368,3.888,369,1.726,370,5.863,371,5.863,372,5.863,373,3.356,374,6.903,375,5.863,376,4.038,377,4.283,378,6.903,379,1.588,380,5.068,381,5.863,382,6.58,383,5.068,384,5.863,385,6.929,386,8.869,387,5.343,388,5.863,389,7.583,390,7.583,391,4.038,392,2.857,393,7.575,394,5.863,395,5.343,396,5.863,397,4.038,398,4.038,399,3.923,400,4.038,401,4.038,402,3.638,403,5.863,404,4.539,405,5.863,406,5.863,407,4.038,408,2.71,409,5.863,410,5.863,411,5.247,412,2.627,413,4.038,414,4.038,415,4.038,416,5.863,417,4.038,418,5.863,419,6.903,420,4.038,421,7.575,422,4.038,423,4.038,424,2.347,425,2.598,426,3.214,427,4.038,428,2.505,429,4.038,430,4.038,431,2.154,432,2.277,433,4.038,434,4.038]],["title/interfaces/FormStateOptionsEntity.html",[0,0.078,390,4.045]],["body/interfaces/FormStateOptionsEntity.html",[0,0.122,2,1.145,3,0.07,4,0.062,5,0.07,10,0.175,11,0.226,12,0.887,16,0.194,17,0.005,27,0.07,29,1.505,88,0.005,89,0.005,390,7.354,392,2.458,435,7.628,436,7.628,437,8.699,438,9.72]],["title/pipes/HasObserversPipe.html",[174,1.483,439,4.384]],["body/pipes/HasObserversPipe.html",[3,0.063,4,0.056,5,0.063,12,0.627,16,0.15,17,0.006,19,0.183,27,0.077,29,1.257,44,1.95,47,1.827,66,2.985,73,2.442,88,0.004,89,0.004,90,0.791,109,1.257,136,2.815,174,2.535,176,3.573,177,4.124,179,1.875,180,1.478,182,2.876,183,1.244,184,1.415,185,3.769,187,0.848,193,1.695,196,1.244,200,5.413,203,2.712,204,4.588,205,0.518,206,2.02,298,2.02,320,5.09,439,8.405,440,8.371,441,7.491,442,6.153,443,9.392,444,7.491,445,8.869,446,6.876,447,6.876,448,8.371,449,4.6,450,6.876,451,6.876,452,6.876,453,4.6,454,6.153,455,6.876]],["title/pipes/IbanPipe.html",[174,1.483,456,4.384]],["body/pipes/IbanPipe.html",[3,0.063,4,0.055,5,0.063,12,0.62,15,2.782,16,0.148,17,0.006,19,0.18,27,0.063,32,1.252,44,1.936,47,1.682,88,0.004,89,0.004,90,0.642,152,1.265,174,2.516,176,3.531,177,4.075,179,1.853,180,1.47,182,2.855,183,1.229,184,1.303,185,3.724,186,5.56,187,0.838,190,2.297,192,6.09,193,1.675,196,1.229,200,4.985,203,2.68,204,4.555,205,0.512,206,1.996,223,5.61,308,0.864,456,8.371,457,6.794,458,9.354,459,6.794,460,6.794,461,6.794,462,6.794,463,6.794,464,6.794,465,6.794,466,6.794,467,3.724,468,6.794,469,9.354,470,6.794,471,6.433,472,6.081,473,6.794,474,7.437,475,6.794,476,2.224,477,6.794]],["title/components/MockTourHolderComponent.html",[109,0.735,478,2.367]],["body/components/MockTourHolderComponent.html",[3,0.044,4,0.039,5,0.044,10,0.109,11,0.167,17,0.005,19,0.217,27,0.044,28,1.639,32,1.054,47,1.335,49,1.035,61,1.997,88,0.004,89,0.004,90,0.451,106,1.281,109,1.135,179,1.3,180,1.662,182,2.266,183,1.193,184,1.389,187,1.006,196,0.862,205,0.359,272,1.175,292,0.695,293,2.252,294,1.142,298,3.082,300,1.629,308,0.962,317,0.862,361,2.252,369,2.216,478,3.944,479,2.601,480,1.751,481,1.846,482,7.666,483,4.767,484,4.494,485,3.575,486,6.767,487,7.561,488,5.541,489,8.159,490,4.767,491,6.595,492,5.446,493,6.595,494,5.902,495,4.767,496,6.595,497,5.902,498,4.767,499,4.833,500,4.767,501,1.263,502,2.358,503,6.595,504,4.266,505,3.69,506,2.203,507,4.374,508,4.767,509,1.536,510,4.767,511,3.329,512,1.693,513,2.252,514,2.358,515,2.984,516,1.58,517,4.037,518,2.358,519,2.358,520,2.304,521,2.069,522,2.358,523,2.304,524,3.145,525,2.358,526,2.304,527,2.358,528,3.263,529,2.358,530,3.187,531,3.263,532,2.304,533,2.112,534,2.304,535,3.542,536,2.358,537,4.037,538,2.304,539,2.252,540,2.304,541,2.156,542,2.358,543,2.252,544,2.252,545,2.358,546,2.304,547,2.252,548,2.156,549,2.358,550,2.304,551,1.951,552,2.358,553,2.304,554,2.358,555,2.304,556,3.263,557,2.304,558,2.304,559,2.358,560,2.304,561,2.358,562,2.304,563,1.951,564,2.358,565,2.358,566,2.358,567,2.112,568,1.585,569,2.203,570,2.203,571,2.358,572,2.252,573,2.358,574,2.358,575,2.358,576,2.252,577,2.358,578,2.203,579,2.252,580,2.358,581,1.951,582,2.203,583,2.358,584,2.358,585,2.156,586,2.252,587,2.358,588,2.252,589,2.358,590,2.252,591,2.358,592,2.203,593,2.203,594,2.252,595,2.358,596,2.252,597,2.358,598,2.252,599,2.358,600,2.252,601,2.358,602,1.814,603,2.252,604,2.203,605,2.252,606,2.203,607,2.203,608,2.203,609,1.915,610,1.951,611,1.951,612,2.203,613,2.358,614,2.112,615,2.358,616,2.252,617,2.358,618,2.069,619,2.203,620,2.358,621,2.203,622,2.358,623,2.252,624,2.358,625,2.358]],["title/components/MockTourStepComponent.html",[109,0.735,520,2.367]],["body/components/MockTourStepComponent.html",[3,0.035,4,0.03,5,0.035,10,0.152,11,0.141,12,0.507,16,0.159,17,0.005,19,0.148,27,0.035,28,1.663,32,1.088,47,1.713,49,0.815,55,1.379,72,3.024,88,0.003,89,0.003,90,0.8,106,1.009,109,1.304,137,0.91,152,0.751,171,1.313,179,1.023,180,1.621,182,1.909,183,1.005,184,1.573,187,1.228,194,1.708,196,1.197,203,2.191,205,0.283,245,0.886,271,1.753,292,0.547,293,1.773,294,0.899,298,3.053,300,1.698,304,1.735,305,3.133,308,0.993,315,2.748,317,1.197,319,2.18,320,2.116,357,4.071,361,1.773,367,2.568,369,1.389,478,1.813,479,2.191,480,1.379,481,1.453,482,3.358,484,3.862,485,3.868,488,4.071,499,2.749,507,3.863,509,1.209,511,6.067,512,2.903,514,1.856,515,2.513,516,1.959,517,3.618,518,1.856,519,1.856,520,3.534,521,4.268,522,1.856,523,1.813,524,3.068,525,1.856,526,1.813,527,1.856,528,2.748,529,1.856,530,2.685,531,2.748,532,1.813,533,1.662,534,1.813,535,3.175,536,1.856,537,3.618,538,1.813,539,1.773,540,1.813,541,1.697,542,1.856,543,1.773,544,1.773,545,1.856,546,1.813,547,1.773,548,1.697,549,1.856,550,1.813,551,1.536,552,1.856,553,1.813,554,1.856,555,1.813,556,2.748,557,1.813,558,1.813,559,1.856,560,1.813,561,1.856,562,1.813,563,1.536,564,1.856,565,1.856,566,1.856,567,1.662,568,1.248,569,1.734,570,1.734,571,1.856,572,1.773,573,1.856,574,1.856,575,1.856,576,1.773,577,1.856,578,1.734,579,1.773,580,1.856,581,1.536,582,1.734,583,1.856,584,1.856,585,1.697,586,1.773,587,1.856,588,1.773,589,1.856,590,1.773,591,1.856,592,1.734,593,1.734,594,1.773,595,1.856,596,1.773,597,1.856,598,1.773,599,1.856,600,1.773,601,1.856,602,1.428,603,1.773,604,1.734,605,1.773,606,1.734,607,1.734,608,1.734,609,1.507,610,1.536,611,1.536,612,1.734,613,1.856,614,1.662,615,1.856,616,1.773,617,1.856,618,4.365,619,1.734,620,1.856,621,1.734,622,1.856,623,1.773,624,1.856,625,1.856,626,3.752,627,6.545,628,6.545,629,5.108,630,4.972,631,2.708,632,4.972,633,5.359,634,4.972,635,4.972,636,3.844,637,4.255,638,5.121,639,4.3,640,5.121,641,5.617,642,5.555,643,4.972,644,2.568,645,4.972,646,5.555,647,5.555,648,5.555,649,5.555,650,3.133,651,5.555,652,2.748,653,5.555,654,5.555,655,5.555,656,2.191,657,4.3,658,3.752,659,3.752,660,2.904,661,3.752,662,2.056,663,2.51,664,3.358,665,1.902,666,3.752,667,3.098,668,3.358,669,3.752,670,3.358,671,2.62,672,1.902,673,3.752,674,1.813,675,2.056,676,3.752]],["title/directives/NgxAbstractTableCellDirective.html",[292,0.714,567,2.17]],["body/directives/NgxAbstractTableCellDirective.html",[3,0.039,4,0.034,5,0.039,10,0.097,11,0.153,12,0.645,16,0.191,17,0.006,19,0.188,27,0.039,32,1.187,34,1.219,38,3.268,47,1.431,48,3.732,49,1.677,54,1.906,72,1.632,81,2.916,88,0.003,89,0.003,90,0.668,96,0.52,106,1.625,137,1.537,152,0.818,179,1.149,180,1.265,182,2.077,183,1.093,184,1.614,187,1.21,193,1.039,196,1.279,205,0.317,231,2.818,234,2.375,237,3.008,292,0.881,294,1.009,298,1.776,300,1.644,304,1.887,306,3.888,308,1.162,311,2.278,317,1.54,319,4.108,320,3.987,333,3.875,341,1.83,345,3.512,346,4.222,349,2.375,379,1.417,512,2.511,524,1.947,535,3.807,567,2.678,568,2.01,662,3.313,665,2.135,677,4.212,678,5.819,679,5.18,680,5.18,681,6.447,682,5.993,683,5.771,684,5.18,685,4.937,686,5.476,687,6.947,688,5.993,689,5.979,690,5.979,691,4.679,692,6.044,693,4.937,694,6.044,695,3.987,696,4.547,697,4.937,698,5.472,699,5.472,700,5.472,701,5.472,702,3.198,703,6.044,704,1.901,705,6.044,706,4.212,707,3.888,708,5.641,709,4.212,710,4.429,711,4.389,712,3.625,713,4.679,714,5.476,715,4.212,716,2.99,717,2.69,718,4.212,719,4.338,720,4.212,721,4.212,722,4.222,723,4.212,724,4.212,725,4.212,726,1.803,727,3.77,728,3.77,729,3.261,730,3.087,731,1.295,732,6.044,733,6.327,734,2.71,735,4.212,736,4.212,737,8.179,738,4.212,739,4.212,740,4.212,741,4.212]],["title/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[292,0.714,569,2.264]],["body/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[3,0.051,4,0.045,5,0.051,10,0.127,11,0.184,12,0.821,15,2.255,16,0.189,17,0.006,19,0.193,27,0.051,29,0.827,32,1.014,81,1.832,88,0.004,89,0.004,90,0.77,96,0.897,122,2.844,137,1.191,171,1.718,180,0.902,183,1.316,184,1.572,187,1.223,193,1.358,196,1.706,205,0.415,239,6.508,271,1.927,292,1.06,294,1.32,300,1.261,305,4.101,308,0.925,315,3.598,317,1.752,325,4.037,330,4.072,367,3.361,379,1.011,385,6.005,476,2.38,501,1.459,516,1.743,568,3.221,569,3.361,593,4.61,641,5.513,672,4.126,704,1.23,726,1.643,742,6.723,743,6.302,744,6.302,745,4.93,746,6.005,747,7.272,748,7.272,749,7.272,750,8.141,751,3.545,752,6.186,753,7.749,754,5.329,755,7.286,756,7.286,757,6.302,758,5.447,759,5.329,760,7.272,761,6.702,762,7.272,763,5.509,764,2.927,765,5.793,766,4.512,767,5.509,768,4.037,769,5.509,770,5.509,771,5.509,772,4.037,773,4.037,774,5.509,775,5.629,776,7.272,777,5.509,778,5.509,779,5.509]],["title/classes/NgxAccessibleDragAndDropAbstractService.html",[90,0.463,780,4.045]],["body/classes/NgxAccessibleDragAndDropAbstractService.html",[3,0.036,4,0.031,5,0.036,10,0.089,11,0.144,12,0.676,16,0.198,17,0.006,19,0.227,26,2.004,27,0.036,28,1.085,32,0.537,34,1.945,41,2.678,42,2.251,44,1.923,48,2.412,49,2.044,68,1.885,73,2.013,88,0.003,89,0.003,90,0.365,92,2.313,96,1.207,99,3.294,106,2.219,137,1.293,152,1.261,162,2.365,174,1.716,177,3.4,180,0.928,183,1.025,184,1.401,187,1.018,193,1.398,196,1.493,205,0.29,238,1.441,249,5.175,268,2.79,271,2.187,272,0.951,300,1.165,308,1.005,311,1.242,334,2.977,345,3.294,350,2.321,369,1.853,377,3.517,379,1.449,426,4.062,453,4.497,467,4.328,479,2.236,501,1.021,516,1.892,568,2.465,652,4.084,674,1.863,716,2.804,726,2.21,731,1.186,742,7.047,743,6.606,744,7.214,764,2.272,766,2.392,780,6.519,781,3.856,782,2.632,783,4.597,784,7.695,785,4.062,786,5.668,787,5.668,788,6.722,789,6.722,790,5.668,791,5.668,792,5.203,793,6.722,794,2.651,795,3.856,796,5.736,797,3.959,798,3.024,799,6.722,800,5.668,801,3.856,802,3.73,803,7.066,804,5.668,805,3.107,806,3.856,807,3.959,808,5.668,809,4.388,810,2.392,811,4.681,812,5.668,813,5.736,814,3.856,815,4.623,816,2.984,817,3.856,818,5.668,819,5.523,820,3.856,821,3.856,822,3.856,823,2.313,824,3.684,825,3.493,826,1.708,827,2.579,828,4.17,829,5.668,830,2.825,831,3.856,832,3.041,833,3.041,834,7.066,835,3.791,836,4.324,837,3.107,838,5.668,839,2.693,840,2.984,841,3.856,842,5.49,843,3.856,844,2.48,845,3.856,846,2.984,847,2.984,848,3.856,849,6.722,850,6.722,851,6.722,852,2.984,853,3.856,854,5.668,855,5.668,856,3.856,857,5.668,858,2.984,859,3.856,860,3.856,861,3.856,862,3.856,863,3.856,864,3.856,865,2.632,866,3.856,867,2.313,868,3.856,869,3.856,870,2.825,871,3.856,872,3.856,873,2.113,874,3.184,875,3.856,876,3.856]],["title/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.078,877,3.791]],["body/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.145,2,1.045,3,0.064,4,0.056,5,0.064,10,0.16,11,0.214,16,0.22,17,0.006,18,6.648,27,0.087,28,1.805,88,0.004,89,0.004,96,0.858,152,1.227,190,3.188,273,2.877,764,2.352,766,4.317,813,5.387,830,5.099,846,5.387,847,5.387,852,6.527,858,6.527,867,4.174,877,7.3,878,5.746,879,5.746,880,7.492,881,5.746,882,5.746,883,5.746,884,5.746,885,5.746,886,5.746,887,7.492,888,5.746,889,5.387,890,5.746,891,5.746,892,5.746,893,5.746]],["title/directives/NgxAccessibleDragAndDropContainerDirective.html",[292,0.714,570,2.264]],["body/directives/NgxAccessibleDragAndDropContainerDirective.html",[3,0.06,4,0.053,5,0.06,10,0.222,11,0.205,12,0.739,17,0.006,19,0.173,27,0.06,32,1.13,47,1.641,57,3.519,88,0.004,89,0.004,90,0.617,96,0.805,106,2.179,179,1.78,182,2.785,184,1.516,187,1,205,0.492,292,1.409,294,1.564,298,2.381,300,1.676,308,1.031,311,2.611,341,1.976,570,3.746,665,4.108,743,6.825,744,7.587,784,7.616,785,4.443,796,6.274,867,4.862,894,7.891,895,6.525,896,7.254,897,7.254,898,6.693,899,7.254,900,9.223,901,7.254,902,4.584,903,7.616,904,8.105,905,6.525,906,6.274,907,8.105,908,6.525]],["title/directives/NgxAccessibleDragAndDropHostDirective.html",[292,0.714,572,2.314]],["body/directives/NgxAccessibleDragAndDropHostDirective.html",[3,0.043,4,0.038,5,0.043,10,0.212,11,0.166,12,0.778,16,0.177,17,0.006,19,0.2,27,0.043,32,1.19,34,1.895,44,1.099,47,1.644,49,1.024,50,5.119,57,2.842,75,4.38,88,0.003,89,0.003,90,0.446,96,1.156,135,1.496,152,1.017,179,1.287,180,1.231,182,2.25,183,1.184,184,1.582,187,1.156,190,2.542,193,1.854,196,1.598,205,0.355,206,1.924,245,1.115,271,2.152,292,1.287,294,1.131,298,1.924,300,1.677,308,1.086,317,1.598,334,2.631,341,1.429,369,1.881,379,1.201,408,3.755,501,1.25,513,2.229,569,3.755,570,3.476,572,3.094,636,4.72,695,2.661,717,2.491,743,7.349,744,7.881,751,3.326,753,5.86,764,2.985,780,3.896,784,8.145,785,3.589,794,1.983,867,4.872,894,8.497,896,5.86,897,5.86,898,5.407,899,5.86,901,5.86,903,5.407,906,5.068,909,4.718,910,4.511,911,8.123,912,8.534,913,7.52,914,6.548,915,6.548,916,6.548,917,4.718,918,6.548,919,4.718,920,3.693,921,3.403,922,4.718,923,6.548,924,4.718,925,6.548,926,6.548,927,4.718,928,6.548,929,4.718,930,6.548,931,5.407,932,6.548,933,4.718,934,5.407,935,4.718,936,4.718,937,4.222,938,4.718,939,4.718,940,4.718,941,4.718,942,4.718,943,4.718,944,4.718,945,4.718]],["title/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.078,830,3.589]],["body/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.14,2,0.966,3,0.059,4,0.052,5,0.059,10,0.148,11,0.204,16,0.225,17,0.006,18,4.714,27,0.085,28,1.231,88,0.004,89,0.004,96,1.132,144,5.139,152,1.348,190,3.102,273,2.04,509,3.104,764,3.102,766,5.693,813,4.98,830,5.888,846,7.103,847,7.103,852,7.311,858,7.311,867,5.504,877,6.782,878,5.312,879,5.312,880,8.069,881,5.312,882,5.312,883,5.312,884,5.312,885,5.312,886,5.312,887,7.235,888,5.312,889,4.98,890,5.312,891,5.312,892,5.312,893,5.312]],["title/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.078,889,3.791]],["body/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.144,2,1.023,3,0.063,4,0.055,5,0.063,10,0.157,11,0.211,16,0.218,17,0.006,18,4.994,27,0.086,28,1.304,88,0.004,89,0.004,96,0.84,152,1.216,190,3.452,273,2.161,764,2.303,766,4.228,813,5.275,830,4.994,846,5.275,847,5.275,852,6.444,858,6.444,867,4.087,877,6.959,878,5.627,879,5.627,880,7.423,881,5.627,882,5.627,883,5.627,884,5.627,885,5.627,886,5.627,887,7.423,888,5.627,889,6.444,890,7.732,891,7.732,892,7.732,893,7.732]],["title/components/NgxAccordionComponent.html",[109,0.735,523,2.367]],["body/components/NgxAccordionComponent.html",[3,0.031,4,0.027,5,0.031,10,0.201,11,0.129,12,0.561,16,0.182,17,0.006,19,0.183,27,0.031,28,0.971,32,0.858,34,1.992,42,1.962,44,1.182,49,1.819,50,5.252,57,2.203,61,2.084,66,2.203,74,1.106,75,4.605,88,0.003,89,0.003,90,0.48,96,0.849,109,0.924,152,0.832,179,0.907,180,1.614,183,0.918,184,1.494,187,1.08,193,1.517,196,1.245,203,1.312,205,0.251,206,1.491,236,2.437,271,2.152,272,0.82,292,0.485,293,1.571,294,0.797,298,3.036,304,1.584,308,0.783,311,2.218,317,1.47,330,2.296,334,2.039,341,1.537,361,1.571,366,2.726,368,3.327,369,1.954,373,3.05,392,1.635,408,2.345,412,3.477,426,1.823,476,1.089,478,1.607,479,2.002,480,1.222,481,1.288,484,2.51,485,2.118,507,3.691,509,1.635,514,1.645,515,2.296,516,1.216,517,3.406,518,1.645,519,1.645,520,1.607,521,1.444,522,1.645,523,3.327,524,3.027,525,1.645,526,4.232,527,4.808,528,2.51,529,1.645,530,2.452,531,2.51,532,1.607,533,1.474,534,1.607,535,2.988,536,1.645,537,3.406,538,1.607,539,1.571,540,1.607,541,1.505,542,1.645,543,1.571,544,1.571,545,1.645,546,1.607,547,1.571,548,1.505,549,1.645,550,1.607,551,1.362,552,1.645,553,1.607,554,1.645,555,1.607,556,2.51,557,1.607,558,1.607,559,1.645,560,1.607,561,1.645,562,1.607,563,1.362,564,1.645,565,1.645,566,1.645,567,1.474,568,1.106,569,1.537,570,1.537,571,1.645,572,1.571,573,1.645,574,1.645,575,1.645,576,1.571,577,1.645,578,1.537,579,1.571,580,1.645,581,1.362,582,1.537,583,1.645,584,1.645,585,1.505,586,1.571,587,1.645,588,1.571,589,1.645,590,1.571,591,1.645,592,1.537,593,1.537,594,1.571,595,1.645,596,1.571,597,1.645,598,1.571,599,1.645,600,1.571,601,1.645,602,1.266,603,1.571,604,1.537,605,1.571,606,1.537,607,1.537,608,1.537,609,1.336,610,1.362,611,1.362,612,1.537,613,1.645,614,1.474,615,1.645,616,1.571,617,1.645,618,1.444,619,1.537,620,1.645,621,1.537,622,1.645,623,1.571,624,1.645,625,1.645,711,3.79,726,1.513,731,1.023,764,3.199,803,2.977,825,1.729,826,2.248,832,1.505,833,1.505,840,2.574,867,4.129,946,3.326,947,4.19,948,3.718,949,2.862,950,3.928,951,4.541,952,3.264,953,3.718,954,5.506,955,6.152,956,5.782,957,5.074,958,5.074,959,3.395,960,2.427,961,6.152,962,3.327,963,5.074,964,3.957,965,5.684,966,4.721,967,5.737,968,3.326,969,3.928,970,5.506,971,3.326,972,5.074,973,3.326,974,2.949,975,5.074,976,3.326,977,3.264,978,3.326,979,4.27,980,3.326,981,3.928,982,3.326,983,2.437,984,3.264,985,3.326,986,3.326,987,3.326,988,1.774,989,3.326,990,3.326,991,3.928,992,1.876,993,2.225,994,3.326,995,3.326,996,3.326,997,3.326,998,3.326,999,3.326,1000,3.326,1001,3.326,1002,3.326,1003,3.326,1004,4.19,1005,1.072,1006,3.326,1007,3.326,1008,3.326,1009,2.637,1010,2.323,1011,3.718,1012,5.074,1013,3.326,1014,3.326,1015,1.933,1016,3.326,1017,2.977,1018,3.326,1019,3.326]],["title/components/NgxAccordionItemComponent.html",[109,0.735,526,2.367]],["body/components/NgxAccordionItemComponent.html",[3,0.023,4,0.021,5,0.023,7,3.122,10,0.058,11,0.104,12,0.594,15,1.041,16,0.18,17,0.006,19,0.158,27,0.023,28,0.786,29,1.046,32,1.177,34,1.189,36,1.536,39,2.758,42,0.725,44,1.204,49,1.593,81,1.367,88,0.002,89,0.002,90,0.388,96,0.638,109,0.776,122,2.667,137,0.972,152,0.556,162,1.061,179,0.694,180,1.572,183,0.743,184,1.55,187,1.179,193,1.607,196,1.498,205,0.192,206,1.207,231,1.701,271,1.727,292,0.371,293,1.201,294,0.609,298,2.99,300,1.658,301,5.785,304,1.283,305,2.317,306,1.636,308,1.107,310,3.011,311,2.949,315,2.937,317,1.628,330,4.289,334,1.651,340,1.525,341,0.77,345,2.388,346,1.776,354,2.276,361,1.201,366,2.291,368,1.986,369,2.204,373,2.631,379,0.754,392,2.46,402,3.208,426,1.394,449,2.749,453,5.109,476,1.345,478,1.229,479,1.621,480,0.934,481,0.985,484,2.033,485,1.715,501,0.674,507,3.294,509,2.1,512,1.459,514,1.258,515,2.686,516,1.671,517,2.937,518,1.258,519,1.258,520,1.229,521,1.104,522,1.258,523,2.87,524,2.871,525,1.258,526,2.87,527,4.87,528,2.033,529,1.258,530,1.986,531,2.033,532,1.229,533,1.127,534,1.229,535,2.577,536,1.258,537,2.937,538,1.229,539,1.201,540,1.229,541,1.15,542,1.258,543,1.201,544,1.201,545,1.258,546,1.229,547,1.201,548,1.15,549,1.258,550,1.229,551,1.041,552,1.258,553,1.229,554,1.258,555,1.229,556,2.033,557,1.229,558,1.229,559,1.258,560,1.229,561,1.258,562,1.229,563,1.041,564,1.258,565,1.258,566,1.258,567,1.127,568,0.846,569,1.175,570,1.175,571,1.258,572,1.201,573,1.258,574,1.258,575,1.258,576,1.201,577,1.258,578,1.175,579,1.201,580,1.258,581,1.041,582,1.175,583,1.258,584,1.258,585,1.15,586,1.201,587,1.258,588,1.201,589,1.258,590,1.201,591,1.258,592,1.175,593,1.175,594,1.201,595,1.258,596,1.201,597,1.258,598,1.201,599,1.258,600,1.201,601,1.258,602,0.967,603,1.201,604,1.175,605,1.201,606,1.175,607,1.175,608,1.175,609,1.022,610,1.041,611,1.041,612,1.175,613,1.258,614,1.127,615,1.258,616,1.201,617,1.258,618,1.104,619,1.175,620,1.258,621,1.175,622,1.258,623,1.201,624,1.258,625,1.258,636,3.45,637,3.819,671,4.552,672,1.289,685,3.611,704,1.761,716,1.258,719,1.258,726,2.277,751,1.041,752,4.36,754,3.011,758,2.749,764,3.359,765,2.749,768,3.011,827,1.701,828,3.683,832,1.15,833,1.15,910,3.101,947,3.393,948,3.011,949,2.317,950,3.18,951,3.677,952,2.643,953,3.011,956,4.043,964,1.636,965,2.1,966,3.45,967,4.596,969,6.534,974,2.388,983,1.863,1020,9.598,1021,2.276,1022,3.459,1023,2.317,1024,4.269,1025,3.677,1026,3.393,1027,4.109,1028,3.004,1029,4.627,1030,5.937,1031,5.313,1032,4.002,1033,5.17,1034,4.109,1035,4.109,1036,4.147,1037,5.937,1038,4.109,1039,3.677,1040,3.677,1041,4.627,1042,4.627,1043,4.109,1044,2.543,1045,4.109,1046,2.543,1047,4.109,1048,2.687,1049,4.109,1050,4.109,1051,4.109,1052,3.677,1053,4.109,1054,3.677,1055,3.677,1056,2.543,1057,5.937,1058,2.543,1059,4.269,1060,3.677,1061,2.543,1062,2.916,1063,5.381,1064,2.543,1065,2.543,1066,3.393,1067,2.543,1068,4.109,1069,2.543,1070,4.109,1071,3.677,1072,3.004,1073,2.388,1074,2.543,1075,3.677,1076,2.543,1077,4.109,1078,2.543,1079,4.596,1080,2.543,1081,4.109,1082,2.543,1083,2.135,1084,2.543,1085,2.543,1086,4.109,1087,2.543,1088,4.002,1089,3.18,1090,2.543,1091,4.109,1092,2.543,1093,1.356,1094,1.776,1095,1.776,1096,2.543,1097,5.313,1098,5.17,1099,5.17,1100,5.937,1101,2.543,1102,2.543,1103,1.968,1104,1.356,1105,1.577,1106,2.543,1107,2.543,1108,2.543,1109,2.276,1110,2.543,1111,2.543,1112,1.478,1113,1.636,1114,1.394,1115,4.109,1116,2.276,1117,2.543,1118,2.543,1119,2.543,1120,1.701,1121,1.968]],["title/pipes/NgxAriaSortPipe.html",[174,1.483,1122,4.045]],["body/pipes/NgxAriaSortPipe.html",[3,0.064,4,0.056,5,0.064,12,0.633,16,0.197,17,0.006,19,0.241,27,0.064,32,1.173,42,1.978,44,1.961,47,1.704,88,0.004,89,0.004,90,0.656,144,4.49,174,2.549,176,3.606,179,1.892,180,1.484,182,2.892,183,1.255,185,3.803,186,5.631,187,0.856,193,1.711,196,1.255,204,4.613,205,0.523,206,2.038,479,2.737,567,3.729,678,5.435,730,6.168,731,2.133,1122,6.95,1123,8.417,1124,8.417,1125,6.938,1126,8.417,1127,6.938,1128,5.621,1129,8.109,1130,8.109,1131,6.209,1132,6.938,1133,6.938]],["title/injectables/NgxAuthenticatedHttpClient.html",[259,1.417,1134,3.791]],["body/injectables/NgxAuthenticatedHttpClient.html",[3,0.027,4,0.024,5,0.027,10,0.067,11,0.116,12,0.898,16,0.193,17,0.006,19,0.196,22,6.204,23,2.252,27,0.027,29,1.398,32,1.079,34,2.826,40,7.369,42,0.829,44,1.867,47,1.948,49,0.632,54,1.316,88,0.002,89,0.002,90,0.275,96,0.989,101,2.732,118,1.805,137,1.432,152,1.312,161,4.661,174,0.881,180,1.267,183,0.828,184,1.46,187,1.041,193,2.156,194,2.863,196,1.4,205,0.219,259,1.324,261,1.238,268,2.77,272,0.717,273,2.21,300,0.98,308,1.193,324,3.45,369,2.062,379,1.605,501,0.771,704,1.953,731,0.895,783,2.838,807,3.195,810,5.503,824,1.595,960,2.23,1134,3.541,1135,8.604,1136,9.537,1137,8.604,1138,2.909,1139,4.575,1140,2.507,1141,5.421,1142,2.507,1143,3.777,1144,4.575,1145,6.008,1146,4.575,1147,4.094,1148,4.668,1149,5.653,1150,4.575,1151,5.753,1152,6.235,1153,5.106,1154,4.575,1155,2.909,1156,9.821,1157,8.11,1158,9.847,1159,2.909,1160,8.746,1161,6.401,1162,7.707,1163,6.967,1164,8.334,1165,6.77,1166,6.77,1167,2.909,1168,2.909,1169,4.575,1170,4.575,1171,2.909,1172,2.909,1173,4.575,1174,2.909,1175,2.909,1176,7.835,1177,2.909,1178,2.909,1179,2.909,1180,2.909,1181,2.909,1182,4.094,1183,2.909,1184,4.575,1185,2.909,1186,1.289,1187,2.252,1188,1.512,1189,1.051,1190,5.653,1191,2.909,1192,2.909,1193,2.909,1194,7.397,1195,2.909,1196,7.397,1197,5.653,1198,2.909,1199,2.909,1200,5.653,1201,2.909,1202,2.604,1203,2.402,1204,2.909,1205,2.909,1206,2.909,1207,2.909,1208,2.909,1209,2.909,1210,5.653,1211,2.909,1212,2.909]],["title/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.078,1187,3.791]],["body/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.128,2,0.956,3,0.059,4,0.052,5,0.059,10,0.146,11,0.202,12,0.919,15,3.934,16,0.205,17,0.006,19,0.232,27,0.074,37,2.085,88,0.004,89,0.004,101,3.86,106,2.345,118,3.952,137,1.043,148,4.504,152,0.862,205,0.48,245,1.505,255,2.711,338,4.64,379,1.6,408,3.691,431,4.26,782,2.263,949,3.593,1134,7.29,1141,5.852,1145,5.343,1148,7.551,1161,6.578,1162,6.181,1163,5.578,1166,7.079,1187,6.752,1213,5.702,1214,5.702,1215,8.184,1216,8.6,1217,4.377,1218,4.377,1219,4.504,1220,8.184,1221,7.203,1222,4.79,1223,4.669,1224,5.702,1225,5.261,1226,4.098,1227,5.702]],["title/interfaces/NgxAuthenticatedRoute.html",[0,0.078,1228,4.384]],["body/interfaces/NgxAuthenticatedRoute.html",[0,0.142,2,0.995,3,0.061,4,0.054,5,0.061,7,2.821,10,0.152,11,0.225,12,0.747,16,0.202,17,0.006,19,0.176,27,0.075,28,1.775,29,1.333,47,1.657,76,2.522,88,0.004,89,0.004,96,0.817,106,2.2,144,4.366,152,1.107,171,1.934,173,4.264,308,1.041,324,2.614,358,4.112,379,1.502,704,1.983,1145,4.434,1222,4.909,1228,7.947,1229,6.628,1230,6.628,1231,8.185,1232,3.703,1233,6.758,1234,5.941,1235,4.264,1236,6.758,1237,8.185,1238,4.629,1239,6.758,1240,5.473,1241,6.758,1242,8.185,1243,4.857,1244,6.758,1245,5.473,1246,6.628,1247,5.932,1248,6.628,1249,7.325,1250,5.932,1251,3.975,1252,5.932,1253,5.932,1254,4.857,1255,6.628]],["title/classes/NgxAuthenticationAbstractService.html",[90,0.463,1222,2.938]],["body/classes/NgxAuthenticationAbstractService.html",[3,0.025,4,0.022,5,0.025,10,0.063,11,0.11,12,0.785,16,0.199,17,0.006,19,0.144,27,0.025,28,1.617,29,1.08,32,1.052,34,2.395,42,1.239,44,2.107,47,1.586,49,1.868,55,2.879,61,2.372,64,3.25,72,3.565,88,0.002,89,0.002,90,0.258,92,1.635,96,0.996,99,2.525,106,1.661,137,1.012,179,2.058,180,1.283,183,0.98,184,1.495,187,1.135,193,1.932,195,1.998,196,1.699,203,1.714,233,2.258,268,3.014,272,0.672,274,3.488,294,1.041,300,1.552,308,1.075,317,1.301,324,3.939,367,3.976,369,2.151,379,0.797,392,2.771,408,2.009,412,2.737,432,4.418,476,0.892,479,1.714,502,3.995,509,1.991,568,2.686,704,2.02,716,2.15,731,0.838,782,1.543,783,1.692,810,2.696,823,1.635,824,3.943,826,1.925,839,4.317,949,2.451,977,2.795,1005,0.878,1059,3.588,1071,5.531,1145,6.106,1165,5.568,1166,3.364,1202,8.236,1203,2.251,1222,2.606,1223,6.744,1236,7.599,1240,5.574,1241,6.668,1245,5.574,1250,3.889,1256,2.727,1257,2.009,1258,4.346,1259,5.418,1260,5.418,1261,5.418,1262,5.418,1263,5.531,1264,6.18,1265,6.75,1266,5.103,1267,5.103,1268,5.418,1269,4.346,1270,5.418,1271,4.346,1272,5.418,1273,4.346,1274,5.92,1275,3.364,1276,2.727,1277,4.346,1278,2.727,1279,3.889,1280,2.727,1281,3.212,1282,2.053,1283,3.889,1284,6.18,1285,5.241,1286,6.18,1287,4.784,1288,3.588,1289,2.727,1290,3.889,1291,6.18,1292,2.727,1293,2.727,1294,2.727,1295,3.184,1296,2.727,1297,7.546,1298,2.727,1299,5.418,1300,2.727,1301,2.727,1302,5.418,1303,2.727,1304,2.727,1305,3.25,1306,3.364,1307,4.346,1308,7.834,1309,2.727,1310,6.18,1311,6.18,1312,6.75,1313,9.045,1314,2.727,1315,2.727,1316,4.346,1317,8.733,1318,2.727,1319,4.221,1320,5.418,1321,2.727,1322,2.727,1323,4.346,1324,7.546,1325,2.727,1326,2.727,1327,2.727,1328,2.727,1329,2.727,1330,2.727,1331,4.346,1332,2.44,1333,1.754,1334,2.111,1335,2.727,1336,4.346,1337,2.727,1338,2.727,1339,2.727,1340,5.418,1341,2.727,1342,2.727,1343,2.727,1344,4.346,1345,2.727,1346,2.727,1347,2.727,1348,2.727,1349,2.727,1350,4.346,1351,2.727,1352,2.727,1353,2.727,1354,2.44,1355,1.998,1356,2.251,1357,1.998,1358,2.727,1359,4.346,1360,2.727,1361,2.727,1362,2.727,1363,2.727,1364,2.727,1365,2.727,1366,2.727,1367,4.346,1368,2.727,1369,2.727,1370,2.727,1371,1.584,1372,2.251,1373,2.727]],["title/interfaces/NgxAuthenticationConfiguration.html",[0,0.078,1225,4.045]],["body/interfaces/NgxAuthenticationConfiguration.html",[0,0.13,2,0.985,3,0.06,4,0.053,5,0.06,10,0.151,11,0.206,12,0.883,15,2.686,16,0.211,17,0.006,19,0.235,27,0.075,37,2.413,88,0.004,89,0.004,96,0.809,101,3.171,106,2.376,118,4.071,137,1.332,148,3.7,152,0.888,205,0.494,245,1.55,255,3.461,338,3.813,379,1.622,408,3.033,431,3.5,782,3.282,949,4.587,1134,7.153,1141,4.808,1145,4.39,1148,5.418,1161,6.174,1162,5.079,1163,4.583,1166,6.296,1187,7.153,1213,5.872,1214,5.872,1215,5.872,1216,7.28,1217,3.597,1218,3.597,1219,3.7,1220,7.28,1221,7.3,1222,5.302,1223,5.961,1224,7.28,1225,6.717,1226,5.232,1227,8.27]],["title/injectables/NgxBroadcastChannelService.html",[259,1.417,1374,4.384]],["body/injectables/NgxBroadcastChannelService.html",[3,0.037,4,0.032,5,0.037,10,0.091,11,0.147,12,0.728,16,0.196,17,0.006,19,0.181,27,0.037,32,0.806,34,2.412,41,2.732,42,1.13,44,2.005,49,0.86,61,2.068,64,4.095,86,2.903,88,0.003,89,0.003,90,0.375,96,1.028,98,3.261,102,2.861,138,3.468,152,1.267,161,2.651,180,1.592,183,1.046,184,1.507,187,1.062,193,2.175,196,1.557,205,0.298,209,4.503,246,5.175,259,1.673,261,1.686,268,3,272,0.977,300,1.184,308,0.736,310,4.237,311,2.842,317,1.508,335,2.562,350,3.743,369,2.085,454,6.718,501,1.05,717,2.2,766,5.748,782,2.054,794,2.273,796,5.285,798,3.084,815,4.61,835,4.233,949,3.261,960,2.281,1142,4.115,1152,3.546,1162,4.476,1164,5.175,1188,2.059,1189,1.431,1217,2.172,1257,1.831,1290,6.718,1374,5.175,1375,8.822,1376,8.822,1377,3.962,1378,5.782,1379,9.774,1380,8.141,1381,5.175,1382,5.782,1383,3.968,1384,8.335,1385,8.335,1386,8.335,1387,8.607,1388,8.607,1389,5.782,1390,3.962,1391,5.175,1392,4.523,1393,9.37,1394,9.143,1395,5.782,1396,6.828,1397,3.962,1398,5.175,1399,5.782,1400,8.335,1401,3.962,1402,5.782,1403,4.237,1404,3.962,1405,3.962,1406,7.983,1407,5.782,1408,7.507,1409,3.962,1410,3.962,1411,5.782,1412,3.962,1413,4.476,1414,5.782,1415,3.468,1416,3.962,1417,2.172,1418,2.059,1419,5.175,1420,3.962,1421,1.831,1422,2.903,1423,6.718,1424,3.962,1425,8.822,1426,3.962,1427,7.507,1428,3.962,1429,3.962,1430,4.769,1431,3.067,1432,3.962,1433,5.782,1434,3.962]],["title/interfaces/NgxButtonConfiguration.html",[0,0.078,1435,4.045]],["body/interfaces/NgxButtonConfiguration.html",[0,0.094,2,0.884,3,0.054,4,0.048,5,0.054,10,0.135,11,0.193,12,0.928,16,0.222,17,0.006,19,0.202,27,0.087,37,1.984,88,0.004,89,0.004,96,0.726,106,2.531,109,1.334,114,3.447,152,1.137,205,0.444,230,5.567,245,1.392,308,1.258,339,6.494,392,2.447,515,3.437,516,1.82,581,2.411,631,3.443,704,1.315,865,2.987,902,3.672,1226,3.789,1435,6.273,1436,5.89,1437,7.407,1438,7.289,1439,3.379,1440,8.427,1441,5.88,1442,7.951,1443,4.114,1444,5.271,1445,4.559,1446,4.559,1447,4.559,1448,4.559,1449,5.271,1450,4.863,1451,5.271,1452,5.271,1453,2.506,1454,4.863,1455,5.271,1456,5.271,1457,4.316,1458,2.847,1459,5.271,1460,2.985]],["title/directives/NgxButtonDirective.html",[292,0.714,576,2.314]],["body/directives/NgxButtonDirective.html",[3,0.026,4,0.023,5,0.026,10,0.103,11,0.114,12,0.764,16,0.203,17,0.006,19,0.168,27,0.026,28,1.21,32,1.23,37,2.137,42,0.81,44,1.046,47,0.909,49,2.028,55,1.65,61,1.36,66,1.233,73,1.595,74,0.945,81,1.493,83,2.802,88,0.002,89,0.002,90,0.425,92,2.693,96,0.35,101,1.373,109,1.369,114,3.421,135,2.432,137,0.912,179,0.775,183,0.812,184,1.504,187,1.178,194,1.712,196,1.007,205,0.214,206,1.319,230,2.082,233,2.333,234,2.532,237,1.209,238,2.365,245,0.671,254,3.475,292,0.922,294,0.681,298,1.319,300,1.566,304,1.402,308,1.215,317,1.246,334,1.142,339,6.683,341,2.086,346,1.984,367,4.485,369,1.831,379,1.021,380,1.901,392,0.915,467,1.557,476,2.07,501,1.475,516,1.755,524,2.964,576,2.121,581,1.163,631,1.838,637,4.069,672,2.821,704,1.871,726,0.847,731,0.874,751,3.431,805,2.075,807,5.114,865,2.823,902,1.373,962,4.542,977,4.069,1005,1.793,1022,3.724,1032,5.332,1088,4.309,1089,3.475,1186,1.259,1295,2.082,1306,2.199,1392,3.933,1435,4.596,1437,7.307,1438,4.309,1439,2.942,1441,3.475,1442,2.543,1443,5.356,1444,2.543,1445,4.896,1446,3.475,1447,3.475,1448,3.475,1449,2.543,1450,5.688,1451,4.018,1452,4.018,1453,1.209,1454,3.707,1455,2.543,1456,4.018,1457,4.635,1459,2.543,1460,3.711,1461,2.841,1462,4.018,1463,4.49,1464,4.49,1465,6.325,1466,5.566,1467,5.566,1468,4.13,1469,4.982,1470,4.982,1471,5.566,1472,6.164,1473,6.164,1474,4.131,1475,5.66,1476,6.325,1477,4.49,1478,3.235,1479,4.49,1480,2.63,1481,4.49,1482,2.841,1483,2.841,1484,2.841,1485,3.888,1486,5.66,1487,4.018,1488,4.49,1489,4.49,1490,4.018,1491,4.49,1492,6.325,1493,6.325,1494,6.164,1495,4.982,1496,2.841,1497,3.29,1498,4.49,1499,2.841,1500,4.49,1501,2.841,1502,4.49,1503,2.841,1504,4.49,1505,2.841,1506,1.989,1507,2.841,1508,5.047,1509,2.841,1510,5.223,1511,2.841,1512,4.49,1513,2.841,1514,2.693,1515,3.707,1516,2.841,1517,3.475,1518,2.841,1519,4.018,1520,2.841,1521,2.841,1522,2.518,1523,2.693,1524,2.841,1525,2.841,1526,2.543,1527,4.018,1528,2.543,1529,2.543,1530,2.543,1531,2.346,1532,2.346,1533,4.018,1534,4.018,1535,2.543,1536,4.018,1537,2.543,1538,2.543,1539,2.199,1540,2.543,1541,2.841,1542,5.566,1543,2.841,1544,2.841,1545,2.841,1546,4.018,1547,4.982,1548,2.841,1549,2.841,1550,2.841,1551,6.863,1552,5.66,1553,4.018,1554,2.543,1555,2.543,1556,2.199,1557,2.543,1558,2.543,1559,2.346,1560,4.982,1561,2.346,1562,2.543,1563,2.543,1564,2.543,1565,2.543]],["title/components/NgxConfigurableLayoutItemComponent.html",[109,0.735,532,2.367]],["body/components/NgxConfigurableLayoutItemComponent.html",[3,0.04,4,0.036,5,0.04,10,0.101,11,0.158,12,0.66,17,0.005,19,0.117,27,0.04,28,1.192,32,0.612,47,1.465,50,3.736,51,4.007,72,1.702,74,2.072,76,3.56,84,5.574,88,0.003,89,0.003,90,0.415,96,0.542,97,3.805,106,1.945,109,1.333,179,1.198,180,1.649,182,2.14,184,1.447,187,1.025,205,0.331,292,0.64,293,2.076,294,1.053,298,3.073,300,1.6,304,1.945,308,0.559,341,2.384,361,2.076,379,1.584,383,4.167,449,4.167,478,2.123,479,2.457,480,1.614,481,1.702,484,3.082,485,2.599,507,4.079,509,2.781,514,2.174,515,2.818,516,1.493,517,3.895,518,2.174,519,2.174,520,2.123,521,1.907,522,2.174,523,2.123,524,3.146,525,2.174,526,2.123,527,2.174,528,3.082,529,2.174,530,4.172,531,3.082,532,3.805,533,4.5,534,2.123,535,3.418,536,2.174,537,3.895,538,2.123,539,2.076,540,2.123,541,1.988,542,2.174,543,2.076,544,2.076,545,2.174,546,2.123,547,2.076,548,1.988,549,2.174,550,2.123,551,1.799,552,2.174,553,2.123,554,2.174,555,2.123,556,3.082,557,2.123,558,2.123,559,2.174,560,2.123,561,2.174,562,2.123,563,1.799,564,2.174,565,2.174,566,2.174,567,1.946,568,1.461,569,2.031,570,2.031,571,2.174,572,2.076,573,2.174,574,2.174,575,2.174,576,2.076,577,2.174,578,2.031,579,2.076,580,2.174,581,1.799,582,2.031,583,2.174,584,2.174,585,1.988,586,2.076,587,2.174,588,2.076,589,2.174,590,2.076,591,2.174,592,2.031,593,2.031,594,2.076,595,2.174,596,2.076,597,2.174,598,2.076,599,2.174,600,2.076,601,2.174,602,1.672,603,2.076,604,2.031,605,2.076,606,2.031,607,2.031,608,2.031,609,1.765,610,1.799,611,1.799,612,2.031,613,2.174,614,1.946,615,2.174,616,2.076,617,2.174,618,1.907,619,2.031,620,2.174,621,2.031,622,2.174,623,2.076,624,2.174,625,2.174,665,2.227,719,2.174,764,3.162,775,5.601,867,4.722,902,4.384,1021,3.932,1025,5.574,1094,3.068,1566,8.633,1567,8.633,1568,6.229,1569,3.639,1570,4.821,1571,4.821,1572,6.229,1573,6.229,1574,5.975,1575,7.236,1576,6.229,1577,4.393,1578,3.414]],["title/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.078,1579,4.045]],["body/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.134,2,1.04,3,0.064,4,0.056,5,0.064,10,0.159,11,0.213,16,0.218,17,0.006,27,0.089,29,1.448,76,2.636,88,0.004,89,0.004,152,0.937,190,3.061,301,4.838,512,2.46,516,2.256,683,4.456,708,5.825,1457,5.076,1579,6.944,1580,6.2,1581,6.2,1582,8.427,1583,8.427,1584,7.775,1585,8.427,1586,8.427,1587,7.468,1588,8.103,1589,5.72,1590,5.72,1591,5.72,1592,6.2,1593,4.838,1594,5.72]],["title/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.078,1587,3.791]],["body/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.136,2,1.066,3,0.065,4,0.058,5,0.065,10,0.163,11,0.216,12,0.778,16,0.215,17,0.006,27,0.089,29,1.497,76,3.612,88,0.005,89,0.005,152,1.238,190,2.399,301,6.631,512,2.521,516,1.701,683,4.566,708,4.566,1457,5.202,1579,5.862,1580,6.353,1581,6.353,1582,6.353,1583,6.353,1584,5.862,1585,6.353,1586,7.637,1587,7.349,1588,6.353,1589,5.862,1590,5.862,1591,5.862,1592,6.353,1593,4.958,1594,7.84]],["title/pipes/NgxConfigurableLayoutItemSizePipe.html",[174,1.483,1595,4.384]],["body/pipes/NgxConfigurableLayoutItemSizePipe.html",[3,0.053,4,0.061,5,0.053,12,0.525,16,0.181,17,0.006,19,0.199,27,0.053,28,1.102,29,0.864,32,0.802,34,2.407,42,1.641,44,2.18,47,1.848,48,3.185,49,1.806,50,4.989,51,6.13,55,2.75,74,1.915,88,0.004,89,0.004,90,0.544,96,0.71,106,2.236,109,1.124,144,3.993,174,2.267,176,2.992,179,1.57,180,1.362,182,2.572,183,1.041,185,4.103,187,0.71,193,1.419,196,1.505,203,2.271,204,4.103,205,0.434,206,1.691,218,4.456,237,2.45,308,0.952,379,1.056,474,5.152,509,2.412,512,3.128,524,2.412,530,3.618,533,3.902,644,3.46,704,1.286,717,2.191,731,1.77,794,2.267,842,3.703,964,3.703,1282,2.72,1457,5.485,1506,2.551,1571,4.456,1584,7.728,1587,5.794,1589,7.273,1590,6.181,1591,6.181,1595,6.699,1596,7.485,1597,7.485,1598,5.757,1599,7.485,1600,5.757,1601,9.923,1602,5.757,1603,7.485,1604,7.728,1605,4.754,1606,4.021,1607,6.181,1608,5.757,1609,7.882,1610,5.152,1611,3.453,1612,5.757,1613,3.572,1614,5.757,1615,5.757,1616,5.757,1617,5.757,1618,5.757,1619,5.757,1620,5.757,1621,5.757,1622,5.757]],["title/interfaces/NgxCookie.html",[0,0.078,1623,3.421]],["body/interfaces/NgxCookie.html",[0,0.148,2,0.909,3,0.056,4,0.049,5,0.056,10,0.139,11,0.196,12,0.917,16,0.21,17,0.006,19,0.161,27,0.087,29,1.465,76,2.303,88,0.004,89,0.004,152,1.391,171,1.43,180,1.47,190,3.135,308,0.77,794,1.833,1128,5.285,1189,2.186,1319,2.925,1421,2.797,1623,5.949,1624,4.435,1625,4.227,1626,6.577,1627,6.577,1628,6.004,1629,6.577,1630,6.577,1631,6.242,1632,6.242,1633,3.893,1634,5.665,1635,6.242,1636,4.669,1637,4.049,1638,3.893,1639,4.227,1640,4.049,1641,4.435,1642,4.049,1643,4.435,1644,3.517,1645,4.435,1646,4.435,1647,4.435,1648,4.049,1649,3.317,1650,5.665,1651,4.435,1652,4.435,1653,4.435,1654,4.435,1655,4.435,1656,4.435,1657,4.973,1658,5.172,1659,4.049,1660,4.435,1661,4.435]],["title/interfaces/NgxCookieChangedEvent.html",[0,0.078,1659,3.277]],["body/interfaces/NgxCookieChangedEvent.html",[0,0.151,2,0.967,3,0.059,4,0.052,5,0.059,10,0.148,11,0.204,16,0.206,17,0.006,19,0.171,27,0.089,29,1.447,76,2.451,88,0.004,89,0.004,144,4.29,152,1.386,171,1.9,180,1.055,190,2.963,308,0.82,794,1.951,1128,3.997,1189,2.327,1319,3.114,1421,2.978,1623,5.617,1624,4.721,1625,4.5,1626,4.721,1627,4.721,1628,4.31,1629,4.721,1630,4.721,1631,4.721,1632,4.721,1633,4.144,1634,5.893,1635,6.424,1636,4.805,1637,4.31,1638,4.144,1639,4.5,1640,4.31,1641,4.721,1642,4.31,1643,4.721,1644,3.744,1645,4.721,1646,4.721,1647,4.721,1648,4.31,1649,3.531,1650,5.893,1651,4.721,1652,4.721,1653,4.721,1654,4.721,1655,4.721,1656,4.721,1657,5.173,1658,5.865,1659,5.38,1660,6.728,1661,6.728]],["title/interfaces/NgxCookieConfiguration.html",[0,0.078,1648,3.277]],["body/interfaces/NgxCookieConfiguration.html",[0,0.146,2,0.872,3,0.054,4,0.047,5,0.054,10,0.133,11,0.191,12,0.936,16,0.216,17,0.006,19,0.154,27,0.086,29,1.526,76,2.21,88,0.004,89,0.004,152,1.37,171,1.372,180,0.951,190,3.095,308,0.739,794,1.759,1128,3.603,1189,3.192,1319,4.037,1421,2.684,1623,6.172,1624,4.256,1625,4.056,1626,4.256,1627,4.256,1628,3.885,1629,4.256,1630,4.256,1631,4.256,1632,4.256,1633,3.736,1634,5.517,1635,7.092,1636,4.579,1637,3.885,1638,3.736,1639,4.056,1640,3.885,1641,4.256,1642,3.885,1643,4.256,1644,3.375,1645,4.256,1646,4.256,1647,4.256,1648,5.036,1649,4.844,1650,6.874,1651,6.476,1652,6.476,1653,6.476,1654,6.476,1655,6.476,1656,6.476,1657,5.889,1658,5.036,1659,3.885,1660,4.256,1661,4.256]],["title/interfaces/NgxCookieEvent.html",[0,0.078,1658,3.277]],["body/interfaces/NgxCookieEvent.html",[0,0.152,2,0.982,3,0.06,4,0.053,5,0.06,10,0.15,11,0.206,16,0.177,17,0.006,19,0.174,27,0.089,29,1.452,76,2.49,88,0.004,89,0.004,152,1.38,171,1.546,180,1.071,190,2.984,308,0.833,794,1.981,1128,4.059,1189,2.363,1319,3.162,1421,3.024,1623,5.671,1624,4.795,1625,4.57,1626,4.795,1627,4.795,1628,4.377,1629,4.795,1630,4.795,1631,4.795,1632,4.795,1633,4.209,1634,6.765,1635,6.47,1636,4.839,1637,4.377,1638,4.209,1639,4.57,1640,4.377,1641,4.795,1642,4.377,1643,4.795,1644,3.802,1645,4.795,1646,4.795,1647,4.795,1648,4.377,1649,3.586,1650,5.95,1651,4.795,1652,4.795,1653,4.795,1654,4.795,1655,4.795,1656,4.795,1657,6.106,1658,5.907,1659,4.377,1660,4.795,1661,4.795]],["title/interfaces/NgxCookieLanguageConfiguration.html",[0,0.078,1640,3.277]],["body/interfaces/NgxCookieLanguageConfiguration.html",[0,0.149,2,0.936,3,0.057,4,0.051,5,0.057,10,0.143,11,0.2,12,0.828,16,0.211,17,0.006,19,0.166,27,0.088,29,1.435,76,2.372,88,0.004,89,0.004,144,4.201,152,1.394,171,1.473,180,1.021,190,2.919,308,1.154,794,1.887,1128,3.867,1189,2.251,1319,3.012,1421,3.991,1623,5.501,1624,4.567,1625,4.353,1626,4.567,1627,4.567,1628,4.17,1629,4.567,1630,4.567,1631,4.567,1632,4.567,1633,4.009,1634,5.772,1635,6.328,1636,4.733,1637,4.17,1638,4.009,1639,4.353,1640,5.269,1641,6.648,1642,5.777,1643,6.648,1644,5.272,1645,4.567,1646,4.567,1647,4.567,1648,4.17,1649,3.416,1650,5.772,1651,4.567,1652,4.567,1653,4.567,1654,4.567,1655,4.567,1656,4.567,1657,5.067,1658,5.269,1659,4.17,1660,4.567,1661,4.567]],["title/injectables/NgxCookieService.html",[259,1.417,1662,4.045]],["body/injectables/NgxCookieService.html",[3,0.023,4,0.02,5,0.023,7,1.06,10,0.057,11,0.102,12,0.751,16,0.203,17,0.006,19,0.171,27,0.023,32,1.237,34,2.47,37,2.045,41,1.91,42,2.233,44,2.067,49,2.032,54,3.291,57,1.755,61,2.437,66,1.082,68,0.829,72,0.965,73,2.291,81,1.344,88,0.002,89,0.002,90,0.236,96,0.993,137,1.398,152,1.29,162,2.128,174,1.224,180,1.609,183,0.731,184,1.563,187,1.141,193,2.03,194,1.804,196,1.456,205,0.188,206,1.187,209,1.495,233,2.101,249,2.823,259,1.17,261,1.06,268,2.847,272,0.614,273,1.861,300,1.686,308,1.047,311,2.959,317,1.518,324,2.314,335,1.791,338,2.349,369,2.262,377,1.546,379,1.183,412,3.655,476,2.261,486,2.23,501,0.66,502,3.191,662,2.795,704,1.542,716,2,726,0.743,731,0.766,782,2.924,798,2.156,810,1.546,811,2.058,819,4.867,824,3.216,832,1.829,833,1.829,835,1.405,964,2.6,966,2.349,979,4.992,1005,1.302,1188,1.295,1189,0.9,1217,1.366,1219,4.274,1257,1.152,1285,2.704,1333,3.28,1383,2.963,1392,2,1415,2.424,1417,2.795,1418,1.295,1421,1.152,1458,1.204,1480,2.409,1506,1.791,1633,6.019,1637,1.667,1638,4.68,1639,4.098,1640,3.925,1648,3.925,1649,2.215,1657,6.345,1658,1.667,1659,1.667,1662,3.338,1663,2.492,1664,4.042,1665,3.338,1666,6.907,1667,5.1,1668,5.1,1669,5.1,1670,5.1,1671,5.1,1672,5.1,1673,5.1,1674,6.449,1675,5.1,1676,4.042,1677,4.042,1678,4.042,1679,4.042,1680,4.042,1681,4.042,1682,4.042,1683,4.042,1684,5.1,1685,5.867,1686,4.042,1687,2.492,1688,5.867,1689,7.057,1690,8.233,1691,4.042,1692,2.492,1693,4.042,1694,2.492,1695,4.042,1696,2.492,1697,4.042,1698,2.492,1699,4.845,1700,5.703,1701,4.042,1702,2.492,1703,2.795,1704,4.042,1705,2.492,1706,4.042,1707,4.845,1708,2.492,1709,2.492,1710,2.492,1711,3.338,1712,4.042,1713,4.042,1714,4.845,1715,2.492,1716,3.13,1717,4.042,1718,2.492,1719,5.061,1720,2.492,1721,4.042,1722,2.492,1723,4.845,1724,4.042,1725,4.042,1726,7.578,1727,2.492,1728,4.042,1729,4.042,1730,2.492,1731,3.617,1732,5.867,1733,3.338,1734,2.962,1735,2.492,1736,6.449,1737,4.042,1738,2.492,1739,3.617,1740,4.042,1741,2.492,1742,6.449,1743,4.042,1744,2.492,1745,2.508,1746,2.492,1747,2.492,1748,3.129,1749,2.058,1750,1.329,1751,2.058,1752,2.23,1753,2.23,1754,2.058,1755,1.667,1756,2.492,1757,2.492,1758,2.492,1759,4.726,1760,2.492,1761,2.492,1762,2.492,1763,2.492,1764,4.564,1765,2.492,1766,2.492,1767,5.1,1768,2.492,1769,2.492,1770,5.1,1771,2.492,1772,2.492,1773,2.492,1774,4.042,1775,4.042,1776,2.492,1777,2.492,1778,2.492,1779,2.492,1780,2.492,1781,4.042,1782,2.492,1783,2.492,1784,2.492,1785,2.492,1786,2.492,1787,5.867,1788,4.042,1789,2.492,1790,2.492,1791,3.617,1792,3.129,1793,4.042,1794,4.042,1795,2.492]],["title/interfaces/NgxCookieValue.html",[0,0.078,1707,4.045]],["body/interfaces/NgxCookieValue.html",[0,0.123,2,1.155,3,0.071,4,0.062,5,0.071,10,0.177,11,0.227,16,0.195,17,0.005,27,0.071,32,1.358,88,0.005,89,0.005,152,1.28,180,1.596,273,3.002,1707,7.39,1796,7.692,1797,7.692]],["title/directives/NgxCookiesFallBackComponent.html",[292,0.714,578,2.264]],["body/directives/NgxCookiesFallBackComponent.html",[3,0.066,4,0.058,5,0.066,10,0.164,11,0.217,17,0.005,19,0.227,27,0.066,32,0.996,72,3.318,88,0.005,89,0.005,90,0.675,96,0.881,106,2.303,109,1.286,187,0.881,205,0.538,211,6.277,292,1.249,294,1.712,300,1.591,308,0.909,341,2.778,512,3.379,568,3.052,578,3.959,731,2.196,1506,3.795,1689,7.731,1700,7.073,1798,8.566,1799,8.566,1800,7.143,1801,7.073,1802,5.314,1803,7.666,1804,7.143,1805,5.529]],["title/components/NgxCurrencyTableCellComponent.html",[109,0.735,534,2.367]],["body/components/NgxCurrencyTableCellComponent.html",[3,0.031,4,0.028,5,0.031,10,0.078,11,0.131,12,0.311,16,0.178,17,0.006,19,0.166,27,0.031,28,0.989,32,1.248,38,2.387,47,1.263,48,2.656,72,1.319,81,2.93,88,0.003,89,0.003,90,0.59,96,0.42,109,0.937,137,1.141,152,0.699,171,1.22,179,0.929,180,1.618,183,0.934,184,1.575,187,1.179,192,3.785,193,0.839,196,1.129,205,0.256,237,2.198,250,3.456,255,2.198,256,3.785,292,0.496,293,1.609,294,0.816,298,3.039,300,1.552,304,1.613,306,2.19,308,1.191,311,1.097,315,3.088,317,1.129,319,1.978,320,1.92,333,2.831,341,1.031,345,1.978,361,1.609,379,1.278,478,1.646,479,2.037,480,1.251,481,1.319,484,2.556,485,2.156,507,3.725,509,2.719,512,1.835,514,1.684,515,2.337,516,1.238,517,3.447,518,1.684,519,1.684,520,1.646,521,1.478,522,1.684,523,1.646,524,3.061,525,1.684,526,1.646,527,1.684,528,2.556,529,1.684,530,2.497,531,2.556,532,1.646,533,1.508,534,3.81,535,3.825,536,4.668,537,3.447,538,1.646,539,1.609,540,1.646,541,1.54,542,1.684,543,1.609,544,1.609,545,1.684,546,1.646,547,1.609,548,1.54,549,1.684,550,1.646,551,1.394,552,1.684,553,1.646,554,1.684,555,1.646,556,2.556,557,1.646,558,1.646,559,1.684,560,1.646,561,1.684,562,1.646,563,3.066,564,1.684,565,1.684,566,1.684,567,4.336,568,1.132,569,1.574,570,1.574,571,1.684,572,1.609,573,1.684,574,1.684,575,1.684,576,1.609,577,1.684,578,1.574,579,1.609,580,1.684,581,1.394,582,1.574,583,1.684,584,1.684,585,1.54,586,1.609,587,1.684,588,1.609,589,1.684,590,1.609,591,1.684,592,1.574,593,1.574,594,1.609,595,1.684,596,1.609,597,1.684,598,1.609,599,1.684,600,1.609,601,1.684,602,1.295,603,1.609,604,1.574,605,1.609,606,1.574,607,1.574,608,1.574,609,1.368,610,1.394,611,1.394,612,1.574,613,1.684,614,1.508,615,1.684,616,1.609,617,1.684,618,1.478,619,1.574,620,1.684,621,1.574,622,1.684,623,1.609,624,1.684,625,1.684,641,5.358,644,2.387,662,1.866,678,5.766,679,4.574,680,4.574,681,5.781,682,5.105,683,5.071,684,4.574,685,4.359,686,4.015,687,6.183,688,4.574,689,4.831,690,4.831,691,3.998,693,3.608,695,2.913,696,3.323,697,3.608,698,3.998,699,3.998,700,3.998,701,3.998,702,2.337,704,1.556,707,2.19,708,3.323,710,2.495,711,3.388,712,2.042,713,2.635,714,4.015,716,1.684,717,1.295,719,4.052,726,1.015,764,2.11,1005,2.54,1023,2.913,1083,2.684,1093,1.816,1094,4.359,1095,2.378,1593,5.506,1806,5.165,1807,3.047,1808,6.241,1809,4.265,1810,4.265,1811,4.265,1812,4.265,1813,2.811,1814,2.811,1815,2.811,1816,3.405,1817,4.623,1818,4.265,1819,4.623,1820,3.405,1821,4.265,1822,5.165,1823,3.405,1824,5.165,1825,3.405,1826,5.165,1827,4.265,1828,3.405,1829,2.755,1830,4.265,1831,3.405,1832,2.811,1833,2.811,1834,2.811,1835,3.405]],["title/directives/NgxCypressTagDirective.html",[292,0.714,579,2.314]],["body/directives/NgxCypressTagDirective.html",[3,0.062,4,0.055,5,0.062,10,0.155,11,0.21,16,0.195,17,0.006,19,0.219,27,0.062,32,0.939,44,1.925,47,1.81,72,2.609,88,0.004,89,0.004,90,0.637,179,1.837,182,2.84,184,1.528,187,1.103,205,0.507,292,1.205,294,1.614,298,2.428,304,2.581,308,0.857,334,2.706,341,2.039,579,3.905,665,3.413,672,4.533,695,5.565,697,6.246,716,4.425,962,4.507,1485,6.246,1836,9.326,1837,9.326,1838,6.735,1839,9.868,1840,8.266,1841,8.266,1842,6.735,1843,4.506,1844,6.735,1845,6.735]],["title/components/NgxDateTableCellComponent.html",[109,0.735,538,2.367]],["body/components/NgxDateTableCellComponent.html",[3,0.027,4,0.024,5,0.027,10,0.067,11,0.116,12,0.265,16,0.168,17,0.006,19,0.17,27,0.027,28,0.874,32,1.218,36,2.11,38,2.11,47,1.142,48,2.402,64,2.738,72,1.124,76,2.812,81,2.805,83,3.274,88,0.002,89,0.002,90,0.534,96,0.358,109,0.847,137,1.048,152,0.618,171,1.079,179,0.792,180,1.588,183,0.826,184,1.577,187,1.181,192,6.3,193,0.716,196,1.021,205,0.219,237,1.943,250,3.054,255,3.408,256,3.346,292,0.423,293,1.371,294,0.695,298,3.014,300,1.635,304,1.426,306,1.867,308,1.165,311,0.935,315,2.792,317,1.021,319,1.686,320,1.637,333,2.502,341,1.709,345,1.686,361,1.371,379,1.174,478,1.403,479,1.801,480,1.066,481,1.124,484,2.259,485,1.905,507,3.491,509,2.58,512,1.621,514,1.436,515,2.065,516,1.094,517,3.166,518,1.436,519,1.436,520,1.403,521,1.26,522,1.436,523,1.403,524,2.976,525,1.436,526,1.403,527,1.436,528,2.259,529,1.436,530,2.207,531,2.259,532,1.403,533,1.286,534,1.403,535,3.661,536,1.436,537,3.166,538,3.571,539,4.564,540,1.403,541,1.313,542,1.436,543,1.371,544,1.371,545,1.436,546,1.403,547,1.371,548,1.313,549,1.436,550,1.403,551,1.188,552,1.436,553,1.403,554,1.436,555,1.403,556,2.259,557,1.403,558,1.403,559,1.436,560,1.403,561,1.436,562,1.403,563,2.849,564,1.436,565,1.436,566,1.436,567,4.244,568,0.965,569,1.341,570,1.341,571,1.436,572,1.371,573,1.436,574,1.436,575,1.436,576,1.371,577,1.436,578,1.341,579,1.371,580,1.436,581,1.188,582,1.341,583,1.436,584,1.436,585,1.313,586,1.371,587,1.436,588,1.371,589,1.436,590,1.371,591,1.436,592,1.341,593,1.341,594,1.371,595,1.436,596,1.371,597,1.436,598,1.371,599,1.436,600,1.371,601,1.436,602,1.104,603,1.371,604,1.341,605,1.371,606,1.341,607,1.341,608,1.341,609,1.166,610,1.188,611,1.188,612,1.341,613,1.436,614,1.286,615,1.436,616,1.371,617,1.436,618,1.26,619,1.341,620,1.436,621,1.341,622,1.436,623,1.371,624,1.436,625,1.436,641,5.21,662,1.591,678,5.622,679,4.136,680,4.136,681,5.512,682,4.69,683,4.753,684,4.136,685,3.942,686,3.631,687,5.868,688,4.136,689,4.369,690,4.369,691,3.534,693,3.189,695,2.575,696,2.937,697,3.189,698,3.534,699,3.534,700,3.534,701,3.534,702,2.065,704,1.429,707,1.867,708,2.937,710,2.127,711,3.148,712,1.741,713,2.246,714,3.631,716,1.436,717,1.104,719,3.825,726,0.865,764,2.498,836,4.753,902,2.207,1005,2.381,1023,2.575,1083,2.373,1093,1.548,1094,3.942,1095,2.027,1468,2.575,1593,5.161,1613,4.584,1807,2.597,1809,3.77,1810,3.77,1811,3.77,1812,3.77,1813,2.396,1814,2.396,1815,2.396,1817,4.086,1818,3.77,1819,4.086,1821,3.77,1827,3.77,1829,2.435,1830,3.77,1832,2.396,1833,2.396,1834,2.396,1846,7.731,1847,5.644,1848,4.66,1849,8.598,1850,5.051,1851,7.389,1852,8.238,1853,8.008,1854,5.644,1855,4.566,1856,6.102,1857,4.566,1858,2.902,1859,2.902,1860,4.566,1861,2.902,1862,4.086,1863,2.902,1864,4.566,1865,2.902,1866,4.566,1867,2.902,1868,2.902,1869,2.902]],["title/directives/NgxDisplayContentComponent.html",[292,0.714,581,2.005]],["body/directives/NgxDisplayContentComponent.html",[3,0.062,4,0.055,5,0.062,10,0.156,11,0.21,12,0.818,16,0.148,17,0.005,19,0.18,27,0.062,28,1.945,32,0.944,88,0.004,89,0.004,90,0.848,96,0.836,136,3.671,164,5.999,184,1.406,187,1.106,203,3.272,205,0.51,255,3.816,292,1.209,294,1.623,300,1.555,304,2.59,308,0.862,341,2.903,479,3.537,501,1.795,568,2.982,581,3.396,582,3.834,652,4.104,751,3.994,1802,5.563,1870,9.344,1871,8.363,1872,6.774,1873,7.424,1874,8.295,1875,8.295,1876,4.976,1877,6.774]],["title/interfaces/NgxDisplayContentConfiguration.html",[0,0.078,1878,4.045]],["body/interfaces/NgxDisplayContentConfiguration.html",[0,0.111,2,1.045,3,0.064,4,0.056,5,0.064,10,0.16,11,0.214,12,0.86,16,0.221,17,0.006,19,0.224,27,0.09,28,1.332,29,1.474,68,2.314,88,0.004,89,0.004,114,2.471,169,5.746,205,0.524,245,1.644,479,3.72,581,2.849,719,3.443,1878,6.963,1879,6.959,1880,6.959,1881,9.431,1882,9.431,1883,9.431,1884,6.228,1885,4.317,1886,6.228,1887,6.228,1888,6.228,1889,9.431,1890,4.476,1891,6.228]],["title/directives/NgxDisplayContentDirective.html",[292,0.714,582,2.264]],["body/directives/NgxDisplayContentDirective.html",[3,0.024,4,0.021,5,0.024,10,0.06,11,0.106,12,0.643,16,0.195,17,0.006,19,0.187,27,0.024,28,0.803,29,0.79,32,1.314,34,1.911,37,2.22,42,1.5,44,1.853,47,1.065,49,2.111,57,1.821,61,1.999,68,2.004,72,1.011,73,0.927,74,2.196,83,1.156,88,0.002,89,0.002,90,0.247,96,0.814,102,2.075,109,1.37,114,2.505,135,0.827,137,1.337,139,1.089,162,3.217,174,1.27,179,0.712,180,0.987,182,1.441,183,0.759,184,1.333,187,1.163,191,1.356,193,1.486,194,1.853,196,1.341,203,2.075,205,0.197,206,1.232,234,1.471,236,1.912,237,2.239,245,0.616,254,3.247,255,1.785,272,0.643,292,0.611,294,0.625,298,1.232,300,1.664,304,1.31,308,1.161,317,1.584,328,2.602,332,1.43,341,1.27,358,1.619,366,2.331,368,2.027,369,2.503,373,2.67,379,1.56,392,1.352,402,2.602,412,3.287,426,2.884,431,1.392,453,4.418,479,1.655,492,2.154,501,1.394,506,1.206,509,2.856,512,1.868,513,1.982,516,1.444,563,3.343,581,1.068,582,3.052,636,3.502,652,2.603,665,1.322,674,3.947,695,3.978,704,0.937,707,2.698,716,2.982,717,2.513,719,2.982,726,1.969,731,0.802,734,3.384,751,2.467,764,2.689,802,3.943,805,1.206,826,2.67,832,2.987,833,2.987,835,1.471,836,1.678,867,1.565,874,3.464,902,2.913,910,3.156,931,2.154,960,2.075,962,3.583,964,1.678,984,3.384,1028,3.057,1062,2.366,1072,1.516,1073,2.438,1104,1.392,1105,1.619,1128,1.619,1186,1.156,1217,2.299,1226,3.384,1232,1.18,1251,5.516,1279,2.335,1285,2.806,1287,6.159,1305,1.565,1355,1.912,1381,3.754,1443,1.822,1458,2.027,1474,3.156,1508,1.912,1522,1.18,1523,2.516,1750,3.762,1759,1.912,1791,4.708,1802,3.264,1856,2.154,1871,8.478,1876,2.516,1878,2.154,1884,5.393,1885,4.097,1886,2.335,1887,5.909,1888,6.635,1890,4.537,1891,4.708,1892,6.338,1893,2.609,1894,3.464,1895,7.414,1896,5.261,1897,6.603,1898,4.344,1899,5.261,1900,5.261,1901,5.261,1902,6.027,1903,5.261,1904,4.195,1905,4.195,1906,4.195,1907,4.195,1908,4.195,1909,6.635,1910,4.195,1911,2.609,1912,2.609,1913,2.609,1914,3.961,1915,2.609,1916,2.609,1917,4.195,1918,4.017,1919,4.195,1920,2.609,1921,6.603,1922,4.344,1923,4.195,1924,2.609,1925,4.195,1926,2.609,1927,3.855,1928,2.609,1929,2.609,1930,4.665,1931,5.261,1932,2.609,1933,4.195,1934,4.195,1935,2.609,1936,2.609,1937,2.806,1938,4.195,1939,2.609,1940,2.609,1941,2.93,1942,2.609,1943,2.609,1944,2.806,1945,3.503,1946,2.609,1947,1.322,1948,2.154,1949,4.708,1950,2.609,1951,2.609,1952,2.609,1953,2.609,1954,2.734,1955,6.027,1956,2.609,1957,2.609,1958,2.609,1959,2.609,1960,2.609,1961,1.745,1962,2.609,1963,1.745,1964,2.609,1965,1.678,1966,2.609,1967,2.609,1968,2.609,1969,2.609,1970,2.609,1971,2.609,1972,2.609,1973,2.154,1974,2.609,1975,2.609,1976,2.609,1977,4.195,1978,2.609,1979,2.609,1980,2.609,1981,2.335,1982,1.678,1983,2.335,1984,2.154,1985,2.154,1986,2.154,1987,2.609,1988,2.609,1989,2.609,1990,2.609,1991,2.609,1992,2.609,1993,2.609,1994,2.609,1995,2.609,1996,4.195,1997,4.195,1998,2.609,1999,2.609,2000,2.609,2001,5.261,2002,2.02,2003,6.027,2004,2.609,2005,1.678,2006,1.565,2007,2.609]],["title/directives/NgxFormsErrorAbstractComponent.html",[292,0.714,585,2.216]],["body/directives/NgxFormsErrorAbstractComponent.html",[3,0.062,4,0.055,5,0.062,10,0.154,11,0.209,17,0.006,19,0.219,21,4.034,27,0.062,28,1.831,32,1.151,36,3.341,47,1.361,51,5.312,68,3.281,70,5.979,72,2.605,86,6.549,88,0.004,89,0.004,90,0.636,184,1.574,187,1.15,205,0.507,292,1.204,294,1.612,300,1.74,304,2.579,308,1.051,341,2.036,379,1.64,432,5.256,585,3.736,665,4.849,796,6.392,1569,4.308,2008,6.725,2009,7.999,2010,8.258,2011,6.725,2012,6.725,2013,5.553]],["title/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.078,2014,4.045]],["body/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.099,2,0.931,3,0.057,4,0.05,5,0.057,7,3.34,10,0.142,11,0.199,12,0.871,16,0.217,17,0.006,19,0.208,27,0.079,37,2.05,68,3.317,76,2.987,86,7.309,88,0.004,89,0.004,90,0.742,96,0.765,106,2.11,109,1.472,190,2.095,194,2.784,205,0.467,245,1.465,255,3.34,292,1.144,308,0.999,379,1.44,387,6.668,395,6.668,404,6.076,524,2.917,585,2.805,644,3.628,695,4.427,794,2.829,815,3.794,844,5.049,1219,4.427,1458,4.376,1506,4.419,1918,4.278,1944,5.251,2014,6.482,2015,6.199,2016,9.543,2017,6.076,2018,7.025,2019,4.708,2020,9.055,2021,9.055]],["title/directives/NgxFormsErrorsDirective.html",[292,0.714,586,2.314]],["body/directives/NgxFormsErrorsDirective.html",[2,0.399,3,0.025,4,0.022,5,0.025,10,0.061,11,0.108,12,0.812,16,0.201,17,0.006,19,0.206,20,3.122,21,1.596,26,1.383,27,0.025,28,1.722,29,1.068,32,1.191,34,1.542,36,0.995,37,1.113,42,1.52,44,1.741,47,1.572,48,2.268,49,2.053,51,1.711,55,1.566,61,1.614,68,3.11,70,6.256,73,1.893,83,1.888,86,6.712,88,0.002,89,0.002,90,0.504,96,0.657,106,1.145,107,4.466,109,1.395,135,2.115,137,1.092,144,1.419,151,1.65,152,0.962,162,1.11,174,0.806,179,0.726,180,0.873,182,1.464,183,0.771,184,1.116,187,1.153,193,1.314,194,2.188,196,1.287,203,2.102,205,0.2,206,1.252,233,2.214,238,0.995,245,0.629,272,0.656,292,1.167,294,0.638,298,1.252,300,1.685,308,1.087,317,1.102,328,2.643,333,2.336,341,2.425,367,4.447,369,2.406,379,1.666,382,2.741,389,6.412,395,4.717,399,2.851,404,4.126,426,1.458,453,1.78,476,0.871,479,1.049,480,1.566,501,1.412,509,2.407,513,1.257,516,1.598,524,1.717,585,2.411,586,2.013,636,3.541,652,3.015,671,3.723,672,2.16,695,2.403,704,1.734,717,2.707,719,4.065,726,1.271,751,3.179,826,1.888,832,2.757,833,2.757,837,1.458,903,3.519,906,3.298,910,3.197,931,2.197,960,2.404,1005,1.963,1009,1.383,1011,1.949,1028,3.097,1032,4.126,1062,3.006,1072,3.875,1073,2.476,1079,3.298,1088,5.162,1089,3.298,1104,3.251,1105,1.65,1120,2.851,1186,1.179,1219,1.5,1281,2.214,1287,2.059,1305,3.197,1333,2.741,1357,1.949,1392,4.452,1458,3.223,1474,3.197,1485,1.858,1506,2.7,1508,5.214,1522,3.017,1523,2.556,1539,2.059,1556,2.059,1559,2.197,1561,2.197,1578,3.34,1714,3.519,1745,1.65,1749,2.197,1856,2.197,1862,3.813,1876,2.556,1909,5.454,1918,1.257,1945,1.257,1965,1.711,1982,1.711,1983,2.381,2009,6.367,2013,5.506,2014,4.401,2018,5.454,2022,2.66,2023,6.094,2024,3.466,2025,7.765,2026,5.33,2027,5.33,2028,7.115,2029,5.33,2030,5.33,2031,4.261,2032,4.261,2033,4.261,2034,2.66,2035,4.261,2036,2.66,2037,4.261,2038,2.66,2039,6.668,2040,7.115,2041,4.261,2042,2.66,2043,2.66,2044,2.66,2045,2.66,2046,2.66,2047,3.723,2048,5.33,2049,2.66,2050,4.261,2051,2.66,2052,4.261,2053,2.66,2054,2.66,2055,2.66,2056,2.66,2057,4.261,2058,2.66,2059,6.668,2060,4.261,2061,2.66,2062,2.66,2063,2.66,2064,2.66,2065,3.813,2066,2.66,2067,2.66,2068,2.197,2069,1.949,2070,1.949,2071,2.66,2072,2.381,2073,2.381,2074,1.858,2075,2.66,2076,2.059,2077,2.66,2078,3.813,2079,2.66,2080,4.261,2081,4.261,2082,5.33,2083,2.66,2084,2.66,2085,2.66,2086,2.66,2087,2.66,2088,2.66,2089,2.66,2090,2.66,2091,2.66,2092,2.66,2093,2.66,2094,5.33,2095,2.66,2096,4.261,2097,2.66,2098,2.66,2099,2.66,2100,5.33,2101,3.813,2102,5.454,2103,1.949,2104,2.66,2105,2.66,2106,2.66,2107,2.66,2108,2.66,2109,7.115,2110,2.66,2111,4.261,2112,2.66,2113,2.66,2114,2.66,2115,2.66,2116,2.66,2117,2.66,2118,5.33,2119,2.66,2120,4.261,2121,3.813,2122,6.668,2123,1.78,2124,2.66,2125,2.66,2126,2.66]],["title/interfaces/NgxHasCookieConfiguration.html",[0,0.078,1805,3.791]],["body/interfaces/NgxHasCookieConfiguration.html",[0,0.122,2,1.149,3,0.071,4,0.062,5,0.071,10,0.176,11,0.226,12,0.814,16,0.194,17,0.005,27,0.071,88,0.005,89,0.005,152,1.357,506,4.497,1625,5.346,1633,6.259,1657,4.923,1805,6.907,2127,7.654]],["title/directives/NgxHasCookieDirective.html",[292,0.714,588,2.314]],["body/directives/NgxHasCookieDirective.html",[3,0.031,4,0.027,5,0.031,10,0.078,11,0.13,12,0.469,16,0.205,17,0.006,19,0.217,27,0.031,32,1.263,42,0.964,44,1.739,47,1.511,48,3.583,49,2.046,55,2.55,61,1.555,72,1.309,73,2.651,74,1.708,75,3.436,83,2.276,88,0.003,89,0.003,90,0.32,96,0.417,109,1.294,133,1.964,137,1.222,139,1.41,162,1.41,174,1.023,179,0.922,182,1.765,183,0.929,184,1.352,187,1.184,191,2.669,194,1.579,196,1.35,205,0.255,206,1.509,233,1.756,238,1.264,245,0.799,272,0.833,292,1.227,294,0.81,298,1.509,300,1.571,304,1.604,308,1.097,317,1.591,324,2.026,332,1.852,335,2.276,338,1.964,341,1.881,366,2.753,368,3.608,369,2.544,373,3.075,379,1.442,392,2.002,399,2.261,402,3.187,408,3.45,412,2.641,424,1.964,431,2.74,467,1.852,501,1.646,506,2.872,509,2.778,513,1.597,578,1.562,588,2.427,652,1.672,665,1.713,702,2.324,704,1.147,717,2.364,719,4.35,722,2.36,726,2.07,731,1.039,764,2.1,782,1.2,824,1.852,826,1.497,832,1.529,833,1.529,960,2.451,962,3.799,984,3.997,1005,1.089,1028,3.61,1072,3.61,1073,2.985,1104,1.803,1105,2.097,1186,1.497,1333,3.997,1474,3.727,1508,5.76,1522,2.811,1523,3.081,1556,2.616,1633,3.304,1657,5.056,1662,6.491,1689,6.675,1700,6.164,1802,3.855,1805,4.809,1843,2.261,1918,4.377,1937,2.261,1945,3.279,1947,1.713,1954,1.756,1965,2.174,1982,2.174,2019,2.027,2047,4.339,2065,4.597,2076,2.616,2101,3.025,2102,5.56,2103,2.477,2128,9.652,2129,9.652,2130,3.38,2131,5.137,2132,3.588,2133,5.137,2134,5.137,2135,8.623,2136,4.339,2137,6.213,2138,4.847,2139,5.256,2140,6.94,2141,6.94,2142,4.847,2143,5.137,2144,5.137,2145,3.38,2146,3.504,2147,3.38,2148,3.38,2149,5.137,2150,5.137,2151,3.38,2152,3.38,2153,3.976,2154,3.38,2155,6.213,2156,3.38,2157,3.38,2158,3.38,2159,3.38,2160,3.38,2161,5.137,2162,3.38,2163,3.38,2164,3.38,2165,3.588,2166,3.38,2167,3.38,2168,3.38,2169,2.616,2170,2.791,2171,3.588,2172,3.38,2173,5.137,2174,2.616,2175,3.588,2176,5.137,2177,3.304,2178,2.36,2179,3.304,2180,1.852,2181,3.38,2182,3.38,2183,3.38,2184,1.803,2185,3.38,2186,3.38,2187,3.38,2188,3.38,2189,3.38,2190,3.38,2191,3.38,2192,2.027,2193,2.097,2194,3.38,2195,3.38,2196,5.137,2197,3.38]],["title/directives/NgxHasFeatureDirective.html",[292,0.714,590,2.314]],["body/directives/NgxHasFeatureDirective.html",[3,0.031,4,0.027,5,0.031,10,0.077,11,0.129,16,0.205,17,0.006,19,0.197,26,1.736,27,0.031,29,1.115,32,1.242,38,2.353,42,1.451,47,1.775,48,4.079,49,1.821,55,2.535,61,1.542,72,1.972,73,2.191,74,1.693,83,2.733,88,0.003,89,0.003,90,0.316,96,0.412,133,1.941,139,1.394,174,1.012,179,0.911,183,0.921,184,1.463,187,1.208,191,2.646,196,1.116,205,0.252,206,1.496,238,1.249,245,0.789,272,0.824,292,1.141,294,0.8,298,1.496,300,1.357,304,1.59,308,1.205,317,1.416,332,1.831,338,1.941,341,2.249,366,2.733,368,3.589,369,2.532,373,3.057,379,1.608,392,1.987,402,3.158,408,3.432,412,2.625,424,1.941,501,1.634,509,2.769,513,1.578,590,2.405,704,2.018,717,2.826,719,4.337,722,2.333,726,2.057,764,2.085,826,1.48,949,2.871,960,2.433,962,4.421,984,3.968,1028,3.585,1072,3.585,1073,2.958,1104,1.782,1105,2.072,1186,1.48,1222,2.004,1236,6.926,1238,6.456,1239,5.697,1240,5.094,1266,4.204,1474,3.7,1522,2.791,1523,3.054,1754,7.554,1918,3.509,1941,3.556,1945,3.509,1947,1.693,1954,1.736,1965,3.968,1982,2.149,2047,3.556,2074,3.556,2076,2.586,2136,4.308,2138,4.308,2139,5.234,2142,4.818,2146,3.479,2153,3.941,2165,3.556,2171,4.308,2175,2.333,2177,3.275,2178,2.333,2179,3.275,2180,1.831,2192,2.004,2193,2.072,2198,8.798,2199,8.798,2200,3.34,2201,3.054,2202,6.174,2203,2.519,2204,3.731,2205,7.282,2206,5.442,2207,4.52,2208,7.426,2209,7.426,2210,7.426,2211,6.169,2212,4.52,2213,6.169,2214,5.091,2215,5.091,2216,5.091,2217,3.34,2218,3.34,2219,3.34,2220,4.52,2221,3.34,2222,3.34,2223,3.34,2224,3.34,2225,5.442,2226,3.34,2227,3.34,2228,3.34,2229,3.34,2230,3.34,2231,3.34,2232,3.34,2233,3.34,2234,2.586,2235,2.989,2236,2.989,2237,2.758,2238,5.091,2239,3.34,2240,5.091,2241,3.34,2242,3.34,2243,3.34,2244,4.52,2245,3.34,2246,5.055,2247,2.989,2248,3.34,2249,3.34,2250,4.204,2251,3.731,2252,3.731]],["title/pipes/NgxHasFeaturePipe.html",[174,1.483,2253,4.384]],["body/pipes/NgxHasFeaturePipe.html",[3,0.041,4,0.036,5,0.041,11,0.114,12,0.578,16,0.183,17,0.006,19,0.223,26,2.339,27,0.041,29,1.195,32,1.293,34,1.834,38,2.928,42,1.283,44,1.048,48,3.12,49,1.982,55,1.654,57,1.954,61,2.22,73,1.598,81,1.497,83,1.994,88,0.003,89,0.003,90,0.426,96,0.904,109,0.951,139,1.878,162,1.878,174,2.809,176,2.339,179,1.228,180,1.303,183,0.814,184,1.248,185,2.467,187,1.144,193,1.562,196,1.651,203,1.775,204,3.473,205,0.339,206,1.322,238,1.683,245,1.063,268,3.115,272,1.11,300,1.38,308,0.806,317,1.574,366,2.807,368,4.32,369,2.436,373,3.249,379,1.702,392,2.041,399,3.011,408,2.928,412,3.401,424,2.615,501,1.192,513,2.994,696,4.076,704,1.943,707,4.076,726,2.187,734,4.076,826,1.994,920,2.538,949,4.488,952,4.076,960,1.775,979,3.931,1028,5.056,1072,4.874,1073,3.682,1112,3.682,1120,3.011,1165,3.484,1186,1.994,1222,2.7,1238,6.567,1239,7.185,1266,7.185,1392,3.937,1439,1.808,1947,2.281,2047,4.425,2139,5.968,2146,3.573,2177,4.076,2179,4.076,2192,2.7,2193,2.792,2199,8.415,2202,5.67,2205,5.67,2206,4.643,2220,3.298,2234,3.484,2253,5.67,2254,8.415,2255,4.501,2256,4.501,2257,4.501,2258,5.67,2259,4.501,2260,6.493,2261,6.336,2262,4.501,2263,5.67,2264,5.67,2265,4.501,2266,4.501,2267,4.501,2268,3.473,2269,5.232,2270,5.232,2271,7.122,2272,5.67,2273,4.501,2274,4.501,2275,4.028,2276,4.028,2277,5.67,2278,5.67,2279,3.573,2280,5.67,2281,3.716,2282,3.716,2283,4.501,2284,6.336,2285,4.028,2286,3.484,2287,4.028,2288,4.028,2289,3.143]],["title/directives/NgxHasFocusDirective.html",[292,0.714,592,2.264]],["body/directives/NgxHasFocusDirective.html",[3,0.052,4,0.046,5,0.052,10,0.13,11,0.188,12,0.516,15,2.316,16,0.161,17,0.006,19,0.15,27,0.052,29,1.313,32,0.789,34,1.637,44,1.318,47,1.498,57,3.213,81,2.743,88,0.004,89,0.004,90,0.535,96,0.913,101,4.229,106,1.989,122,3.315,128,3.279,137,1.351,180,0.926,182,1.944,183,1.339,184,1.461,187,1.17,193,1.395,196,1.685,205,0.426,292,1.275,294,1.356,305,4.174,308,0.72,315,3.662,317,1.685,325,5.423,330,4.444,340,3.394,367,3.812,379,1.358,476,2.7,516,2.097,568,2.743,592,3.421,704,1.653,726,2.207,752,6.512,754,5.423,757,6.772,758,5.853,759,5.423,761,7.21,764,2.502,765,6.44,768,5.423,772,5.423,773,5.423,1121,6.772,2290,9.626,2291,9.626,2292,5.063,2293,7.83,2294,7.401,2295,7.401,2296,5.658,2297,5.658,2298,5.658]],["title/directives/NgxHasFocusDragAndDropAbstractDirective.html",[292,0.714,593,2.264]],["body/directives/NgxHasFocusDragAndDropAbstractDirective.html",[3,0.048,4,0.042,5,0.048,10,0.12,11,0.178,12,0.806,15,2.133,16,0.172,17,0.006,19,0.138,27,0.048,29,1.052,32,0.977,34,1.508,47,1.418,49,1.131,57,3.437,81,2.633,88,0.004,89,0.004,90,0.493,96,0.864,101,4.092,106,1.883,122,3.248,128,3.104,133,3.027,137,1.296,180,0.853,182,1.79,183,1.267,184,1.597,187,1.194,193,1.284,196,1.646,205,0.392,292,1.234,294,1.248,300,1.373,305,3.951,308,0.891,315,3.466,317,1.79,325,5.134,330,4.117,340,3.125,367,3.659,379,1.285,476,2.591,501,2.097,516,2.029,568,2.633,593,3.238,704,1.565,726,2.09,742,8.061,751,3.87,752,6.407,754,5.134,755,7.578,756,7.578,757,6.554,758,5.665,759,5.134,761,7.044,765,6.088,768,5.134,772,5.134,773,5.134,970,4.662,1121,6.128,1319,2.518,2019,3.125,2169,4.032,2170,4.302,2292,4.662,2299,9.762,2300,7.007,2301,7.007,2302,5.209,2303,5.209,2304,5.209,2305,5.209,2306,5.209,2307,5.209,2308,4.032,2309,4.662,2310,7.007,2311,7.007,2312,4.662]],["title/directives/NgxHasPermissionDirective.html",[292,0.714,594,2.314]],["body/directives/NgxHasPermissionDirective.html",[3,0.032,4,0.028,5,0.032,10,0.079,11,0.132,16,0.206,17,0.006,19,0.2,26,1.792,27,0.032,29,1.13,32,1.232,38,2.41,42,1.487,47,1.789,48,4.099,49,1.839,55,2.576,61,1.579,72,2.02,73,2.234,74,1.735,83,2.787,88,0.003,89,0.003,90,0.326,96,0.425,133,2.004,139,1.439,174,1.044,179,0.941,183,0.943,184,1.471,187,1.209,191,2.71,196,1.138,205,0.26,206,1.532,238,1.289,245,0.815,272,0.85,292,1.155,294,0.826,298,1.532,300,1.373,304,1.629,308,1.203,317,1.433,332,1.89,338,2.004,341,2.28,366,2.787,368,3.64,369,2.539,373,3.107,379,0.957,392,2.026,402,3.235,408,3.481,412,2.668,424,2.004,501,1.666,509,2.65,513,1.629,594,2.464,704,2.033,717,2.865,719,4.07,722,2.408,726,2.091,764,2.126,826,1.528,960,2.481,962,4.45,984,4.046,1028,3.655,1072,2.004,1073,3.031,1104,1.839,1105,2.139,1186,1.528,1222,2.068,1241,6.995,1243,6.815,1244,5.79,1245,5.194,1267,5.194,1474,3.773,1522,1.56,1523,3.128,1754,7.604,1918,3.558,1941,2.408,1945,3.558,1947,1.748,1954,1.792,1965,4.046,1982,2.218,2074,3.642,2136,4.393,2138,4.393,2139,5.292,2142,4.897,2146,3.547,2153,4.037,2165,3.642,2171,4.393,2175,2.408,2177,3.355,2178,2.408,2179,3.355,2180,1.89,2192,2.068,2193,2.139,2198,8.802,2201,3.128,2203,2.58,2204,3.822,2206,4.609,2207,4.609,2212,4.609,2220,4.609,2225,5.518,2234,2.669,2235,3.086,2236,3.086,2237,2.847,2244,4.609,2246,5.138,2247,3.086,2250,4.306,2251,3.822,2252,3.822,2313,8.802,2314,3.448,2315,5.215,2316,7.362,2317,7.531,2318,7.531,2319,7.531,2320,6.29,2321,6.29,2322,5.215,2323,5.215,2324,5.215,2325,3.448,2326,3.448,2327,3.448,2328,3.448,2329,3.448,2330,3.448,2331,3.448,2332,3.448,2333,3.448,2334,4.667,2335,3.448,2336,3.448,2337,3.448,2338,3.448,2339,3.448,2340,5.215,2341,3.448,2342,5.215,2343,3.448,2344,3.448,2345,3.448,2346,3.448,2347,3.448,2348,3.448]],["title/pipes/NgxHasPermissionPipe.html",[174,1.483,2349,4.384]],["body/pipes/NgxHasPermissionPipe.html",[3,0.041,4,0.036,5,0.041,11,0.114,12,0.577,16,0.183,17,0.006,19,0.223,26,2.335,27,0.041,29,1.194,32,1.293,34,1.831,38,2.924,42,1.281,44,1.046,48,3.117,49,1.981,55,1.651,57,1.95,61,2.218,73,1.595,81,1.494,83,1.99,88,0.003,89,0.003,90,0.425,96,0.903,109,0.95,139,1.875,162,1.875,174,2.808,176,2.335,179,1.225,180,1.302,183,0.813,184,1.247,185,2.462,187,1.144,193,1.56,196,1.65,203,1.772,204,3.468,205,0.338,206,1.32,238,1.679,245,1.061,268,3.114,272,1.108,300,1.379,308,0.805,317,1.573,366,2.803,368,4.318,369,2.435,373,3.245,379,1.701,392,2.038,399,3.005,408,2.924,412,3.399,424,2.61,501,1.19,513,2.989,696,4.07,704,1.942,707,4.07,726,2.184,734,4.07,826,1.99,920,2.533,949,4.484,952,4.07,960,1.772,979,3.925,1028,5.053,1072,4.87,1073,3.677,1112,3.677,1120,3.005,1165,3.477,1186,1.99,1222,2.694,1243,6.887,1244,7.18,1267,7.18,1392,3.934,1439,1.805,1947,2.277,2047,4.419,2139,5.965,2146,3.568,2177,4.07,2179,4.07,2192,2.694,2193,2.787,2206,4.636,2220,3.292,2234,3.477,2254,8.411,2258,5.662,2260,6.488,2263,5.662,2264,5.662,2268,3.468,2269,5.225,2270,5.225,2271,7.116,2272,5.662,2275,4.02,2276,4.02,2277,5.662,2278,5.662,2279,3.568,2280,5.662,2281,3.709,2282,3.709,2285,4.02,2286,3.477,2287,4.02,2288,4.02,2289,3.137,2313,8.411,2316,5.662,2334,5.662,2349,5.662,2350,4.492,2351,4.492,2352,4.492,2353,4.492,2354,6.327,2355,4.492,2356,4.492,2357,4.492,2358,4.492,2359,4.492,2360,4.492,2361,4.492,2362,4.492,2363,6.327]],["title/classes/NgxI18nAbstractService.html",[90,0.463,2364,4.045]],["body/classes/NgxI18nAbstractService.html",[3,0.069,4,0.061,5,0.069,10,0.173,17,0.005,27,0.069,44,2.057,88,0.005,89,0.005,90,0.711,92,4.508,96,0.927,99,5.13,106,2.02,184,1.179,187,0.927,196,1.36,350,3.615,568,3.118,726,2.796,782,2.669,792,7.257,816,5.818,819,6.598,836,4.835,2364,7.29,2365,8.829,2366,7.516,2367,7.516]],["title/interfaces/NgxI18nConfiguration.html",[0,0.078,2368,3.791]],["body/interfaces/NgxI18nConfiguration.html",[0,0.094,2,0.883,3,0.054,4,0.048,5,0.077,10,0.135,11,0.192,12,0.859,16,0.2,17,0.006,27,0.054,32,1.058,34,2.197,37,1.536,88,0.004,89,0.004,96,0.725,102,2.91,152,1.372,180,1.243,200,4.553,203,2.994,236,5.562,237,3.779,255,3.23,308,1.198,333,4.16,379,1.393,408,4.104,652,3.755,819,6.297,836,4.883,1009,3.945,1161,5.301,1232,4.017,1371,4.411,1421,3.508,1531,6.268,1636,5.249,1644,4.411,1734,5.562,2260,5.875,2368,5.875,2369,5.882,2370,5.882,2371,7.333,2372,9.888,2373,8.88,2374,7.333,2375,7.947,2376,6.268,2377,6.793,2378,6.793,2379,8.424,2380,6.268,2381,4.709,2382,7.59,2383,6.507,2384,7.59,2385,6.793,2386,6.202,2387,7.59,2388,7.59,2389,6.793,2390,7.59,2391,7.59,2392,6.268]],["title/components/NgxI18nEmptyComponent.html",[109,0.735,540,2.367]],["body/components/NgxI18nEmptyComponent.html",[3,0.049,4,0.043,5,0.049,17,0.005,19,0.141,27,0.049,28,1.359,47,1.437,55,2.608,64,5.119,88,0.004,89,0.004,90,0.502,96,0.655,106,1.908,109,1.335,179,1.449,180,1.678,182,2.439,205,0.4,292,0.774,293,2.51,294,1.273,298,3.093,361,2.51,478,2.567,479,2.8,480,1.952,481,2.057,484,3.512,485,2.962,507,4.324,509,1.711,514,2.628,515,3.211,516,1.701,517,4.222,518,2.628,519,2.628,520,2.567,521,2.306,522,2.628,523,2.567,524,3.228,525,2.628,526,2.567,527,2.628,528,3.512,529,2.628,530,3.431,531,3.512,532,2.567,533,2.353,534,2.567,535,3.705,536,2.628,537,4.222,538,2.567,539,2.51,540,4.125,541,3.617,542,2.628,543,2.51,544,2.51,545,2.628,546,2.567,547,2.51,548,2.403,549,2.628,550,2.567,551,2.175,552,2.628,553,2.567,554,2.628,555,2.567,556,3.512,557,2.567,558,2.567,559,2.628,560,2.567,561,2.628,562,2.567,563,2.175,564,2.628,565,2.628,566,2.628,567,2.353,568,1.767,569,2.455,570,2.455,571,2.628,572,2.51,573,2.628,574,2.628,575,2.628,576,2.51,577,2.628,578,2.455,579,2.51,580,2.628,581,2.175,582,2.455,583,2.628,584,2.628,585,2.403,586,2.51,587,2.628,588,2.51,589,2.628,590,2.51,591,2.628,592,2.455,593,2.455,594,2.51,595,2.628,596,2.51,597,2.628,598,2.51,599,2.628,600,2.51,601,2.628,602,2.021,603,2.51,604,2.455,605,2.51,606,2.455,607,2.455,608,2.455,609,2.134,610,2.175,611,2.175,612,2.455,613,2.628,614,2.353,615,2.628,616,2.51,617,2.628,618,2.306,619,2.455,620,2.628,621,2.455,622,2.628,623,2.51,624,2.628,625,2.628,2393,5.312,2394,5.312,2395,7.098,2396,5.862,2397,7.098]],["title/injectables/NgxI18nLoadingService.html",[259,1.417,2398,3.791]],["body/injectables/NgxI18nLoadingService.html",[3,0.036,4,0.032,5,0.036,10,0.091,11,0.146,12,0.622,16,0.174,17,0.006,19,0.199,27,0.036,32,1.161,34,2.171,41,2.729,44,2.054,47,1.169,49,1.953,61,2.523,66,2.507,73,1.405,88,0.003,89,0.003,90,0.374,96,0.925,114,3.501,122,2.91,128,3.907,135,2.53,137,1.306,152,1.079,180,1.117,183,1.045,184,1.552,187,1.142,193,1.682,196,1.443,205,0.298,259,1.671,261,1.683,268,3.019,272,0.975,274,3.153,300,1.665,308,1.06,317,1.234,333,2.168,347,1.912,369,2.343,392,2.684,408,2.669,412,3.17,431,2.11,432,3.847,472,5.168,476,1.89,502,3.375,513,2.729,541,2.613,704,1.29,782,2.051,794,2.767,824,2.168,835,2.23,842,2.544,920,3.257,979,3.583,1113,3.715,1188,2.055,1189,1.429,1232,2.613,1257,1.828,1372,4.769,1480,3.936,1636,4.373,1644,5.804,1750,3.081,1930,4.47,2123,4.563,2146,2.23,2380,4.769,2383,5.496,2398,5.28,2399,7.734,2400,7.734,2401,3.955,2402,6.542,2403,6.821,2404,6.821,2405,6.821,2406,6.821,2407,6.821,2408,6.821,2409,5.775,2410,5.775,2411,7.501,2412,5.775,2413,7.501,2414,5.775,2415,3.955,2416,4.47,2417,5.775,2418,6.879,2419,3.955,2420,5.168,2421,3.955,2422,5.168,2423,5.775,2424,3.955,2425,5.775,2426,7.455,2427,3.955,2428,5.775,2429,3.955,2430,5.775,2431,3.955,2432,4.769,2433,3.955,2434,5.775,2435,5.775,2436,5.775,2437,5.775,2438,5.775,2439,5.775,2440,5.775,2441,5.775,2442,5.775,2443,5.775,2444,3.955,2445,3.955,2446,3.955,2447,3.955,2448,5.775,2449,2.762,2450,3.955,2451,2.898,2452,3.54,2453,3.955,2454,3.955,2455,5.775,2456,6.821,2457,2.055,2458,3.955,2459,3.266,2460,3.54,2461,3.54,2462,3.266,2463,3.955,2464,3.955]],["title/classes/NgxI18nMultiTranslationHttpLoader.html",[90,0.463,2465,4.384]],["body/classes/NgxI18nMultiTranslationHttpLoader.html",[3,0.04,4,0.035,5,0.057,10,0.1,11,0.156,12,0.395,16,0.18,17,0.006,19,0.244,27,0.04,32,1.091,34,1.786,36,2.686,37,1.611,38,2.004,42,2.231,44,2.06,49,2.049,61,1.313,68,2.052,83,1.921,88,0.004,89,0.003,90,0.41,92,2.6,96,0.761,106,1.659,114,2.551,118,2.69,134,2.69,135,1.957,152,1.119,180,0.71,183,1.116,184,1.126,187,1.02,193,1.069,195,3.177,196,0.784,205,0.327,206,1.813,233,2.253,268,2.243,272,1.069,274,3.973,300,1.653,308,0.996,323,4.128,358,2.69,369,2.384,379,1.318,384,3.356,426,2.376,431,2.313,501,1.149,506,2.004,524,1.397,541,1.961,734,2.789,782,2.937,819,4.128,823,2.6,824,3.382,826,1.921,835,2.445,836,3.969,920,2.445,1015,2.519,1141,3.177,1147,3.88,1161,3.028,1186,1.921,1203,3.58,1219,3.48,1249,3.88,1257,2.004,1282,2.048,1319,2.095,1392,3.872,1421,2.004,1430,3.028,1480,3.394,1628,5.236,1636,5.341,1644,5.586,1733,3.58,1734,4.521,1751,5.932,1927,4.521,2006,3.701,2024,3.733,2078,3.88,2123,2.9,2368,5.56,2377,5.522,2378,3.88,2380,3.58,2383,5.735,2385,3.88,2392,5.095,2396,3.58,2398,5.56,2402,5.017,2416,3.356,2422,5.522,2426,6.429,2449,3.028,2459,3.58,2460,3.88,2461,3.88,2465,5.522,2466,8.595,2467,8.595,2468,4.335,2469,4.309,2470,6.17,2471,7.183,2472,9.039,2473,7.183,2474,7.183,2475,5.522,2476,5.522,2477,4.335,2478,6.17,2479,6.17,2480,4.335,2481,5.522,2482,4.335,2483,6.17,2484,4.335,2485,6.17,2486,4.335,2487,5.522,2488,6.17,2489,3.58,2490,5.522,2491,3.88,2492,4.335,2493,4.335,2494,3.88,2495,3.88,2496,4.335,2497,4.335,2498,4.335,2499,4.335,2500,4.335,2501,8.27,2502,4.335,2503,4.335,2504,4.335,2505,4.335,2506,3.88,2507,3.88,2508,6.17,2509,4.335,2510,6.17,2511,4.335,2512,3.028,2513,3.88,2514,4.335,2515,4.335,2516,4.335,2517,3.356,2518,4.335,2519,4.335,2520,4.335,2521,4.335,2522,4.335,2523,4.335,2524,4.335,2525,3.88,2526,4.335,2527,4.335,2528,4.335,2529,4.335,2530,3.88,2531,4.335,2532,4.335,2533,4.335,2534,3.88,2535,2.9,2536,4.335,2537,4.335,2538,4.335,2539,4.335]],["title/injectables/NgxI18nRootService.html",[259,1.417,2540,4.045]],["body/injectables/NgxI18nRootService.html",[3,0.031,4,0.041,5,0.031,7,2.174,10,0.077,11,0.13,12,0.564,16,0.194,17,0.006,19,0.198,27,0.031,31,3.743,32,1.093,34,2.153,37,1.943,42,0.957,44,1.898,47,1.034,49,1.988,61,2.468,66,2.217,73,1.814,88,0.003,89,0.003,90,0.317,96,0.853,99,2.968,106,1.859,133,1.95,137,1.562,152,1.29,162,1.4,180,1.013,183,0.924,184,1.526,187,1.141,193,1.525,196,1.474,203,2.727,205,0.253,233,2.655,234,3.488,259,1.478,261,1.428,268,2.545,272,0.827,300,1.654,308,1.197,317,1.418,323,3.417,332,2.8,369,2.335,379,0.937,408,3.623,412,2.831,425,2.158,428,2.081,467,1.839,492,4.218,501,0.889,502,4.257,506,1.551,541,2.311,662,2.8,716,3.421,726,2.784,782,1.814,792,6.067,816,2.597,819,6.927,823,2.012,832,2.311,833,2.311,834,5.535,844,2.158,960,2.44,979,4.29,1005,1.646,1113,2.158,1186,1.486,1188,1.744,1189,2.234,1232,3.971,1234,3.417,1253,3.003,1257,2.859,1282,4.326,1392,3.878,1413,3.954,1415,3.064,1417,4.078,1418,3.215,1421,2.361,1430,2.343,1480,1.585,1636,2.8,1719,3.743,1750,1.79,1914,3.71,2005,2.158,2019,3.71,2024,1.744,2123,3.417,2169,2.597,2170,2.77,2201,3.71,2368,4.788,2371,5.107,2374,5.107,2375,5.535,2376,7.709,2416,5.352,2451,2.459,2476,4.571,2487,4.571,2494,3.003,2495,3.003,2525,3.003,2535,3.417,2540,4.218,2541,9.335,2542,8.355,2543,3.355,2544,4.218,2545,6.185,2546,6.185,2547,6.185,2548,5.108,2549,6.914,2550,5.108,2551,5.108,2552,5.108,2553,5.108,2554,3.355,2555,6.914,2556,3.355,2557,3.681,2558,5.244,2559,5.108,2560,3.355,2561,5.108,2562,3.355,2563,6.185,2564,5.108,2565,5.108,2566,3.355,2567,4.218,2568,3.355,2569,3.355,2570,5.108,2571,3.355,2572,3.355,2573,3.355,2574,3.355,2575,3.355,2576,3.355,2577,3.003,2578,3.355,2579,3.003,2580,6.914,2581,3.355,2582,3.355,2583,3.355,2584,3.355,2585,3.355,2586,7.441,2587,3.355,2588,3.568,2589,3.003,2590,5.108,2591,3.355,2592,3.355,2593,3.355,2594,3.355,2595,3.355,2596,3.355,2597,3.355,2598,3.355,2599,3.355,2600,3.003]],["title/injectables/NgxI18nService.html",[259,1.417,2601,4.045]],["body/injectables/NgxI18nService.html",[3,0.041,4,0.036,5,0.041,10,0.102,11,0.159,12,0.813,16,0.189,17,0.006,19,0.222,27,0.041,32,1.016,34,2.508,40,7.271,44,2.019,49,0.966,76,3.673,88,0.003,89,0.003,90,0.421,96,1.03,99,3.652,137,1.49,152,1.352,180,1.296,183,1.137,184,1.556,187,1.141,193,2.059,196,1.779,205,0.335,206,1.307,207,3.673,245,1.051,259,1.818,261,1.893,268,2.782,272,1.097,300,1.503,308,1.103,317,0.805,343,2.201,369,1.822,379,1.74,501,1.179,524,2.347,717,3.462,726,2.361,782,2.966,792,5.64,810,3.898,816,3.443,819,6.664,1189,2.27,1232,4.243,1238,4.389,1282,2.969,1392,3.917,1398,5.624,1430,4.389,1636,4.988,1644,4.601,1930,4.864,2184,3.352,2364,5.189,2371,6.016,2374,6.016,2376,5.189,2469,4.389,2475,5.624,2489,3.673,2540,6.016,2542,3.981,2601,5.189,2602,4.449,2603,6.284,2604,6.284,2605,7.286,2606,7.286,2607,9.1,2608,7.286,2609,6.284,2610,6.284,2611,4.449,2612,6.284,2613,4.449,2614,4.449,2615,4.449,2616,6.284,2617,4.449,2618,6.284,2619,4.449,2620,6.284,2621,4.449,2622,6.284,2623,4.449,2624,6.284,2625,4.449,2626,4.449,2627,4.449,2628,4.449,2629,4.449,2630,4.449,2631,4.449,2632,4.449,2633,4.449,2634,6.284,2635,6.284,2636,4.449,2637,4.449,2638,4.449,2639,4.449]],["title/injectables/NgxI18nTranslationLoaderResolver.html",[259,1.417,2640,4.384]],["body/injectables/NgxI18nTranslationLoaderResolver.html",[3,0.054,4,0.047,5,0.054,10,0.134,11,0.191,16,0.164,17,0.006,19,0.235,27,0.054,32,1.052,42,1.662,44,1.358,47,1.528,49,1.99,55,2.142,88,0.004,89,0.004,90,0.551,96,0.719,114,2.071,137,0.955,183,1.365,184,1.312,187,1.032,196,1.055,205,0.439,253,4.272,259,2.184,261,2.481,268,2.613,271,2.345,272,1.437,300,1.628,308,0.96,369,2.349,392,2.431,501,1.544,506,2.695,704,1.685,782,2.68,783,4.682,824,4.587,827,3.9,828,5.192,836,3.75,960,2.977,1153,5.53,1189,2.726,1234,5.049,1392,4.379,1403,5.53,1644,5.554,1734,5.53,1750,4.026,2392,6.232,2398,7.096,2402,6.675,2416,4.513,2420,6.754,2481,6.754,2601,7.569,2640,7.92,2641,5.83,2642,5.842,2643,7.547,2644,6.232,2645,7.547,2646,7.547,2647,8.85,2648,6.232,2649,7.489,2650,7.489,2651,6.754,2652,8.368,2653,8.368,2654,8.85,2655,5.83,2656,5.83,2657,7.547,2658,5.83,2659,7.547,2660,7.547,2661,5.83,2662,5.83]],["title/interfaces/NgxImageMarkerBase.html",[0,0.078,2663,3.421]],["body/interfaces/NgxImageMarkerBase.html",[0,0.147,2,0.877,3,0.054,4,0.047,5,0.054,10,0.134,11,0.192,12,0.69,15,3.095,16,0.2,17,0.006,19,0.222,27,0.088,29,1.135,37,1.526,81,2.514,88,0.004,89,0.004,137,1.238,171,1.786,190,2.555,194,1.797,268,2.616,272,1.441,300,1.013,308,1.127,317,1.057,392,2.435,656,3.494,704,1.871,726,2.254,731,2.576,794,2.289,802,2.762,837,4.143,1009,3.038,1140,3.204,1460,2.962,1506,2.59,1649,5.312,1945,4.727,2180,3.204,2279,3.296,2663,6.187,2664,4.283,2665,4.283,2666,6.398,2667,6.491,2668,5.539,2669,4.863,2670,5.28,2671,3.91,2672,6.484,2673,5.28,2674,3.91,2675,5.057,2676,3.91,2677,3.296,2678,4.082,2679,4.283,2680,5.496,2681,4.082,2682,4.283,2683,4.283,2684,4.082,2685,5.28,2686,4.283,2687,5.28,2688,5.057,2689,5.057,2690,5.057,2691,3.91]],["title/components/NgxImageMarkerComponent.html",[109,0.735,543,2.314]],["body/components/NgxImageMarkerComponent.html",[3,0.025,4,0.022,5,0.025,10,0.061,11,0.108,12,0.732,16,0.183,17,0.006,19,0.178,27,0.025,28,1.28,32,1.084,37,1.746,42,1.525,44,0.623,47,1.575,49,1.825,55,0.983,61,1.62,72,1.657,73,0.95,88,0.002,89,0.002,90,0.405,96,0.754,109,1.004,133,1.554,174,1.296,179,0.729,180,1.557,183,0.774,184,1.525,187,1.187,193,0.659,194,2.467,196,1.106,205,0.201,206,1.257,234,1.508,238,2,272,0.659,292,0.39,293,1.264,294,0.641,298,3,300,1.722,304,1.336,308,1.069,317,1.355,319,4.351,320,3.016,334,1.719,341,2.159,361,1.264,366,2.37,369,2.293,373,2.708,379,1.121,392,2.298,399,3.578,411,2.393,412,2.96,478,1.293,479,1.688,480,0.983,481,1.036,484,2.117,485,1.786,501,0.708,506,1.236,507,3.37,509,1.379,513,2.022,514,1.323,515,1.936,516,1.465,517,3.024,518,1.323,519,1.323,520,1.293,521,1.161,522,1.323,523,1.293,524,2.902,525,1.323,526,1.293,527,1.323,528,2.117,529,1.323,530,2.068,531,2.117,532,1.293,533,1.185,534,1.293,535,2.654,536,1.323,537,3.024,538,1.293,539,1.264,540,1.293,541,1.21,542,1.323,543,2.888,544,4.423,545,1.323,546,1.293,547,1.264,548,1.21,549,1.323,550,1.293,551,1.095,552,1.323,553,1.293,554,1.323,555,1.293,556,2.117,557,1.293,558,1.293,559,1.323,560,1.293,561,1.323,562,1.293,563,1.095,564,1.323,565,1.323,566,1.323,567,1.185,568,0.889,569,1.236,570,1.236,571,1.323,572,1.264,573,1.323,574,1.323,575,1.323,576,1.264,577,1.323,578,1.236,579,1.264,580,1.323,581,1.095,582,1.236,583,1.323,584,1.323,585,1.21,586,1.264,587,1.323,588,1.264,589,1.323,590,1.264,591,1.323,592,1.236,593,1.236,594,1.264,595,1.323,596,1.264,597,1.323,598,1.264,599,1.323,600,1.264,601,1.323,602,1.018,603,1.264,604,1.236,605,1.264,606,1.236,607,1.236,608,1.236,609,1.075,610,1.095,611,1.095,612,1.236,613,1.323,614,1.185,615,1.323,616,1.264,617,1.323,618,1.161,619,1.236,620,1.323,621,1.236,622,1.323,623,1.264,624,1.323,625,1.323,636,3.552,644,1.978,656,1.688,662,3.909,665,2.169,674,2.585,704,1.194,717,2.326,726,1.823,731,1.88,734,1.72,751,2.92,783,1.659,794,1.62,826,1.185,832,1.21,833,1.21,910,3.208,948,3.919,952,2.752,953,3.135,983,1.96,1005,1.723,1026,3.533,1062,1.508,1094,1.868,1104,2.282,1140,2.345,1163,3.736,1257,1.236,1319,2.585,1383,3.108,1413,3.312,1415,2.566,1417,2.932,1418,1.39,1421,1.236,1422,1.96,1480,2.022,1517,2.07,1569,2.472,1649,3.35,1750,1.427,1876,2.566,1914,1.604,1918,3.791,1945,3.888,1947,1.355,1954,2.78,1961,1.789,2019,1.604,2180,2.345,2286,3.312,2309,2.393,2666,4.473,2669,4.817,2672,6.083,2673,1.868,2674,1.789,2675,1.789,2677,3.016,2678,1.868,2681,1.868,2684,4.981,2685,1.868,2687,4.981,2689,1.789,2691,3.578,2692,9.662,2693,8.647,2694,2.674,2695,3.829,2696,4.417,2697,4.279,2698,6.686,2699,5.349,2700,7.78,2701,6.686,2702,5.349,2703,5.349,2704,6.686,2705,5.349,2706,6.686,2707,6.686,2708,7.131,2709,6.113,2710,3.829,2711,4.279,2712,4.279,2713,4.279,2714,4.417,2715,4.279,2716,4.279,2717,5.349,2718,4.279,2719,4.787,2720,4.279,2721,4.279,2722,4.417,2723,4.279,2724,2.674,2725,3.312,2726,2.674,2727,4.279,2728,2.674,2729,2.674,2730,2.674,2731,3.312,2732,2.674,2733,4.279,2734,2.674,2735,4.417,2736,4.279,2737,2.674,2738,2.674,2739,2.674,2740,2.674,2741,4.279,2742,2.674,2743,2.208,2744,2.393,2745,2.393,2746,2.393,2747,2.208,2748,4.279,2749,6.686,2750,2.674,2751,4.279,2752,2.674,2753,2.674,2754,2.674,2755,2.674,2756,2.674,2757,2.674,2758,2.674,2759,4.279,2760,2.07,2761,4.279,2762,2.674,2763,2.674,2764,2.674,2765,2.674,2766,2.674,2767,2.674,2768,2.674,2769,2.674,2770,2.674,2771,4.279,2772,2.674,2773,4.279,2774,2.674]],["title/interfaces/NgxImageMarkerConfiguration.html",[0,0.078,2676,3.277]],["body/interfaces/NgxImageMarkerConfiguration.html",[0,0.142,2,0.799,3,0.049,4,0.043,5,0.049,10,0.122,11,0.18,12,0.9,16,0.213,17,0.006,19,0.213,27,0.086,29,1.375,37,1.856,81,2.841,88,0.004,89,0.004,96,0.657,137,1.399,144,3.792,171,1.68,190,2.403,194,1.637,268,2.499,272,1.313,300,1.233,308,1.209,317,0.963,392,2.579,656,2.1,704,2.045,726,2.387,731,2.737,794,2.424,802,2.515,837,3.897,1009,3.695,1140,2.918,1460,2.698,1506,2.359,1649,5.206,1945,4.736,2180,2.918,2279,3.002,2663,5.59,2664,3.901,2665,3.901,2666,6.255,2667,6.259,2668,5.21,2669,4.573,2670,4.965,2671,3.562,2672,6.601,2673,5.966,2674,3.562,2675,5.715,2676,4.756,2677,4.009,2678,5.966,2679,5.21,2680,5.893,2681,5.966,2682,5.21,2683,6.259,2684,5.966,2685,5.59,2686,5.21,2687,6.395,2688,4.756,2689,4.756,2690,4.756,2691,3.562]],["title/interfaces/NgxImageMarkerEdit.html",[0,0.078,2690,3.277]],["body/interfaces/NgxImageMarkerEdit.html",[0,0.147,2,0.884,3,0.054,4,0.048,5,0.054,10,0.135,11,0.193,12,0.693,16,0.194,17,0.006,19,0.223,27,0.088,29,1.14,37,1.538,81,2.527,88,0.004,89,0.004,137,1.244,171,1.987,190,2.568,194,1.811,268,2.872,272,1.452,300,1.021,308,1.13,317,1.065,392,2.447,656,2.323,704,1.878,726,2.266,731,2.586,794,2.3,802,2.783,837,4.164,1009,3.061,1140,3.228,1460,2.985,1506,2.609,1649,5.32,1945,4.673,2180,3.228,2279,3.321,2663,6.205,2664,4.316,2665,4.316,2666,6.152,2667,6.51,2668,5.567,2669,4.887,2670,5.306,2671,3.94,2672,6.494,2673,5.306,2674,3.94,2675,5.082,2676,3.94,2677,3.321,2678,4.114,2679,4.316,2680,5.512,2681,4.114,2682,4.316,2683,4.316,2684,4.114,2685,5.306,2686,4.316,2687,5.306,2688,5.082,2689,6.152,2690,5.626,2691,3.94]],["title/injectables/NgxImageMarkerService.html",[259,1.417,2735,4.045]],["body/injectables/NgxImageMarkerService.html",[3,0.027,4,0.024,5,0.027,10,0.067,11,0.117,12,0.638,16,0.162,17,0.006,19,0.206,27,0.027,32,0.897,34,2.495,37,2.48,42,2.213,44,2.008,49,2.15,50,1.758,54,2.082,55,1.691,61,2.35,74,0.975,88,0.002,89,0.002,90,0.435,96,0.915,102,3.672,133,1.704,135,1.46,137,1.353,152,1.004,162,1.921,180,1.145,183,0.833,184,0.891,187,0.991,193,1.724,194,2.694,196,1.342,205,0.221,206,0.861,223,2.421,238,3.09,240,2.048,259,1.332,261,1.248,268,2.581,271,1.966,272,0.723,300,1.466,308,0.586,311,1.83,317,0.833,332,2.522,333,1.607,339,4.305,366,2.039,369,2.332,373,2.851,379,0.844,392,0.945,412,2.661,476,2.106,501,0.777,507,1.385,516,2.199,524,2.5,543,2.174,544,4.74,652,1.45,656,2.758,683,4.498,717,1.115,731,1.979,734,1.886,746,2.421,764,1.556,782,1.634,794,2.433,802,2.684,805,4.31,827,1.961,828,3.524,839,2.048,842,4.774,921,2.392,1005,2.073,1009,2.392,1062,3.629,1104,3.433,1140,2.522,1188,1.524,1189,2.052,1257,1.355,1282,2.174,1295,2.148,1355,3.372,1371,1.704,1383,3.301,1403,2.148,1415,2.76,1417,1.607,1418,1.524,1421,1.355,1480,1.385,1506,2.039,1569,2.127,1606,2.048,1649,3.114,1714,4.691,1750,1.564,1755,1.961,1759,4.163,1792,2.269,1918,3.506,1945,4.511,1947,2.333,1961,3.079,1963,1.961,2006,2.76,2019,2.76,2237,2.421,2279,3.629,2666,3.801,2669,3.654,2670,2.048,2671,3.801,2672,6.732,2674,1.961,2676,5.658,2688,4.305,2689,4.965,2690,4.305,2691,3.801,2693,7.396,2695,4.119,2719,8.454,2722,4.691,2725,4.981,2735,3.8,2775,8.265,2776,2.932,2777,4.602,2778,5.681,2779,5.681,2780,4.602,2781,4.602,2782,5.681,2783,2.932,2784,8.265,2785,9.178,2786,2.932,2787,7.421,2788,2.932,2789,2.932,2790,4.602,2791,6.436,2792,2.932,2793,4.602,2794,4.602,2795,7.421,2796,2.932,2797,2.932,2798,2.932,2799,2.932,2800,2.932,2801,2.932,2802,2.932,2803,2.932,2804,2.932,2805,2.932,2806,2.932,2807,2.932,2808,2.932,2809,2.932,2810,4.602,2811,4.602,2812,2.932,2813,5.681,2814,6.436,2815,4.602,2816,4.602,2817,2.932,2818,4.602,2819,2.932,2820,2.932,2821,2.932,2822,2.932,2823,2.932,2824,2.148,2825,2.932,2826,2.932,2827,4.602,2828,2.932,2829,2.932,2830,2.932,2831,2.932,2832,2.624,2833,2.932,2834,2.932,2835,2.932,2836,2.932,2837,2.932,2838,2.932,2839,2.624,2840,2.932,2841,2.932,2842,2.932,2843,2.932,2844,5.681,2845,2.932,2846,5.681,2847,2.932,2848,2.932,2849,2.932,2850,2.932,2851,2.932,2852,1.961,2853,2.932,2854,2.932,2855,2.932,2856,2.932,2857,2.455,2858,4.602,2859,4.119,2860,4.602,2861,2.932,2862,2.421,2863,2.932,2864,2.932,2865,2.932,2866,2.932]],["title/interfaces/NgxImageMarkerTypes.html",[0,0.078,2675,3.277]],["body/interfaces/NgxImageMarkerTypes.html",[0,0.146,2,0.871,3,0.053,4,0.047,5,0.053,10,0.133,11,0.191,12,0.686,16,0.199,17,0.006,19,0.222,27,0.088,29,1.129,37,1.515,81,2.502,88,0.004,89,0.004,96,0.715,137,1.232,171,1.777,190,2.543,194,2.313,268,2.607,272,1.43,300,1.006,308,1.124,317,1.049,392,2.423,656,2.288,704,1.864,726,2.243,731,2.716,794,2.528,802,2.741,837,4.123,1009,3.015,1140,3.179,1460,3.813,1506,3.333,1649,5.14,1945,4.767,2180,3.179,2279,3.271,2663,5.831,2664,4.251,2665,4.251,2666,6.543,2667,6.473,2668,5.512,2669,4.839,2670,5.254,2671,3.881,2672,6.543,2673,5.254,2674,3.881,2675,5.585,2676,3.881,2677,3.271,2678,4.051,2679,4.251,2680,5.48,2681,4.051,2682,4.251,2683,4.251,2684,4.051,2685,5.254,2686,4.251,2687,5.254,2688,5.032,2689,5.032,2690,5.032,2691,3.881]],["title/interfaces/NgxImageMarkerView.html",[0,0.078,2688,3.277]],["body/interfaces/NgxImageMarkerView.html",[0,0.147,2,0.884,3,0.054,4,0.048,5,0.054,10,0.135,11,0.193,12,0.693,16,0.194,17,0.006,19,0.223,27,0.088,29,1.14,37,1.538,81,2.527,88,0.004,89,0.004,137,1.244,171,1.987,190,2.568,194,1.811,268,2.872,272,1.452,300,1.021,308,1.13,317,1.065,392,2.447,656,2.323,704,1.878,726,2.266,731,2.586,794,2.3,802,2.783,837,4.164,1009,3.061,1140,3.228,1460,2.985,1506,2.609,1649,5.32,1945,4.673,2180,3.228,2279,3.321,2663,6.205,2664,4.316,2665,4.316,2666,6.152,2667,6.51,2668,5.567,2669,4.887,2670,5.306,2671,3.94,2672,6.494,2673,5.306,2674,3.94,2675,5.082,2676,3.94,2677,3.321,2678,4.114,2679,4.316,2680,5.512,2681,4.114,2682,4.316,2683,4.316,2684,4.114,2685,5.306,2686,4.316,2687,5.306,2688,5.626,2689,6.152,2690,5.082,2691,3.94]],["title/directives/NgxIsAuthenticatedDirective.html",[292,0.714,596,2.314]],["body/directives/NgxIsAuthenticatedDirective.html",[3,0.038,4,0.033,5,0.038,10,0.095,11,0.151,16,0.201,17,0.006,19,0.215,27,0.038,29,0.894,32,1.215,38,2.752,42,1.176,47,1.205,48,4.2,49,1.661,55,2.188,61,1.803,73,1.465,82,5.12,83,3.096,88,0.003,89,0.003,90,0.39,96,0.509,174,1.249,179,1.125,183,1.077,184,1.425,187,1.2,191,2.144,196,1.264,205,0.311,206,1.749,238,1.542,245,0.975,272,1.017,292,1.232,294,0.989,298,1.749,300,1.211,304,1.859,308,1.109,317,1.529,324,3.437,338,2.397,341,2.116,366,3.096,368,3.921,369,2.54,373,3.39,392,2.251,412,2.911,424,2.397,501,1.851,509,2.614,513,1.949,596,2.813,704,1.946,717,3.087,719,4.311,726,2.084,826,1.828,960,2.756,962,4.212,984,4.494,1145,5.83,1186,1.828,1222,2.474,1247,6.253,1263,5.329,1474,4.191,1522,1.866,1523,3.571,1894,5.769,1918,3.615,1941,2.881,1945,1.949,1947,2.091,1965,3.83,2074,4.159,2136,4.88,2138,4.88,2139,5.605,2142,5.343,2146,3.94,2165,4.159,2171,4.88,2175,4.159,2177,3.83,2178,2.881,2179,3.83,2180,2.261,2192,2.474,2193,2.559,2201,3.571,2203,2.946,2204,4.363,2206,5.12,2207,5.12,2212,5.12,2220,5.12,2225,5.945,2244,5.12,2246,5.606,2251,5.12,2252,4.363,2449,2.881,2867,9.781,2868,9.781,2869,4.125,2870,8.714,2871,8.113,2872,5.954,2873,5.954,2874,5.954,2875,4.125,2876,4.125,2877,4.125,2878,4.125,2879,4.125,2880,4.125,2881,4.125,2882,4.125,2883,4.125,2884,4.125,2885,6.987,2886,4.125,2887,4.125,2888,4.125,2889,4.125]],["title/interfaces/NgxLinkConfiguration.html",[0,0.078,2890,4.045]],["body/interfaces/NgxLinkConfiguration.html",[0,0.094,2,0.882,3,0.054,4,0.048,5,0.054,10,0.135,11,0.192,12,0.928,16,0.222,17,0.006,19,0.201,27,0.087,37,1.98,88,0.004,89,0.004,96,0.725,106,2.529,109,1.332,114,3.446,152,1.136,205,0.443,230,5.558,231,5.074,245,1.388,308,1.258,339,5.938,382,3.779,392,2.443,515,3.431,516,1.817,581,2.405,631,3.439,704,1.312,865,2.086,1157,4.851,1437,7.337,1438,7.284,1439,3.375,1440,8.421,1441,5.871,1443,4.103,1445,4.547,1446,4.547,1447,4.547,1448,4.547,1453,2.5,1829,3.134,2890,6.263,2891,5.875,2892,7.244,2893,7.943,2894,5.257,2895,5.257,2896,5.257,2897,2.978,2898,5.257,2899,4.851,2900,6.263,2901,5.257]],["title/directives/NgxLinkDirective.html",[292,0.714,598,2.314]],["body/directives/NgxLinkDirective.html",[3,0.028,4,0.025,5,0.028,10,0.109,11,0.12,12,0.718,16,0.205,17,0.006,19,0.175,27,0.028,32,1.214,35,4.21,37,2.056,42,0.869,44,1.105,47,0.96,49,1.947,61,1.437,66,1.323,73,1.685,74,1.014,83,2.912,88,0.003,89,0.003,90,0.449,92,4.524,96,0.376,101,1.473,106,1.566,109,1.222,135,2.259,137,1.076,179,0.831,183,0.858,184,1.472,187,1.165,194,1.791,196,0.858,205,0.23,206,1.394,230,2.234,231,5.046,233,2.466,234,2.676,237,1.297,238,2.178,245,0.72,254,3.673,292,0.958,294,0.73,298,1.394,300,1.743,304,1.482,308,1.222,317,1.189,334,1.225,339,3.174,341,1.764,367,4.524,369,1.457,379,0.87,380,2.039,382,3.747,467,1.671,476,1.907,501,1.543,516,1.808,524,2.952,581,1.248,598,2.242,631,1.942,637,4.228,672,3.61,704,0.681,717,1.805,726,0.909,731,1.791,751,3.501,805,2.193,807,4.591,865,2.53,902,1.473,962,4.429,977,3.052,1005,2.295,1022,3.897,1032,5.513,1088,4.509,1089,3.673,1103,3.673,1157,7.061,1186,1.351,1295,2.234,1392,4.029,1437,7.353,1438,4.509,1439,3.031,1441,3.673,1443,5.5,1445,5.088,1446,3.673,1447,3.673,1448,3.673,1450,2.517,1453,2.479,1462,4.246,1469,5.213,1470,5.213,1473,6.374,1474,4.272,1475,5.883,1485,4.975,1486,4.246,1487,4.246,1490,4.246,1494,6.374,1495,2.728,1506,2.581,1508,4.268,1510,5.428,1514,2.846,1515,3.918,1517,3.673,1519,4.246,1522,2.635,1523,2.846,1526,2.728,1527,4.246,1528,2.728,1529,2.728,1530,2.728,1531,2.517,1532,2.517,1533,4.246,1534,4.246,1535,2.728,1536,4.246,1537,2.728,1538,2.728,1539,2.359,1540,2.728,1546,2.728,1547,4.246,1551,7.047,1552,5.883,1553,4.246,1554,2.728,1555,2.728,1556,2.359,1557,2.728,1558,2.728,1559,2.517,1560,5.213,1561,2.517,1562,2.728,1563,2.728,1564,2.728,1565,2.728,1829,3.107,2890,4.81,2892,7.215,2893,2.728,2894,2.728,2895,2.728,2896,2.728,2897,2.952,2898,5.213,2899,4.81,2900,3.918,2901,2.728,2902,3.048,2903,8.365,2904,4.744,2905,5.825,2906,6.75,2907,4.744,2908,4.744,2909,3.048,2910,3.048,2911,4.744,2912,6.573,2913,6.573,2914,3.048,2915,4.744,2916,3.048,2917,4.744,2918,3.048,2919,3.048,2920,3.048,2921,3.048,2922,4.744,2923,3.048,2924,4.744,2925,3.048,2926,3.048,2927,3.048,2928,3.048,2929,4.744,2930,4.744,2931,3.048,2932,4.744,2933,3.048,2934,3.048,2935,3.048]],["title/interfaces/NgxMediaQuery.html",[0,0.078,2936,3.791]],["body/interfaces/NgxMediaQuery.html",[0,0.123,2,1.155,3,0.071,4,0.062,5,0.071,10,0.177,11,0.227,16,0.195,17,0.005,27,0.071,88,0.005,89,0.005,152,1.358,271,2.582,2386,6.806,2936,6.927,2937,7.692,2938,7.692]],["title/directives/NgxMediaQueryDirective.html",[292,0.714,600,2.314]],["body/directives/NgxMediaQueryDirective.html",[3,0.034,4,0.03,5,0.034,10,0.085,11,0.139,16,0.201,17,0.006,19,0.193,27,0.034,29,0.554,32,1.287,38,2.536,42,1.564,47,1.569,48,4.118,49,1.877,55,2.665,57,1.601,61,1.661,73,1.31,82,5.954,83,2.902,88,0.003,89,0.003,90,0.349,96,0.455,139,1.539,174,1.661,179,1.006,183,0.992,184,1.448,187,1.199,191,2.851,196,1.185,205,0.278,206,1.612,238,1.379,272,0.909,292,1.184,294,0.884,298,1.612,300,1.601,304,1.713,308,1.208,317,1.47,332,2.022,338,2.143,341,1.661,358,4.063,366,2.902,367,4.619,368,3.746,369,2.032,373,3.213,379,1.586,392,2.11,402,3.403,412,2.759,424,2.143,471,5.07,501,0.977,506,1.705,509,2.846,513,2.592,600,2.592,704,1.731,717,2.949,719,4.447,722,2.576,726,2.423,826,2.431,906,2.855,960,2.583,962,4.345,1005,1.767,1028,3.806,1062,2.08,1072,3.806,1073,3.188,1104,2.926,1105,2.288,1333,3.529,1474,3.928,1522,2.963,1523,3.29,1607,4.53,1918,3.663,1941,3.831,1945,3.663,1947,1.87,1954,1.917,1963,2.468,1965,4.213,1982,2.373,2047,3.831,2068,4.53,2069,2.703,2070,2.703,2074,3.831,2076,2.855,2136,4.574,2138,4.574,2139,5.412,2142,5.065,2146,3.693,2153,4.246,2165,3.831,2171,4.574,2175,2.576,2177,3.529,2178,2.576,2179,3.529,2180,2.022,2192,2.212,2193,2.288,2201,3.29,2203,2.714,2204,4.02,2207,4.799,2212,4.799,2225,5.68,2244,4.02,2246,4.799,2250,4.53,2251,4.02,2252,4.02,2386,6.371,2747,3.046,2936,6.513,2939,9.769,2940,8.743,2941,3.689,2942,4.909,2943,4.53,2944,6.549,2945,7.752,2946,7.752,2947,6.549,2948,5.486,2949,5.486,2950,3.689,2951,3.689,2952,3.689,2953,3.689,2954,3.689,2955,3.689,2956,3.689,2957,4.799,2958,5.486,2959,3.689,2960,3.689,2961,3.689,2962,3.689,2963,3.689,2964,3.689,2965,3.689,2966,3.689,2967,3.689,2968,3.689,2969,3.689,2970,3.689,2971,3.689,2972,4.909]],["title/injectables/NgxMediaQueryService.html",[259,1.417,2957,3.589]],["body/injectables/NgxMediaQueryService.html",[3,0.037,4,0.032,5,0.037,7,3.208,10,0.092,11,0.148,12,0.763,16,0.188,17,0.006,19,0.213,27,0.037,32,1.233,34,1.684,38,1.847,42,2.284,44,1.756,47,1.178,49,2.074,54,1.808,61,2.282,68,1.935,73,2.437,82,2.928,88,0.003,89,0.004,90,0.378,96,0.846,106,1.564,137,0.654,152,1.131,180,0.953,183,1.053,184,1.414,187,1.112,193,1.435,194,1.789,196,1.241,205,0.301,206,1.174,233,3.024,234,3.282,237,2.476,238,1.494,259,1.684,261,1.701,268,2.501,271,2.459,272,0.985,300,1.627,308,1.098,317,1.364,349,2.254,366,2.578,369,2.347,373,3.34,377,2.479,379,1.259,408,2.69,428,2.479,471,6.201,476,1.905,501,1.059,502,3.963,533,2.578,704,0.892,726,2.389,731,1.229,764,1.351,782,2.067,794,2.282,823,2.397,824,2.19,832,1.808,833,1.808,839,2.791,960,2.707,974,4.858,981,4.504,1005,1.875,1059,3.3,1062,3.282,1104,3.66,1186,1.771,1188,2.077,1189,1.443,1217,2.19,1219,3.282,1257,3.172,1285,3.893,1383,3.987,1392,2.879,1415,3.49,1417,4.391,1418,2.077,1421,2.69,1422,2.928,1430,2.791,1607,5.666,1719,2.928,1750,2.132,1759,6.608,1792,6.472,1801,3.3,1914,2.397,2174,3.093,2386,6.72,2457,2.077,2469,5.264,2512,4.793,2588,2.791,2677,3.282,2824,2.928,2936,6.98,2940,8.199,2942,6.141,2943,6.224,2957,5.523,2972,5.208,2973,9.161,2974,3.996,2975,5.208,2976,7.915,2977,8.361,2978,8.011,2979,5.819,2980,5.819,2981,5.819,2982,3.996,2983,3.996,2984,5.819,2985,3.996,2986,5.208,2987,3.996,2988,5.819,2989,3.996,2990,5.819,2991,3.996,2992,3.996,2993,4.805,2994,3.996,2995,3.996,2996,3.996,2997,3.996,2998,6.141,2999,3.996,3000,3.3,3001,3.093,3002,3.996,3003,5.819,3004,3.576,3005,3.996,3006,5.819,3007,3.576,3008,3.576,3009,3.996,3010,3.996,3011,3.381,3012,3.996,3013,3.996,3014,3.996,3015,3.996,3016,3.996,3017,3.996,3018,3.996,3019,3.996]],["title/injectables/NgxMediaQueryService-1.html",[259,1.179,1009,2.117,2957,2.985]],["body/injectables/NgxMediaQueryService-1.html",[3,0.034,4,0.03,5,0.034,10,0.086,11,0.14,12,0.505,16,0.178,17,0.006,19,0.175,27,0.034,29,0.83,32,1.275,34,1.601,36,1.395,42,2.22,44,1.289,61,2.729,68,2.425,74,2.425,88,0.003,89,0.003,90,0.353,96,0.813,102,2.737,106,1.487,134,5.902,139,1.557,152,1.053,180,0.906,183,1.001,184,1.389,187,1.112,193,1.364,196,1.319,205,0.281,206,1.096,233,3.79,234,3.12,238,2.068,259,1.601,261,1.588,268,2.432,271,2.663,272,0.92,300,1.649,308,0.991,317,1.409,328,2.314,349,4.113,350,3.189,366,2.451,368,2.674,369,2.379,373,3.231,377,4.524,383,3.701,408,3.371,412,2.105,425,2.4,428,2.314,431,1.99,432,3.12,476,2.158,501,0.988,662,3.997,782,3.379,783,2.314,797,2.606,823,3.318,824,5.339,966,2.168,974,4.741,981,7.079,1104,4.352,1112,2.168,1188,1.939,1189,1.347,1257,1.724,1383,3.831,1415,3.318,1417,2.045,1418,1.939,1422,4.054,1719,6.188,1723,3.08,1759,6.188,1792,2.888,1961,3.701,2073,3.339,2282,6.022,2386,7.112,2512,3.864,2530,4.951,2588,4.605,2642,2.888,2760,2.888,2862,3.08,2957,5.707,2975,8.954,2976,8.514,2998,4.951,3000,3.08,3004,3.339,3007,3.339,3008,3.339,3020,8.859,3021,3.731,3022,4.951,3023,3.215,3024,5.532,3025,5.532,3026,7.293,3027,6.593,3028,6.593,3029,6.593,3030,6.593,3031,6.593,3032,5.532,3033,3.731,3034,5.532,3035,5.532,3036,4.951,3037,3.731,3038,4.054,3039,5.532,3040,3.731,3041,5.532,3042,3.731,3043,7.788,3044,3.731,3045,3.731,3046,3.731,3047,3.731,3048,3.731,3049,3.731,3050,3.731,3051,3.731,3052,3.731,3053,3.731,3054,3.731,3055,3.731,3056,3.731,3057,3.731,3058,5.532,3059,5.532,3060,5.532,3061,3.731,3062,3.731,3063,3.731,3064,3.731,3065,3.731,3066,3.731,3067,3.731,3068,3.731,3069,3.731,3070,3.731,3071,3.731,3072,3.731,3073,3.731,3074,3.731,3075,3.731,3076,3.731,3077,3.731,3078,3.731,3079,3.731]],["title/interfaces/NgxMobileLayout.html",[0,0.078,3080,3.791]],["body/interfaces/NgxMobileLayout.html",[0,0.097,2,0.911,3,0.056,4,0.049,5,0.056,10,0.139,11,0.196,12,0.931,16,0.218,17,0.006,19,0.161,27,0.079,37,2.022,48,2.582,88,0.004,89,0.004,96,0.748,144,4.131,194,3.107,205,0.457,247,8.431,533,3.779,547,2.867,663,4.06,702,2.745,1083,5.125,1439,3.111,1453,3.295,1829,5.063,1918,4.774,2201,5.116,2897,4.81,3080,5.994,3081,6.068,3082,6.068,3083,5.994,3084,7.837,3085,7.837,3086,4.238,3087,5.011,3088,5.431,3089,3.904,3090,3.526,3091,6.068,3092,6.068]],["title/components/NgxMobileLayoutComponent.html",[109,0.735,546,2.367]],["body/components/NgxMobileLayoutComponent.html",[3,0.036,4,0.032,5,0.036,7,1.682,10,0.091,11,0.146,12,0.526,16,0.163,17,0.006,19,0.221,27,0.036,28,1.105,32,1.112,49,0.858,88,0.003,89,0.003,90,0.374,96,0.487,102,2.855,106,1.551,109,1.197,179,1.078,180,1.631,183,1.044,184,1.069,187,1.027,196,0.715,205,0.298,206,1.695,292,0.576,293,1.867,294,0.947,298,3.06,300,1.624,308,1.094,317,1.044,361,1.867,367,4.329,379,0.725,449,3.861,467,3.163,478,1.91,479,2.276,480,1.452,481,1.531,484,2.855,485,2.409,501,1.047,506,1.826,507,3.935,509,2.197,514,1.955,515,2.611,516,1.383,517,3.709,518,1.955,519,1.955,520,1.91,521,1.716,522,1.955,523,1.91,524,3.094,525,1.955,526,1.91,527,1.955,528,2.855,529,1.955,530,2.789,531,2.855,532,1.91,533,4.103,534,1.91,535,3.255,536,1.955,537,3.709,538,1.91,539,1.867,540,1.91,541,1.788,542,1.955,543,1.867,544,1.867,545,1.955,546,3.624,547,4.063,548,1.788,549,1.955,550,1.91,551,1.618,552,1.955,553,1.91,554,1.955,555,1.91,556,2.855,557,1.91,558,1.91,559,1.955,560,1.91,561,1.955,562,1.91,563,1.618,564,1.955,565,1.955,566,1.955,567,1.751,568,1.314,569,1.826,570,1.826,571,1.955,572,1.867,573,1.955,574,1.955,575,1.955,576,1.867,577,1.955,578,1.826,579,1.867,580,1.955,581,1.618,582,1.826,583,1.955,584,1.955,585,1.788,586,1.867,587,1.955,588,1.867,589,1.955,590,1.867,591,1.955,592,1.826,593,1.826,594,1.867,595,1.955,596,1.867,597,1.955,598,1.867,599,1.955,600,1.867,601,1.955,602,1.504,603,1.867,604,1.826,605,1.867,606,1.826,607,1.826,608,1.826,609,1.588,610,1.618,611,1.618,612,1.826,613,1.955,614,1.751,615,1.955,616,1.867,617,1.955,618,1.716,619,1.826,620,1.955,621,1.826,622,1.955,623,1.867,624,1.955,625,1.955,637,4.823,672,4.359,704,1.674,716,1.955,719,1.955,731,1.215,964,2.542,966,3.354,1022,4.561,1023,3.255,1024,5.63,1029,6.102,1075,5.165,1093,2.108,1095,2.76,1226,4.823,1235,2.542,1392,2.855,1458,3.624,1480,2.727,1914,2.37,1918,2.727,2069,2.896,2070,2.896,3080,3.059,3083,6.173,3084,4.766,3085,4.766,3093,8.6,3094,7.697,3095,3.952,3096,5.63,3097,6.818,3098,5.771,3099,7.137,3100,7.137,3101,6.818,3102,3.952,3103,5.771,3104,3.952,3105,3.952,3106,5.771,3107,5.771,3108,3.952,3109,5.771,3110,3.952,3111,3.861,3112,5.771,3113,3.952,3114,3.537,3115,3.952,3116,5.771,3117,5.771,3118,5.771,3119,5.771,3120,5.771,3121,5.771,3122,5.771,3123,5.771,3124,5.771]],["title/injectables/NgxMobileLayoutService.html",[259,1.417,3083,3.791]],["body/injectables/NgxMobileLayoutService.html",[3,0.028,4,0.024,5,0.028,7,2.783,10,0.069,11,0.119,12,0.778,16,0.197,17,0.006,19,0.2,22,4.482,23,2.338,27,0.028,29,0.869,32,1.189,34,2.052,37,1.23,42,0.861,44,1.943,47,1.436,48,2.005,49,1.966,55,1.731,61,1.981,73,1.673,74,1.004,81,1.567,88,0.003,89,0.003,90,0.286,96,0.807,109,1.373,135,0.958,137,1.445,180,1.161,183,0.852,184,1.546,187,1.171,193,1.749,194,2.31,196,1.597,203,1.858,205,0.228,211,2.213,237,1.285,247,7.289,259,1.363,261,1.285,268,2.713,272,0.745,300,1.586,308,1.184,317,1.543,323,4.376,335,2.087,350,1.236,367,4.333,369,1.448,379,1.62,412,2.489,428,2.922,467,1.655,476,0.989,501,1.534,502,3.883,515,2.131,516,1.881,533,4.442,547,2.226,656,2.58,671,4.953,672,3.808,702,1.366,704,2.043,712,1.812,716,2.33,717,2.203,726,2.115,731,0.929,783,2.922,810,1.874,823,1.812,824,1.655,825,1.57,826,2.087,832,2.131,833,2.131,839,3.29,840,2.338,920,1.703,956,5.036,966,2.737,992,1.703,1005,1.866,1079,5.063,1083,1.57,1112,1.755,1186,1.338,1188,1.57,1189,1.091,1232,2.959,1257,2.177,1275,3.646,1285,3.151,1413,5.063,1439,1.213,1453,1.285,1458,3.161,1480,3.09,1510,3.89,1745,4.4,1802,5.391,1829,1.611,1843,2.021,1914,5.003,1918,2.226,1944,2.021,2201,1.812,2897,1.531,3080,6.602,3083,5.816,3084,7.043,3085,7.791,3087,2.494,3088,5.854,3094,8.389,3099,5.182,3100,5.182,3125,9.374,3126,3.02,3127,3.89,3128,4.71,3129,4.71,3130,4.71,3131,5.791,3132,5.791,3133,5.791,3134,5.791,3135,5.791,3136,5.791,3137,6.541,3138,6.541,3139,4.71,3140,4.71,3141,6.541,3142,4.71,3143,4.71,3144,4.71,3145,3.02,3146,3.02,3147,4.71,3148,3.02,3149,4.71,3150,3.02,3151,3.02,3152,4.71,3153,3.02,3154,4.71,3155,3.02,3156,4.71,3157,3.02,3158,4.71,3159,4.71,3160,3.02,3161,5.791,3162,3.02,3163,4.71,3164,3.02,3165,4.71,3166,3.02,3167,3.02,3168,4.71,3169,3.02,3170,3.02,3171,3.02,3172,3.02,3173,3.02,3174,2.338,3175,3.02,3176,3.02,3177,4.71,3178,3.02,3179,4.71,3180,3.02,3181,4.71,3182,6.541,3183,3.02,3184,3.02,3185,3.02,3186,3.02,3187,3.02,3188,3.02,3189,3.02,3190,3.02,3191,4.71,3192,4.71,3193,3.02,3194,3.02,3195,3.02,3196,3.02,3197,3.02,3198,3.02,3199,3.02,3200,3.02,3201,3.02,3202,3.02,3203,3.02,3204,3.02,3205,3.02,3206,3.02,3207,3.02,3208,3.02,3209,3.02]],["title/directives/NgxModalAbstractComponent.html",[292,0.714,602,1.864]],["body/directives/NgxModalAbstractComponent.html",[3,0.044,4,0.039,5,0.044,10,0.11,11,0.168,12,0.858,16,0.144,17,0.006,19,0.201,27,0.044,28,1.773,32,1.195,42,2.329,49,1.644,68,1.59,73,1.698,88,0.004,89,0.004,90,0.452,96,0.59,122,2.995,135,1.516,136,3.722,137,1.082,183,1.196,184,1.584,187,1.205,196,1.196,205,0.36,206,1.941,249,3.34,271,2.006,292,0.963,294,1.146,300,1.713,304,2.064,305,3.727,308,1.04,315,2.366,317,1.37,319,4.983,320,5.001,340,2.868,341,2.474,347,3.949,349,4.608,357,5.55,358,2.966,369,2.218,377,2.966,426,3.622,453,4.421,476,2.479,501,1.267,516,2.125,568,2.198,602,2.882,636,4.748,638,6.324,640,5.116,656,2.987,657,5.863,660,5.116,674,4.478,675,4.478,731,1.47,751,3.345,797,3.34,835,2.696,844,3.076,873,4.478,910,4.543,934,5.457,1011,3.504,1015,2.778,1257,3.055,1383,4.401,1415,3.964,1417,2.621,1418,2.485,1421,2.21,1517,3.701,1716,5.129,1755,3.199,2201,2.868,2279,2.696,2824,4.843,2857,3.525,3210,4.781,3211,5.457,3212,8.416,3213,8.416,3214,6.609,3215,6.609,3216,6.609,3217,6.609,3218,4.781,3219,4.781,3220,8.17,3221,5.915,3222,4.781,3223,4.781,3224,4.781,3225,2.696,3226,4.781,3227,3.701,3228,3.199,3229,3.701,3230,3.701,3231,4.279,3232,3.948,3233,5.116,3234,2.778,3235,4.781,3236,4.781,3237,4.781,3238,4.781,3239,3.701,3240,3.948]],["title/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.078,3241,2.846]],["body/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.146,2,0.595,3,0.037,4,0.032,5,0.037,10,0.091,11,0.147,12,0.685,16,0.213,17,0.006,19,0.199,27,0.074,28,1.648,29,1.199,32,0.807,35,1.917,36,2.554,37,1.784,41,1.874,74,1.319,88,0.003,89,0.003,90,0.375,97,1.917,106,1.066,109,1.46,122,1.385,136,2.369,137,1.23,152,1.3,171,1.774,180,1.119,187,0.489,205,0.299,245,0.937,271,1.81,273,1.835,311,1.278,317,0.717,324,3.15,330,2.618,334,1.593,335,2.564,343,1.962,347,3.63,350,1.623,351,2.236,379,1.465,480,1.457,481,1.536,512,1.408,516,1.998,602,1.509,650,3.853,656,2.282,674,1.917,675,2.173,702,1.794,704,1.783,711,3.398,782,1.408,785,4.116,794,1.201,798,2.115,802,1.874,805,1.833,815,2.796,825,3.007,865,2.055,873,2.173,902,4.42,988,4.801,1005,2.573,1114,2.173,1142,2.173,1189,2.09,1218,3.171,1232,1.794,1281,3.55,1282,1.874,1478,2.304,1522,3.398,1569,3.158,1578,3.171,1716,5.297,2024,3.55,2203,1.962,2268,2.173,2457,3.007,2557,1.962,2857,2.115,2897,2.01,3011,2.304,3023,2.304,3225,2.236,3234,3.362,3241,4.364,3242,2.378,3243,5.001,3244,4.097,3245,3.549,3246,3.47,3247,3.47,3248,2.378,3249,3.47,3250,2.304,3251,4.64,3252,4.097,3253,5.285,3254,3.97,3255,2.304,3256,3.47,3257,2.378,3258,3.47,3259,3.47,3260,3.362,3261,3.362,3262,4.097,3263,2.378,3264,4.64,3265,2.304,3266,2.173,3267,2.304,3268,3.97,3269,2.304,3270,2.378,3271,1.874,3272,3.97,3273,2.378,3274,3.362,3275,4.097,3276,2.378,3277,2.304,3278,2.378,3279,2.378,3280,2.378,3281,2.378,3282,2.378,3283,2.378,3284,2.378,3285,2.378,3286,2.378,3287,2.304,3288,2.304,3289,2.304,3290,2.304,3291,3.47,3292,3.47,3293,4.504,3294,3.263,3295,4.116,3296,4.504,3297,4.504,3298,3.47,3299,3.47,3300,3.47,3301,3.47,3302,3.362,3303,3.263,3304,2.173,3305,2.304,3306,3.97,3307,2.304,3308,2.304,3309,2.378,3310,2.378,3311,2.304,3312,3.362,3313,3.362,3314,2.304]],["title/interfaces/NgxModalAriaLabelOptions.html",[0,0.078,3260,2.846]],["body/interfaces/NgxModalAriaLabelOptions.html",[0,0.147,2,0.606,3,0.037,4,0.033,5,0.037,10,0.093,11,0.149,12,0.535,16,0.213,17,0.006,19,0.201,27,0.074,28,1.657,29,1.208,32,0.817,35,1.952,36,2.192,37,1.803,41,1.908,74,1.343,88,0.003,89,0.003,90,0.382,97,1.952,106,1.086,109,1.464,122,1.411,136,2.401,137,1.24,152,1.284,171,1.901,180,0.96,187,0.498,205,0.304,245,0.954,271,1.553,273,1.86,311,1.301,317,0.731,324,3.173,330,2.653,334,1.623,335,1.789,343,1.998,347,3.336,350,1.653,351,2.277,379,1.476,480,1.484,481,1.564,512,1.434,516,1.815,602,1.537,650,3.307,656,2.313,674,1.952,675,2.214,702,1.827,704,1.796,711,3.427,782,1.434,785,3.784,794,1.223,798,2.154,802,1.908,805,1.867,815,2.834,825,3.047,865,1.434,873,2.214,902,4.287,988,4.823,1005,2.789,1114,2.214,1142,2.214,1189,2.118,1218,3.214,1232,1.827,1281,3.588,1282,1.908,1478,2.347,1522,3.427,1569,3.191,1578,2.214,1716,5.272,2024,3.588,2203,1.998,2268,2.214,2457,3.047,2557,1.998,2857,2.154,2897,2.047,3011,2.347,3023,2.347,3225,2.277,3234,2.347,3241,4.402,3242,2.422,3243,5.033,3244,3.517,3246,2.422,3247,2.422,3248,2.422,3249,3.517,3250,2.347,3251,4.675,3252,4.141,3253,5.304,3254,4.011,3255,2.347,3256,3.517,3257,2.422,3258,3.517,3259,3.517,3260,4.011,3261,3.407,3262,4.141,3263,2.422,3264,4.675,3265,2.347,3266,2.214,3267,2.347,3268,4.011,3269,2.347,3270,2.422,3271,1.908,3272,4.011,3273,2.422,3274,3.407,3275,4.141,3276,2.422,3277,2.347,3278,2.422,3279,2.422,3280,2.422,3281,2.422,3282,2.422,3283,2.422,3284,2.422,3285,2.422,3286,2.422,3287,2.347,3288,2.347,3289,2.347,3290,2.347,3291,3.517,3292,3.517,3293,4.543,3294,3.307,3295,4.152,3296,4.543,3297,4.543,3298,3.517,3299,3.517,3300,3.517,3301,3.517,3302,3.407,3303,3.307,3304,2.214,3305,2.347,3306,4.011,3307,2.347,3308,2.347,3309,2.422,3310,2.422,3311,2.347,3312,3.407,3313,3.407,3314,2.347]],["title/interfaces/NgxModalAriaLabelledOptions.html",[0,0.078,3261,2.846]],["body/interfaces/NgxModalAriaLabelledOptions.html",[0,0.147,2,0.606,3,0.037,4,0.033,5,0.037,10,0.093,11,0.149,12,0.535,16,0.213,17,0.006,19,0.201,27,0.074,28,1.657,29,1.208,32,0.817,35,1.952,36,2.192,37,1.803,41,1.908,74,1.343,88,0.003,89,0.003,90,0.382,97,1.952,106,1.086,109,1.464,122,1.411,136,2.401,137,1.24,152,1.284,171,1.901,180,0.96,187,0.498,205,0.304,245,0.954,271,1.553,273,1.86,311,1.301,317,0.731,324,3.173,330,2.653,334,1.623,335,1.789,343,1.998,347,3.336,350,1.653,351,2.277,379,1.476,480,1.484,481,1.564,512,1.434,516,1.815,602,1.537,650,3.307,656,2.313,674,1.952,675,2.214,702,1.827,704,1.796,711,3.427,782,1.434,785,3.784,794,1.223,798,2.154,802,1.908,805,1.867,815,2.834,825,3.047,865,1.434,873,2.214,902,4.287,988,4.823,1005,2.789,1114,2.214,1142,2.214,1189,2.118,1218,3.214,1232,1.827,1281,3.588,1282,1.908,1478,2.347,1522,3.427,1569,3.191,1578,2.214,1716,5.272,2024,3.588,2203,1.998,2268,2.214,2457,3.047,2557,1.998,2857,2.154,2897,2.047,3011,2.347,3023,2.347,3225,2.277,3234,2.347,3241,4.402,3242,2.422,3243,5.033,3244,3.517,3246,2.422,3247,2.422,3248,2.422,3249,3.517,3250,2.347,3251,4.675,3252,4.141,3253,5.304,3254,4.011,3255,2.347,3256,3.517,3257,2.422,3258,3.517,3259,3.517,3260,3.407,3261,4.011,3262,4.141,3263,2.422,3264,4.675,3265,2.347,3266,2.214,3267,2.347,3268,4.011,3269,2.347,3270,2.422,3271,1.908,3272,4.011,3273,2.422,3274,3.407,3275,4.141,3276,2.422,3277,2.347,3278,2.422,3279,2.422,3280,2.422,3281,2.422,3282,2.422,3283,2.422,3284,2.422,3285,2.422,3286,2.422,3287,2.347,3288,2.347,3289,2.347,3290,2.347,3291,3.517,3292,3.517,3293,4.543,3294,3.307,3295,4.152,3296,4.543,3297,4.543,3298,3.517,3299,3.517,3300,3.517,3301,3.517,3302,3.407,3303,3.307,3304,2.214,3305,2.347,3306,4.011,3307,2.347,3308,2.347,3309,2.422,3310,2.422,3311,2.347,3312,3.407,3313,3.407,3314,2.347]],["title/interfaces/NgxModalBaseConfiguration.html",[0,0.078,3302,2.846]],["body/interfaces/NgxModalBaseConfiguration.html",[0,0.147,2,0.608,3,0.037,4,0.033,5,0.037,10,0.093,11,0.149,12,0.536,16,0.213,17,0.006,19,0.201,27,0.074,28,1.659,29,1.209,32,0.819,35,1.959,36,2.198,37,1.806,41,1.915,74,1.348,88,0.003,89,0.003,90,0.383,97,1.959,106,1.089,109,1.465,122,1.416,136,2.407,137,1.242,152,1.259,171,1.793,180,0.963,187,0.5,205,0.305,245,0.958,271,1.557,273,1.864,311,1.306,317,0.733,324,3.178,330,2.659,334,1.628,335,1.796,343,2.005,347,3.343,350,1.659,351,2.285,379,1.478,480,1.489,481,1.57,512,1.439,516,1.818,602,1.542,650,3.315,656,2.319,674,1.959,675,2.221,702,1.833,704,1.799,711,3.433,782,1.439,785,3.791,794,2.095,798,2.162,802,1.915,805,1.873,815,2.841,825,3.055,865,1.439,873,2.221,902,3.893,988,4.827,1005,2.595,1114,2.221,1142,2.221,1189,2.498,1218,3.222,1232,2.659,1281,3.943,1282,1.915,1478,2.355,1522,3.433,1569,3.197,1578,2.221,1716,5.274,2024,3.595,2203,2.005,2268,2.221,2457,3.055,2557,2.005,2857,2.162,2897,2.054,3011,2.355,3023,2.355,3225,2.285,3234,2.355,3241,4.019,3242,2.431,3243,4.149,3244,3.526,3246,2.431,3247,2.431,3248,2.431,3249,3.526,3250,2.355,3251,4.681,3252,4.149,3253,5.308,3254,4.019,3255,2.355,3256,3.526,3257,2.431,3258,3.526,3259,3.526,3260,3.416,3261,3.416,3262,4.149,3263,2.431,3264,4.681,3265,2.355,3266,2.221,3267,2.355,3268,4.019,3269,2.355,3270,2.431,3271,1.915,3272,4.019,3273,2.431,3274,3.416,3275,4.149,3276,2.431,3277,2.355,3278,2.431,3279,2.431,3280,2.431,3281,2.431,3282,2.431,3283,2.431,3284,2.431,3285,2.431,3286,2.431,3287,2.355,3288,2.355,3289,2.355,3290,2.355,3291,3.526,3292,3.526,3293,4.551,3294,3.315,3295,4.159,3296,4.551,3297,4.551,3298,3.526,3299,3.526,3300,3.526,3301,3.526,3302,4.019,3303,4.738,3304,3.222,3305,2.355,3306,4.019,3307,2.355,3308,2.355,3309,2.431,3310,2.431,3311,2.355,3312,3.416,3313,3.416,3314,2.355]],["title/interfaces/NgxModalBaseOptions.html",[0,0.078,3306,2.846]],["body/interfaces/NgxModalBaseOptions.html",[0,0.144,2,0.564,3,0.035,4,0.03,5,0.035,10,0.086,11,0.141,12,0.824,15,2.277,16,0.219,17,0.006,19,0.194,27,0.072,28,1.774,29,1.173,32,1.02,35,1.816,36,2.476,37,1.729,41,2.628,74,1.85,88,0.003,89,0.003,90,0.355,97,1.816,106,1.01,109,1.495,122,1.313,136,2.996,137,1.198,152,1.288,171,1.729,180,1.084,187,0.686,205,0.283,245,0.888,271,1.754,273,2.321,311,1.211,317,0.68,324,3.227,330,2.516,334,1.51,335,1.665,343,1.859,347,3.537,350,2.277,351,3.137,379,1.553,480,1.381,481,1.456,512,1.335,516,1.872,602,2.116,650,3.734,656,2.194,674,1.816,675,2.06,702,2.516,704,1.745,711,3.311,782,1.335,785,4.012,794,1.138,798,2.967,802,1.776,805,1.737,815,2.688,825,3.804,865,1.335,873,2.06,902,3.776,988,4.735,1005,2.517,1114,2.06,1142,3.049,1189,2.392,1218,3.049,1232,1.7,1281,3.804,1282,1.776,1478,3.232,1522,3.311,1569,3.383,1578,2.06,1716,5.282,2024,4.251,2203,1.859,2268,2.06,2457,3.441,2557,2.752,2857,2.967,2897,1.905,3011,3.232,3023,2.184,3225,2.119,3234,2.184,3241,3.848,3242,2.254,3243,3.972,3244,3.972,3245,3.363,3246,2.254,3247,2.254,3248,2.254,3249,3.336,3250,2.184,3251,4.54,3252,3.972,3253,5.282,3254,3.848,3255,2.184,3256,3.336,3257,2.254,3258,3.336,3259,3.336,3260,3.232,3261,3.232,3262,3.972,3263,2.254,3264,4.54,3265,2.184,3266,2.06,3267,2.184,3268,3.848,3269,2.184,3270,2.254,3271,1.776,3272,3.848,3273,2.254,3274,3.232,3275,4.686,3276,2.254,3277,2.184,3278,2.254,3279,2.254,3280,2.254,3281,2.254,3282,2.254,3283,2.254,3284,2.254,3285,2.254,3286,2.254,3287,2.184,3288,2.184,3289,2.184,3290,2.184,3291,3.972,3292,3.336,3293,4.39,3294,3.137,3295,4.012,3296,4.39,3297,4.39,3298,3.336,3299,3.336,3300,3.336,3301,3.336,3302,3.232,3303,3.137,3304,2.06,3305,2.184,3306,4.253,3307,3.232,3308,4.253,3309,3.336,3310,3.336,3311,4.253,3312,3.232,3313,3.232,3314,2.184]],["title/interfaces/NgxModalCDKModalConfiguration.html",[0,0.078,3272,2.846]],["body/interfaces/NgxModalCDKModalConfiguration.html",[0,0.144,2,0.563,3,0.035,4,0.03,5,0.035,10,0.086,11,0.141,12,0.792,16,0.213,17,0.006,19,0.194,27,0.072,28,1.619,29,1.332,32,0.774,35,1.813,36,2.077,37,1.727,41,1.773,74,1.248,88,0.003,89,0.003,90,0.355,97,2.685,106,1.493,109,1.481,122,1.31,136,2.274,137,1.197,152,1.288,171,1.728,180,0.91,187,0.463,205,0.283,245,0.886,271,1.472,273,1.762,311,1.209,317,0.679,324,3.079,330,3.308,334,2.232,335,1.662,343,2.748,347,3.197,350,1.536,351,2.116,379,1.552,480,2.041,481,2.152,512,1.973,516,1.871,602,1.428,650,3.133,656,2.191,674,1.813,675,2.056,702,1.697,704,1.889,711,3.308,782,1.973,785,3.626,794,1.136,798,2.001,802,2.625,805,3.058,815,2.685,825,2.887,865,1.332,873,2.056,902,3.773,988,4.733,1005,2.515,1114,3.045,1142,2.056,1189,2.007,1218,4.008,1232,1.697,1281,3.438,1282,2.625,1478,2.18,1522,4.084,1569,3.38,1578,2.056,1716,5.223,2024,3.438,2203,2.748,2268,3.045,2457,3.438,2557,1.856,2857,2.001,2897,1.902,3011,2.18,3023,3.228,3225,2.116,3234,2.18,3241,3.844,3242,2.25,3243,3.968,3244,3.332,3246,2.25,3247,2.25,3248,2.25,3249,4.386,3250,2.18,3251,5.385,3252,3.968,3253,5.407,3254,3.844,3255,2.18,3256,3.332,3257,2.25,3258,3.332,3259,3.332,3260,3.228,3261,3.228,3262,3.968,3263,2.25,3264,4.537,3265,2.18,3266,2.056,3267,2.18,3268,3.844,3269,2.18,3270,2.25,3271,1.773,3272,4.249,3273,3.332,3274,4.249,3275,4.386,3276,3.332,3277,3.228,3278,3.332,3279,3.332,3280,3.332,3281,3.332,3282,3.332,3283,3.332,3284,3.332,3285,3.332,3286,3.332,3287,3.228,3288,4.249,3289,4.249,3290,2.18,3291,3.332,3292,3.332,3293,4.386,3294,3.133,3295,4.008,3296,4.386,3297,4.386,3298,3.332,3299,3.332,3300,3.332,3301,3.332,3302,3.228,3303,3.133,3304,2.056,3305,2.18,3306,3.844,3307,2.18,3308,2.18,3309,2.25,3310,2.25,3311,2.18,3312,3.228,3313,3.228,3314,2.18]],["title/interfaces/NgxModalComponentConfiguration.html",[0,0.078,3290,2.846]],["body/interfaces/NgxModalComponentConfiguration.html",[0,0.145,2,0.582,3,0.036,4,0.031,5,0.036,10,0.089,11,0.144,12,0.519,16,0.215,17,0.006,19,0.197,27,0.073,28,1.785,29,1.188,32,0.793,35,1.873,36,2.127,37,1.76,41,1.831,74,1.289,88,0.003,89,0.003,90,0.366,97,1.873,106,1.042,109,1.492,122,1.353,136,2.329,137,1.354,152,1.247,171,1.755,180,0.932,187,0.478,205,0.292,245,0.916,271,1.507,273,2.356,311,1.248,317,0.701,324,3.372,330,2.574,334,1.557,335,1.717,343,1.917,347,3.59,350,1.587,351,2.185,379,1.517,480,1.424,481,1.501,512,1.376,516,1.78,602,2.165,650,3.208,656,2.244,674,1.873,675,2.124,702,1.753,704,1.767,711,3.361,782,1.376,785,4.071,794,1.173,798,2.067,802,1.831,805,1.791,815,3.258,825,2.957,865,1.376,873,2.124,902,3.824,988,5.107,1005,2.549,1114,2.124,1142,2.124,1189,2.055,1218,3.118,1232,1.753,1281,3.503,1282,1.831,1478,2.252,1522,3.361,1569,3.433,1578,2.124,1716,5.331,2024,3.503,2203,1.917,2268,2.124,2457,2.957,2557,1.917,2857,2.067,2897,1.964,3011,2.252,3023,2.252,3225,2.185,3234,2.252,3241,3.917,3242,2.324,3243,4.043,3244,3.412,3246,2.324,3247,2.324,3248,2.324,3249,3.412,3250,2.252,3251,4.597,3252,4.745,3253,5.399,3254,4.316,3255,2.252,3256,3.412,3257,2.324,3258,3.412,3259,3.412,3260,3.306,3261,3.306,3262,4.043,3263,2.324,3264,4.597,3265,2.252,3266,2.124,3267,2.252,3268,4.316,3269,2.252,3270,2.324,3271,1.831,3272,3.917,3273,2.324,3274,3.306,3275,4.043,3276,2.324,3277,2.252,3278,2.324,3279,2.324,3280,2.324,3281,2.324,3282,2.324,3283,2.324,3284,2.324,3285,2.324,3286,2.324,3287,2.252,3288,2.252,3289,2.252,3290,3.306,3291,4.043,3292,3.412,3293,4.961,3294,3.802,3295,4.533,3296,4.961,3297,4.961,3298,4.043,3299,4.043,3300,4.043,3301,4.043,3302,3.306,3303,3.208,3304,2.124,3305,2.252,3306,3.917,3307,2.252,3308,2.252,3309,2.324,3310,2.324,3311,2.252,3312,3.306,3313,3.306,3314,2.252]],["title/interfaces/NgxModalComponentOptions.html",[0,0.078,3313,2.846]],["body/interfaces/NgxModalComponentOptions.html",[0,0.146,2,0.587,3,0.036,4,0.032,5,0.036,10,0.09,11,0.145,12,0.523,16,0.217,17,0.006,19,0.198,27,0.073,28,1.641,29,1.192,32,0.798,35,1.89,36,2.142,37,1.77,41,1.848,74,1.301,88,0.003,89,0.003,90,0.37,97,1.89,106,1.051,109,1.478,122,1.366,136,2.345,137,1.359,152,1.25,171,1.876,180,0.938,187,0.482,205,0.295,245,0.924,271,1.518,273,1.817,311,1.26,317,0.708,324,3.381,330,2.592,334,1.572,335,1.733,343,1.935,347,3.276,350,1.601,351,2.206,379,1.457,480,1.437,481,1.515,512,1.389,516,1.788,602,1.488,650,3.23,656,2.259,674,1.89,675,2.144,702,1.77,704,1.773,711,3.376,782,1.389,785,3.715,794,1.184,798,2.086,802,1.848,805,1.808,815,3.276,825,2.977,865,1.389,873,2.144,902,3.838,988,5.115,1005,2.762,1114,2.144,1142,2.144,1189,2.069,1218,3.14,1232,1.77,1281,3.522,1282,1.848,1478,2.273,1522,3.376,1569,3.133,1578,2.144,1716,5.306,2024,3.522,2203,1.935,2268,2.144,2457,2.977,2557,1.935,2857,2.086,2897,1.982,3011,2.273,3023,2.273,3225,2.206,3234,2.273,3241,3.938,3242,2.346,3243,4.065,3244,3.436,3246,2.346,3247,2.346,3248,2.346,3249,3.436,3250,2.273,3251,4.615,3252,4.763,3253,5.407,3254,4.336,3255,2.273,3256,3.436,3257,2.346,3258,3.436,3259,3.436,3260,3.329,3261,3.329,3262,4.065,3263,2.346,3264,4.615,3265,2.273,3266,2.144,3267,2.273,3268,4.336,3269,2.273,3270,2.346,3271,1.848,3272,3.938,3273,2.346,3274,3.329,3275,4.065,3276,2.346,3277,2.273,3278,2.346,3279,2.346,3280,2.346,3281,2.346,3282,2.346,3283,2.346,3284,2.346,3285,2.346,3286,2.346,3287,2.273,3288,2.273,3289,2.273,3290,2.273,3291,3.436,3292,3.436,3293,4.977,3294,3.822,3295,4.548,3296,4.977,3297,4.977,3298,4.065,3299,4.065,3300,4.065,3301,4.065,3302,3.329,3303,3.23,3304,2.144,3305,2.273,3306,4.336,3307,2.273,3308,2.273,3309,2.346,3310,2.346,3311,2.273,3312,3.329,3313,3.938,3314,2.273]],["title/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.078,3264,2.846]],["body/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.145,2,0.582,3,0.036,4,0.031,5,0.036,10,0.089,11,0.144,12,0.83,16,0.215,17,0.006,19,0.197,27,0.073,28,1.636,29,1.384,32,0.793,35,1.873,36,2.127,37,1.76,41,1.831,74,1.289,88,0.003,89,0.003,90,0.538,97,1.873,106,1.042,109,1.455,122,1.353,136,2.329,137,1.216,152,1.295,171,1.755,180,0.932,187,0.478,205,0.292,245,0.916,271,1.507,273,1.804,311,1.833,317,0.701,324,3.121,330,2.574,334,1.557,335,1.717,343,1.917,347,3.258,350,1.587,351,2.185,379,1.452,480,1.424,481,1.501,512,1.376,516,1.78,602,1.474,650,3.208,656,2.93,674,1.873,675,2.124,702,1.753,704,1.958,711,4.115,782,1.376,785,3.695,794,1.173,798,2.067,802,1.831,805,1.791,815,2.75,825,2.957,865,1.376,873,2.124,902,3.824,988,4.773,1005,2.549,1114,2.124,1142,2.124,1189,2.055,1218,3.118,1232,1.753,1281,3.503,1282,1.831,1478,2.252,1522,3.361,1569,3.116,1578,2.124,1716,5.331,2024,3.503,2203,1.917,2268,2.124,2457,2.957,2557,1.917,2857,2.067,2897,2.884,3011,2.252,3023,2.252,3225,2.185,3234,2.252,3241,3.917,3242,2.324,3243,4.043,3244,3.412,3246,2.324,3247,2.324,3248,2.324,3249,3.412,3250,2.252,3251,4.597,3252,4.043,3253,5.261,3254,3.917,3255,2.252,3256,3.412,3257,2.324,3258,3.412,3259,3.412,3260,3.306,3261,3.306,3262,4.043,3263,2.324,3264,4.806,3265,4.316,3266,3.118,3267,4.316,3268,4.316,3269,4.316,3270,3.412,3271,3.51,3272,3.917,3273,2.324,3274,3.306,3275,4.043,3276,2.324,3277,2.252,3278,2.324,3279,2.324,3280,2.324,3281,2.324,3282,2.324,3283,2.324,3284,2.324,3285,2.324,3286,2.324,3287,2.252,3288,2.252,3289,2.252,3290,2.252,3291,3.412,3292,3.412,3293,4.455,3294,3.208,3295,4.071,3296,4.455,3297,4.455,3298,3.412,3299,3.412,3300,3.412,3301,3.412,3302,3.306,3303,3.208,3304,2.124,3305,2.252,3306,3.917,3307,2.252,3308,2.252,3309,2.324,3310,2.324,3311,2.252,3312,3.306,3313,3.306,3314,2.252]],["title/injectables/NgxModalService.html",[259,1.417,3211,4.045]],["body/injectables/NgxModalService.html",[3,0.026,4,0.023,5,0.026,7,2.694,10,0.065,11,0.114,12,0.793,15,2.823,16,0.208,17,0.006,19,0.204,27,0.041,28,0.861,29,0.95,31,4.64,32,1.192,34,2.475,35,4.674,37,2.189,42,2.188,44,2.19,47,1.697,48,1.211,49,2.064,55,1.046,61,1.688,68,1.495,72,1.103,73,1.979,81,2.293,88,0.002,89,0.002,90,0.425,96,1.034,105,4.546,109,1.419,122,2.56,128,2.469,134,2.789,137,1.257,174,0.862,180,1.2,183,0.813,184,1.284,187,1.102,191,1.479,193,2.109,194,2.12,196,1.439,205,0.214,235,4.024,238,1.064,245,0.673,249,3.14,259,1.301,261,1.211,268,2.396,272,0.702,273,1.426,300,1.42,308,0.976,311,0.917,317,1.247,332,1.56,335,1.992,349,4.133,350,1.165,369,2.377,377,2.789,379,1.459,412,1.711,426,2.465,428,1.766,501,0.754,502,2.757,602,2.121,656,2.891,704,1.636,711,1.288,712,1.707,717,2.788,731,0.875,782,1.597,810,1.766,811,6.051,823,2.697,824,3.47,826,1.261,832,2.034,833,2.034,835,2.536,836,1.831,920,1.605,921,4.358,947,3.713,948,3.295,949,2.536,956,4.277,965,2.35,988,3.909,991,3.48,1005,2.638,1015,1.654,1036,1.988,1140,2.465,1186,1.261,1188,1.479,1189,1.028,1217,1.56,1252,4.024,1257,2.078,1333,2.892,1357,2.086,1391,4.024,1460,2.279,1480,3.626,1506,1.261,1514,1.707,1522,1.288,1606,1.988,1716,5.278,1723,2.35,1749,2.35,1750,1.518,1918,3.626,1947,1.443,2019,2.697,2069,2.086,2070,2.086,2072,2.547,2103,2.086,2146,1.605,2279,2.536,2281,2.35,2432,3.713,2451,2.086,2512,4.422,2535,1.904,2600,4.024,2677,2.536,2714,5.228,2725,3.48,2824,2.086,2852,3.008,2857,3.377,3111,1.904,3211,5.693,3212,2.547,3213,2.547,3225,1.605,3227,2.203,3228,1.904,3229,3.48,3230,2.203,3232,2.35,3239,3.48,3250,1.654,3253,3.143,3254,3.239,3265,1.654,3267,1.654,3269,1.654,3271,1.345,3288,1.654,3289,1.654,3295,2.465,3303,2.536,3305,1.654,3308,4.758,3311,1.654,3314,5.193,3315,2.846,3316,5.573,3317,5.573,3318,5.573,3319,5.573,3320,5.573,3321,5.573,3322,4.496,3323,2.846,3324,2.846,3325,2.846,3326,7.504,3327,4.496,3328,7.674,3329,6.894,3330,2.846,3331,4.496,3332,6.331,3333,2.846,3334,2.846,3335,2.846,3336,2.846,3337,4.496,3338,2.846,3339,2.846,3340,4.496,3341,4.496,3342,2.846,3343,4.496,3344,2.846,3345,4.496,3346,2.846,3347,5.666,3348,2.846,3349,2.846,3350,2.846,3351,2.35,3352,2.547,3353,2.35,3354,2.846,3355,2.846,3356,2.846,3357,2.846,3358,2.846,3359,4.496,3360,2.846,3361,2.846,3362,2.846,3363,2.846,3364,2.846,3365,2.846,3366,2.846,3367,7.674,3368,2.846,3369,2.846,3370,2.846,3371,2.846,3372,2.846,3373,2.846,3374,2.846,3375,4.496,3376,2.846,3377,2.846,3378,2.846,3379,2.846,3380,2.846,3381,2.846,3382,2.846,3383,2.846,3384,2.086,3385,2.846,3386,2.846,3387,2.846,3388,2.846,3389,2.846,3390,2.846,3391,4.496,3392,2.846,3393,2.846,3394,4.496,3395,6.331,3396,2.846,3397,4.496,3398,2.846,3399,2.846,3400,2.846,3401,2.846,3402,2.846,3403,2.846,3404,2.846,3405,2.846,3406,2.846,3407,2.846,3408,2.846,3409,2.846,3410,2.846,3411,2.846,3412,2.846,3413,2.846,3414,2.846,3415,2.846,3416,2.846,3417,2.846,3418,2.846,3419,2.846,3420,2.846]],["title/interfaces/NgxModalTypeOptions.html",[0,0.078,3312,2.846]],["body/interfaces/NgxModalTypeOptions.html",[0,0.146,2,0.601,3,0.037,4,0.032,5,0.037,10,0.092,11,0.148,12,0.688,16,0.217,17,0.006,19,0.2,27,0.074,28,1.653,29,1.204,32,0.813,35,1.937,36,2.18,37,1.794,41,1.893,74,1.333,88,0.003,89,0.003,90,0.379,97,1.937,106,1.077,109,1.482,122,1.399,136,2.387,137,1.236,152,1.282,171,1.895,180,0.955,187,0.494,205,0.302,245,0.947,271,1.544,273,1.849,311,1.291,317,0.725,324,3.163,330,2.638,334,1.61,335,1.775,343,1.982,347,3.321,350,1.64,351,2.26,379,1.471,480,1.472,481,1.552,512,1.423,516,1.809,602,1.525,650,3.288,656,2.3,674,1.937,675,2.196,702,1.813,704,1.791,711,3.414,782,1.423,785,3.767,794,1.213,798,2.137,802,1.893,805,1.852,815,2.818,825,3.03,865,1.423,873,2.196,902,3.876,988,5.009,1005,2.907,1114,2.196,1142,2.196,1189,2.106,1218,3.195,1232,1.813,1281,3.572,1282,1.893,1478,2.328,1522,3.414,1569,3.176,1578,2.196,1716,5.266,2024,3.572,2203,1.982,2268,2.196,2457,3.03,2557,1.982,2857,2.137,2897,2.031,3011,2.328,3023,2.328,3225,2.26,3234,2.328,3241,3.993,3242,2.403,3243,4.122,3244,3.497,3246,2.403,3247,2.403,3248,2.403,3249,3.497,3250,2.328,3251,4.66,3252,4.122,3253,5.296,3254,3.993,3255,2.328,3256,3.497,3257,2.403,3258,3.497,3259,3.497,3260,3.388,3261,3.388,3262,4.122,3263,2.403,3264,4.66,3265,2.328,3266,2.196,3267,2.328,3268,3.993,3269,2.328,3270,2.403,3271,1.893,3272,3.993,3273,2.403,3274,3.388,3275,4.122,3276,2.403,3277,2.328,3278,2.403,3279,2.403,3280,2.403,3281,2.403,3282,2.403,3283,2.403,3284,2.403,3285,2.403,3286,2.403,3287,2.328,3288,2.328,3289,2.328,3290,2.328,3291,3.497,3292,3.497,3293,4.527,3294,3.288,3295,4.137,3296,4.527,3297,4.527,3298,3.497,3299,3.497,3300,3.497,3301,3.497,3302,3.388,3303,3.288,3304,2.196,3305,2.328,3306,4.385,3307,2.328,3308,2.328,3309,2.403,3310,2.403,3311,2.328,3312,3.993,3313,3.388,3314,2.328]],["title/injectables/NgxOnlineService.html",[259,1.417,1948,4.045]],["body/injectables/NgxOnlineService.html",[3,0.052,4,0.046,5,0.052,10,0.129,11,0.187,16,0.179,17,0.006,19,0.218,27,0.052,32,1.216,49,1.784,57,3.568,61,2.642,88,0.004,89,0.004,90,0.531,96,0.693,174,2.23,183,1.332,184,1.289,187,1.147,196,1.016,205,0.423,206,1.65,259,2.132,261,2.39,268,2.829,272,1.385,300,1.725,308,1.11,317,1.332,335,3.263,366,3.263,368,3.972,369,2.431,373,3.865,412,3.823,501,1.488,513,3.48,662,4.782,782,2.616,826,3.641,960,3.242,1062,3.167,1188,2.919,1189,2.029,1232,4.348,1257,2.596,1287,6.753,1383,4.776,1415,4.418,1417,3.078,1418,2.919,1419,5.026,1421,2.596,1480,3.48,1750,2.996,1755,3.757,1885,5.877,1898,6.787,1937,4.928,1947,2.847,1948,6.082,1949,8.478,1961,5.836,1984,6.082,1985,4.638,1986,4.638,2760,4.347,3421,9.473,3422,5.616,3423,8.219,3424,7.366,3425,5.616,3426,5.616,3427,7.366,3428,5.616,3429,5.616,3430,7.366,3431,5.616,3432,5.616]],["title/directives/NgxQueryParamFormSyncComponent.html",[292,0.714,603,2.314]],["body/directives/NgxQueryParamFormSyncComponent.html",[0,0.071,3,0.026,4,0.023,5,0.026,7,1.889,10,0.064,11,0.159,12,0.85,15,1.147,16,0.172,17,0.006,19,0.182,20,3.254,21,1.68,27,0.051,28,1.895,32,1.136,34,2.852,36,1.047,40,6.525,42,1.266,44,1.843,49,1.933,50,2.663,54,1.267,55,2.306,57,2.97,61,2.071,64,1.68,66,1.927,76,1.066,83,3.031,88,0.002,89,0.002,90,0.42,96,0.774,97,2.146,104,2.507,106,1.687,107,2.053,109,1.027,135,0.888,137,1.12,139,1.169,152,0.746,162,1.853,171,0.662,174,1.344,177,1.68,180,1.028,183,1.317,184,1.358,187,1.084,193,1.95,194,2.505,195,2.053,196,1.431,200,2.663,203,1.751,205,0.211,206,1.304,209,1.68,218,2.168,233,1.456,237,1.192,240,1.957,255,2.911,268,2.47,272,0.691,274,2.9,292,0.647,294,0.671,298,0.823,300,1.502,308,0.798,317,1.51,323,1.874,324,1.105,332,3.44,333,3.44,335,1.241,350,3.861,358,1.738,366,2.444,367,4.443,368,2.666,369,1.379,373,2.78,379,1.652,382,6.527,383,1.874,389,2.313,392,1.43,412,2.603,424,1.628,425,1.802,449,1.874,501,0.742,513,3.232,524,0.903,535,1.216,568,2.536,603,3.603,637,4.037,708,4.4,716,2.197,726,2.359,766,3.422,797,1.957,823,1.68,825,1.456,826,1.241,832,1.267,833,1.267,835,1.58,839,1.957,840,2.168,949,3.11,960,1.105,966,2.58,1005,0.903,1022,3.69,1062,3.11,1103,2.168,1104,3.347,1113,2.856,1151,3.666,1153,2.053,1163,5.083,1234,6.085,1235,1.802,1281,2.307,1288,2.313,1357,2.053,1372,2.313,1423,2.507,1460,1.42,1480,2.098,1570,4.857,1699,2.313,1703,2.434,1739,2.507,1801,2.313,1873,3.973,1914,1.68,1927,2.053,1937,1.874,1945,3.232,1947,1.42,1954,2.307,1963,1.874,2002,2.168,2103,2.053,2121,3.973,2132,1.957,2146,1.58,2169,6.123,2180,1.535,2192,2.663,2193,1.738,2379,2.507,2381,3.422,2386,3.852,2451,2.053,2534,2.507,2535,3.69,2588,4.383,2744,2.507,2852,1.874,2892,2.053,3089,1.802,3127,2.313,3232,2.313,3295,1.535,3353,2.313,3433,8.904,3434,8.904,3435,2.801,3436,8.904,3437,7.626,3438,6.841,3439,5.515,3440,7.278,3441,6.841,3442,4.44,3443,6.841,3444,2.801,3445,3.973,3446,2.801,3447,9.315,3448,2.801,3449,4.44,3450,2.801,3451,6.275,3452,2.801,3453,2.801,3454,2.801,3455,2.801,3456,6.275,3457,6.275,3458,4.44,3459,2.801,3460,6.122,3461,2.801,3462,2.801,3463,5.515,3464,2.801,3465,2.801,3466,4.44,3467,6.275,3468,2.801,3469,4.44,3470,2.801,3471,4.44,3472,2.801,3473,4.44,3474,2.801,3475,7.278,3476,2.801,3477,2.801,3478,2.801,3479,2.801,3480,2.801,3481,2.801,3482,3.973,3483,2.801,3484,2.801,3485,2.801,3486,2.801,3487,2.801,3488,5.515,3489,2.801,3490,2.801,3491,2.801,3492,4.44,3493,2.801,3494,1.957,3495,2.801,3496,2.801,3497,2.801,3498,2.801,3499,2.801,3500,2.801,3501,2.801,3502,2.801,3503,6.275,3504,5.515,3505,2.801,3506,2.801,3507,2.801,3508,2.801,3509,2.801,3510,2.801,3511,4.44,3512,2.801,3513,2.801,3514,2.801,3515,2.507,3516,2.801,3517,2.801,3518,2.801,3519,2.801,3520,2.801,3521,2.801,3522,2.801,3523,2.801,3524,2.801,3525,2.801,3526,4.44,3527,4.44,3528,2.801,3529,2.801,3530,2.801,3531,2.801,3532,2.801,3533,2.801,3534,2.801,3535,2.801,3536,2.801]],["title/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.078,3537,4.045]],["body/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.139,2,1.094,3,0.067,4,0.059,5,0.067,10,0.167,11,0.22,12,0.791,16,0.213,17,0.005,27,0.088,28,1.395,29,1.389,88,0.005,89,0.005,152,1.342,271,1.931,298,2.814,516,2.295,629,5.091,794,2.626,3537,7.16,3538,6.524,3539,6.524,3540,7.909,3541,8.572,3542,6.524,3543,6.019,3544,5.643]],["title/interfaces/NgxReplaceElementsItem.html",[0,0.078,3544,3.791]],["body/interfaces/NgxReplaceElementsItem.html",[0,0.138,2,1.087,3,0.067,4,0.059,5,0.067,10,0.166,11,0.219,12,0.788,16,0.213,17,0.005,27,0.088,28,1.829,29,1.087,88,0.005,89,0.005,152,1.381,271,2.532,298,2.128,516,1.736,629,6.676,794,2.894,3537,5.982,3538,6.483,3539,6.483,3540,5.982,3541,7.731,3542,6.483,3543,5.982,3544,6.686]],["title/pipes/NgxReplaceElementsPipe.html",[174,1.483,3545,4.384]],["body/pipes/NgxReplaceElementsPipe.html",[3,0.035,4,0.046,5,0.035,7,1.635,11,0.143,12,0.351,16,0.084,17,0.006,19,0.196,27,0.062,28,1.082,32,1.323,34,1.636,37,1.752,41,1.816,42,2.351,44,1.921,47,1.498,49,2.022,50,5.355,51,2.472,55,1.412,61,2.387,66,1.668,74,2.231,75,3.783,88,0.003,89,0.003,90,0.634,96,0.697,97,1.857,98,3.189,106,1.989,109,1.313,136,2.747,137,1.396,152,1.26,174,2.703,176,1.997,177,2.305,179,1.048,180,1.211,182,1.943,183,0.695,184,0.603,185,3.677,186,3.783,187,0.827,193,0.947,194,2.275,195,2.816,196,0.695,200,4.729,203,2.23,204,3.099,205,0.289,206,1.129,211,4.916,237,2.855,238,2.508,241,3.173,250,2.571,255,2.406,271,1.96,298,2.704,300,1.43,304,1.2,308,0.719,322,5.06,323,3.783,324,1.516,328,4.59,341,2.24,358,2.384,369,2.062,379,1.564,425,2.472,426,2.106,428,2.384,431,3.016,432,2.167,467,5.045,479,1.516,501,1.018,509,2.161,512,1.365,515,1.739,516,2.274,524,2.161,544,2.672,629,2.684,652,1.901,702,3.035,717,1.462,731,1.182,746,3.173,764,1.911,775,2.975,783,3.508,805,2.613,832,2.558,833,2.558,837,2.106,865,2.627,920,2.167,960,1.516,962,1.857,964,5.072,966,3.286,974,3.286,1004,3.173,1011,2.816,1113,2.472,1176,3.173,1186,1.703,1189,1.388,1281,1.997,1305,2.305,1354,3.439,1357,4.143,1383,2.233,1392,1.901,1417,3.099,1418,1.997,1421,1.776,1431,2.975,1539,4.377,1571,2.975,1578,2.106,1606,2.684,1636,3.099,1642,5.275,1703,4.055,1755,2.571,2017,2.975,2019,2.305,2024,1.997,2132,2.684,2201,2.305,2279,3.783,2308,2.975,2381,2.384,2396,3.173,2451,4.143,2457,1.997,2462,4.669,2567,3.173,2642,2.975,2677,2.167,2824,2.816,2852,3.783,2859,3.439,2892,6.41,2899,3.173,2900,3.173,2906,7.828,2943,4.669,3001,2.975,3174,2.975,3231,3.439,3240,4.669,3251,3.898,3277,2.233,3295,2.106,3304,2.106,3540,6.109,3543,3.173,3544,5.727,3545,6.004,3546,7.398,3547,7.398,3548,3.843,3549,7.398,3550,7.884,3551,3.843,3552,6.708,3553,6.708,3554,5.654,3555,3.843,3556,5.654,3557,5.654,3558,3.843,3559,3.843,3560,3.843,3561,3.843,3562,7.398,3563,3.843,3564,3.843,3565,3.843,3566,3.843,3567,3.843,3568,6.708,3569,5.654,3570,3.843,3571,3.843,3572,3.843,3573,3.843,3574,3.843,3575,3.843,3576,3.843,3577,3.173,3578,3.843,3579,3.843,3580,3.843,3581,3.843,3582,3.843,3583,3.843,3584,5.654,3585,3.843,3586,3.439,3587,3.843,3588,3.843,3589,3.843,3590,3.843,3591,3.843,3592,3.843,3593,3.843,3594,3.843,3595,5.654,3596,3.439,3597,3.843,3598,3.439,3599,3.843,3600,5.654,3601,3.843,3602,3.439,3603,3.843,3604,3.843,3605,6.708,3606,3.439,3607,5.654,3608,3.843,3609,3.843,3610,3.843,3611,3.843,3612,3.843,3613,3.843,3614,3.843,3615,3.843,3616,3.843,3617,3.843,3618,3.843,3619,3.843,3620,3.843,3621,3.843,3622,3.843,3623,3.843,3624,3.843,3625,3.843,3626,3.843]],["title/classes/NgxSaveOnExitAbstractService.html",[90,0.463,3627,4.384]],["body/classes/NgxSaveOnExitAbstractService.html",[3,0.063,4,0.056,5,0.063,10,0.158,11,0.212,12,0.856,15,3.424,16,0.182,17,0.006,19,0.24,27,0.063,29,1.031,88,0.004,89,0.004,90,0.649,92,4.118,109,1.354,122,2.921,184,1.535,187,1.032,268,2.612,272,1.693,335,3.705,350,3.424,387,6.474,568,3.122,604,3.866,825,4.346,1235,4.416,2270,6.906,2588,4.795,2650,7.485,3627,7.485,3628,8.072,3629,8.072,3630,6.865,3631,9.019,3632,9.019,3633,6.865,3634,8.363,3635,8.363,3636,6.865,3637,8.363,3638,8.363,3639,6.865,3640,6.865,3641,6.865]],["title/directives/NgxSaveOnExitComponent.html",[292,0.714,604,2.264]],["body/directives/NgxSaveOnExitComponent.html",[3,0.046,4,0.041,5,0.046,10,0.116,11,0.174,12,0.625,16,0.149,17,0.006,19,0.182,27,0.046,29,1.353,32,1.085,34,1.458,44,1.946,47,1.575,49,1.487,57,2.974,61,2.074,81,2.778,88,0.004,89,0.004,90,0.476,96,0.845,109,1.353,137,1.368,180,1.122,183,1.239,184,1.534,187,1.157,193,1.689,196,1.511,205,0.38,206,2.012,268,2.139,272,1.242,292,0.998,294,1.207,300,1.649,305,3.863,308,1.111,310,3.692,311,3.22,315,2.493,317,1.239,324,3.554,332,2.761,340,3.022,349,2.841,366,4.084,368,4.037,369,1.947,373,3.7,387,6.025,412,3.324,425,5.007,568,3.066,604,3.166,662,3.755,704,2.012,707,5.007,815,3.311,954,6.965,1112,2.928,1232,3.521,1421,4.521,1748,3.9,1937,4.583,3111,4.583,3287,5.236,3628,8.511,3629,8.511,3642,5.038,3643,7.783,3644,6.85,3645,8.352,3646,8.352,3647,6.85,3648,6.85,3649,9.01,3650,7.783,3651,6.85,3652,7.783,3653,6.85,3654,5.038,3655,5.038,3656,6.13,3657,5.038,3658,5.038,3659,6.85,3660,6.85,3661,5.656,3662,6.965,3663,6.85,3664,6.85,3665,5.038,3666,5.038,3667,5.038,3668,5.038,3669,5.038,3670,5.038,3671,5.038]],["title/injectables/NgxSignalStoreService.html",[259,1.417,3672,4.384]],["body/injectables/NgxSignalStoreService.html",[3,0.061,4,0.054,5,0.061,10,0.153,11,0.208,16,0.145,17,0.006,19,0.218,27,0.061,44,2.074,49,1.783,57,3.566,88,0.004,89,0.004,90,0.63,96,0.822,99,4.773,106,2.208,184,1.045,187,1.013,196,1.611,205,0.502,259,2.377,261,2.837,274,4.687,347,3.222,367,4.115,379,1.223,392,3.204,568,3.232,731,2.05,782,3.162,832,3.016,833,3.016,835,3.759,960,2.63,1005,2.148,1257,3.081,1371,4.773,1497,4.885,1914,3.999,2731,6.358,3672,7.968,3673,6.666,3674,7.387,3675,6.666,3676,8.214,3677,5.966,3678,6.666,3679,8.214,3680,6.891,3681,5.16,3682,6.358]],["title/interfaces/NgxSignalStoreSlice.html",[0,0.078,3683,3.791]],["body/interfaces/NgxSignalStoreSlice.html",[0,0.122,2,0.731,3,0.045,4,0.039,5,0.045,10,0.112,11,0.17,16,0.216,17,0.006,19,0.219,27,0.087,28,1.896,29,1.434,36,1.82,37,1.747,54,2.202,68,3.038,76,3.132,88,0.004,89,0.004,96,0.6,105,4.151,114,3.244,135,1.544,137,0.797,139,2.792,148,4.311,151,5.107,152,0.905,156,3.02,162,2.031,171,2.198,173,4.918,183,1.561,190,2.261,205,0.367,271,1.29,273,3.156,274,4.122,300,0.844,308,0.619,317,1.708,350,1.993,392,1.568,432,2.745,476,1.593,509,1.568,672,4.716,794,2.026,993,3.256,1005,1.568,1282,3.89,1319,2.353,1371,3.888,1703,3.667,2184,3.569,2289,4.673,3089,5.551,3090,2.828,3674,7.202,3680,3.768,3681,3.768,3683,6.372,3684,4.019,3685,4.019,3686,5.525,3687,3.768,3688,5.525,3689,4.019,3690,4.019,3691,7.126,3692,5.525,3693,6.313,3694,5.525,3695,4.019,3696,4.019,3697,6.798,3698,5.525,3699,6.313,3700,4.019,3701,4.019,3702,6.313,3703,5.179,3704,5.918,3705,5.602,3706,5.525,3707,5.525,3708,4.019,3709,4.019,3710,4.019,3711,4.019,3712,4.019,3713,4.019]],["title/interfaces/NgxSignalStoreSliceArrayMethods.html",[0,0.078,3703,3.791]],["body/interfaces/NgxSignalStoreSliceArrayMethods.html",[0,0.121,2,0.723,3,0.044,4,0.039,5,0.044,10,0.111,11,0.168,15,3.8,16,0.217,17,0.006,19,0.218,27,0.087,28,1.843,29,1.334,36,1.801,37,1.734,54,2.179,68,2.726,76,3.118,88,0.004,89,0.004,96,0.594,105,4.121,114,2.911,135,2.599,137,0.789,139,2.772,148,4.288,151,4.717,152,0.898,156,2.988,162,3.42,171,2.225,173,4.891,183,1.608,190,2.245,205,0.363,271,1.276,273,3.121,274,4.21,300,0.835,308,0.613,317,1.704,350,1.972,392,1.552,432,3.746,476,2.683,509,1.552,672,4.704,794,2.011,993,4.444,1005,1.552,1282,4.062,1319,2.328,1371,3.86,1703,2.64,2184,2.569,2289,4.639,3089,5.531,3090,2.799,3674,7.051,3680,3.728,3681,3.728,3683,5.885,3684,3.977,3685,3.977,3686,5.485,3687,3.728,3688,5.485,3689,3.977,3690,3.977,3691,7.1,3692,5.485,3693,6.278,3694,5.485,3695,3.977,3696,3.977,3697,6.768,3698,5.485,3699,6.278,3700,3.977,3701,3.977,3702,6.278,3703,5.885,3704,6.344,3705,6.006,3706,5.485,3707,5.485,3708,6.768,3709,3.977,3710,3.977,3711,3.977,3712,3.977,3713,3.977]],["title/interfaces/NgxSignalStoreSliceBaseMethods.html",[0,0.078,3704,3.791]],["body/interfaces/NgxSignalStoreSliceBaseMethods.html",[0,0.121,2,0.719,3,0.044,4,0.039,5,0.044,10,0.11,11,0.168,15,3.899,16,0.217,17,0.006,19,0.217,27,0.087,28,1.841,29,1.332,36,1.791,37,1.728,54,2.168,68,2.72,76,3.111,88,0.004,89,0.004,96,0.591,105,4.106,114,2.904,135,1.52,137,1.339,139,3.581,148,4.276,151,4.704,152,0.895,156,2.973,162,2,171,2.223,173,4.877,183,1.605,190,2.237,205,0.361,271,1.269,273,3.118,274,4.204,300,0.831,308,0.61,317,1.702,350,1.962,392,1.544,432,2.702,476,1.568,509,1.544,672,4.698,794,2.004,993,3.205,1005,1.544,1282,4.055,1319,2.316,1371,3.846,1703,2.626,2184,2.556,2289,5.994,3089,5.52,3090,2.784,3674,7.041,3680,3.709,3681,3.709,3683,5.869,3684,3.956,3685,3.956,3686,5.465,3687,3.709,3688,6.261,3689,3.956,3690,3.956,3691,7.086,3692,5.465,3693,6.261,3694,5.465,3695,3.956,3696,3.956,3697,6.752,3698,5.465,3699,6.261,3700,3.956,3701,3.956,3702,6.261,3703,5.123,3704,6.33,3705,5.992,3706,7.086,3707,7.086,3708,3.956,3709,3.956,3710,3.956,3711,3.956,3712,3.956,3713,3.956]],["title/interfaces/NgxStorage.html",[0,0.078,3714,3.277]],["body/interfaces/NgxStorage.html",[0,0.151,2,0.964,3,0.059,4,0.052,5,0.059,10,0.148,11,0.204,15,4.106,16,0.221,17,0.006,19,0.171,27,0.09,76,3.664,88,0.004,89,0.004,137,1.315,139,4.019,152,1.303,171,2.069,268,2.507,272,1.584,273,2.994,476,2.628,502,3.178,764,2.171,794,1.945,959,6.136,1274,4.298,2557,3.178,2558,4.298,3714,5.37,3715,4.708,3716,6.406,3717,6.406,3718,6.406,3719,4.487,3720,5.607,3721,6.406,3722,5.858,3723,5.607,3724,4.487,3725,5.858,3726,5.858,3727,4.487]],["title/interfaces/NgxStorageBaseEvent.html",[0,0.078,3721,3.421]],["body/interfaces/NgxStorageBaseEvent.html",[0,0.152,2,0.982,3,0.06,4,0.053,5,0.06,10,0.15,11,0.206,16,0.221,17,0.006,19,0.174,27,0.09,76,3.681,88,0.004,89,0.004,137,1.512,139,3.961,152,1.308,171,2.086,268,2.535,272,1.613,273,3.01,476,3.022,502,3.237,764,2.212,794,1.981,959,4.377,1274,4.377,2557,3.237,2558,6.176,3714,4.377,3715,4.795,3716,4.57,3717,4.57,3718,4.57,3719,4.57,3720,6.448,3721,6.63,3722,5.907,3723,5.671,3724,4.57,3725,5.907,3726,5.907,3727,4.57]],["title/interfaces/NgxStorageClearEvent.html",[0,0.078,3725,3.277]],["body/interfaces/NgxStorageClearEvent.html",[0,0.153,2,1.007,3,0.062,4,0.054,5,0.062,10,0.154,11,0.209,16,0.22,17,0.006,19,0.178,27,0.091,76,3.703,88,0.004,89,0.004,137,1.35,139,3.725,152,1.316,171,2.2,268,2.574,272,1.653,273,3.032,476,2.698,502,3.317,764,2.266,794,2.03,959,4.486,1274,4.486,2557,3.317,2558,4.486,3714,4.486,3715,4.914,3716,4.683,3717,4.683,3718,4.683,3719,4.683,3720,5.757,3721,6.676,3722,5.971,3723,5.757,3724,4.683,3725,6.229,3726,5.971,3727,4.683]],["title/interfaces/NgxStorageRemoveEvent.html",[0,0.078,3726,3.277]],["body/interfaces/NgxStorageRemoveEvent.html",[0,0.152,2,0.986,3,0.061,4,0.053,5,0.061,10,0.151,11,0.206,16,0.221,17,0.006,19,0.174,27,0.09,76,3.805,88,0.004,89,0.004,137,1.333,139,3.692,152,1.342,171,2.184,268,2.542,272,1.62,273,3.113,476,2.665,502,3.251,764,2.221,794,1.99,959,4.396,1274,4.396,2557,3.251,2558,4.396,3714,4.396,3715,4.815,3716,4.59,3717,4.59,3718,4.59,3719,4.59,3720,5.686,3721,6.638,3722,5.918,3723,6.638,3724,4.59,3725,5.918,3726,6.186,3727,4.59]],["title/injectables/NgxStorageService.html",[259,1.417,3728,4.384]],["body/injectables/NgxStorageService.html",[3,0.021,4,0.019,5,0.021,7,1.628,10,0.054,11,0.187,12,0.645,16,0.212,17,0.006,19,0.178,26,1.989,27,0.045,28,0.732,29,0.35,32,1.349,34,2.528,36,1.82,42,1.908,44,2.209,47,1.431,49,2.05,61,2.141,73,0.828,75,1.559,76,3.593,81,1.273,88,0.002,89,0.002,90,0.46,96,0.872,97,1.126,99,2.224,105,3.021,107,2.804,128,1.032,136,0.954,137,1.02,139,3.285,152,1.292,162,2.032,177,1.398,180,1.158,183,0.881,184,0.976,187,1.065,190,1.293,193,1.941,194,1.733,196,1.459,200,2.295,203,0.919,205,0.176,219,2.085,233,1.989,234,2.158,237,2.399,238,2.328,255,1.628,259,1.107,261,0.992,268,2.872,272,0.575,273,2.496,274,1.077,300,1.496,308,0.792,311,2.845,317,0.422,323,1.559,328,4.386,335,2.498,345,2.829,349,4.164,352,1.924,369,2.42,379,0.702,392,1.233,402,2.374,412,3.451,476,2.576,494,2.085,497,5.045,501,0.617,502,1.153,652,1.153,662,3.09,712,1.398,716,1.893,717,2.369,726,1.452,731,0.716,734,2.462,764,3.24,782,1.729,794,2.953,832,2.203,833,2.203,837,1.277,844,3.132,949,3.179,959,4.477,960,1.921,979,4.152,1005,2.598,1112,1.354,1120,1.559,1188,1.211,1189,0.842,1219,1.314,1257,2.251,1274,5.696,1275,2.962,1371,2.829,1383,3.276,1415,2.295,1417,1.277,1418,1.211,1421,2.878,1430,1.627,1460,1.94,1665,5.526,1748,2.962,1750,2.597,1755,3.771,1914,1.398,1954,2.531,1961,3.258,2002,1.804,2005,1.499,2268,1.277,2452,2.085,2507,2.085,2557,3.08,2558,6.856,2577,2.085,2588,2.673,2589,8.23,2651,2.085,2760,1.804,3127,3.16,3255,1.354,3445,3.425,3577,4.655,3606,2.085,3714,4.165,3716,4.674,3717,5.157,3718,4.674,3719,6.38,3720,5.497,3722,3.771,3723,4.348,3724,2.673,3725,3.771,3726,3.771,3727,2.673,3728,7.044,3729,8.737,3730,2.33,3731,5.637,3732,6.328,3733,4.869,3734,4.869,3735,7.07,3736,4.869,3737,4.869,3738,3.827,3739,3.827,3740,8.382,3741,2.33,3742,2.33,3743,2.33,3744,3.827,3745,6.226,3746,3.827,3747,2.33,3748,2.33,3749,2.33,3750,3.827,3751,2.33,3752,3.827,3753,2.33,3754,2.33,3755,2.33,3756,2.33,3757,3.827,3758,2.33,3759,3.827,3760,2.33,3761,2.33,3762,3.827,3763,2.33,3764,2.33,3765,2.33,3766,2.33,3767,2.33,3768,2.33,3769,2.33,3770,2.33,3771,2.33,3772,2.33,3773,2.33,3774,1.211,3775,2.33,3776,4.869,3777,2.33,3778,2.33,3779,1.924,3780,2.33,3781,2.33,3782,3.425,3783,2.33,3784,3.827,3785,3.425,3786,3.425,3787,3.827,3788,3.827,3789,2.33,3790,2.33,3791,2.33,3792,2.33,3793,2.33,3794,2.33,3795,6.226,3796,2.33,3797,6.226,3798,3.827,3799,4.869,3800,3.827,3801,3.827,3802,2.33,3803,2.33,3804,3.827,3805,6.226,3806,2.33,3807,2.33,3808,2.33,3809,2.33,3810,2.33,3811,2.33,3812,2.33,3813,4.869,3814,2.33,3815,2.33,3816,2.33,3817,2.33,3818,2.33,3819,2.33,3820,2.33,3821,2.33,3822,2.33,3823,2.33,3824,2.33,3825,2.33,3826,2.33,3827,2.33]],["title/interfaces/NgxStorageSetEvent.html",[0,0.078,3722,3.277]],["body/interfaces/NgxStorageSetEvent.html",[0,0.151,2,0.977,3,0.06,4,0.053,5,0.06,10,0.149,11,0.205,16,0.222,17,0.006,19,0.173,27,0.09,76,3.798,88,0.004,89,0.004,137,1.325,139,3.675,152,1.339,171,2.177,268,2.527,272,1.604,273,3.166,476,2.648,502,3.219,764,2.199,794,1.97,959,4.353,1274,4.353,2557,3.219,2558,4.353,3714,4.353,3715,4.768,3716,4.544,3717,4.544,3718,4.544,3719,4.544,3720,5.651,3721,6.619,3722,6.164,3723,6.619,3724,6.435,3725,5.891,3726,5.891,3727,4.544]],["title/interfaces/NgxStore.html",[0,0.078,3828,3.791]],["body/interfaces/NgxStore.html",[0,0.123,2,0.905,3,0.056,4,0.049,5,0.056,10,0.138,11,0.196,16,0.215,17,0.006,19,0.246,27,0.083,35,4.109,38,2.786,49,1.846,51,3.878,76,2.934,88,0.004,89,0.004,96,0.744,101,3.727,102,2.983,106,1.621,122,2.106,123,5.56,124,3.216,127,5.1,128,4.198,130,5.224,131,5.054,145,5.651,146,4.666,147,5.688,148,4.795,153,5.969,154,4.033,155,5.651,156,3.74,191,4.008,194,1.854,238,2.254,274,4.452,285,4.418,286,4.784,379,1.415,506,3.564,509,2.484,794,1.825,1356,7.649,1937,4.033,1944,5.159,2132,5.386,2743,4.978,3089,4.96,3705,6.23,3779,4.978,3828,5.969,3829,5.395,3830,6.901,3831,8.021,3832,7.4,3833,5.395,3834,6.901,3835,4.978,3836,4.418,3837,4.978,3838,4.211,3839,6.901,3840,8.29,3841,5.395,3842,5.395,3843,5.395,3844,5.395,3845,5.395,3846,5.395]],["title/injectables/NgxStoreService.html",[259,1.417,3494,3.421]],["body/injectables/NgxStoreService.html",[0,0.074,2,0.692,3,0.042,4,0.037,5,0.042,10,0.106,11,0.163,12,0.821,16,0.203,17,0.006,19,0.214,27,0.042,28,1.233,32,0.642,34,2.327,36,3.711,44,2.139,49,1.613,68,2.916,74,2.143,76,2.451,88,0.003,89,0.003,90,0.436,96,0.992,97,3.114,98,5.261,99,3.744,113,2.859,114,2.288,124,2.459,131,5.18,151,5.925,180,1.386,183,1.165,184,1.523,187,1.132,193,2.219,196,1.531,205,0.347,209,2.764,238,2.409,259,1.864,261,1.961,268,2.913,272,1.136,274,4.606,298,2.903,300,1.288,308,0.586,324,1.818,367,3.433,369,1.857,377,2.859,379,1.651,392,3.167,431,2.459,501,1.707,509,1.485,766,2.859,782,2.288,810,2.859,815,3.114,835,2.599,842,2.965,960,3.338,1005,2.393,1140,3.531,1497,4.721,1930,4.987,2535,3.083,2731,3.568,3494,5.187,3677,4.125,3828,3.568,3832,6.64,3838,3.219,3847,4.609,3848,6.64,3849,5.32,3850,5.32,3851,5.32,3852,5.32,3853,4.609,3854,6.442,3855,5.32,3856,4.609,3857,5.32,3858,4.609,3859,5.32,3860,4.609,3861,5.32,3862,5.32,3863,4.609,3864,6.424,3865,4.609,3866,5.32,3867,4.609,3868,4.609,3869,7.427,3870,4.609,3871,4.609,3872,4.609,3873,4.609,3874,4.609,3875,4.609,3876,4.609,3877,4.609,3878,4.609,3879,4.609,3880,4.609,3881,4.609,3882,4.609,3883,4.609,3884,4.609,3885,4.609,3886,4.609,3887,4.609,3888,4.609]],["title/directives/NgxTableCellDirective.html",[292,0.714,605,2.314]],["body/directives/NgxTableCellDirective.html",[3,0.042,4,0.037,5,0.042,10,0.105,11,0.162,12,0.584,16,0.196,17,0.006,19,0.17,27,0.042,32,1.298,38,2.959,47,1.496,48,3.145,72,1.769,81,3.2,88,0.003,89,0.003,90,0.605,96,0.563,137,1.381,152,0.618,171,1.513,179,1.246,180,1.21,182,2.199,183,1.158,184,1.603,187,1.223,193,1.126,196,1.337,205,0.344,237,2.724,250,4.283,255,2.724,256,4.691,292,0.933,294,1.095,298,1.881,300,1.588,304,1.999,306,2.938,308,1.213,311,1.472,315,3.657,317,1.337,319,2.654,320,2.576,333,3.509,345,2.654,379,1.175,509,2.817,512,2.274,524,2.063,535,3.477,563,3.026,567,4.467,605,3.785,641,5.591,662,2.504,678,5.92,679,4.691,680,5.416,681,6.228,682,5.87,683,5.623,684,5.416,685,5.162,686,4.754,687,6.713,688,5.416,689,5.721,690,5.721,691,4.955,693,4.471,695,3.61,696,4.118,697,4.471,698,4.955,699,4.955,700,4.955,701,4.955,702,2.896,704,1.789,707,2.938,708,4.118,710,3.347,711,3.816,712,2.74,713,3.536,714,4.754,716,2.26,717,1.738,719,4.441,726,1.362,1005,2.817,1083,3.327,1095,3.19,1176,5.286,1593,6.106,1809,5.286,1810,5.286,1811,5.286,1812,5.286,1813,3.772,1814,3.772,1815,3.772,1827,5.286,1829,3.415,1830,5.286,1832,3.772,1833,3.772,1834,3.772,3889,4.568,3890,4.568,3891,6.402,3892,4.568,3893,4.568,3894,4.568,3895,4.568]],["title/interfaces/NgxTableConfiguration.html",[0,0.078,3896,4.045]],["body/interfaces/NgxTableConfiguration.html",[0,0.075,2,0.707,3,0.043,4,0.038,5,0.043,7,3.455,10,0.108,11,0.206,12,0.912,16,0.22,17,0.006,19,0.174,27,0.075,29,1.452,37,1.709,42,1.344,61,1.427,64,5.296,68,2.176,88,0.003,89,0.003,90,0.768,96,0.581,105,2.924,109,0.982,114,3.136,137,1.512,144,3.49,152,1.194,203,2.581,205,0.355,237,4.039,245,1.113,255,2.784,306,5.825,308,1.123,333,3.586,349,3.69,383,4.377,392,2.844,431,4.331,479,3.642,524,2.108,535,4.281,581,1.93,606,2.178,607,2.178,608,2.178,686,3.032,704,2.16,764,3.169,956,6.085,1083,3.4,1114,3.586,1120,5.432,1305,5.431,1480,3.092,1506,3.912,1613,5.727,2019,3.925,2123,5.707,2469,4.57,2644,5.403,3661,5.403,3896,6.206,3897,4.713,3898,4.713,3899,6.543,3900,8.262,3901,8.099,3902,7.29,3903,8.829,3904,8.262,3905,7.267,3906,8.829,3907,7.901,3908,7.901,3909,5.856,3910,7.901,3911,5.856,3912,7.267,3913,6.705,3914,7.267,3915,6.543,3916,8.12,3917,4.218,3918,4.218,3919,4.713,3920,4.218]],["title/interfaces/NgxTableCypressDataTagsBase.html",[0,0.078,3921,4.045]],["body/interfaces/NgxTableCypressDataTagsBase.html",[0,0.138,2,1.091,3,0.067,4,0.059,5,0.067,10,0.167,11,0.219,12,0.905,16,0.208,17,0.005,19,0.193,27,0.08,29,1.299,88,0.005,89,0.005,152,1.375,231,4.861,678,5.739,729,5.625,1083,5.08,1829,5.104,1922,6,3921,7.146,3922,6.503,3923,6.503,3924,7.745,3925,6.503,3926,5.625,3927,6]],["title/pipes/NgxTableGetPipe.html",[174,1.483,1848,4.045]],["body/pipes/NgxTableGetPipe.html",[3,0.059,4,0.052,5,0.059,12,0.584,16,0.14,17,0.006,19,0.213,27,0.074,32,1.388,36,3.269,44,2.242,47,1.622,48,2.726,49,1.899,64,5.245,73,2.275,88,0.004,89,0.004,90,0.758,96,0.79,136,3.281,152,1.302,173,4.121,174,2.775,176,3.329,179,1.747,180,1.432,182,2.753,183,1.159,184,1.257,185,3.511,186,5.361,187,0.79,193,1.58,196,1.582,204,4.793,205,0.483,206,2.354,324,3.161,379,1.604,384,6.203,425,5.155,428,4.972,717,3.049,837,3.511,1628,6.661,1843,4.286,1848,7.79,1850,7.172,1973,5.29,2174,4.959,3928,8.014,3929,6.406,3930,6.406,3931,5.733,3932,5.733,3933,5.29,3934,8.014,3935,6.406,3936,6.406]],["title/pipes/NgxTableHasObserversPipe.html",[174,1.483,3937,4.045]],["body/pipes/NgxTableHasObserversPipe.html",[3,0.065,4,0.057,5,0.065,12,0.642,16,0.153,17,0.006,19,0.187,27,0.065,29,1.274,34,2.035,44,1.638,47,1.916,66,3.053,83,3.76,88,0.005,89,0.005,90,0.665,96,0.867,137,1.39,174,2.13,176,3.655,179,1.918,180,1.493,182,2.916,183,1.272,184,1.331,185,4.652,187,0.867,193,1.734,196,1.649,204,3.855,205,0.53,206,2.066,319,5.296,320,5.338,379,1.557,441,7.595,442,6.294,444,6.294,445,8.47,3937,7.008,3938,8.487,3939,8.487,3940,7.033,3941,8.487,3942,7.033,3943,7.033]],["title/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[292,0.714,606,2.264]],["body/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[3,0.057,4,0.05,5,0.057,10,0.227,11,0.199,16,0.208,17,0.006,19,0.165,27,0.057,28,1.65,88,0.004,89,0.004,90,0.587,96,0.766,109,1.403,137,1.286,184,1.553,187,1.177,205,0.468,292,1.145,294,1.488,304,2.453,308,1,324,3.099,341,2.743,379,1.441,392,3.251,509,2.531,548,3.554,568,2.867,606,3.631,726,2.571,956,5.798,962,4.821,1031,8.364,1613,6.405,3944,9.695,3945,5.126,3946,6.487,3947,6.487,3948,7.856,3949,7.856,3950,7.714,3951,7.856]],["title/directives/NgxTableSelectTemplateAbstractComponent.html",[292,0.714,607,2.264]],["body/directives/NgxTableSelectTemplateAbstractComponent.html",[3,0.058,4,0.051,5,0.058,10,0.228,11,0.202,16,0.209,17,0.006,19,0.212,21,3.805,27,0.058,70,6.591,88,0.004,89,0.004,90,0.6,96,0.783,98,4.492,102,4.307,109,1.196,137,1.304,184,1.559,187,1.184,194,2.677,205,0.478,292,1.161,294,1.52,304,2.487,308,1.013,324,3.142,341,2.95,379,1.461,509,2.566,548,3.603,568,2.896,607,3.681,962,4.838,1570,4.911,1613,6.247,3945,5.239,3946,6.577,3947,6.577,3952,9.742,3953,7.965,3954,7.965,3955,7.965,3956,8.706]],["title/pipes/NgxTableShowHeaderPipe.html",[174,1.483,3957,4.045]],["body/pipes/NgxTableShowHeaderPipe.html",[3,0.057,4,0.05,5,0.057,12,0.565,16,0.135,17,0.006,19,0.229,27,0.072,29,1.177,32,1.33,35,2.992,36,3.218,42,1.765,44,2.175,47,1.89,49,1.965,61,1.875,64,4.704,73,2.785,74,2.059,88,0.004,89,0.004,90,0.742,96,0.764,105,4.866,114,2.199,135,1.963,137,1.014,152,0.837,174,2.74,176,3.217,179,1.689,180,1.41,182,2.695,183,1.12,184,1.23,185,4.299,186,4.142,187,0.764,193,1.526,196,1.557,204,4.718,205,0.466,206,2.304,237,3.663,324,2.442,425,3.982,428,3.841,704,1.751,731,1.904,837,3.393,874,5.112,1083,4.853,1186,2.743,1506,3.475,1613,3.841,1973,5.112,3913,7.473,3926,7.005,3931,5.54,3932,5.54,3933,5.112,3957,7.473,3958,7.843,3959,7.843,3960,6.191,3961,7.843,3962,9.05,3963,6.191,3964,6.191,3965,6.191,3966,6.191,3967,6.191,3968,5.112,3969,5.54,3970,6.191,3971,7.843,3972,6.191,3973,6.191]],["title/interfaces/NgxTableShowHeaderRequirements.html",[0,0.078,3926,3.791]],["body/interfaces/NgxTableShowHeaderRequirements.html",[0,0.14,2,1.114,3,0.068,4,0.06,5,0.068,10,0.17,11,0.222,16,0.203,17,0.005,19,0.197,27,0.081,29,1.496,88,0.005,89,0.005,152,1.261,231,4.963,678,4.45,729,5.743,1083,4.553,1829,3.957,1922,7.955,3921,6.126,3922,6.64,3923,6.64,3924,7.841,3925,6.64,3926,6.782,3927,7.955]],["title/interfaces/NgxTableSortEvent.html",[0,0.078,730,3.589]],["body/interfaces/NgxTableSortEvent.html",[0,0.122,2,1.143,3,0.07,4,0.062,5,0.07,10,0.175,11,0.226,16,0.194,17,0.005,19,0.202,27,0.07,88,0.005,89,0.005,681,6.499,711,4.395,714,6.249,727,6.816,728,6.816,730,6.52,3974,7.616,3975,7.616,3976,9.426]],["title/pipes/NgxTableSortIconPipe.html",[174,1.483,3977,4.045]],["body/pipes/NgxTableSortIconPipe.html",[3,0.063,4,0.056,5,0.063,12,0.624,16,0.149,17,0.006,19,0.222,27,0.063,34,1.981,44,1.945,47,1.69,48,3.833,88,0.004,89,0.004,90,0.647,96,0.844,152,1.129,174,2.528,176,3.557,179,1.867,180,1.475,182,2.868,183,1.238,184,1.309,185,3.752,187,0.844,193,1.688,196,1.629,204,4.576,205,0.516,206,2.011,379,1.721,686,6.032,711,4.521,714,6.032,717,3.176,733,6.126,1437,6.117,3977,6.893,3978,8.348,3979,8.348,3980,6.845,3981,8.348,3982,8.348,3983,6.845,3984,6.126,3985,6.845,3986,6.845,3987,6.845]],["title/directives/NgxTableSortTemplateAbstractComponent.html",[292,0.714,608,2.264]],["body/directives/NgxTableSortTemplateAbstractComponent.html",[3,0.064,4,0.056,5,0.064,10,0.159,11,0.213,16,0.183,17,0.006,19,0.224,27,0.064,88,0.004,89,0.004,90,0.656,96,0.856,109,1.449,137,1.378,184,1.421,187,1.038,205,0.523,292,1.227,294,1.663,304,2.628,308,1.071,324,3.32,341,2.549,379,1.544,509,2.712,548,3.808,568,3.014,608,3.89,686,6.208,711,4.533,714,4.463,726,2.702,962,4.553,3945,5.729,3946,6.95,3947,6.95,3950,8.109,3984,6.209,3988,9.061,3989,8.417]],["title/interfaces/NgxToast.html",[0,0.078,3990,2.846]],["body/interfaces/NgxToast.html",[0,0.157,2,0.85,3,0.052,4,0.046,5,0.052,10,0.13,11,0.188,12,0.798,16,0.217,17,0.006,19,0.197,27,0.087,28,1.675,29,1.112,37,2.565,54,3.96,55,2.081,74,1.884,88,0.004,89,0.004,96,0.699,101,3.58,109,1.239,135,1.797,152,1.26,171,1.95,190,2.504,194,1.742,205,0.427,238,2.118,245,1.338,271,2.406,273,2.618,311,1.825,344,4.595,476,1.854,551,4.022,563,2.319,609,2.276,610,2.319,631,3.033,644,4.198,865,3.109,992,4.177,1439,2.976,1453,3.152,1458,2.738,1514,3.398,1611,5.25,1954,2.944,2184,3.022,3090,4.304,3271,2.677,3774,3.85,3990,5.086,3991,3.79,3992,4.177,3993,5.631,3994,3.79,3995,4.955,3996,4.06,3997,5.309,3998,5.12,3999,4.765,4000,4.443,4001,4.765,4002,4.765,4003,4.955,4004,3.79,4005,3.398,4006,3.644,4007,3.644,4008,3.644,4009,3.79,4010,3.398,4011,3.644,4012,3.514]],["title/directives/NgxToastBundlerComponent.html",[292,0.714,609,1.968]],["body/directives/NgxToastBundlerComponent.html",[3,0.061,4,0.053,5,0.061,10,0.151,11,0.206,16,0.193,17,0.006,19,0.216,27,0.061,32,0.916,47,1.33,72,2.545,88,0.004,89,0.004,90,0.621,183,1.473,184,1.519,187,1.14,196,1.189,205,0.495,292,1.187,294,1.575,300,1.679,304,2.542,308,0.836,317,1.473,334,2.64,341,1.99,369,2.212,501,1.741,506,3.037,568,2.186,609,3.271,644,4.585,665,3.331,962,4.469,1439,3.554,1458,4.275,1480,4.18,3294,3.706,3992,4.989,4000,4.883,4010,5.7,4013,9.504,4014,6.571,4015,7.304,4016,8.275,4017,8.141,4018,6.571,4019,7.286,4020,6.723,4021,6.571,4022,5.086,4023,6.571]],["title/directives/NgxToastComponent.html",[292,0.714,610,2.005]],["body/directives/NgxToastComponent.html",[3,0.058,4,0.051,5,0.058,10,0.144,11,0.2,16,0.189,17,0.006,19,0.23,27,0.058,32,0.874,47,1.269,49,1.361,72,2.427,74,2.084,88,0.004,89,0.004,90,0.593,183,1.43,184,1.555,187,1.156,194,2.662,196,1.43,205,0.472,206,2.322,292,1.152,294,1.502,300,1.501,304,2.468,308,0.797,317,1.644,334,2.518,341,1.898,369,2.165,383,4.192,476,2.051,480,2.904,501,1.66,506,2.897,551,4.154,568,2.084,610,3.236,636,5.282,656,3.586,665,3.176,731,1.927,782,2.807,910,5.193,920,3.534,962,4.394,977,5.084,1392,3.91,1506,3.836,1569,2.897,1610,5.608,3294,3.534,3990,3.642,3992,4.882,4015,7.149,4020,6.526,4022,4.851,4024,6.267,4025,7.903,4026,6.267,4027,7.903,4028,7.903,4029,6.267,4030,6.267,4031,6.267,4032,6.267]],["title/interfaces/NgxToastConfiguration.html",[0,0.078,3993,3.151]],["body/interfaces/NgxToastConfiguration.html",[0,0.156,2,0.856,3,0.053,4,0.046,5,0.053,10,0.131,11,0.189,12,0.851,16,0.218,17,0.006,19,0.197,27,0.088,28,1.091,29,1.401,37,2.517,54,3.969,55,2.094,74,1.896,88,0.004,89,0.004,96,0.703,101,3.594,109,1.401,135,1.808,152,1.006,171,1.956,190,2.514,194,1.753,205,0.429,238,2.131,245,1.347,271,1.97,273,1.808,311,1.836,344,4.614,476,1.866,551,4.027,563,2.334,609,2.29,610,2.334,631,3.045,644,4.207,865,2.024,992,4.194,1439,2.988,1453,3.165,1458,2.755,1514,3.419,1611,5.263,1954,2.962,2184,3.967,3090,4.322,3271,4.146,3774,3.865,3990,4.81,3991,3.813,3992,3.214,3993,5.325,3994,5.87,3995,4.975,3996,4.076,3997,5.325,3998,5.136,3999,4.784,4000,4.461,4001,4.784,4002,4.784,4003,4.975,4004,3.813,4005,3.419,4006,3.667,4007,3.667,4008,3.667,4009,3.813,4010,3.419,4011,3.667,4012,3.536]],["title/components/NgxToastContainerComponent.html",[109,0.735,550,2.367]],["body/components/NgxToastContainerComponent.html",[3,0.037,4,0.033,5,0.037,10,0.092,11,0.148,12,0.366,16,0.197,17,0.006,19,0.222,27,0.037,28,1.117,29,1.033,32,1.119,34,1.162,37,2.256,66,2.534,72,2.261,88,0.003,89,0.003,90,0.552,109,1.205,137,0.956,179,1.095,180,1.638,183,1.056,184,1.51,187,1.033,193,0.99,196,0.726,205,0.302,245,0.948,292,0.585,293,1.896,294,0.962,298,3.062,300,1.452,308,1.149,317,1.056,330,2.641,334,2.345,361,1.896,369,1.72,379,1.071,408,2.698,449,3.905,478,1.94,479,2.302,480,1.475,481,1.555,484,2.888,485,2.436,501,1.822,506,1.855,507,3.956,509,1.293,514,1.986,515,2.641,516,1.81,517,3.737,518,1.986,519,1.986,520,1.94,521,1.742,522,1.986,523,1.94,524,3.122,525,1.986,526,1.94,527,1.986,528,2.888,529,1.986,530,2.821,531,2.888,532,1.94,533,1.778,534,1.94,535,3.279,536,1.986,537,3.737,538,1.94,539,1.896,540,1.94,541,1.816,542,1.986,543,1.896,544,1.896,545,1.986,546,1.94,547,1.896,548,1.816,549,1.986,550,3.651,551,3.914,552,1.986,553,1.94,554,1.986,555,1.94,556,2.888,557,1.94,558,1.94,559,1.986,560,1.94,561,1.986,562,1.94,563,1.643,564,1.986,565,1.986,566,1.986,567,1.778,568,1.335,569,1.855,570,1.855,571,1.986,572,1.896,573,1.986,574,1.986,575,1.986,576,1.896,577,1.986,578,1.855,579,1.896,580,1.986,581,1.643,582,1.855,583,1.986,584,1.986,585,1.816,586,1.896,587,1.986,588,1.896,589,1.986,590,1.896,591,1.986,592,1.855,593,1.855,594,1.896,595,1.986,596,1.896,597,1.986,598,1.896,599,1.986,600,1.896,601,1.986,602,1.527,603,1.896,604,1.855,605,1.896,606,1.855,607,1.855,608,1.855,609,2.345,610,1.643,611,1.643,612,1.855,613,1.986,614,1.778,615,1.986,616,1.896,617,1.986,618,1.742,619,1.855,620,1.986,621,1.855,622,1.986,623,1.896,624,1.986,625,1.986,644,2.698,672,4.067,704,1.687,731,1.234,752,3.905,758,3.905,867,4.126,952,3.755,953,4.277,983,2.941,1023,3.292,1026,4.82,1066,4.82,1093,2.141,1186,1.778,1468,4.26,1480,2.758,1745,3.621,2506,5.224,2512,4.077,3096,5.68,3990,2.332,3992,3.879,4000,4.53,4005,4.126,4010,5.573,4015,5.68,4020,4.82,4033,8.642,4034,8.642,4035,4.014,4036,5.837,4037,5.837,4038,6.156,4039,6.156,4040,4.014,4041,5.837,4042,4.014,4043,6.156,4044,4.014,4045,5.837,4046,4.014,4047,5.837,4048,4.014,4049,4.014,4050,4.014,4051,5.837,4052,5.224,4053,5.837]],["title/interfaces/NgxToastDefaultConfiguration.html",[0,0.078,4005,2.938]],["body/interfaces/NgxToastDefaultConfiguration.html",[0,0.155,2,0.845,3,0.052,4,0.046,5,0.052,10,0.129,11,0.187,12,0.797,16,0.219,17,0.006,19,0.196,27,0.087,28,1.077,29,1.107,37,2.511,54,3.951,55,2.069,74,1.873,88,0.004,89,0.004,96,0.694,101,3.566,109,1.396,135,1.786,152,0.998,171,2.063,190,2.952,194,2.268,205,0.424,238,2.105,245,1.33,271,1.954,273,1.786,311,1.814,344,4.577,476,1.843,551,4.018,563,3.02,609,2.262,610,2.305,631,3.711,644,4.19,865,2,992,4.16,1439,2.964,1453,3.139,1458,2.721,1514,4.425,1611,5.238,1954,2.926,2184,3.003,3090,4.782,3271,2.66,3774,3.834,3990,4.782,3991,3.767,3992,3.175,3993,4.746,3994,3.767,3995,5.842,3996,4.044,3997,5.293,3998,5.105,3999,4.746,4000,4.425,4001,4.746,4002,4.746,4003,5.842,4004,4.935,4005,4.425,4006,5.617,4007,5.617,4008,3.622,4009,3.767,4010,3.377,4011,3.622,4012,3.493]],["title/interfaces/NgxToastEvent.html",[0,0.078,4012,3.039]],["body/interfaces/NgxToastEvent.html",[0,0.156,2,0.863,3,0.053,4,0.047,5,0.053,10,0.132,11,0.19,16,0.219,17,0.006,19,0.199,27,0.088,28,1.1,29,1.123,37,2.487,54,3.983,55,2.113,74,1.912,88,0.004,89,0.004,96,0.709,101,3.615,109,1.248,135,2.637,152,1.012,171,1.964,190,2.528,194,1.768,205,0.433,238,2.15,245,1.358,271,1.981,273,1.824,311,2.41,344,4.64,476,2.721,551,4.087,563,2.354,609,2.31,610,2.354,631,3.062,644,4.218,865,2.042,992,4.218,1439,3.005,1453,3.183,1458,3.615,1514,3.449,1611,5.28,1954,3.887,2184,3.067,3090,4.346,3271,2.717,3774,3.887,3990,5.303,3991,3.847,3992,3.243,3993,4.811,3994,3.847,3995,5.004,3996,4.1,3997,5.347,3998,5.157,3999,4.811,4000,4.486,4001,4.811,4002,4.811,4003,5.004,4004,3.847,4005,3.449,4006,3.699,4007,3.699,4008,3.699,4009,3.847,4010,4.486,4011,4.811,4012,4.64]],["title/interfaces/NgxToastMaxAmountBaseConfiguration.html",[0,0.078,3997,3.151]],["body/interfaces/NgxToastMaxAmountBaseConfiguration.html",[0,0.156,2,0.858,3,0.053,4,0.046,5,0.053,10,0.131,11,0.189,16,0.214,17,0.006,19,0.198,27,0.088,28,1.094,29,1.118,37,2.519,54,4.121,55,2.1,74,1.9,88,0.004,89,0.004,96,0.705,101,4.006,109,1.244,135,1.812,152,1.008,171,1.958,190,2.969,194,1.757,205,0.43,238,2.136,245,1.35,271,1.973,273,1.812,311,1.841,344,5.449,476,1.87,551,4.028,563,2.339,609,2.296,610,2.339,631,3.05,644,4.508,865,2.029,992,4.953,1439,2.993,1453,3.17,1458,2.762,1514,3.427,1611,5.463,1954,2.97,2184,3.048,3090,4.329,3271,2.7,3774,3.871,3990,4.816,3991,3.823,3992,3.222,3993,4.792,3994,3.823,3995,4.983,3996,4.083,3997,5.649,3998,5.794,3999,5.649,4000,4.468,4001,4.792,4002,4.792,4003,4.983,4004,3.823,4005,3.427,4006,3.676,4007,3.676,4008,3.676,4009,3.823,4010,3.427,4011,3.676,4012,3.545]],["title/interfaces/NgxToastMaxAmountBundleConfiguration.html",[0,0.078,4001,3.151]],["body/interfaces/NgxToastMaxAmountBundleConfiguration.html",[0,0.156,2,0.867,3,0.053,4,0.047,5,0.053,10,0.133,11,0.19,16,0.216,17,0.006,19,0.199,27,0.088,28,1.106,29,1.126,37,2.525,54,4.136,55,2.123,74,2.496,88,0.004,89,0.004,96,0.713,101,3.627,109,1.406,135,1.833,152,1.015,171,2.084,190,2.536,194,1.777,205,0.435,238,2.16,245,1.365,271,1.988,273,1.833,311,1.862,344,4.655,476,1.891,551,4.036,563,2.366,609,2.322,610,2.366,631,3.072,644,4.33,865,2.052,992,4.232,1439,3.015,1453,3.193,1458,2.793,1514,3.466,1611,5.483,1954,3.003,2184,3.082,3090,4.36,3271,2.73,3774,3.9,3990,4.842,3991,3.866,3992,3.259,3993,4.827,3994,3.866,3995,5.02,3996,4.113,3997,5.674,3998,5.812,3999,4.827,4000,4.998,4001,5.36,4002,4.827,4003,5.02,4004,3.866,4005,3.466,4006,3.717,4007,3.717,4008,3.717,4009,3.866,4010,3.466,4011,3.717,4012,3.585]],["title/interfaces/NgxToastMaxAmountOtherConfiguration.html",[0,0.078,4002,3.151]],["body/interfaces/NgxToastMaxAmountOtherConfiguration.html",[0,0.156,2,0.866,3,0.053,4,0.047,5,0.053,10,0.133,11,0.19,16,0.213,17,0.006,19,0.199,27,0.088,28,1.105,29,1.125,37,2.524,54,4.134,55,2.121,74,1.92,88,0.004,89,0.004,96,0.712,101,4.025,109,1.25,135,1.83,152,1.014,171,2.083,190,2.534,194,1.775,205,0.435,238,2.158,245,1.364,271,1.986,273,1.83,311,1.859,344,5.469,476,1.889,551,4.035,563,2.363,609,2.319,610,2.363,631,3.07,644,4.329,865,2.05,992,4.972,1439,3.012,1453,3.191,1458,2.789,1514,3.462,1611,5.481,1954,2.999,2184,3.079,3090,4.357,3271,2.727,3774,3.897,3990,4.839,3991,3.861,3992,3.255,3993,4.823,3994,3.861,3995,5.016,3996,4.11,3997,5.671,3998,5.81,3999,4.823,4000,4.995,4001,4.823,4002,5.357,4003,5.016,4004,3.861,4005,3.462,4006,3.713,4007,3.713,4008,3.713,4009,3.861,4010,3.462,4011,3.713,4012,3.58]],["title/injectables/NgxToastService.html",[259,1.417,3992,2.762]],["body/injectables/NgxToastService.html",[3,0.026,4,0.045,5,0.026,7,1.927,10,0.146,11,0.115,12,0.58,16,0.205,17,0.006,19,0.212,27,0.026,28,1.527,29,1.039,32,1.112,34,1.841,37,1.808,42,2.195,44,2.206,47,0.916,49,2.067,50,1.722,55,2.829,57,2.433,61,2.227,66,1.965,72,1.754,73,1.02,74,1.864,81,1.506,83,2.006,88,0.002,89,0.002,90,0.271,96,0.854,106,1.217,109,0.68,135,2.196,137,0.47,152,0.861,162,1.198,174,1.371,180,1.042,183,0.819,184,1.506,187,1.104,193,1.707,194,1.956,196,1.393,205,0.216,218,2.223,237,1.927,245,0.678,253,2.104,259,1.31,261,1.222,271,2.343,272,0.708,273,0.911,300,0.972,308,1.07,311,1.459,317,1.393,324,2.211,330,2.048,338,2.631,344,1.781,345,2.631,350,1.176,358,3.477,369,2.264,379,1.167,380,1.921,402,2.809,408,3.963,412,2.634,476,2.751,480,1.055,501,1.485,502,3.809,513,2.648,551,4.1,609,1.154,644,3.559,656,1.133,672,3.509,693,3.162,704,1.782,710,2.104,716,2.24,717,2.133,752,3.75,758,3.029,764,1.894,765,5.338,782,1.608,823,1.722,824,1.574,826,2.483,828,3.477,832,2.878,833,2.878,837,1.574,842,4.092,865,1.02,920,2.553,960,2.211,977,2.912,991,3.504,1004,3.738,1005,1.459,1009,1.492,1036,2.005,1066,3.738,1112,2.631,1113,4.453,1186,1.272,1188,1.492,1189,1.037,1232,2.048,1285,3.029,1333,1.847,1371,1.668,1392,2.24,1443,2.005,1480,3.476,1485,3.915,1497,3.318,1506,2.006,1569,2.093,1611,3.816,1703,1.574,1745,3.477,1843,1.921,1963,1.921,2002,3.504,2068,4.628,2069,2.104,2070,2.104,2123,3.029,2203,2.24,2260,2.223,2432,3.738,2579,4.052,2725,3.504,3114,5.016,3271,3.006,3596,2.57,3990,4.771,3992,3.588,3998,1.781,3999,4.092,4000,4.786,4005,3.362,4006,1.847,4007,2.912,4008,4.092,4010,5.679,4011,1.847,4012,1.781,4016,7.141,4019,4.052,4038,5.016,4039,5.016,4043,5.016,4052,5.016,4054,2.871,4055,4.527,4056,5.605,4057,8.954,4058,6.362,4059,5.605,4060,4.527,4061,4.527,4062,5.605,4063,2.871,4064,4.527,4065,2.871,4066,4.527,4067,2.871,4068,2.871,4069,2.871,4070,2.871,4071,2.871,4072,4.527,4073,4.527,4074,2.871,4075,2.871,4076,6.923,4077,5.605,4078,5.605,4079,4.527,4080,2.871,4081,2.871,4082,4.052,4083,2.871,4084,2.871,4085,2.871,4086,4.527,4087,4.527,4088,4.527,4089,4.527,4090,4.527,4091,3.738,4092,4.527,4093,5.605,4094,2.871,4095,2.871,4096,4.527,4097,2.57,4098,2.871,4099,2.871,4100,2.871,4101,2.871,4102,2.871,4103,2.871,4104,2.871,4105,2.871,4106,2.871,4107,2.871,4108,2.871,4109,2.871,4110,2.871,4111,2.871,4112,2.871,4113,2.871,4114,2.871,4115,2.871,4116,4.527,4117,2.871,4118,2.871,4119,2.871,4120,2.871,4121,4.527,4122,4.527,4123,4.527,4124,4.527,4125,4.527,4126,2.871,4127,2.871,4128,2.871,4129,2.871,4130,2.871]],["title/directives/NgxTooltipAbstractComponent.html",[292,0.714,611,2.005]],["body/directives/NgxTooltipAbstractComponent.html",[3,0.05,4,0.065,5,0.05,10,0.124,11,0.182,17,0.006,19,0.214,27,0.05,32,0.755,47,1.741,72,3.128,81,1.802,88,0.004,89,0.004,90,0.87,96,0.668,137,1.507,183,1.301,184,1.552,187,1.227,196,1.301,205,0.408,271,2.636,292,1.048,294,1.298,300,1.741,304,2.246,305,4.056,308,0.689,315,3.559,317,1.301,334,2.177,340,3.25,341,2.178,369,2.019,501,1.435,506,2.504,568,2.686,611,2.945,612,3.325,631,4.051,665,4.093,726,2.408,731,1.666,865,3.387,921,4.653,1605,6.668,4022,4.194,4131,5.418,4132,6.658,4133,8.236,4134,7.698,4135,7.698,4136,6.437,4137,6.437,4138,7.193,4139,6.367,4140,7.193,4141,7.193,4142,7.193,4143,7.193,4144,7.193,4145,6.437,4146,6.437,4147,6.437,4148,5.418,4149,3.361,4150,3.625,4151,7.193,4152,7.193]],["title/interfaces/NgxTooltipActiveElementEvent.html",[0,0.078,4153,3.277]],["body/interfaces/NgxTooltipActiveElementEvent.html",[0,0.153,2,0.951,3,0.058,4,0.079,5,0.058,10,0.146,11,0.202,12,0.833,16,0.221,17,0.006,19,0.211,27,0.087,29,0.951,39,3.38,47,1.611,81,2.107,88,0.004,89,0.004,109,1.441,152,1.298,171,2.156,205,0.477,245,1.497,271,2.108,516,1.907,524,2.041,611,2.594,631,3.929,751,4.098,865,3.339,921,5.062,1048,3.293,1439,2.546,1453,2.696,4139,5.398,4149,6.042,4150,4.239,4153,5.821,4154,4.425,4155,6.29,4156,4.076,4157,4.425,4158,4.076,4159,5.324,4160,5.324,4161,4.239]],["title/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.078,4160,3.277]],["body/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.155,2,0.995,3,0.061,4,0.08,5,0.061,10,0.152,11,0.208,16,0.214,17,0.006,19,0.217,27,0.088,29,0.995,39,3.535,47,1.657,81,2.204,88,0.004,89,0.004,109,1.333,152,1.254,171,2.191,205,0.499,245,1.566,271,2.168,516,1.961,524,2.135,611,2.714,631,3.636,751,3.901,865,2.907,921,5.111,1048,3.445,1439,2.663,1453,2.821,4139,5.509,4149,5.911,4150,4.434,4153,5.476,4154,4.629,4155,6.374,4156,4.264,4157,4.629,4158,4.264,4159,5.476,4160,5.941,4161,4.434]],["title/interfaces/NgxTooltipBaseEvent.html",[0,0.078,4155,3.277]],["body/interfaces/NgxTooltipBaseEvent.html",[0,0.154,2,0.971,3,0.06,4,0.079,5,0.06,10,0.149,11,0.204,16,0.219,17,0.006,19,0.214,27,0.087,29,1.319,39,3.451,47,1.632,81,2.152,88,0.004,89,0.004,109,1.319,152,1.305,171,2.075,205,0.487,245,1.529,271,2.506,516,2.203,524,2.084,611,2.649,631,3.596,751,3.873,865,2.864,921,5.085,1048,3.362,1439,2.599,1453,2.753,4139,5.869,4149,5.869,4150,4.328,4153,5.394,4154,4.518,4155,6.329,4156,4.162,4157,4.518,4158,4.162,4159,5.394,4160,5.394,4161,4.328]],["title/interfaces/NgxTooltipConfiguration.html",[0,0.078,4156,3.151]],["body/interfaces/NgxTooltipConfiguration.html",[0,0.155,2,0.984,3,0.06,4,0.075,5,0.06,10,0.15,11,0.206,12,0.741,16,0.22,17,0.006,19,0.216,27,0.087,29,0.984,39,3.495,47,1.645,81,2.179,88,0.004,89,0.004,109,1.453,152,1.249,171,2.087,205,0.494,245,1.548,271,2.153,516,1.948,524,2.111,611,2.683,631,3.617,751,3.888,865,2.886,921,4.8,1048,3.405,1439,2.633,1453,2.788,4139,5.481,4149,6.086,4150,4.384,4153,5.437,4154,4.576,4155,6.179,4156,5.228,4157,6.451,4158,4.215,4159,5.437,4160,5.437,4161,4.384]],["title/directives/NgxTooltipDirective.html",[292,0.714,612,2.264]],["body/directives/NgxTooltipDirective.html",[3,0.037,4,0.055,5,0.037,10,0.091,11,0.147,12,0.729,16,0.087,17,0.006,19,0.212,27,0.053,32,1.163,44,1.35,47,1.521,49,1.735,66,1.724,72,2.911,81,2.775,88,0.003,89,0.003,90,0.548,96,0.49,102,3.954,109,1.293,137,0.65,179,1.083,182,1.99,183,1.048,184,1.507,187,1.225,196,1.558,205,0.299,245,0.938,271,2.117,292,1.096,294,0.952,298,1.702,300,1.716,301,4.046,304,1.809,305,3.267,308,1.244,311,1.28,315,3.954,317,1.629,330,3.615,331,3.555,334,1.596,340,2.383,341,2.276,346,2.774,349,2.24,357,5.011,369,2.345,467,3.175,476,3.068,480,2.513,501,1.052,506,1.836,516,1.388,611,1.626,612,3.161,631,3.077,638,5.818,640,4.484,657,5.293,660,4.484,665,2.013,674,2.8,731,1.221,751,3.272,759,5.856,772,4.245,773,4.245,775,5.293,807,4.046,827,2.657,828,4.958,832,2.621,833,2.621,865,2.669,873,2.177,921,3.011,948,4.245,1048,3.554,1112,3.974,1113,4.399,1458,3.305,1506,3.989,1745,3.594,1876,3.475,3233,5.293,3304,3.175,4082,7.467,4132,4.484,4134,6.726,4135,6.726,4136,5.185,4137,5.185,4139,6.338,4145,5.185,4146,5.185,4147,5.185,4149,5.176,4162,3.972,4163,8.614,4164,6.838,4165,7.991,4166,7.516,4167,6.838,4168,7.516,4169,6.726,4170,7.516,4171,6.726,4172,5.793,4173,5.793,4174,5.793,4175,5.793,4176,5.793,4177,5.793,4178,5.793,4179,5.793,4180,6.838,4181,3.972,4182,3.972,4183,3.972,4184,3.972,4185,5.793,4186,3.972,4187,6.838,4188,3.972,4189,3.555,4190,5.185,4191,5.185,4192,3.972,4193,5.793,4194,5.793,4195,3.972,4196,3.972,4197,3.972,4198,3.972,4199,5.793]],["title/interfaces/NgxTooltipInactiveEvent.html",[0,0.078,4159,3.277]],["body/interfaces/NgxTooltipInactiveEvent.html",[0,0.155,2,0.999,3,0.061,4,0.075,5,0.061,10,0.153,11,0.208,16,0.214,17,0.006,19,0.218,27,0.088,29,0.999,39,3.551,47,1.661,81,2.214,88,0.004,89,0.004,109,1.336,152,1.256,171,2.194,205,0.501,245,1.573,271,2.174,516,1.967,524,2.145,611,2.725,631,3.643,751,3.905,865,2.915,921,5.116,1048,3.46,1439,2.675,1453,2.833,4139,5.52,4149,5.918,4150,4.453,4153,5.49,4154,4.649,4155,6.382,4156,4.282,4157,4.649,4158,4.282,4159,5.952,4160,5.49,4161,4.453]],["title/interfaces/NgxTooltipItem.html",[0,0.078,4158,3.151]],["body/interfaces/NgxTooltipItem.html",[0,0.153,2,0.952,3,0.058,4,0.074,5,0.058,10,0.146,11,0.202,12,0.833,16,0.222,17,0.006,19,0.212,27,0.087,29,0.952,39,3.384,47,1.612,81,2.11,88,0.004,89,0.004,109,1.441,152,1.333,171,2.057,205,0.478,245,1.499,271,2.492,516,1.909,524,2.044,611,2.598,631,3.93,751,4.098,865,3.341,921,4.746,1048,3.297,1439,2.549,1453,2.7,4139,5.401,4149,6.044,4150,4.245,4153,5.329,4154,4.431,4155,6.109,4156,4.081,4157,4.431,4158,5.124,4159,5.329,4160,5.329,4161,4.245]],["title/injectables/NgxTooltipService.html",[259,1.417,4132,3.791]],["body/injectables/NgxTooltipService.html",[3,0.031,4,0.027,5,0.031,10,0.076,11,0.128,12,0.461,16,0.177,17,0.006,19,0.207,27,0.031,28,0.634,31,2.427,32,1.131,34,1.464,37,2.036,39,2.698,42,2.223,44,1.723,49,2.117,57,1.438,61,2.533,66,1.438,73,2.179,74,1.101,81,1.101,83,1.467,88,0.003,89,0.003,90,0.313,96,0.624,102,1.638,106,1.359,109,1.171,135,1.604,137,0.828,152,0.684,162,1.382,174,1.003,180,0.828,183,0.915,184,1.415,187,1.126,193,1.247,196,1.242,203,1.995,205,0.249,206,0.973,233,1.721,234,1.868,238,1.891,259,1.464,261,1.409,271,2.149,272,0.816,300,1.65,308,1.064,311,2.818,317,1.513,324,1.995,329,2.964,345,3.565,349,2.852,366,2.241,369,2.448,373,3.043,379,0.928,399,4.595,412,3.384,476,2.421,501,0.877,502,3.036,513,1.565,516,2.054,524,1.067,631,3.693,726,0.988,731,1.018,751,2.812,794,2.08,826,1.467,832,2.288,833,2.288,865,2.627,870,4.496,921,3.569,960,2.42,977,3.253,979,4.261,991,2.563,1005,1.977,1015,2.939,1036,4.797,1048,3.569,1062,1.868,1128,2.054,1186,1.467,1188,1.721,1189,1.196,1275,3.915,1288,2.734,1355,2.427,1439,2.032,1453,2.152,1460,1.678,1506,2.719,1750,1.766,1898,5.067,1945,1.565,1947,1.678,1961,2.215,1963,2.215,1984,2.734,1985,2.734,1986,2.734,2006,1.986,2535,4.949,2677,5.087,3086,4.797,3274,1.924,3304,2.772,3353,4.176,3384,2.427,3515,2.964,3774,3.569,3996,4.585,3998,2.054,4132,3.915,4139,6.286,4149,2.054,4156,2.13,4158,4.418,4161,4.595,4169,6.146,4171,4.526,4190,2.964,4191,5.491,4200,3.312,4201,6.136,4202,6.868,4203,8.894,4204,6.136,4205,6.136,4206,6.136,4207,5.057,4208,3.312,4209,3.312,4210,3.312,4211,5.057,4212,3.312,4213,5.057,4214,5.057,4215,3.312,4216,3.312,4217,5.057,4218,3.312,4219,3.312,4220,5.057,4221,3.312,4222,3.312,4223,5.057,4224,3.312,4225,8.365,4226,8.365,4227,8.365,4228,8.365,4229,3.312,4230,3.312,4231,3.312,4232,5.057,4233,3.312,4234,3.312,4235,3.312,4236,5.057,4237,3.312,4238,3.312,4239,3.312,4240,6.136,4241,5.057,4242,5.057,4243,6.868,4244,5.057,4245,3.312,4246,3.312,4247,3.312,4248,3.312,4249,3.312,4250,3.312,4251,5.057,4252,3.312,4253,3.312,4254,5.057,4255,3.312,4256,6.136,4257,3.312,4258,5.057,4259,3.312,4260,2.964,4261,3.312,4262,2.964,4263,3.312,4264,3.312,4265,3.312,4266,3.312,4267,3.312,4268,3.312,4269,3.312,4270,3.312,4271,3.312,4272,6.136,4273,3.312,4274,3.312,4275,3.312,4276,3.312,4277,3.312,4278,3.312,4279,3.312,4280,3.312,4281,3.312,4282,2.964,4283,3.312,4284,3.312,4285,2.563]],["title/interfaces/NgxTourBackdropClipEvent.html",[0,0.078,4286,3.791]],["body/interfaces/NgxTourBackdropClipEvent.html",[0,0.121,2,0.718,3,0.044,4,0.039,5,0.044,7,2.037,10,0.152,11,0.168,12,0.885,15,3.102,16,0.211,17,0.006,19,0.228,27,0.087,28,1.266,29,0.718,37,1.25,39,3.528,88,0.004,89,0.004,90,0.453,102,2.368,106,1.778,109,1.138,135,1.518,137,1.083,152,1.23,190,3.132,194,2.638,205,0.361,237,2.814,245,1.131,255,2.814,268,2.065,271,1.268,272,1.18,273,1.518,292,0.698,294,1.147,308,1.04,317,0.866,343,2.368,379,0.878,380,3.202,467,2.624,485,2.76,511,4.619,512,2.349,516,2.179,521,4.175,614,2.93,618,2.078,631,2.708,633,3.507,644,2.212,656,1.888,663,3.202,704,1.069,712,2.871,764,2.763,805,4.1,844,3.079,870,3.507,974,2.781,992,2.699,993,3.202,1010,3.343,1015,3.843,1048,2.488,1083,2.488,1217,4.154,1219,2.699,1234,3.202,1235,3.079,1254,4.846,1305,2.871,1319,2.313,1439,1.923,1453,3.225,1460,2.426,1468,3.73,1703,4.48,1745,4.701,1829,2.553,1918,2.262,2005,3.079,2006,3.967,2381,2.969,2680,2.969,2852,4.425,3038,3.507,3086,4.619,3111,3.202,3228,3.202,3266,4.702,3384,3.507,3774,4.248,3996,4.48,4285,3.705,4286,5.119,4287,3.952,4288,6.867,4289,5.461,4290,5.461,4291,3.705,4292,5.119,4293,3.952,4294,5.866,4295,3.705,4296,3.952,4297,6.749,4298,5.119,4299,3.705,4300,3.952,4301,3.952,4302,5.461,4303,3.952,4304,3.952,4305,3.952,4306,3.952,4307,3.952,4308,6.867,4309,5.866,4310,3.952,4311,6.327,4312,6.501,4313,5.99,4314,3.705,4315,3.705,4316,3.507,4317,5.119,4318,3.705,4319,3.705,4320,3.705,4321,5.119,4322,5.119,4323,3.705,4324,3.705,4325,5.119,4326,3.705,4327,5.119]],["title/directives/NgxTourItemDirective.html",[292,0.714,614,2.17]],["body/directives/NgxTourItemDirective.html",[3,0.044,4,0.039,5,0.044,10,0.109,11,0.167,12,0.433,16,0.164,17,0.006,19,0.2,27,0.044,29,1.329,32,1.193,34,1.375,44,1.107,47,1.332,49,1.858,61,1.439,73,1.688,81,2.511,88,0.003,89,0.003,90,0.77,96,0.812,99,3.824,109,1.133,152,0.89,179,1.296,180,0.778,182,2.261,183,1.19,184,1.556,187,1.185,193,1.172,196,1.601,205,0.358,206,1.933,271,2.404,292,1.188,294,1.139,298,1.933,300,1.68,304,2.055,308,1.089,315,2.351,317,1.601,332,2.605,333,4.138,341,1.993,366,3.345,368,2.297,369,2.214,373,3.61,480,2.418,485,3.86,488,5.532,499,4.822,501,1.259,505,3.678,506,2.196,516,2.278,521,3.277,614,2.916,629,5.272,636,4.735,639,5.094,674,3.18,702,2.977,704,1.469,726,1.417,745,4.253,751,3.336,764,3.298,827,3.179,828,4.683,910,4.528,920,4.825,921,5.035,934,5.434,974,2.761,1028,4.387,1063,5.434,1072,2.761,1073,3.824,1104,2.535,1105,2.948,1233,5.434,1480,3.567,1569,2.196,1594,7.309,1605,6.233,1982,3.057,2513,6.756,3038,3.482,3233,3.678,4294,7.025,4313,4.822,4328,8.67,4329,9.687,4330,6.581,4331,6.581,4332,5.889,4333,6.581,4334,6.581,4335,4.752,4336,4.752,4337,6.581,4338,4.752,4339,4.752,4340,4.752,4341,6.581,4342,4.752,4343,4.752,4344,4.752,4345,3.678,4346,4.752,4347,6.581,4348,4.752,4349,4.752,4350,4.752,4351,4.752]],["title/interfaces/NgxTourRouteOptions.html",[0,0.078,4295,3.791]],["body/interfaces/NgxTourRouteOptions.html",[0,0.122,2,0.725,3,0.045,4,0.039,5,0.045,7,2.056,10,0.153,11,0.169,12,0.87,15,3.118,16,0.21,17,0.006,19,0.229,27,0.087,28,1.274,29,0.725,37,1.262,39,3.551,88,0.004,89,0.004,90,0.457,102,2.39,106,1.789,109,1.143,135,1.532,137,1.09,152,1.275,190,3.007,194,2.647,205,0.364,237,2.833,245,1.142,255,2.833,268,2.079,271,1.28,272,1.191,273,1.532,292,0.704,294,1.158,308,1.044,317,0.874,343,2.39,379,0.886,380,3.232,467,2.648,485,2.778,511,4.649,512,2.364,516,2.185,521,4.182,614,2.949,618,2.098,631,2.725,633,3.541,644,2.233,656,1.906,663,3.232,704,1.079,712,2.898,764,1.633,805,3.077,844,3.108,870,3.541,974,2.808,992,2.725,993,3.232,1010,3.375,1015,3.868,1048,2.511,1083,2.511,1217,4.174,1219,2.725,1234,5.49,1235,3.108,1254,4.878,1305,2.898,1319,2.335,1439,1.941,1453,3.241,1460,2.449,1468,3.754,1703,4.498,1745,4.725,1829,2.577,1918,2.283,2005,3.108,2006,3.993,2381,2.998,2680,2.998,2852,4.453,3038,3.541,3086,4.649,3111,3.232,3228,3.232,3266,3.649,3384,3.541,3774,4.265,3996,4.498,4285,3.74,4286,3.74,4287,3.99,4288,5.895,4289,6.777,4290,5.497,4291,3.74,4292,5.153,4293,3.99,4294,5.895,4295,5.153,4296,6.777,4297,6.777,4298,5.153,4299,3.74,4300,3.99,4301,3.99,4302,5.497,4303,3.99,4304,3.99,4305,3.99,4306,3.99,4307,3.99,4308,6.887,4309,5.895,4310,3.99,4311,6.352,4312,6.52,4313,6.014,4314,3.74,4315,3.74,4316,3.541,4317,5.153,4318,3.74,4319,3.74,4320,3.74,4321,5.153,4322,5.153,4323,3.74,4324,3.74,4325,5.153,4326,3.74,4327,5.153]],["title/directives/NgxTourShowWhenDirective.html",[292,0.714,616,2.314]],["body/directives/NgxTourShowWhenDirective.html",[3,0.037,4,0.032,5,0.037,10,0.157,11,0.147,16,0.196,17,0.006,19,0.2,27,0.037,32,1.164,38,2.684,42,1.136,48,4.182,49,1.635,55,2.134,61,1.759,73,1.416,82,5.021,83,3.036,88,0.003,89,0.003,90,0.377,96,0.492,174,1.207,179,1.087,183,1.051,184,1.413,187,1.186,191,2.072,196,1.239,205,0.3,206,1.706,238,1.49,272,0.983,292,1.218,294,0.955,298,1.706,300,1.188,304,1.814,308,1.063,317,1.511,338,2.316,341,2.075,366,3.036,368,3.868,369,2.518,373,3.336,392,2.207,412,2.865,424,2.316,485,3.486,488,5.021,499,4.256,501,1.056,505,3.085,506,1.842,509,2.578,513,1.883,616,2.744,717,3.045,719,4.266,726,2.043,764,2.316,826,1.766,921,4.159,960,2.703,962,4.168,984,4.407,1005,1.871,1009,3.018,1285,3.885,1333,2.564,1458,3.312,1474,4.11,1480,2.744,1506,4.503,1522,1.803,1523,3.484,1894,7.297,1918,3.557,1941,2.784,1945,1.883,1947,2.02,1965,3.736,2074,4.056,2136,4.785,2138,4.785,2139,5.547,2142,5.258,2146,3.864,2165,4.056,2171,4.785,2175,4.056,2177,3.736,2178,2.784,2179,3.736,2180,2.185,2192,2.391,2193,2.473,2201,3.484,2203,2.873,2204,4.256,2207,5.021,2212,5.021,2225,5.864,2244,5.021,2246,5.517,2251,5.021,2252,4.256,2449,2.784,2462,5.658,4097,5.198,4316,5.021,4328,8.662,4352,9.679,4353,3.986,4354,8.623,4355,8.002,4356,5.808,4357,5.808,4358,5.808,4359,3.986,4360,3.986,4361,3.986,4362,3.986,4363,3.986,4364,3.986,4365,3.986,4366,3.986,4367,3.986,4368,8.002,4369,3.986,4370,3.986,4371,3.986,4372,3.986,4373,3.986,4374,3.986,4375,3.986,4376,5.808,4377,3.986]],["title/interfaces/NgxTourStep.html",[0,0.078,4298,3.791]],["body/interfaces/NgxTourStep.html",[0,0.106,2,0.563,3,0.035,4,0.03,5,0.035,7,2.364,10,0.128,11,0.141,12,0.936,15,3.347,16,0.217,17,0.006,19,0.207,27,0.082,28,1.565,29,0.993,37,1.451,39,3.529,88,0.003,89,0.003,90,0.525,102,2.748,106,1.966,109,1.304,135,1.762,137,1.197,152,1.297,190,3.051,194,2.775,205,0.283,237,3.112,245,0.886,255,3.112,268,1.735,271,1.472,272,0.925,273,2.098,292,0.81,294,0.899,308,1.105,317,0.679,343,2.748,379,1.019,380,3.717,467,3.045,485,3.052,511,5.71,512,2.903,516,2.244,521,4.268,614,2.461,618,1.629,631,3.347,633,5.359,644,2.568,656,1.48,663,3.717,704,1.241,712,2.25,764,1.268,805,2.568,844,3.574,870,4.071,974,2.18,992,3.133,993,3.717,1010,3.88,1015,3.844,1048,1.95,1083,2.887,1217,4.481,1219,3.133,1234,2.51,1235,2.413,1254,5.359,1305,3.332,1319,2.685,1439,1.507,1453,3.322,1460,2.816,1468,4.124,1703,4.762,1745,5.072,1829,2.963,1918,2.625,2005,3.574,2006,4.386,2381,3.446,2680,3.446,2852,4.892,3038,2.749,3086,5.108,3111,3.717,3228,3.717,3266,3.626,3384,5.359,3774,4.397,3996,4.637,4285,4.3,4286,2.904,4287,3.098,4288,6.549,4289,4.587,4290,4.587,4291,2.904,4292,5.661,4293,3.098,4294,6.549,4295,2.904,4296,3.098,4297,7.453,4298,5.121,4299,4.3,4300,4.587,4301,4.587,4302,6.039,4303,6.039,4304,6.039,4305,6.039,4306,6.039,4307,4.587,4308,7.174,4309,6.328,4310,4.587,4311,6.724,4312,6.923,4313,6.366,4314,4.3,4315,4.3,4316,4.071,4317,5.661,4318,4.3,4319,4.3,4320,4.3,4321,5.661,4322,5.661,4323,4.3,4324,4.3,4325,5.661,4326,4.3,4327,5.661]],["title/directives/NgxTourStepComponent.html",[292,0.714,618,2.126]],["body/directives/NgxTourStepComponent.html",[3,0.033,4,0.029,5,0.033,7,1.503,10,0.163,11,0.18,12,0.582,16,0.155,17,0.006,19,0.189,27,0.033,28,1.633,32,1.061,42,1.82,44,0.823,47,1.618,49,1.652,55,1.952,68,1.175,72,2.948,88,0.003,89,0.003,90,0.865,96,0.436,109,1.2,135,1.12,137,1.246,152,0.863,162,1.474,183,0.961,184,1.6,187,1.22,191,1.836,194,1.963,196,1.155,203,2.8,205,0.266,206,1.56,249,2.467,253,2.589,271,2.424,292,0.774,294,0.847,300,1.737,304,1.659,305,2.995,308,0.968,315,2.628,317,1.377,319,3.709,320,3.599,334,2.134,340,2.119,341,1.933,357,4.677,367,2.95,369,1.596,377,2.192,426,1.936,485,3.933,488,4.677,499,3.892,501,0.936,505,4.111,506,1.633,511,6.631,512,3.031,516,2.218,521,4.39,524,2.452,568,2.123,618,2.306,627,6.811,628,6.811,629,5.584,630,5.712,631,3.574,632,5.712,633,5.577,634,6.811,635,6.353,636,4.125,637,4.566,638,5.495,639,4.111,640,4.111,643,5.712,644,2.95,645,5.712,650,4.003,652,3.158,656,2.518,657,4.941,660,4.111,662,2.911,663,3.553,664,4.754,665,4.204,667,4.386,668,4.754,670,4.754,671,4.458,672,3.598,674,3.085,675,3.498,695,2.995,731,1.086,751,1.446,797,2.467,827,2.363,828,3.96,835,1.992,910,3.828,952,2.273,988,1.884,1022,4.27,1063,2.917,1094,2.467,1112,2.053,1257,1.633,1355,2.589,1569,2.95,1716,1.884,1719,2.589,1821,2.917,2696,2.917,3174,2.735,3233,2.735,3239,2.735,3240,2.917,3253,1.992,3901,4.386,4133,4.754,4189,5.712,4291,2.735,4292,2.735,4345,2.735,4378,9.923,4379,9.923,4380,3.533,4381,4.754,4382,5.312,4383,5.312,4384,5.312,4385,5.312,4386,5.312,4387,5.312,4388,5.312,4389,5.312,4390,5.312,4391,3.533,4392,3.533,4393,3.533,4394,3.533,4395,3.533,4396,3.533,4397,3.533,4398,3.533,4399,3.533,4400,3.533,4401,3.533,4402,3.533,4403,3.533,4404,3.533,4405,3.533,4406,5.312,4407,3.533,4408,3.533,4409,3.533,4410,3.533,4411,3.533]],["title/interfaces/NgxTourTokenConfiguration.html",[0,0.078,4412,4.384]],["body/interfaces/NgxTourTokenConfiguration.html",[0,0.092,2,0.867,3,0.053,4,0.047,5,0.053,7,3.193,10,0.133,11,0.19,16,0.213,17,0.006,19,0.221,27,0.069,36,2.805,37,1.959,88,0.004,89,0.004,96,0.713,106,2.518,109,1.406,205,0.435,241,6.881,245,1.365,255,3.193,343,3.712,347,3.627,485,3.815,516,2.245,521,3.258,618,2.509,663,5.02,1010,5.241,1083,3.9,1254,5.499,1305,4.501,1319,3.627,1460,3.803,1703,4.835,1829,4.003,2005,4.827,2006,4.501,2381,4.655,2680,4.655,3086,6.16,3111,5.02,3774,4.869,3996,5.135,4288,5.808,4308,7.484,4309,5.808,4311,6.827,4312,7.32,4313,6.865,4314,5.808,4315,5.808,4316,5.499,4317,6.827,4318,5.808,4319,5.808,4320,5.808,4321,6.827,4322,6.827,4323,5.808,4324,5.808,4325,6.827,4326,5.808,4327,6.827,4412,7.458,4413,5.779,4414,7.458,4415,5.779,4416,5.779,4417,5.779,4418,5.779]],["title/directives/NgxTreeGridCellDirective.html",[292,0.714,619,2.264]],["body/directives/NgxTreeGridCellDirective.html",[3,0.025,4,0.022,5,0.025,10,0.173,11,0.11,12,0.616,15,1.116,16,0.157,17,0.006,19,0.179,27,0.025,29,0.652,32,0.755,34,1.257,38,2.503,39,3.296,42,1.761,44,1.012,47,1.527,48,1.16,49,1.701,57,1.886,66,1.183,72,1.682,73,1.543,76,1.037,81,0.906,88,0.002,89,0.002,90,0.258,96,0.668,122,2.158,137,1.605,171,1.026,179,0.743,180,0.887,182,1.492,183,0.786,184,1.418,187,1.225,193,1.335,194,1.336,196,1.677,205,0.205,206,1.276,292,0.901,294,0.653,298,1.276,300,1.491,304,1.356,305,2.449,308,0.689,310,1.997,311,2.524,315,4.255,317,1.763,325,1.997,330,4.55,334,1.095,340,1.634,341,0.825,342,2.439,367,2.008,369,2.262,379,1.238,385,2.25,431,1.454,453,4.811,476,1.422,481,1.682,501,0.722,516,2.093,592,3.825,619,2.008,621,2.503,623,2.919,636,3.59,641,4.255,665,2.201,678,6.081,681,4.811,696,2.794,702,1.965,704,0.609,716,2.149,726,2.25,731,0.838,751,2.529,752,4.811,754,3.183,757,4.192,758,3.623,759,3.183,761,4.782,764,1.831,765,4.133,768,1.997,772,1.997,773,1.997,805,2.503,842,3.974,910,3.248,921,1.416,950,3.362,956,1.691,966,5.142,967,6.541,969,3.362,974,1.583,1005,1.399,1009,2.815,1015,3.59,1039,3.887,1040,3.887,1041,3.887,1042,3.887,1048,3.211,1052,3.887,1054,3.887,1055,3.887,1060,3.887,1097,3.887,1121,2.109,1153,3.183,1403,3.183,1439,2.176,1453,2.305,1532,2.25,1569,1.259,1574,3.587,1604,7.21,1606,1.903,1613,6.028,1703,1.494,1876,2.605,2006,4.525,2017,2.109,2293,4.847,2312,2.439,2457,1.416,2535,3.623,2714,2.25,2897,2.201,3001,2.109,3227,2.109,3228,1.823,3229,2.109,3230,2.109,3351,2.25,3352,2.439,3662,2.439,3933,3.587,4419,8.771,4420,8.771,4421,2.725,4422,3.887,4423,3.887,4424,8.073,4425,7.191,4426,6.178,4427,6.178,4428,4.343,4429,6.178,4430,6.178,4431,6.178,4432,4.343,4433,6.178,4434,6.178,4435,6.178,4436,6.178,4437,6.178,4438,4.343,4439,4.343,4440,4.343,4441,4.343,4442,4.343,4443,4.343,4444,4.343,4445,4.343,4446,4.343,4447,4.343,4448,4.343,4449,4.343,4450,4.343,4451,4.343,4452,4.343,4453,4.343,4454,4.343,4455,4.343,4456,4.343,4457,4.343,4458,2.725,4459,4.343,4460,7.544,4461,2.725,4462,4.343,4463,4.343,4464,4.343,4465,4.343,4466,4.343,4467,6.178,4468,6.178,4469,2.725,4470,4.343,4471,4.343,4472,4.343,4473,2.725,4474,2.725,4475,2.725,4476,2.725,4477,4.343,4478,2.725,4479,2.725,4480,2.725,4481,2.439,4482,2.725,4483,2.725,4484,2.725,4485,2.725,4486,2.725,4487,2.725,4488,2.725,4489,2.725,4490,2.725,4491,6.749,4492,4.343,4493,4.343,4494,4.343,4495,2.725,4496,2.725,4497,2.725,4498,2.725,4499,2.725,4500,2.725,4501,2.725,4502,2.725,4503,2.725,4504,2.725,4505,2.725,4506,2.725,4507,2.725]],["title/directives/NgxTreeGridDirective.html",[292,0.714,621,2.264]],["body/directives/NgxTreeGridDirective.html",[3,0.036,4,0.032,5,0.036,10,0.21,11,0.146,12,0.726,16,0.192,17,0.006,19,0.181,27,0.036,32,0.949,34,2.305,38,2.661,44,1.855,47,1.515,48,1.676,49,1.477,57,2.499,66,1.71,72,2.23,88,0.003,89,0.003,90,0.372,96,1.026,137,0.645,179,1.074,180,1.304,182,1.978,183,1.041,184,1.577,187,1.184,190,3.037,193,1.963,196,1.724,205,0.297,206,1.691,237,2.45,292,1.091,294,0.944,298,1.691,300,1.442,304,1.798,308,0.866,315,1.948,317,1.554,330,2.604,341,1.193,369,1.702,379,1.526,426,2.159,432,4.221,481,2.636,535,3.729,619,3.46,621,2.661,623,4.422,639,4.456,665,2.918,678,5.283,696,3.703,704,1.967,711,2.604,717,1.498,726,2.029,764,2.3,832,1.782,833,1.782,950,4.456,966,3.345,967,4.456,969,4.456,977,3.703,981,4.456,988,3.993,1009,2.992,1010,4.021,1017,3.524,1574,4.754,1604,7.977,1613,6.225,2696,5.619,2710,6.699,2897,2.918,2986,6.699,3774,4.577,3902,7.094,3996,4.709,4022,4.456,4345,3.048,4419,8.646,4420,8.646,4422,8.528,4423,5.152,4481,3.524,4508,3.938,4509,5.757,4510,7.688,4511,7.964,4512,7.485,4513,7.485,4514,5.757,4515,5.757,4516,5.757,4517,5.757,4518,5.757,4519,5.757,4520,5.757,4521,6.804,4522,5.757,4523,3.938,4524,3.938,4525,5.757,4526,3.938,4527,5.757,4528,3.938,4529,3.938,4530,5.757,4531,3.938,4532,5.757,4533,3.938,4534,5.757,4535,3.938,4536,5.757,4537,3.938,4538,3.938,4539,3.938,4540,3.938,4541,3.938,4542,3.938,4543,5.757,4544,3.938,4545,3.938,4546,3.938,4547,3.938,4548,3.938,4549,3.938,4550,3.938]],["title/classes/NgxValidators.html",[90,0.463,4551,4.384]],["body/classes/NgxValidators.html",[1,5.839,3,0.059,4,0.028,5,0.032,7,3.009,8,3.138,10,0.081,12,0.876,13,3.138,14,8.047,15,2.895,16,0.185,17,0.006,18,6.239,19,0.22,20,6.948,21,2.103,27,0.032,28,1.011,29,0.526,30,8.069,31,3.87,32,1.214,33,7.944,34,2.7,35,3.666,36,1.974,37,1.379,38,2.441,39,2.817,40,3.87,41,2.495,43,3.138,44,1.927,45,8.069,46,4.726,47,0.71,48,2.247,67,4.361,68,3.194,70,6.424,72,3.375,73,3.024,76,2.691,83,2.34,88,0.003,89,0.003,90,0.601,92,2.103,96,1.02,106,1.42,152,1.283,167,4.361,180,1.305,183,0.955,187,0.983,190,2.564,191,2.745,192,6.837,193,2.099,196,1.737,308,1.014,317,0.634,379,1.751,382,5.8,383,3.533,408,1.62,432,3.988,539,4.26,644,2.441,704,1.579,810,3.276,1036,4.939,1128,3.276,1226,2.255,1593,6.707,1611,4.782,1703,3.876,2005,3.397,2013,5.246,2184,4.252,2381,3.276,2677,3.988,2832,4.726,3268,2.037,3482,4.726,3656,4.726,4282,4.726,4381,3.138,4551,4.726,4552,3.506,4553,5.281,4554,6.353,4555,6.353,4556,6.353,4557,5.281,4558,6.353,4559,5.281,4560,3.506,4561,5.281,4562,5.281,4563,5.281,4564,5.281,4565,3.506,4566,3.506,4567,9.016,4568,3.506,4569,7.585,4570,3.506,4571,5.281,4572,5.281,4573,5.281,4574,5.281,4575,6.353,4576,7.071,4577,8.514,4578,8.514,4579,8.514,4580,7.071,4581,6.353,4582,3.506,4583,7.071,4584,5.281,4585,5.281,4586,3.506,4587,5.281,4588,3.506,4589,5.281,4590,5.281,4591,7.585,4592,7.585,4593,7.071,4594,5.281,4595,3.506,4596,7.585,4597,7.585,4598,3.506,4599,5.686,4600,5.281,4601,5.281,4602,5.281,4603,3.506,4604,3.506,4605,6.353,4606,3.506,4607,3.506,4608,3.506,4609,3.506,4610,3.506,4611,3.506,4612,3.506,4613,3.506,4614,3.506,4615,3.506,4616,3.506,4617,3.506,4618,3.506,4619,3.506,4620,3.506,4621,3.506,4622,3.506,4623,3.506,4624,3.506,4625,3.506]],["title/injectables/NgxWindowService.html",[259,1.417,1417,2.685]],["body/injectables/NgxWindowService.html",[3,0.026,4,0.023,5,0.026,10,0.066,11,0.142,12,0.412,15,3.008,16,0.193,17,0.006,19,0.231,27,0.077,28,0.865,29,0.954,32,1.194,34,1.308,36,2.375,44,1.611,49,1.67,54,1.296,57,1.243,61,2.225,66,3.002,67,2.365,73,1.605,75,1.916,88,0.002,89,0.002,90,0.794,96,0.69,106,1.215,122,2.219,136,2.291,137,0.916,144,1.528,162,2.335,177,1.718,180,0.74,183,1.149,184,1.559,187,1.167,190,2.337,193,1.566,196,1.484,200,4.921,205,0.216,209,2.71,234,2.548,237,2.704,255,1.219,259,1.308,261,1.219,268,2.939,272,0.706,300,1.274,308,1.108,311,2.047,317,1.484,328,2.803,350,3.008,351,1.615,352,2.365,369,2.339,379,1.572,412,2.927,501,0.759,502,3.806,631,3.439,702,1.296,704,1.419,726,2.555,782,2.914,798,1.528,960,2.207,964,2.907,979,4.559,1005,0.923,1062,2.548,1093,1.528,1188,1.488,1189,1.035,1217,4.028,1218,2.477,1232,2.044,1233,3.731,1257,3.792,1306,3.498,1383,4.767,1392,3.143,1417,5.188,1418,4.264,1421,3.883,1422,2.099,1454,7.194,1460,1.452,1569,2.088,1642,6.451,1731,2.563,1733,5.246,1748,7.724,1750,2.41,1751,3.731,1752,4.044,1755,1.916,1803,4.044,1914,1.718,1944,1.916,1945,1.353,2132,3.156,2269,3.731,2459,4.621,2512,3.156,2567,2.365,2892,3.311,3000,4.621,3022,6.188,3577,4.621,3774,2.908,3785,7.342,3786,7.342,3911,6.188,4260,8.47,4262,5.686,4312,5.842,4414,4.044,4599,2.563,4626,2.864,4627,5.686,4628,4.518,4629,8.4,4630,5.596,4631,5.596,4632,7.348,4633,5.596,4634,5.596,4635,6.915,4636,7.348,4637,7.348,4638,6.915,4639,6.353,4640,4.518,4641,2.864,4642,2.864,4643,2.864,4644,6.915,4645,2.864,4646,2.864,4647,6.915,4648,4.518,4649,2.864,4650,2.864,4651,7.692,4652,4.518,4653,2.864,4654,4.518,4655,2.864,4656,4.518,4657,2.864,4658,4.518,4659,2.864,4660,4.518,4661,2.864,4662,4.518,4663,2.864,4664,4.518,4665,2.864,4666,6.915,4667,4.518,4668,2.864,4669,4.518,4670,2.864,4671,2.563,4672,2.563,4673,2.864,4674,2.864,4675,2.864,4676,2.864,4677,2.864,4678,2.864,4679,2.864,4680,5.596,4681,2.864,4682,6.353,4683,2.864,4684,5.596,4685,2.864,4686,2.864,4687,2.864,4688,5.596,4689,2.864,4690,4.518,4691,4.518,4692,2.864,4693,4.518,4694,5.596,4695,4.518,4696,2.864,4697,2.864,4698,2.864,4699,2.864,4700,4.518,4701,2.864,4702,2.864,4703,2.864,4704,2.864,4705,2.864,4706,2.864,4707,2.864,4708,2.864,4709,4.518,4710,2.864,4711,2.864]],["title/interfaces/SpecStoreAssets.html",[0,0.078,4712,4.384]],["body/interfaces/SpecStoreAssets.html",[0,0.107,2,1.236,3,0.062,4,0.054,5,0.062,10,0.154,11,0.209,16,0.208,17,0.006,19,0.219,26,3.48,27,0.082,42,2.348,66,2.907,81,2.227,88,0.004,89,0.004,127,6.054,128,2.967,130,3.776,131,3.572,148,5.248,152,1.114,171,1.946,271,1.774,273,2.124,283,5.183,286,5.774,1163,4.676,1380,7.89,3836,6.82,3837,6.801,3838,6.23,4712,7.371,4713,5.183,4714,8.551,4715,8.551,4716,8.551,4717,7.685,4718,6.801,4719,5.529,4720,6.695,4721,6.695,4722,6.695]],["title/injectables/SpecStoreService.html",[259,1.417,4723,4.384]],["body/injectables/SpecStoreService.html",[3,0.036,4,0.031,5,0.036,10,0.089,11,0.144,12,0.721,16,0.214,17,0.006,19,0.233,26,2.007,27,0.036,28,0.739,32,1.312,36,2.954,44,1.322,68,1.888,81,1.285,88,0.003,89,0.003,90,0.365,96,0.915,98,4.182,113,2.396,114,1.372,118,2.396,124,2.06,128,1.711,131,3.027,135,2.134,137,1.294,138,3.404,147,2.584,151,4.601,171,1.341,180,1.294,183,1.027,184,1.626,187,1.225,193,2.105,196,1.644,205,0.291,245,0.912,259,1.642,261,1.644,263,6.124,264,6.124,268,3.148,272,0.952,273,1.225,274,4.201,298,2.573,300,1.765,308,1.198,317,1.494,367,2.623,369,1.976,392,2.389,501,1.023,507,1.825,641,4.659,815,1.867,1140,2.117,1141,6.053,1182,5.079,1334,2.989,1380,5.556,2449,2.697,3326,5.079,3494,6.244,3682,4.393,3848,4.686,3849,4.686,3850,4.686,3851,4.686,3852,4.686,3855,3.189,3857,3.189,3859,3.189,3861,3.189,3862,3.189,3864,2.83,3866,3.189,4713,7.539,4714,6.021,4715,6.021,4716,6.021,4723,5.079,4724,3.862,4725,6.728,4726,6.728,4727,6.728,4728,6.728,4729,6.728,4730,6.728,4731,7.416,4732,7.416,4733,7.416,4734,5.675,4735,3.862,4736,3.862,4737,3.862,4738,3.862,4739,3.862,4740,5.675,4741,3.862,4742,3.456,4743,3.456,4744,3.456,4745,3.456,4746,8.261,4747,8.759,4748,3.862,4749,5.675,4750,3.862,4751,7.416,4752,3.862,4753,7.416,4754,3.862,4755,5.675,4756,3.862,4757,3.862,4758,5.675,4759,3.862,4760,8.261,4761,3.862,4762,5.675,4763,3.862,4764,3.862,4765,3.862,4766,3.456,4767,3.456,4768,5.556,4769,3.456,4770,5.675,4771,4.686,4772,3.862,4773,3.862,4774,3.862,4775,3.862,4776,3.862,4777,3.862,4778,3.862]],["title/interfaces/StoreAssetsOptions.html",[0,0.078,3835,4.045]],["body/interfaces/StoreAssetsOptions.html",[0,0.122,2,0.893,3,0.055,4,0.048,5,0.055,10,0.137,11,0.194,12,0.814,16,0.216,17,0.006,19,0.245,27,0.082,35,4.084,38,2.75,49,1.835,51,3.828,76,2.91,88,0.004,89,0.004,96,0.734,101,3.696,102,2.944,106,2.056,122,2.078,123,4.744,124,3.174,127,5.069,128,3.744,130,4.313,131,4.508,145,5.604,146,4.606,147,5.653,148,5.325,153,6.904,154,3.981,155,5.604,156,5.533,191,3.974,194,1.83,238,2.225,274,4.439,285,4.361,286,4.744,379,1.403,506,3.535,509,2.464,794,1.802,1356,7.365,1937,3.981,1944,5.116,2132,5.341,2743,4.914,3089,4.919,3705,6.192,3779,6.315,3828,4.606,3829,5.325,3830,5.325,3831,6.844,3832,6.315,3833,6.844,3834,7.982,3835,6.315,3836,6.536,3837,7.365,3838,4.156,3839,6.844,3840,8.256,3841,5.325,3842,5.325,3843,5.325,3844,5.325,3845,5.325,3846,5.325]],["title/injectables/StoreEffects.html",[259,1.417,4779,4.384]],["body/injectables/StoreEffects.html",[3,0.059,4,0.052,5,0.059,10,0.147,11,0.203,16,0.174,17,0.006,19,0.25,27,0.059,32,1.277,44,2.133,88,0.004,89,0.004,90,0.605,128,4.324,137,1.5,147,4.28,184,1.509,187,1.13,205,0.482,259,2.317,260,7.943,261,2.722,263,7.216,264,7.216,273,2.029,274,2.957,300,1.668,308,1.165,369,2.406,501,1.695,504,5.725,4769,7.165,4779,7.165,4780,6.397,4781,8.007,4782,6.397,4783,8.007,4784,6.397,4785,9.43,4786,9.158,4787,8.739,4788,8.007,4789,6.397,4790,8.007,4791,8.007,4792,6.397,4793,5.725,4794,6.397]],["title/interfaces/StoreState.html",[0,0.078,3864,3.589]],["body/interfaces/StoreState.html",[0,0.102,2,1.203,3,0.059,4,0.052,5,0.059,10,0.147,11,0.203,16,0.175,17,0.006,19,0.251,26,3.329,27,0.074,28,1.805,29,0.962,42,1.826,44,2.037,61,2.427,68,2.665,88,0.004,89,0.004,90,0.606,127,5.496,128,2.838,130,3.613,131,3.417,148,4.519,152,0.867,156,3.974,171,2.066,205,0.483,245,1.514,259,2.319,268,2.861,272,1.58,286,5.685,764,2.709,960,2.527,1334,6.769,2993,7.221,3494,5.597,3682,4.959,3836,5.872,3838,6.108,3864,5.872,4713,4.959,4717,6.617,4718,6.617,4719,5.29,4768,6.617,4771,5.29,4795,5.733,4796,8.443,4797,5.733,4798,5.29,4799,5.733,4800,5.733,4801,5.733,4802,7.172,4803,5.733,4804,5.733,4805,7.172,4806,7.172,4807,5.733,4808,5.733,4809,5.733,4810,5.733]],["title/injectables/StoreStateService.html",[259,1.417,4798,4.045]],["body/injectables/StoreStateService.html",[0,0.082,2,0.768,3,0.047,4,0.041,5,0.047,10,0.118,11,0.175,12,0.826,16,0.21,17,0.006,19,0.233,26,2.659,27,0.064,28,1.501,29,1.178,32,0.713,36,3.283,42,1.459,44,1.827,61,2.096,68,2.796,88,0.004,89,0.004,90,0.484,96,1.037,98,4.74,113,3.174,114,1.817,127,4.152,128,2.267,130,2.885,131,3.692,138,4.152,148,3.904,151,5.215,152,1.061,156,3.174,171,1.854,180,1.482,183,1.252,184,1.476,187,1.19,193,2.321,196,1.674,205,0.385,245,1.209,259,2.003,261,2.177,268,3.039,272,1.261,274,4.351,286,4.294,298,2.765,300,1.2,308,0.651,367,3.199,369,1.731,392,2.708,641,5.105,764,2.34,815,2.473,960,3.094,1140,2.804,1334,6.073,2993,6.478,3494,6.664,3682,3.961,3836,5.073,3838,4.835,3848,5.716,3849,5.716,3850,5.716,3851,5.716,3852,5.716,3855,4.225,3857,4.225,3859,4.225,3861,4.225,3862,4.225,3864,5.073,3866,4.225,4713,6.797,4717,5.716,4718,5.716,4719,4.225,4742,4.579,4743,4.579,4744,4.579,4745,4.579,4766,4.579,4767,4.579,4768,5.716,4771,4.225,4795,4.579,4796,6.195,4797,4.579,4798,5.716,4799,4.579,4800,7.522,4801,4.579,4802,6.195,4803,6.195,4804,4.579,4805,6.195,4806,6.195,4807,4.579,4808,6.195,4809,4.579,4810,4.579,4811,6.922,4812,6.922,4813,5.117,4814,5.117,4815,5.117,4816,5.117]],["title/interfaces/TableCellTemplate.html",[0,0.078,4817,4.384]],["body/interfaces/TableCellTemplate.html",[0,0.026,2,0.247,3,0.015,4,0.013,5,0.015,7,2.17,10,0.183,11,0.072,12,0.774,14,2.359,15,2.455,16,0.098,17,0.006,19,0.2,20,2.094,21,0.989,26,0.857,27,0.015,28,1.44,29,0.429,32,1.127,34,1.836,36,0.616,38,0.762,41,0.779,42,1.895,44,1.994,47,1.345,49,2.042,50,1.714,54,1.293,55,0.606,57,2.754,61,1.921,64,2.705,66,1.958,70,4.621,72,0.639,73,1.015,74,0.548,76,1.716,81,2.821,83,2.475,88,0.002,89,0.002,90,0.528,97,0.797,98,2.132,102,2.231,105,1.772,106,0.768,107,1.208,109,0.677,114,1.984,122,1.32,128,2.475,134,3.72,135,2.263,136,2.455,137,1.039,152,0.811,162,1.192,173,1.061,174,1.145,176,0.857,183,0.298,184,1.45,187,0.352,190,1.278,191,0.857,194,0.878,196,0.517,203,1.127,205,0.124,206,0.484,209,0.989,215,1.475,233,0.857,236,1.208,237,2.7,244,2.557,250,1.103,253,1.208,255,2.7,256,1.208,257,1.475,272,0.406,294,0.395,298,0.484,300,1.541,301,1.995,306,3.28,308,1.108,311,2.141,317,1.291,319,1.66,320,1.611,328,1.023,332,0.904,333,0.904,334,0.662,339,2.529,341,2.449,343,1.413,345,0.958,346,1.995,347,0.797,349,2.543,350,0.675,363,3.383,366,1.266,367,3.992,368,1.381,369,1.587,373,0.73,379,0.936,382,4.943,384,1.276,392,2.225,395,1.276,408,1.747,412,1.439,424,0.958,426,0.904,431,1.524,432,2.132,437,6.569,449,1.103,471,1.276,476,0.54,501,1.002,509,2.641,512,0.586,513,2.64,524,1.8,535,3.4,548,1.293,567,0.73,637,1.061,656,1.491,667,1.361,671,4.984,672,3.216,678,3.986,679,4.094,680,4.094,681,5.41,682,3.305,683,3.28,684,4.094,685,3.902,686,3.28,687,4.869,688,1.208,693,1.151,695,0.93,697,1.995,704,1.779,708,3.28,711,0.746,717,0.627,719,3.417,722,3.15,726,1.128,729,1.276,730,2.094,731,0.507,764,2.246,765,1.911,766,4.285,783,1.023,794,2.012,807,1.151,826,0.73,832,2.713,833,2.713,898,1.361,920,0.93,937,1.475,952,1.061,953,1.208,956,5.261,960,0.65,962,1.827,966,1.66,974,1.66,983,1.208,984,2.432,1005,0.92,1009,2.344,1015,1.66,1022,1.911,1023,0.93,1024,2.359,1028,0.958,1036,1.151,1062,0.93,1072,1.66,1073,0.958,1079,1.276,1083,2.344,1093,0.879,1095,1.151,1103,1.276,1104,2.406,1105,1.023,1109,1.475,1112,1.66,1113,1.061,1114,1.566,1116,3.383,1120,3.017,1122,2.359,1131,1.475,1143,1.361,1151,1.361,1153,1.208,1186,0.73,1217,0.904,1219,1.611,1226,1.061,1238,1.151,1281,1.485,1295,2.094,1305,1.714,1306,1.276,1403,1.208,1458,2.7,1472,1.475,1480,1.786,1485,2.641,1497,2.77,1506,0.73,1515,5.239,1570,3.491,1571,3.947,1609,6.569,1613,5.714,1665,1.361,1699,1.361,1734,1.208,1750,0.879,1753,1.475,1764,1.475,1829,2.017,1843,1.103,1918,1.35,1944,1.103,1945,1.786,1947,0.836,1963,2.529,1981,1.475,1982,1.061,2006,1.714,2017,1.276,2019,0.989,2024,1.485,2103,1.208,2123,3.738,2146,0.93,2174,1.276,2192,2.268,2203,0.816,2286,2.211,2289,4.188,2381,1.023,2449,1.151,2457,1.485,2469,2.641,2642,1.276,2644,5.487,2722,4.613,2746,2.557,2747,1.361,2839,1.475,2857,1.524,2862,2.359,3001,2.926,3036,1.475,3096,2.359,3221,1.475,3227,1.276,3228,1.103,3229,1.276,3230,1.276,3347,4.036,3351,1.361,3460,1.475,3598,2.557,3661,1.361,3896,5.893,3900,2.557,3901,1.361,3902,6.769,3904,1.475,3905,1.475,3907,1.475,3908,1.475,3909,1.475,3910,1.475,3912,1.475,3913,1.361,3914,1.475,3917,5.366,3918,4.564,3920,2.557,3927,2.359,3937,2.359,3957,2.359,3968,1.361,3969,1.475,3977,2.359,4299,3.491,4332,1.475,4345,1.276,4510,2.557,4627,1.475,4817,5,4818,1.649,4819,1.649,4820,2.857,4821,1.649,4822,2.857,4823,2.857,4824,5.587,4825,2.857,4826,2.857,4827,1.649,4828,1.649,4829,1.649,4830,2.857,4831,1.649,4832,1.649,4833,1.649,4834,1.649,4835,1.649,4836,1.649,4837,1.649,4838,2.857,4839,2.857,4840,1.649,4841,1.649,4842,1.649,4843,1.649,4844,1.649,4845,1.649,4846,1.649,4847,1.649,4848,3.781,4849,1.649,4850,1.649,4851,1.649,4852,1.649,4853,5.1,4854,1.649,4855,1.649,4856,1.649,4857,1.649,4858,1.649,4859,5.996,4860,4.51,4861,3.781,4862,3.781,4863,1.649,4864,4.51,4865,2.857,4866,1.649,4867,2.857,4868,3.781,4869,1.649,4870,1.649,4871,2.857,4872,3.781,4873,3.781,4874,2.857,4875,3.781,4876,2.857,4877,1.649,4878,1.649,4879,1.649,4880,1.649,4881,1.649,4882,1.649,4883,1.649,4884,1.649,4885,1.649,4886,1.649,4887,1.649,4888,1.649,4889,1.649,4890,1.649,4891,1.649,4892,1.649,4893,1.649,4894,1.649,4895,1.649,4896,1.649,4897,1.649,4898,1.649,4899,1.649,4900,1.649,4901,1.649,4902,1.649,4903,1.649,4904,1.649,4905,1.649,4906,2.857,4907,1.649,4908,1.649,4909,1.649,4910,1.649,4911,1.649,4912,1.649,4913,1.649,4914,1.649,4915,1.649,4916,2.857,4917,1.649,4918,1.649,4919,1.649,4920,1.649,4921,3.781,4922,1.649,4923,1.649,4924,1.649,4925,1.649,4926,1.649,4927,1.649,4928,1.649,4929,1.649,4930,1.649,4931,1.649,4932,1.649,4933,1.649,4934,1.649,4935,2.857,4936,1.649,4937,1.649,4938,2.857,4939,1.649,4940,1.649,4941,1.649,4942,1.649,4943,1.649,4944,1.649,4945,2.857,4946,1.649,4947,1.649,4948,3.781,4949,2.857,4950,1.649,4951,1.649,4952,1.649,4953,1.649,4954,1.649,4955,1.649,4956,1.649,4957,1.649,4958,1.649,4959,1.649,4960,1.649,4961,1.649,4962,2.857,4963,1.649,4964,1.649,4965,1.649,4966,1.649,4967,1.649,4968,1.649,4969,1.649,4970,2.857,4971,1.649,4972,1.649,4973,1.649,4974,1.649,4975,1.649,4976,1.649,4977,1.649,4978,1.649,4979,1.649,4980,1.649,4981,2.857,4982,2.857,4983,2.857,4984,2.857,4985,1.649,4986,1.649,4987,1.649,4988,1.649,4989,1.649,4990,1.649,4991,1.649,4992,1.649,4993,1.649,4994,1.649,4995,1.649,4996,1.649,4997,1.649,4998,1.649,4999,2.857,5000,1.649,5001,1.649,5002,1.649,5003,1.649,5004,1.649,5005,1.649,5006,1.649,5007,1.649,5008,1.649,5009,1.649,5010,1.649,5011,1.649,5012,1.649,5013,1.649,5014,1.649,5015,1.649,5016,1.649,5017,1.649,5018,1.649,5019,1.649,5020,1.649,5021,1.649,5022,1.649,5023,1.649,5024,1.649,5025,1.649,5026,1.649,5027,1.649,5028,1.649,5029,1.649,5030,1.649,5031,1.649,5032,1.649,5033,1.649,5034,1.649,5035,1.649,5036,1.649]],["title/components/TestDisplayContentComponent.html",[109,0.735,553,2.367]],["body/components/TestDisplayContentComponent.html",[3,0.043,4,0.038,5,0.043,10,0.107,11,0.164,17,0.005,19,0.226,27,0.081,28,1.727,47,1.635,68,2.686,88,0.003,89,0.003,90,0.832,109,1.382,114,2.652,171,1.908,179,1.27,180,1.658,182,2.775,187,0.8,205,0.351,245,1.1,292,0.679,293,2.2,294,1.116,298,3.084,300,1.472,304,2.026,341,2.446,361,2.2,478,2.25,479,2.559,480,1.711,481,1.803,484,3.21,485,2.707,507,4.596,509,2.907,512,3.205,514,2.303,515,2.935,516,1.555,517,3.996,518,2.303,519,2.303,520,2.25,521,2.021,522,2.303,523,2.25,524,3.134,525,2.303,526,2.25,527,2.303,528,3.21,529,2.303,530,3.136,531,3.21,532,2.25,533,2.063,534,2.25,535,3.506,536,2.303,537,3.996,538,2.25,539,2.2,540,2.25,541,2.106,542,2.303,543,2.2,544,2.2,545,2.303,546,2.25,547,2.2,548,2.106,549,2.303,550,2.25,551,1.906,552,2.303,553,3.904,554,2.303,555,3.136,556,3.21,557,3.136,558,3.136,559,2.303,560,3.136,561,2.303,562,3.136,563,2.656,564,2.303,565,2.303,566,2.303,567,2.063,568,1.548,569,2.152,570,2.152,571,2.303,572,2.2,573,2.303,574,2.303,575,2.303,576,2.2,577,2.303,578,2.152,579,2.2,580,2.303,581,3.601,582,3.926,583,2.303,584,2.303,585,2.106,586,2.2,587,2.303,588,2.2,589,2.303,590,2.2,591,2.303,592,2.152,593,2.152,594,2.2,595,2.303,596,2.2,597,2.303,598,2.2,599,2.303,600,2.2,601,2.303,602,1.771,603,2.2,604,2.152,605,2.2,606,2.152,607,2.152,608,2.152,609,1.871,610,1.906,611,1.906,612,2.152,613,2.303,614,2.063,615,2.303,616,2.2,617,2.303,618,2.021,619,2.152,620,2.303,621,2.152,622,2.303,623,2.2,624,2.303,625,2.303,652,2.303,731,1.432,1023,4.211,1093,2.483,1251,5.275,1468,2.626,1885,4.025,1890,2.995,1892,4.996,5037,5.215,5038,3.252,5039,6.488,5040,4.531,5041,3.252,5042,3.252]],["title/components/TestErrorComponent.html",[109,0.735,555,2.367]],["body/components/TestErrorComponent.html",[3,0.042,4,0.037,5,0.042,10,0.103,11,0.161,12,0.578,16,0.098,17,0.005,19,0.223,27,0.08,28,1.864,32,0.628,47,1.698,68,2.974,88,0.003,89,0.003,90,0.823,109,1.37,114,2.605,136,2.596,164,4.242,171,1.982,179,1.229,180,1.653,182,2.883,184,0.994,187,0.905,205,0.339,245,1.064,255,2.698,292,0.657,293,2.129,294,1.08,298,3.08,300,1.455,304,1.98,308,0.573,341,2.635,361,2.129,478,2.177,479,3.14,480,1.655,481,1.745,484,3.137,485,2.646,507,4.571,509,2.881,512,2.605,514,2.229,515,2.868,516,1.519,517,3.939,518,2.229,519,2.229,520,2.177,521,1.956,522,2.229,523,2.177,524,3.117,525,2.229,526,2.177,527,2.229,528,3.137,529,2.229,530,3.064,531,3.137,532,2.177,533,1.996,534,2.177,535,3.456,536,2.229,537,3.939,538,2.177,539,2.129,540,2.177,541,2.038,542,2.229,543,2.129,544,2.129,545,2.229,546,2.177,547,2.129,548,2.038,549,2.229,550,2.177,551,1.844,552,2.229,553,3.064,554,2.229,555,3.848,556,3.137,557,3.064,558,3.064,559,2.229,560,3.064,561,2.229,562,3.064,563,2.596,564,2.229,565,2.229,566,2.229,567,1.996,568,1.498,569,2.082,570,2.082,571,2.229,572,2.129,573,2.229,574,2.229,575,2.229,576,2.129,577,2.229,578,2.082,579,2.129,580,2.229,581,3.85,582,3.68,583,2.229,584,2.229,585,2.038,586,2.129,587,2.229,588,2.129,589,2.229,590,2.129,591,2.229,592,2.082,593,2.082,594,2.129,595,2.229,596,2.129,597,2.229,598,2.129,599,2.229,600,2.129,601,2.229,602,1.714,603,2.129,604,2.082,605,2.129,606,2.082,607,2.082,608,2.082,609,1.81,610,1.844,611,1.844,612,2.082,613,2.229,614,1.996,615,2.229,616,2.129,617,2.229,618,1.956,619,2.082,620,2.229,621,2.082,622,2.229,623,2.129,624,2.229,625,2.229,641,4.137,652,2.229,731,1.385,751,3.004,1023,3.576,1093,2.403,1251,3.803,1468,2.541,1802,3.933,1876,2.702,1885,3.933,1890,2.898,1892,3.014,5037,3.147,5038,3.147,5040,4.428,5041,3.147,5042,3.147,5043,4.908,5044,3.487]],["title/components/TestErrorDataComponent.html",[109,0.735,557,2.367]],["body/components/TestErrorDataComponent.html",[3,0.041,4,0.036,5,0.041,10,0.103,11,0.16,12,0.577,16,0.098,17,0.005,19,0.223,27,0.08,28,1.893,32,0.626,47,1.697,68,2.971,88,0.003,89,0.003,90,0.822,109,1.369,114,2.601,136,2.59,164,4.233,171,1.98,179,1.225,180,1.652,182,2.88,184,0.992,187,0.903,205,0.338,245,1.061,255,2.692,292,0.655,293,2.122,294,1.076,298,3.08,300,1.453,304,1.976,308,0.572,341,2.633,361,2.122,478,2.171,479,3.136,480,1.651,481,1.74,484,3.13,485,2.64,507,4.569,509,2.878,512,2.601,514,2.222,515,2.862,516,1.516,517,3.934,518,2.222,519,2.222,520,2.171,521,1.95,522,2.222,523,2.171,524,3.115,525,2.222,526,2.171,527,2.222,528,3.13,529,2.222,530,3.058,531,3.13,532,2.171,533,1.99,534,2.171,535,3.452,536,2.222,537,3.934,538,2.171,539,2.122,540,2.171,541,2.032,542,2.222,543,2.122,544,2.122,545,2.222,546,2.171,547,2.122,548,2.032,549,2.222,550,2.171,551,1.839,552,2.222,553,3.058,554,2.222,555,3.058,556,3.13,557,3.843,558,3.058,559,2.222,560,3.058,561,2.222,562,3.058,563,2.59,564,2.222,565,2.222,566,2.222,567,1.99,568,1.494,569,2.076,570,2.076,571,2.222,572,2.122,573,2.222,574,2.222,575,2.222,576,2.122,577,2.222,578,2.076,579,2.122,580,2.222,581,3.848,582,3.675,583,2.222,584,2.222,585,2.032,586,2.122,587,2.222,588,2.122,589,2.222,590,2.122,591,2.222,592,2.076,593,2.076,594,2.122,595,2.222,596,2.122,597,2.222,598,2.122,599,2.222,600,2.122,601,2.222,602,1.709,603,2.122,604,2.076,605,2.122,606,2.076,607,2.076,608,2.076,609,1.805,610,1.839,611,1.839,612,2.076,613,2.222,614,1.99,615,2.222,616,2.122,617,2.222,618,1.95,619,2.076,620,2.222,621,2.076,622,2.222,623,2.122,624,2.222,625,2.222,641,4.131,652,2.222,731,1.381,751,2.999,1023,3.568,1093,2.396,1251,3.795,1468,2.533,1802,3.925,1876,2.694,1885,3.925,1890,2.89,1892,3.005,5037,3.137,5038,3.137,5040,4.419,5041,3.137,5042,3.137,5043,4.898,5044,3.477]],["title/components/TestLoadingComponent.html",[109,0.735,558,2.367]],["body/components/TestLoadingComponent.html",[3,0.042,4,0.037,5,0.042,10,0.103,11,0.161,12,0.578,16,0.098,17,0.005,19,0.223,27,0.08,28,1.864,32,0.628,47,1.698,68,2.648,88,0.003,89,0.003,90,0.823,109,1.37,114,3.091,136,2.596,164,4.242,171,1.982,179,1.229,180,1.653,182,2.883,184,0.994,187,0.905,205,0.339,245,1.064,255,2.698,292,0.657,293,2.129,294,1.08,298,3.08,300,1.455,304,1.98,308,0.573,341,2.635,361,2.129,478,2.177,479,3.14,480,1.655,481,1.745,484,3.137,485,2.646,507,4.571,509,2.881,512,2.605,514,2.229,515,2.868,516,1.519,517,3.939,518,2.229,519,2.229,520,2.177,521,1.956,522,2.229,523,2.177,524,3.117,525,2.229,526,2.177,527,2.229,528,3.137,529,2.229,530,3.064,531,3.137,532,2.177,533,1.996,534,2.177,535,3.456,536,2.229,537,3.939,538,2.177,539,2.129,540,2.177,541,2.038,542,2.229,543,2.129,544,2.129,545,2.229,546,2.177,547,2.129,548,2.038,549,2.229,550,2.177,551,1.844,552,2.229,553,3.064,554,2.229,555,3.064,556,3.137,557,3.064,558,3.848,559,2.229,560,3.064,561,2.229,562,3.064,563,2.596,564,2.229,565,2.229,566,2.229,567,1.996,568,1.498,569,2.082,570,2.082,571,2.229,572,2.129,573,2.229,574,2.229,575,2.229,576,2.129,577,2.229,578,2.082,579,2.129,580,2.229,581,3.85,582,3.68,583,2.229,584,2.229,585,2.038,586,2.129,587,2.229,588,2.129,589,2.229,590,2.129,591,2.229,592,2.082,593,2.082,594,2.129,595,2.229,596,2.129,597,2.229,598,2.129,599,2.229,600,2.129,601,2.229,602,1.714,603,2.129,604,2.082,605,2.129,606,2.082,607,2.082,608,2.082,609,1.81,610,1.844,611,1.844,612,2.082,613,2.229,614,1.996,615,2.229,616,2.129,617,2.229,618,1.956,619,2.082,620,2.229,621,2.082,622,2.229,623,2.129,624,2.229,625,2.229,641,4.137,652,2.229,731,1.385,751,3.004,1023,3.576,1093,2.403,1251,3.803,1468,2.541,1802,3.933,1876,2.702,1885,3.933,1890,2.898,1892,3.014,5037,3.147,5038,3.147,5040,4.428,5041,3.147,5042,3.147,5043,4.908,5044,3.487]],["title/components/TestOfflineComponent.html",[109,0.735,560,2.367]],["body/components/TestOfflineComponent.html",[3,0.042,4,0.037,5,0.042,10,0.103,11,0.161,12,0.578,16,0.098,17,0.005,19,0.223,27,0.08,28,1.864,32,0.628,47,1.698,68,2.648,88,0.003,89,0.003,90,0.823,109,1.37,114,2.605,136,2.596,164,4.242,171,1.982,179,1.229,180,1.653,182,2.883,184,0.994,187,0.905,205,0.339,245,1.064,255,2.698,292,0.657,293,2.129,294,1.08,298,3.08,300,1.455,304,1.98,308,0.573,341,2.635,361,2.129,478,2.177,479,3.14,480,1.655,481,1.745,484,3.137,485,2.646,507,4.571,509,2.881,512,2.605,514,2.229,515,2.868,516,1.519,517,3.939,518,2.229,519,2.229,520,2.177,521,1.956,522,2.229,523,2.177,524,3.117,525,2.229,526,2.177,527,2.229,528,3.137,529,2.229,530,3.064,531,3.137,532,2.177,533,1.996,534,2.177,535,3.456,536,2.229,537,3.939,538,2.177,539,2.129,540,2.177,541,2.038,542,2.229,543,2.129,544,2.129,545,2.229,546,2.177,547,2.129,548,2.038,549,2.229,550,2.177,551,1.844,552,2.229,553,3.064,554,2.229,555,3.064,556,3.137,557,3.064,558,3.064,559,2.229,560,3.848,561,2.229,562,3.064,563,2.596,564,2.229,565,2.229,566,2.229,567,1.996,568,1.498,569,2.082,570,2.082,571,2.229,572,2.129,573,2.229,574,2.229,575,2.229,576,2.129,577,2.229,578,2.082,579,2.129,580,2.229,581,3.85,582,3.68,583,2.229,584,2.229,585,2.038,586,2.129,587,2.229,588,2.129,589,2.229,590,2.129,591,2.229,592,2.082,593,2.082,594,2.129,595,2.229,596,2.129,597,2.229,598,2.129,599,2.229,600,2.129,601,2.229,602,1.714,603,2.129,604,2.082,605,2.129,606,2.082,607,2.082,608,2.082,609,1.81,610,1.844,611,1.844,612,2.082,613,2.229,614,1.996,615,2.229,616,2.129,617,2.229,618,1.956,619,2.082,620,2.229,621,2.082,622,2.229,623,2.129,624,2.229,625,2.229,641,4.137,652,2.229,731,1.385,751,3.004,1023,3.576,1093,2.403,1251,3.803,1468,2.541,1802,3.933,1876,2.702,1885,5.206,1890,2.898,1892,3.014,5037,3.147,5038,3.147,5040,4.428,5041,3.147,5042,3.147,5043,4.908,5044,3.487]],["title/components/TestOverrideDisplayContentComponent.html",[109,0.735,562,2.367]],["body/components/TestOverrideDisplayContentComponent.html",[3,0.042,4,0.037,5,0.042,10,0.104,11,0.162,17,0.005,19,0.224,27,0.08,28,1.716,47,1.619,68,2.659,88,0.003,89,0.003,90,0.826,109,1.374,114,2.991,171,1.889,179,1.241,180,1.654,182,2.747,187,0.986,205,0.343,245,1.075,292,0.663,293,2.15,294,1.09,298,3.081,300,1.555,304,1.994,341,2.421,361,2.15,478,2.199,479,2.518,480,1.672,481,1.762,484,3.159,485,2.664,507,4.578,509,2.889,512,3.25,514,2.251,515,2.888,516,1.53,517,3.956,518,2.251,519,2.251,520,2.199,521,1.975,522,2.251,523,2.199,524,3.122,525,2.251,526,2.199,527,2.251,528,3.159,529,2.251,530,3.086,531,3.159,532,2.199,533,2.016,534,2.199,535,3.471,536,2.251,537,3.956,538,2.199,539,2.15,540,2.199,541,2.058,542,2.251,543,2.15,544,2.15,545,2.251,546,2.199,547,2.15,548,2.058,549,2.251,550,2.199,551,1.863,552,2.251,553,3.086,554,2.251,555,3.086,556,3.159,557,3.086,558,3.086,559,2.251,560,3.086,561,2.251,562,3.865,563,3.02,564,2.251,565,2.251,566,2.251,567,2.016,568,1.513,569,2.103,570,2.103,571,2.251,572,2.15,573,2.251,574,2.251,575,2.251,576,2.15,577,2.251,578,2.103,579,2.15,580,2.251,581,3.575,582,3.892,583,2.251,584,2.251,585,2.058,586,2.15,587,2.251,588,2.15,589,2.251,590,2.15,591,2.251,592,2.103,593,2.103,594,2.15,595,2.251,596,2.15,597,2.251,598,2.15,599,2.251,600,2.15,601,2.251,602,1.731,603,2.15,604,2.103,605,2.15,606,2.103,607,2.103,608,2.103,609,1.828,610,1.863,611,1.863,612,2.103,613,2.251,614,2.016,615,2.251,616,2.15,617,2.251,618,1.975,619,2.103,620,2.251,621,2.103,622,2.251,623,2.15,624,2.251,625,2.251,652,3.159,731,1.399,1023,4.159,1093,2.427,1251,5.237,1468,2.566,1885,3.961,1890,2.927,1892,5.634,5037,5.882,5038,3.178,5040,5.151,5041,3.178,5042,5.882,5045,6.384,5046,6.384,5047,4.55]],["title/pipes/TransformPipe.html",[174,1.483,5048,4.384]],["body/pipes/TransformPipe.html",[3,0.058,4,0.051,5,0.058,12,0.572,15,4.09,16,0.172,17,0.006,19,0.166,27,0.058,32,1.408,34,2.287,44,2.118,47,1.6,49,1.716,54,3.576,88,0.004,89,0.004,90,0.593,96,0.975,102,3.91,174,2.753,176,3.257,177,3.759,179,1.709,180,1.418,182,2.715,183,1.134,184,1.239,185,5.561,186,5.287,187,0.773,193,1.949,194,2.43,196,1.134,200,4.741,203,3.415,204,4.332,205,0.472,206,1.841,209,4.741,211,4.592,328,4.903,347,3.029,379,1.783,717,3.007,809,6.118,842,4.031,865,2.807,2517,4.851,3174,6.118,5048,8.136,5049,6.267,5050,9.829,5051,7.903,5052,7.903,5053,6.267,5054,8.657,5055,7.903,5056,7.903,5057,6.267,5058,6.267]],["title/interfaces/TranslationLoaderActionEntity.html",[0,0.078,2418,4.045]],["body/interfaces/TranslationLoaderActionEntity.html",[0,0.118,2,1.11,3,0.068,4,0.06,5,0.081,10,0.17,11,0.222,16,0.161,17,0.005,27,0.068,88,0.005,89,0.005,96,0.912,114,3.418,122,3.054,152,1.259,271,2.549,392,3.164,704,1.651,837,4.053,1636,4.793,1818,6.107,2399,6.107,2400,6.107,2402,6.503,2418,7.221,3089,4.757,5059,6.618,5060,7.826,5061,7.395]],["title/dependencies.html",[240,2.845,5062,4.872]],["body/dependencies.html",[17,0.006,21,4.232,22,5.461,23,5.461,88,0.005,89,0.005,124,3.763,154,4.72,205,0.531,272,1.739,524,2.273,539,3.333,802,3.333,828,4.377,1093,3.763,1223,5.17,1235,4.538,1257,3.261,1332,6.314,1418,3.666,1421,3.93,1637,4.72,1638,4.538,1843,4.72,2389,6.314,2489,5.826,2490,6.314,2491,6.314,2669,4.538,2671,4.72,3602,7.609,3687,5.461,4793,6.314,5062,5.826,5063,7.055,5064,7.055,5065,9.962,5066,7.055,5067,7.055,5068,7.055,5069,9.474,5070,7.055,5071,7.055,5072,7.055,5073,7.055,5074,7.055,5075,7.055,5076,7.055,5077,7.055,5078,7.055,5079,7.055,5080,7.055,5081,7.055,5082,7.055]],["title/miscellaneous/enumerations.html",[5083,3.153,5084,5.281]],["body/miscellaneous/enumerations.html",[10,0.176,17,0.005,32,1.356,88,0.005,89,0.005,114,3.355,122,2.673,392,2.466,714,5.74,1129,7.986,1130,7.986,1636,4.195,2399,6.32,2400,6.32,2402,6.232,5059,7.986,5060,7.986,5083,5.924,5084,6.85,5085,7.654,5086,8.923,5087,7.654,5088,7.654]],["title/miscellaneous/functions.html",[809,4.567,5083,3.153]],["body/miscellaneous/functions.html",[10,0.172,12,0.685,16,0.163,17,0.005,57,3.258,88,0.005,89,0.005,96,0.925,152,1.193,180,1.229,193,1.85,196,1.695,268,2.343,379,1.377,809,5.808,1015,5.125,1145,5.02,1161,6.543,1221,7.283,1223,6.865,1226,4.827,1418,4.869,5083,5.808,5089,7.504,5090,7.504,5091,8.82,5092,7.504,5093,7.504,5094,7.504,5095,7.504,5096,7.504,5097,8.82,5098,7.504,5099,7.504]],["title/index.html",[10,0.094,5100,3.646,5101,3.646]],["body/index.html",[4,0.057,7,2.209,17,0.004,26,4.587,41,3.303,49,1.716,54,2.349,61,1.572,88,0.004,89,0.004,97,2.509,122,1.813,134,3.221,135,1.647,180,1.145,191,2.698,203,3.481,207,4.287,209,4.741,240,6.814,272,1.724,274,3.231,311,1.673,335,4.185,379,0.953,382,3.34,404,5.411,412,1.975,431,2.769,479,2.757,485,2.167,533,3.502,541,3.163,695,2.928,704,1.159,717,2.66,797,3.626,815,2.509,902,2.509,956,4.903,1011,5.123,1048,2.698,1140,2.846,1142,2.846,1143,4.287,1217,2.846,1238,4.882,1243,5.123,1251,3.114,1257,4.366,1283,4.646,1319,2.509,1371,3.017,1418,4.107,1431,4.019,1606,3.626,1638,3.34,1644,3.017,1689,5.411,1711,7.288,1927,3.804,2184,2.769,2279,5.502,2308,5.411,2383,3.804,2402,3.626,2469,3.626,2517,4.019,2544,4.287,2649,4.646,2677,3.942,2731,4.019,2745,7.567,3087,4.287,3239,4.019,3303,2.928,3307,4.062,3586,4.646,3732,4.646,3782,4.646,3968,6.526,4091,4.287,4671,7.073,4672,4.646,5062,4.287,5102,6.991,5103,5.192,5104,6.991,5105,5.192,5106,7.073,5107,7.073,5108,7.073,5109,5.192,5110,5.192,5111,5.192,5112,5.192,5113,5.192,5114,5.192,5115,5.192,5116,5.192,5117,5.192,5118,5.192,5119,6.991,5120,5.192,5121,6.991,5122,5.192,5123,5.192,5124,5.192,5125,5.192,5126,5.192,5127,5.192,5128,5.192,5129,5.192,5130,5.192,5131,5.192,5132,5.192,5133,5.192,5134,5.192,5135,5.192,5136,5.192,5137,5.192,5138,5.192,5139,5.192,5140,5.192,5141,5.192,5142,5.192,5143,5.192,5144,5.192,5145,5.192,5146,5.192,5147,5.192,5148,5.192,5149,6.991,5150,5.192,5151,5.192,5152,5.192,5153,6.991,5154,5.192,5155,5.192,5156,6.991,5157,5.192,5158,5.192,5159,5.192,5160,5.192,5161,5.192,5162,5.192,5163,5.192,5164,5.192,5165,5.192,5166,5.192,5167,5.192,5168,5.192,5169,5.192,5170,5.192,5171,5.192,5172,5.192,5173,5.192,5174,5.192,5175,5.411,5176,4.287,5177,7.567,5178,6.256,5179,4.646,5180,4.646,5181,4.646,5182,4.646,5183,4.646,5184,4.646,5185,4.646,5186,4.646,5187,4.646,5188,8.564,5189,4.646,5190,4.646,5191,4.646,5192,6.256,5193,4.646,5194,4.646,5195,4.646,5196,4.646,5197,4.646,5198,4.646,5199,4.646,5200,4.646,5201,6.256,5202,4.646,5203,4.646,5204,4.646,5205,6.256,5206,6.256,5207,4.646,5208,4.646,5209,4.646,5210,4.646,5211,4.646,5212,4.646,5213,4.646,5214,4.646,5215,4.646,5216,4.646,5217,4.646,5218,4.646,5219,4.646,5220,4.646,5221,4.646,5222,4.646,5223,4.646,5224,4.646,5225,4.646,5226,4.646,5227,4.646,5228,4.646,5229,4.646,5230,4.646]],["title/license.html",[5100,3.646,5101,3.646,5175,3.153]],["body/license.html",[17,0.004,49,1.502,88,0.004,89,0.004,122,2.416,203,3.314,209,5.428,311,2.229,379,1.269,412,2.632,704,1.545,1048,3.595,1243,6.157,1251,4.149,1319,3.343,1431,5.354,1711,5.712,1927,5.069,2308,6.503,2383,5.069,2517,5.354,2544,5.712,4091,5.712,5106,6.19,5107,6.19,5108,6.19,5175,5.354,5176,5.712,5177,8.423,5178,7.519,5179,6.19,5180,6.19,5181,6.19,5182,6.19,5183,6.19,5184,6.19,5185,6.19,5186,6.19,5187,6.19,5188,9.025,5189,6.19,5190,6.19,5191,6.19,5192,7.519,5193,6.19,5194,6.19,5195,6.19,5196,6.19,5197,6.19,5198,6.19,5199,6.19,5200,6.19,5201,7.519,5202,6.19,5203,6.19,5204,6.19,5205,7.519,5206,7.519,5207,6.19,5208,6.19,5209,6.19,5210,6.19,5211,6.19,5212,6.19,5213,6.19,5214,6.19,5215,6.19,5216,6.19,5217,6.19,5218,6.19,5219,6.19,5220,6.19,5221,6.19,5222,6.19,5223,6.19,5224,6.19,5225,6.19,5226,6.19,5227,6.19,5228,6.19,5229,6.19,5230,6.19]],["title/modules.html",[2648,5.549]],["body/modules.html",[17,0.005,88,0.005,89,0.005,2648,6.711]],["title/overview.html",[5231,6.014]],["body/overview.html",[2,1.195,17,0.005,88,0.005,89,0.005,92,4.773,176,4.136,261,3.387,294,1.907,479,3.139,5231,7.122,5232,7.958,5233,7.958,5234,7.958,5235,7.958,5236,7.958,5237,7.958]],["title/properties.html",[11,0.15,240,2.845]],["body/properties.html",[11,0.204,17,0.005,88,0.005,89,0.005,1371,4.673,5175,6.225,5176,6.64,5238,8.042]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":66,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TableCellTemplate.html":{}}}],["0.0.0",{"_index":5238,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":5082,"title":{},"body":{"dependencies.html":{}}}],["0754",{"_index":463,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["1",{"_index":1009,"title":{"injectables/NgxMediaQueryService-1.html":{}},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["1,2,3,4",{"_index":2686,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["1.0.0",{"_index":2389,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"dependencies.html":{}}}],["1.2.1",{"_index":5075,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":4285,"title":{},"body":{"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["11.1.0",{"_index":5079,"title":{},"body":{"dependencies.html":{}}}],["1200",{"_index":4666,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["13",{"_index":5235,"title":{},"body":{"overview.html":{}}}],["17.0.0",{"_index":5070,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":5232,"title":{},"body":{"overview.html":{}}}],["1].focus",{"_index":1014,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["1]?.focus",{"_index":1017,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["1fr",{"_index":1622,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["2",{"_index":2831,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["2.32.4",{"_index":5076,"title":{},"body":{"dependencies.html":{}}}],["20.0.0",{"_index":5069,"title":{},"body":{"dependencies.html":{}}}],["20.1.0",{"_index":5068,"title":{},"body":{"dependencies.html":{}}}],["20.2.0",{"_index":5064,"title":{},"body":{"dependencies.html":{}}}],["20.2.1",{"_index":5065,"title":{},"body":{"dependencies.html":{}}}],["2023",{"_index":5179,"title":{},"body":{"index.html":{},"license.html":{}}}],["2025",{"_index":5182,"title":{},"body":{"index.html":{},"license.html":{}}}],["24",{"_index":5234,"title":{},"body":{"overview.html":{}}}],["3",{"_index":2832,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"classes/NgxValidators.html":{}}}],["3.0.1",{"_index":5077,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":5080,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":223,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"injectables/NgxImageMarkerService.html":{}}}],["4.1.0",{"_index":5072,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":5074,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":2522,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["42",{"_index":5233,"title":{},"body":{"overview.html":{}}}],["4217",{"_index":1825,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["4217](https://en.wikipedia.org/wiki/iso_4217",{"_index":1835,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["474.603.875",{"_index":202,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["474603875",{"_index":201,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["5",{"_index":4119,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["5000",{"_index":4125,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["5100",{"_index":462,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["5px",{"_index":4310,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["7",{"_index":5236,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":5073,"title":{},"body":{"dependencies.html":{}}}],["7.8.0",{"_index":5078,"title":{},"body":{"dependencies.html":{}}}],["7061",{"_index":464,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["8",{"_index":225,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["88",{"_index":5237,"title":{},"body":{"overview.html":{}}}],["9",{"_index":219,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxStorageService.html":{}}}],["9]*[,.]{0,1}[0",{"_index":3824,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["_",{"_index":2862,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/TableCellTemplate.html":{}}}],["_blank",{"_index":2930,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["_removedvalue",{"_index":1795,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["_self",{"_index":2929,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["a11y",{"_index":336,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["a[data",{"_index":3583,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["abdurrahman",{"_index":5169,"title":{},"body":{"index.html":{}}}],["ability",{"_index":3634,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["above",{"_index":1048,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{},"license.html":{}}}],["abstract",{"_index":568,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["abstractcontrol",{"_index":389,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstraction",{"_index":3476,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstractions",{"_index":5124,"title":{},"body":{"index.html":{}}}],["abstracts",{"_index":245,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accept",{"_index":1688,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory",{"_index":1676,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory(name",{"_index":1686,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepted",{"_index":1700,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{}}}],["acceptservice",{"_index":1677,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptservice(category",{"_index":1691,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepttype",{"_index":1647,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["access",{"_index":4627,"title":{},"body":{"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accessibility",{"_index":3233,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["accessible",{"_index":785,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["accessor",{"_index":363,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/TableCellTemplate.html":{}}}],["accessors",{"_index":99,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourItemDirective.html":{}}}],["accessors.length",{"_index":427,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["according",{"_index":696,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["accordingly",{"_index":1963,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accordion",{"_index":527,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion'},{'name",{"_index":525,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion.component",{"_index":1096,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["account",{"_index":4320,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["acoolmethod",{"_index":4688,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["act",{"_index":1962,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["action",{"_index":122,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["action.id",{"_index":2441,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action.state",{"_index":2437,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action/has",{"_index":2291,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["actioncreator",{"_index":119,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["actionfromresult",{"_index":2440,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actionreducer",{"_index":123,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["actions",{"_index":128,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actions.channel",{"_index":4769,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["actions.concat(action.id",{"_index":2438,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.data",{"_index":4801,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["actions.filter((actionfromresult",{"_index":2439,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.videos",{"_index":4774,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["actiontype",{"_index":3326,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/SpecStoreService.html":{}}}],["activatedroute",{"_index":3492,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["activatedroutesnapshot",{"_index":3637,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["active",{"_index":921,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["actives",{"_index":4253,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["activetooltip",{"_index":4201,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["acts",{"_index":4055,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["actual",{"_index":107,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actual_component",{"_index":625,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["actually",{"_index":2072,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["adapter",{"_index":159,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["add",{"_index":135,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["addcharatindex",{"_index":210,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["addcharatindex(value",{"_index":222,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["added",{"_index":333,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["additional",{"_index":1254,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["addloadedtranslations",{"_index":2409,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["addloadedtranslations(translations",{"_index":2414,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["adds",{"_index":807,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["adjust",{"_index":4400,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["adjusted",{"_index":2758,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["advantage",{"_index":3561,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["advertisement",{"_index":3301,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affect",{"_index":3283,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affects",{"_index":3279,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["aftercontentchecked",{"_index":4823,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["afterviewinit",{"_index":910,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aftervisible",{"_index":4305,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["afterwards",{"_index":4399,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["again",{"_index":3596,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["alert",{"_index":3294,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{}}}],["alertdialog",{"_index":3254,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["alias",{"_index":903,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["allornothingrequired",{"_index":4553,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequired(control",{"_index":4559,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequirederror",{"_index":4564,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator",{"_index":4603,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator(control",{"_index":4617,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allow",{"_index":343,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["allowbeforeunloadhandler",{"_index":3643,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["allowclear",{"_index":2683,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["allowed",{"_index":2680,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["allowing",{"_index":3946,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["allowmultipleopenrows",{"_index":4904,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["allowmultiplerowsopen",{"_index":3906,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["allows",{"_index":323,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["allowzoom",{"_index":2681,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["along",{"_index":1989,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["alongside",{"_index":1478,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["already",{"_index":233,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["always",{"_index":1305,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["amount",{"_index":644,"title":{},"body":{"components/MockTourStepComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{}}}],["amountofsteps",{"_index":627,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["anchor",{"_index":2899,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["anchors",{"_index":3590,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["and/or",{"_index":5199,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular",{"_index":2279,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["angular's",{"_index":3277,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["angular/cdk",{"_index":5063,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/a11y",{"_index":822,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["angular/cdk/bidi",{"_index":3248,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/dialog",{"_index":3250,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/overlay",{"_index":4233,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/portal",{"_index":4235,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/table",{"_index":4821,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["angular/common",{"_index":1093,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":118,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["angular/compiler",{"_index":5066,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":205,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"dependencies.html":{}}}],["angular/core/rxjs",{"_index":2069,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["angular/forms",{"_index":21,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":3602,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"dependencies.html":{}}}],["angular/router",{"_index":1235,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"dependencies.html":{}}}],["animation",{"_index":4027,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["api",{"_index":1162,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["app",{"_index":3563,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["app.component.ts",{"_index":3574,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["appcomponent",{"_index":3575,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["append",{"_index":1531,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["appending",{"_index":2384,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["application",{"_index":1232,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["applications",{"_index":3130,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["applied",{"_index":3268,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxValidators.html":{}}}],["apply",{"_index":4004,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["approach",{"_index":3732,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["approaches",{"_index":2576,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["area",{"_index":2842,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["aren't",{"_index":2506,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxToastContainerComponent.html":{}}}],["args",{"_index":246,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["args{constructorparameters",{"_index":1420,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["arguments",{"_index":310,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aria",{"_index":674,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ariadescribedby",{"_index":3212,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arialabel",{"_index":3392,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["arialabelledby",{"_index":3213,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arising",{"_index":5228,"title":{},"body":{"index.html":{},"license.html":{}}}],["around",{"_index":4309,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["array",{"_index":432,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).foreach((tablecelltemplate",{"_index":4980,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).some((celltemplate",{"_index":4991,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.isarray(id",{"_index":3012,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["array.isarray(open",{"_index":998,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["array.isarray(value",{"_index":2174,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["arrayelementtype",{"_index":3691,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["arrowdown",{"_index":1034,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowdown(event",{"_index":1051,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowleft",{"_index":4487,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["arrowup",{"_index":1035,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowup(event",{"_index":1053,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["ascending",{"_index":1129,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["aside",{"_index":3084,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["asideshown",{"_index":3099,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["asobservable",{"_index":492,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["assertion",{"_index":3352,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["assertive",{"_index":1888,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["assets",{"_index":147,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{}}}],["assets.ts",{"_index":283,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/SpecStoreAssets.html":{}}}],["assigns",{"_index":4973,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["assistive",{"_index":786,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["associated",{"_index":5189,"title":{},"body":{"index.html":{},"license.html":{}}}],["async",{"_index":2271,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["atleastonerequired",{"_index":4554,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequired(options",{"_index":4565,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequirederror",{"_index":46,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator",{"_index":43,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator(options",{"_index":4620,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidatoroptions",{"_index":1,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["attach",{"_index":870,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["attached",{"_index":3274,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxTooltipService.html":{}}}],["attempt",{"_index":1290,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["attempted",{"_index":2599,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["attention",{"_index":3300,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["attr.aria",{"_index":4189,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["attr.class",{"_index":1526,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["attr.data",{"_index":1844,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["attr.role",{"_index":4022,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["attr.tabindex",{"_index":342,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["attr.target",{"_index":2935,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["attribute",{"_index":4902,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["attributes",{"_index":3240,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{}}}],["auth",{"_index":1258,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticated",{"_index":1145,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"miscellaneous/functions.html":{}}}],["authenticated.directive.ts",{"_index":2869,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:125",{"_index":2875,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:27",{"_index":2878,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:30",{"_index":2884,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:35",{"_index":2879,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:40",{"_index":2882,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:41",{"_index":2883,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:42",{"_index":2880,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:43",{"_index":2881,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:48",{"_index":2872,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:70",{"_index":2873,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:74",{"_index":2874,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:76",{"_index":2876,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:80",{"_index":2877,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated/is",{"_index":2868,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticatedcallhandler",{"_index":1215,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["authentication",{"_index":1223,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["authenticationresponse",{"_index":1331,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsesubject",{"_index":1259,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype",{"_index":1324,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype['session']['permissions",{"_index":1362,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationservice",{"_index":2206,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticationstatussubject",{"_index":1260,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authorized",{"_index":2519,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["authors",{"_index":5219,"title":{},"body":{"index.html":{},"license.html":{}}}],["auto",{"_index":1610,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxToastComponent.html":{}}}],["autoclearcookies",{"_index":1654,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autoclose",{"_index":3271,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["autodetect",{"_index":1641,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autofocus",{"_index":3289,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autofocustarget",{"_index":3249,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autogenerated",{"_index":4187,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["automatically",{"_index":2002,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{}}}],["autoshow",{"_index":1651,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["available",{"_index":1282,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["availablelanguages",{"_index":2371,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["availablelanguagessubject",{"_index":2545,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["availabletranslations",{"_index":2497,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["availabletranslations[path",{"_index":2505,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["avoid",{"_index":746,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["axis",{"_index":4315,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["back",{"_index":712,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["backdrop",{"_index":3266,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["base",{"_index":101,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxStore.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["based",{"_index":717,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["baseformaccessor",{"_index":91,"title":{"classes/BaseFormAccessor.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["basestore",{"_index":110,"title":{"interfaces/BaseStore.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreaction",{"_index":3844,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreactions",{"_index":129,"title":{"interfaces/BaseStoreActions.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreassets",{"_index":127,"title":{"interfaces/BaseStoreAssets.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["basestoreassetsgeneratoroptions",{"_index":145,"title":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreeffectsinterface",{"_index":125,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreselector",{"_index":3841,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreselectors",{"_index":132,"title":{"interfaces/BaseStoreSelectors.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["baseurl",{"_index":1148,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["baseurlhandler",{"_index":1190,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["basicentityadapteractions",{"_index":168,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["basicentityadapterreduceractions",{"_index":157,"title":{"interfaces/BasicEntityAdapterReducerActions.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["basicentitystate",{"_index":170,"title":{"interfaces/BasicEntityState.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["bc.onmessage",{"_index":1411,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["bc.onmessageerror",{"_index":1407,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["be62",{"_index":461,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["be62510007547061",{"_index":460,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["becomes",{"_index":4302,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["before",{"_index":2852,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["beforeunload",{"_index":3659,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforeunloadevent",{"_index":3652,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforevisible",{"_index":4303,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["behavior",{"_index":3661,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["behaviorsubject",{"_index":502,"title":{},"body":{"components/MockTourHolderComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["behaviorsubject('hello",{"_index":496,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["behaviorsubject('unset",{"_index":1277,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["behaviorsubject(0",{"_index":4654,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(1200",{"_index":4667,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(false",{"_index":2432,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["behaviorsubject(this.parsevalue(value",{"_index":3822,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["behaviorsubject(true",{"_index":4662,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(undefined",{"_index":1275,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["behaviour",{"_index":5031,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["being",{"_index":1113,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["belgian",{"_index":197,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["below",{"_index":39,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{}}}],["benoit",{"_index":4961,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["benoît",{"_index":5165,"title":{},"body":{"index.html":{}}}],["best",{"_index":698,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["better",{"_index":3965,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["between",{"_index":4282,"title":{},"body":{"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["bind(this",{"_index":2815,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["blob",{"_index":1200,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["blocked",{"_index":359,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["blueprint",{"_index":3833,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["blur",{"_index":759,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["body",{"_index":1176,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{}}}],["body.createelement(element",{"_index":3616,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["body.queryselector(selector.replace('{{id",{"_index":3613,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["boolean(action",{"_index":3370,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(availabletranslations[path",{"_index":2502,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["boolean(celltemplate.footertemplate",{"_index":4992,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["boolean(closed",{"_index":3371,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(get(layout",{"_index":3207,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["boolean(tour?.[index",{"_index":4376,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["both",{"_index":1460,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["bottom",{"_index":3996,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["branch",{"_index":5149,"title":{},"body":{"index.html":{}}}],["breadcrumb",{"_index":2898,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["break",{"_index":3933,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["breaking",{"_index":4674,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["brief",{"_index":3246,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["broadcast",{"_index":1394,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel",{"_index":1379,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel's",{"_index":1433,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel(...args",{"_index":1426,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broken",{"_index":2524,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["browser",{"_index":1421,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{}}}],["browserdocument",{"_index":4694,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["browserwindow",{"_index":3000,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["browserwindow.matchmedia(query",{"_index":3004,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["btw",{"_index":181,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["btwpipe",{"_index":175,"title":{"pipes/BtwPipe.html":{}},"body":{"pipes/BtwPipe.html":{}}}],["bubbling",{"_index":4485,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["bug",{"_index":5162,"title":{},"body":{"index.html":{}}}],["build",{"_index":5133,"title":{},"body":{"index.html":{}}}],["bump",{"_index":5157,"title":{},"body":{"index.html":{}}}],["bundle",{"_index":3999,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["bundled",{"_index":4000,"title":{},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["bundledcomponent",{"_index":4038,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["bundler.component.ts",{"_index":4014,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:11",{"_index":4021,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:16",{"_index":4017,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:21",{"_index":4018,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["busting",{"_index":2378,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["busy",{"_index":1921,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["button",{"_index":339,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["buttonclasses",{"_index":1465,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["buttons",{"_index":4932,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["buttontype",{"_index":1466,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["buttonwidth",{"_index":1467,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["bypass",{"_index":3635,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["bypasssaveonexit",{"_index":3631,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["c",{"_index":5178,"title":{},"body":{"index.html":{},"license.html":{}}}],["cache",{"_index":2377,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cachebust",{"_index":2372,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["calculated",{"_index":2932,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["call",{"_index":1165,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["callback",{"_index":4693,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["called",{"_index":351,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["calling",{"_index":2651,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxStorageService.html":{}}}],["calls",{"_index":1147,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["came",{"_index":2503,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cancelled",{"_index":847,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["canedit",{"_index":2698,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["case",{"_index":83,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxButtonDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxTableHasObserversPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["cases",{"_index":3968,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["casing",{"_index":3572,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["cast",{"_index":1353,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["catcherror",{"_index":2493,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["catcherror((res",{"_index":2515,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["categories",{"_index":1690,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["category",{"_index":1633,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["causing",{"_index":5051,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["cdk",{"_index":235,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxModalService.html":{}}}],["cdkdialog",{"_index":3263,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["cdktablemodule",{"_index":4820,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cdref",{"_index":1028,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell",{"_index":678,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell'},{'name",{"_index":537,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["cell.component.ts",{"_index":1807,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:25",{"_index":1823,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["cell.component.ts:37",{"_index":1865,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:42",{"_index":1861,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:47",{"_index":1855,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:52",{"_index":1857,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.directive",{"_index":1834,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["cell.directive.ts",{"_index":3890,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["cell.resetsortdirection",{"_index":4999,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cell.sortdirection",{"_index":1132,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cell.sortdirection.tolocalelowercase",{"_index":1133,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cellclass",{"_index":679,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cellname",{"_index":4997,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cells",{"_index":4848,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["celltemplate",{"_index":680,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["center",{"_index":3086,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["certain",{"_index":1699,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["change",{"_index":2268,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{}}}],["changed",{"_index":1719,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxTourStepComponent.html":{}}}],["changedcategories",{"_index":1660,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changedetection",{"_index":952,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy",{"_index":983,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy.onpush",{"_index":953,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectorref",{"_index":1072,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedservices",{"_index":1661,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changer",{"_index":393,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["changes",{"_index":1104,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["channel",{"_index":1380,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["channel.service.ts",{"_index":1377,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:115",{"_index":1405,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:15",{"_index":1416,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:20",{"_index":1412,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:29",{"_index":1397,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:55",{"_index":1390,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:72",{"_index":1401,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:93",{"_index":1410,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel/broadcast",{"_index":1376,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelerror",{"_index":4725,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelerrormessage",{"_index":4726,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelloading",{"_index":4727,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelname",{"_index":1393,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelname{string",{"_index":1427,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channels",{"_index":1414,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["char",{"_index":212,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["charge",{"_index":2544,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"index.html":{},"license.html":{}}}],["check",{"_index":73,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkbox",{"_index":3918,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkboxtemplate",{"_index":4894,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["checked",{"_index":3036,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/TableCellTemplate.html":{}}}],["checks",{"_index":31,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["child",{"_index":1532,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["children",{"_index":4498,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["choice",{"_index":1732,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["chronological",{"_index":4607,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates",{"_index":4555,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates(startcontrolkey",{"_index":4568,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator",{"_index":4606,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator(startcontrolkey",{"_index":4623,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologically",{"_index":4571,"title":{},"body":{"classes/NgxValidators.html":{}}}],["circular",{"_index":747,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["claim",{"_index":5222,"title":{},"body":{"index.html":{},"license.html":{}}}],["class",{"_index":90,"title":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{}},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["class.ngx",{"_index":4332,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["classes",{"_index":92,"title":{},"body":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxLinkDirective.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{},"overview.html":{}}}],["classic",{"_index":1462,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["clean",{"_index":22,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxMobileLayoutService.html":{},"dependencies.html":{}}}],["clean(group.value",{"_index":59,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedformvalue",{"_index":58,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys",{"_index":60,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.has(key",{"_index":80,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.size",{"_index":65,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clear",{"_index":139,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["clearchannel",{"_index":4731,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["cleardata",{"_index":3438,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["cleared",{"_index":3784,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearformerror",{"_index":24,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearformerror(control",{"_index":87,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearing",{"_index":2682,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["clears",{"_index":3445,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["clearstorage",{"_index":3737,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearstorage(storage",{"_index":3742,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearvideos",{"_index":4732,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["click",{"_index":306,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["click.directive.ts",{"_index":297,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:12",{"_index":309,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:24",{"_index":321,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:28",{"_index":312,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:37",{"_index":313,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click/focus",{"_index":296,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicked",{"_index":2722,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["clicking",{"_index":326,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicks",{"_index":2793,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["client.service.ts",{"_index":1138,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:120",{"_index":1179,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:14",{"_index":1183,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:143",{"_index":1181,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:16",{"_index":1154,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:166",{"_index":1177,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:29",{"_index":1174,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:41",{"_index":1172,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:61",{"_index":1168,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:99",{"_index":1159,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client/authenticated",{"_index":1137,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["clone",{"_index":5110,"title":{},"body":{"index.html":{}}}],["close",{"_index":656,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["close(onclose",{"_index":3322,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closeaside",{"_index":3137,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["closechannel",{"_index":1384,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closechannel(channelname",{"_index":1389,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closed",{"_index":2857,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["closeflyout",{"_index":3138,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["closeondestroy",{"_index":3410,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closeonnavigation",{"_index":3265,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["closeonoverlaydetachments",{"_index":3411,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closer",{"_index":4322,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["closes",{"_index":1391,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxModalService.html":{}}}],["closing",{"_index":3287,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["code",{"_index":5154,"title":{},"body":{"index.html":{}}}],["collection",{"_index":5131,"title":{},"body":{"index.html":{}}}],["column",{"_index":681,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["columninput",{"_index":4981,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["columnkey",{"_index":3976,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["columns",{"_index":1609,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["combination",{"_index":2396,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["combinelatest",{"_index":1333,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["combinelatest([this.getsession",{"_index":1348,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["combinelatest([this.queue",{"_index":4086,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["comma",{"_index":4593,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma.validator",{"_index":4614,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma/decimals",{"_index":4613,"title":{},"body":{"classes/NgxValidators.html":{}}}],["commit",{"_index":5153,"title":{},"body":{"index.html":{}}}],["common",{"_index":5121,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":5040,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["complete",{"_index":2760,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["completed",{"_index":2452,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxStorageService.html":{}}}],["completes",{"_index":3744,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["complex",{"_index":5123,"title":{},"body":{"index.html":{}}}],["compliant",{"_index":948,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipDirective.html":{}}}],["compodoc",{"_index":5117,"title":{},"body":{"index.html":{}}}],["component",{"_index":109,"title":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component'},{'name",{"_index":522,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component.component.html",{"_index":450,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["component/empty.component.ts",{"_index":2394,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["component_template",{"_index":518,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["componentclass",{"_index":4836,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["componentportal",{"_index":4234,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentportal(component",{"_index":4273,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentref",{"_index":1508,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["componentref.setinput('data",{"_index":1991,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["components",{"_index":479,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"overview.html":{}}}],["componenttype",{"_index":247,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["componenttypewrapper",{"_index":226,"title":{"interfaces/ComponentTypeWrapper.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["computed",{"_index":1485,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["concatmap",{"_index":4096,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["concatmap((event",{"_index":4101,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["condition",{"_index":1894,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["conditionalfunction",{"_index":13,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["conditionalfunction(group.value",{"_index":69,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["conditions",{"_index":1251,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"license.html":{}}}],["config",{"_index":2024,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["config.token.ts",{"_index":3898,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["configurable",{"_index":530,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["configuration",{"_index":37,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["configuration.allowclear",{"_index":2836,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.allowzoom",{"_index":2827,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.autoclose",{"_index":3377,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.component",{"_index":3361,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.defaultstate",{"_index":2853,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes.view",{"_index":2819,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.edit",{"_index":2837,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.view",{"_index":2817,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.mode",{"_index":2806,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.role",{"_index":3420,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.ts",{"_index":1625,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxHasCookieConfiguration.html":{}}}],["configuration.types.ts",{"_index":1214,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["configuration.zoom?.current",{"_index":2834,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.zoom?.levels",{"_index":2830,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration?.autoclose",{"_index":3376,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.closeonnavigation",{"_index":3408,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.direction",{"_index":3401,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.role",{"_index":3390,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configurationvalue",{"_index":3332,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configure",{"_index":1510,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["configured",{"_index":3304,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["connect",{"_index":4407,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["connectedposition",{"_index":4231,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["connection",{"_index":5229,"title":{},"body":{"index.html":{},"license.html":{}}}],["consent",{"_index":1726,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["consentchanged",{"_index":1728,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["console.error",{"_index":835,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["console.error('ngxforms",{"_index":2080,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["console.error(res.message",{"_index":2518,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["console.warn",{"_index":428,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["console.warn('browser",{"_index":4707,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["const",{"_index":42,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor",{"_index":960,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor(private",{"_index":3786,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["constructor(selectors",{"_index":3853,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["constructorparameters",{"_index":1396,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["constructs",{"_index":1160,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["consult",{"_index":5116,"title":{},"body":{"index.html":{}}}],["container",{"_index":867,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxToastContainerComponent.html":{}}}],["container'},{'name",{"_index":552,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["container(s",{"_index":899,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.component.html",{"_index":4036,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.scss",{"_index":4037,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts",{"_index":4035,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:23",{"_index":4049,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:28",{"_index":4044,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:35",{"_index":4048,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:40",{"_index":4046,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:45",{"_index":4042,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:52",{"_index":4040,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.directive",{"_index":938,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.directive.ts",{"_index":895,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:15",{"_index":905,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:20",{"_index":908,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.index",{"_index":941,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.ts",{"_index":365,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:18",{"_index":407,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:23",{"_index":413,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:33",{"_index":391,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:47",{"_index":397,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:59",{"_index":401,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:75",{"_index":398,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:85",{"_index":376,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container/form",{"_index":364,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container/toast",{"_index":4034,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["containers",{"_index":912,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["containing",{"_index":4576,"title":{},"body":{"classes/NgxValidators.html":{}}}],["contains",{"_index":2567,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["content",{"_index":512,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content.component.ts",{"_index":1872,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.component.ts:13",{"_index":1875,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.component.ts:8",{"_index":1877,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.directive",{"_index":5041,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content.directive.ts",{"_index":1893,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:118",{"_index":1911,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:168",{"_index":1912,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:179",{"_index":1916,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:214",{"_index":1913,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:223",{"_index":1926,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:237",{"_index":1924,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:277",{"_index":1920,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:36",{"_index":1935,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:37",{"_index":1942,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:38",{"_index":1928,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:39",{"_index":1946,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:40",{"_index":1939,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:41",{"_index":1932,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:48",{"_index":1936,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:53",{"_index":1943,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:58",{"_index":1940,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:63",{"_index":1929,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:68",{"_index":1908,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:73",{"_index":1910,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:81",{"_index":1907,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.types.ts",{"_index":1880,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["content/components/display",{"_index":5037,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content/display",{"_index":1871,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["contentchild",{"_index":1095,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchild('celltmpl",{"_index":3891,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["contentchild('footertmpl",{"_index":1827,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild('headertmpl",{"_index":1830,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild>('checkboxtmpl",{"_index":4895,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('contenttmpl",{"_index":1075,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{}}}],["contentchild>('detailrowtmpl",{"_index":4889,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('emptytmpl",{"_index":4891,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('headertmpl",{"_index":1081,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["contentchild>('loadingtmpl",{"_index":4893,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('openrowstatetmpl",{"_index":4901,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('radiotmpl",{"_index":4897,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('sorttmpl",{"_index":4899,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren",{"_index":937,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxabstracttablecelldirective",{"_index":4887,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxaccessibledraganddropcontainerdirective",{"_index":925,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["contentcustom",{"_index":5047,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["contenttemplate",{"_index":1029,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{}}}],["context",{"_index":1157,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["continue",{"_index":4245,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["contract",{"_index":5225,"title":{},"body":{"index.html":{},"license.html":{}}}],["contribute",{"_index":5147,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":5146,"title":{},"body":{"index.html":{}}}],["contributors",{"_index":5164,"title":{},"body":{"index.html":{}}}],["control",{"_index":70,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["control?.value",{"_index":4940,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["controlnames",{"_index":4618,"title":{},"body":{"classes/NgxValidators.html":{}}}],["controls",{"_index":14,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["controlvalueaccessor",{"_index":2746,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["convenient",{"_index":4673,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["convert",{"_index":195,"title":{},"body":{"pipes/BtwPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["converts",{"_index":189,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["converttoarray",{"_index":2234,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["converttoarray(this.permission",{"_index":2347,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["cookie",{"_index":1657,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["cookie(s",{"_index":2134,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts",{"_index":2130,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:148",{"_index":2145,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:158",{"_index":2151,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:168",{"_index":2148,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:34",{"_index":2159,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:36",{"_index":2163,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:37",{"_index":2166,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:38",{"_index":2162,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:39",{"_index":2154,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:40",{"_index":2156,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:48",{"_index":2164,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:49",{"_index":2160,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:54",{"_index":2157,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:59",{"_index":2158,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:64",{"_index":2144,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:70",{"_index":2143,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:89",{"_index":2147,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:96",{"_index":2152,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.name",{"_index":1789,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie.services",{"_index":2182,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.services.map((service",{"_index":2185,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.ts",{"_index":1797,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["cookie.value",{"_index":1790,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie/has",{"_index":2129,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookieconsent",{"_index":1638,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{},"index.html":{}}}],["cookieconsent.acceptcategory(name",{"_index":1777,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedcategory(name",{"_index":1776,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedservice(name",{"_index":1778,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptservice(name",{"_index":1779,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.getcookie('data",{"_index":1781,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.run",{"_index":1773,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.setcookiedata",{"_index":1788,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.show(true",{"_index":1780,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookies",{"_index":1689,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{},"index.html":{}}}],["cookieschanged",{"_index":1666,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieschangedsubject",{"_index":1667,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchanged",{"_index":1668,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchangedsubject",{"_index":1669,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsented",{"_index":1670,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentedsubject",{"_index":1671,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookievalue",{"_index":1634,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["copies",{"_index":5201,"title":{},"body":{"index.html":{},"license.html":{}}}],["copy",{"_index":2308,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":5177,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":1418,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["correct",{"_index":191,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["correctly",{"_index":2103,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["corresponding",{"_index":844,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["corresponds",{"_index":2513,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxTourItemDirective.html":{}}}],["couple",{"_index":3566,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["create",{"_index":238,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["createaccessorproviders",{"_index":252,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["createbasestoreassets",{"_index":4717,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createcustomelement(linkcomponent",{"_index":3578,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["created",{"_index":2731,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"index.html":{}}}],["createeffect",{"_index":4785,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["createentityadapterstoreassets",{"_index":4718,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createimagemakeredit",{"_index":2778,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemakeredit(id",{"_index":2783,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker",{"_index":2779,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker(image",{"_index":2788,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarker",{"_index":2709,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["createmarkerclickedlistener",{"_index":2780,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkerclickedlistener(marker",{"_index":2790,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges",{"_index":2781,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges(marker",{"_index":2794,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmodalcomponent",{"_index":3319,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createmodalcomponent(options",{"_index":3324,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createreadonlyimagemarker",{"_index":2782,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createreadonlyimagemarker(id",{"_index":2797,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["creates",{"_index":2725,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["createstoreassets",{"_index":4719,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets('state",{"_index":4797,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets(storeslice",{"_index":4722,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["currency",{"_index":536,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["currencypipe",{"_index":1808,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["current",{"_index":726,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentcookies",{"_index":1794,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["currentgrid",{"_index":1582,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["currentlanguage",{"_index":792,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["currentlanguagesubject",{"_index":2546,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["currently",{"_index":1480,"title":{},"body":{"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxToastBundlerComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentmarker",{"_index":2699,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["currentquerymatch",{"_index":2977,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["currentroute",{"_index":3640,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["currentscrollposition",{"_index":4629,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentscrollpositionsubject",{"_index":4630,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentsorting",{"_index":1131,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentsortingevent",{"_index":4843,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["currentstep",{"_index":628,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["currentvalue",{"_index":2003,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["currentzoomlevel",{"_index":2700,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["custom",{"_index":652,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["customelements.define('ngx",{"_index":3580,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["custommessages",{"_index":788,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["cutout",{"_index":4308,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cutoutmargin",{"_index":4288,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cy",{"_index":1845,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypress",{"_index":697,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypress/playwright",{"_index":2236,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["cypress/playwrite",{"_index":2805,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["cypressdatatags",{"_index":682,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypressdatatagsinput",{"_index":4983,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cypresstag",{"_index":1839,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypresstag]'},{'name",{"_index":580,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["damages",{"_index":5223,"title":{},"body":{"index.html":{},"license.html":{}}}],["danger",{"_index":1448,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["darkmode",{"_index":4714,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["darr",{"_index":3987,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["data",{"_index":28,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data'},{'name",{"_index":554,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data)formaccessor",{"_index":251,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["data)formaccessors",{"_index":430,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["data.from",{"_index":855,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.fromlabel",{"_index":853,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.item",{"_index":851,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.itemlabel",{"_index":849,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.to",{"_index":857,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.tolabel",{"_index":856,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data[current",{"_index":3518,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dataformaccessor",{"_index":564,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["dataformaccessors",{"_index":409,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["datasourcesubject",{"_index":487,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["datatype",{"_index":273,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["date",{"_index":539,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"classes/NgxValidators.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["datepipe",{"_index":1847,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["daterangevalidator",{"_index":4556,"title":{},"body":{"classes/NgxValidators.html":{}}}],["daterangevalidator(min",{"_index":4581,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates",{"_index":4580,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates.validator",{"_index":4609,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates/chronological",{"_index":4608,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd",{"_index":4579,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd/mm/yyyy",{"_index":1866,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["de",{"_index":5107,"title":{},"body":{"index.html":{},"license.html":{}}}],["deal",{"_index":5190,"title":{},"body":{"index.html":{},"license.html":{}}}],["dealings",{"_index":5230,"title":{},"body":{"index.html":{},"license.html":{}}}],["decimals",{"_index":4592,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma",{"_index":4557,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma(max",{"_index":4587,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator",{"_index":4612,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator(max",{"_index":4622,"title":{},"body":{"classes/NgxValidators.html":{}}}],["declare",{"_index":3357,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["decorators",{"_index":315,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["deepmerge",{"_index":2490,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["deepmerge(...response.map((item",{"_index":2538,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["default",{"_index":308,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["defaultassetpaths",{"_index":2373,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["defaultlanguage",{"_index":2374,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["defaultlayout",{"_index":3131,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultposition",{"_index":4157,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["defaultprojectorfn",{"_index":120,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["defaultrowopen",{"_index":4918,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defaults",{"_index":3911,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["defaultstate",{"_index":2678,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["defaultvalue",{"_index":3329,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["define",{"_index":1571,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["defined",{"_index":187,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["definedcolumns",{"_index":4870,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defines",{"_index":3901,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["delay",{"_index":3384,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["delete",{"_index":161,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["delete(url",{"_index":1155,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["denis",{"_index":207,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxI18nService.html":{},"index.html":{}}}],["depend",{"_index":4601,"title":{},"body":{"classes/NgxValidators.html":{}}}],["depended",{"_index":4599,"title":{},"body":{"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["dependedcontrol",{"_index":4602,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedcontrolkey",{"_index":4596,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired",{"_index":4558,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired(controls",{"_index":4595,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator",{"_index":4615,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator(controls",{"_index":4621,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependencies",{"_index":5062,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":239,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["depending",{"_index":1295,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["depends",{"_index":1803,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxWindowService.html":{}}}],["deprecated",{"_index":418,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["depth",{"_index":5114,"title":{},"body":{"index.html":{}}}],["descendants",{"_index":926,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["descending",{"_index":1130,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["describedby",{"_index":873,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{}}}],["describedbyid",{"_index":3311,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["describes",{"_index":650,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["describing",{"_index":930,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["description",{"_index":96,"title":{},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["descriptions",{"_index":3310,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["deselect",{"_index":4880,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["deselected",{"_index":846,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["destination",{"_index":2903,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["destroy",{"_index":399,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["destroyed",{"_index":368,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["destroyedsubject",{"_index":954,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["destroyref",{"_index":2025,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["destruction",{"_index":2285,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["detail",{"_index":2644,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["detailed",{"_index":5142,"title":{},"body":{"index.html":{}}}],["detailrowtemplate",{"_index":4888,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["details",{"_index":1063,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["detailselement",{"_index":1030,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detailselement?.nativeelement",{"_index":1111,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detect",{"_index":1982,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["detectchanges",{"_index":1979,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["detected",{"_index":3505,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["detection",{"_index":3280,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["detector",{"_index":2269,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxWindowService.html":{}}}],["determine",{"_index":4909,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["developers",{"_index":5122,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":3253,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["dialogref",{"_index":3388,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentinstance",{"_index":3412,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput",{"_index":3413,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('ariadescribedby",{"_index":3416,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('arialabelledby",{"_index":3417,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogservice",{"_index":3316,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["direction",{"_index":711,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["direction.enum",{"_index":728,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["direction.enum.ts",{"_index":5086,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directions",{"_index":5008,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["directive",{"_index":292,"title":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["directives",{"_index":294,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"overview.html":{}}}],["directly",{"_index":3772,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["dirty",{"_index":387,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["disable",{"_index":3228,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["disablebackdrop",{"_index":4306,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["disableclose",{"_index":3396,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["disabled",{"_index":301,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["dismiss",{"_index":3298,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["dispatch",{"_index":2420,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["dispatchdatatosignalstore",{"_index":3709,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["dispatchdatatostore",{"_index":4768,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.data",{"_index":4804,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.iscompleted",{"_index":4809,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatches",{"_index":4213,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["dispatching",{"_index":3479,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dispatchtranslationloaderaction",{"_index":2410,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["dispatchtranslationloaderaction(action",{"_index":2417,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["display",{"_index":1468,"title":{},"body":{"directives/NgxButtonDirective.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontent",{"_index":1895,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontent]'},{'name",{"_index":583,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontentarialive",{"_index":1896,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontentconfiguration",{"_index":1897,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displayed",{"_index":3111,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["displays",{"_index":4072,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["dispose",{"_index":2139,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["disposition').split('.')[1",{"_index":1206,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["distinctuntilchanged",{"_index":1285,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["distribute",{"_index":5197,"title":{},"body":{"index.html":{},"license.html":{}}}],["docs",{"_index":3245,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalBaseOptions.html":{}}}],["docs](https://developer.mozilla.org/en",{"_index":3258,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["document",{"_index":1642,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["document.createelement('p",{"_index":863,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["document.getelementbyid(arialabelledby",{"_index":3237,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["document:keydown.escape",{"_index":640,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["document?.activeelement",{"_index":4501,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["documentation",{"_index":1711,"title":{},"body":{"injectables/NgxCookieService.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":3932,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["dom",{"_index":480,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["domain",{"_index":1626,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["domparser",{"_index":3605,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["domsanitizer",{"_index":3601,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["don't",{"_index":236,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["done",{"_index":2073,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["dossoine",{"_index":5166,"title":{},"body":{"index.html":{}}}],["down",{"_index":965,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["download",{"_index":1149,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["download(url",{"_index":1167,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["downloading",{"_index":1170,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["drag",{"_index":784,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draganddropservice",{"_index":913,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draggable",{"_index":776,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["draw",{"_index":2787,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["drop",{"_index":744,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop.service.ts",{"_index":781,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:119",{"_index":806,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:161",{"_index":821,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:20",{"_index":801,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:25",{"_index":817,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:32",{"_index":795,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:39",{"_index":814,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.types.ts",{"_index":879,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["drop/drag",{"_index":743,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop/has",{"_index":2299,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["due",{"_index":3598,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["dummy",{"_index":2395,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["duplicate",{"_index":3051,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery",{"_index":3053,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery[0",{"_index":3055,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery[1",{"_index":3056,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicates",{"_index":4089,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["during",{"_index":4330,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["dynamic",{"_index":5067,"title":{},"body":{"dependencies.html":{}}}],["dynamically",{"_index":5017,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["e.g",{"_index":3297,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["each",{"_index":431,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["earlier",{"_index":1981,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["early",{"_index":832,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["easier",{"_index":3129,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["easy",{"_index":1143,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["edit",{"_index":2666,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["editable",{"_index":683,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["editableinput",{"_index":4984,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["editabletablecellrecord",{"_index":4850,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["effect",{"_index":984,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["effects",{"_index":126,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effects.service",{"_index":4794,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["effectsinterface['add",{"_index":289,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['delete",{"_index":291,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['set",{"_index":140,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['update",{"_index":290,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsservice",{"_index":260,"title":{"injectables/EffectsService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/StoreEffects.html":{}}}],["ekinci",{"_index":5170,"title":{},"body":{"index.html":{}}}],["element",{"_index":516,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["element.focus",{"_index":4500,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["element.innertext",{"_index":868,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["element.setattribute('id",{"_index":869,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["elementid",{"_index":629,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["elementref",{"_index":751,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["elements",{"_index":702,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["elements.pipe.ts",{"_index":3548,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:15",{"_index":3555,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:16",{"_index":3558,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:24",{"_index":3551,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.types.ts",{"_index":3539,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["elements/replace",{"_index":3547,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elsetemplateref",{"_index":2136,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["elseviewref",{"_index":2207,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["embeddedviewref",{"_index":2225,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["emit",{"_index":349,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["emitdatatype",{"_index":3257,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["emitevent",{"_index":437,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{},"interfaces/TableCellTemplate.html":{}}}],["emits",{"_index":662,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["emitted",{"_index":3255,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{}}}],["emitter",{"_index":3220,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["emitting",{"_index":5022,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emitvalueonsingleitem",{"_index":3908,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["empty",{"_index":64,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["empty'},{'name",{"_index":542,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["emptydata",{"_index":4920,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emptylabel",{"_index":1852,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["emptytemplate",{"_index":4890,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emsens",{"_index":5172,"title":{},"body":{"index.html":{}}}],["en",{"_index":410,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["enabled",{"_index":1754,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["encountered",{"_index":1973,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["end",{"_index":1036,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["endcontrol",{"_index":4574,"title":{},"body":{"classes/NgxValidators.html":{}}}],["endcontrolkey",{"_index":4569,"title":{},"body":{"classes/NgxValidators.html":{}}}],["ended",{"_index":4651,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["enhancement",{"_index":5161,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1372,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["enter",{"_index":329,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["entering",{"_index":4248,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["entire",{"_index":3127,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["entity",{"_index":285,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystate",{"_index":163,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystatus",{"_index":172,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystoreaction",{"_index":3845,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreactions",{"_index":282,"title":{"interfaces/EntityStoreActions.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["entitystoreassets",{"_index":286,"title":{"interfaces/EntityStoreAssets.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["entitystoreassetsgeneratoroptions",{"_index":155,"title":{"interfaces/EntityStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreeffectsinterface",{"_index":284,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["entitystoreselector",{"_index":3842,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreselectors",{"_index":287,"title":{"interfaces/EntityStoreSelectors.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["enum",{"_index":5061,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{}}}],["enumerations",{"_index":5084,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":3984,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["enums/sort",{"_index":727,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["environment",{"_index":2263,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["equal",{"_index":1591,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["equiv",{"_index":3985,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["error",{"_index":68,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["error'},{'name",{"_index":556,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["error('this",{"_index":4802,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["errorcomponent",{"_index":2026,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errordata",{"_index":5042,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["errorinterface",{"_index":116,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["errorkeys",{"_index":2009,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errormessage",{"_index":113,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["errors",{"_index":86,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errorselement",{"_index":2027,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["escape",{"_index":657,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["eslint",{"_index":3227,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["eslint/no",{"_index":3230,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["essence",{"_index":3247,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["essential",{"_index":2646,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["essentially",{"_index":2802,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["etc",{"_index":5138,"title":{},"body":{"index.html":{}}}],["eur",{"_index":1826,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["even",{"_index":4317,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["event",{"_index":311,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["event.active",{"_index":4284,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["event.direction",{"_index":5007,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["event.preventdefault",{"_index":1098,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.returnvalue",{"_index":3669,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":1099,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.stoppropagation",{"_index":4489,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["event.ts",{"_index":3975,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["eventemitter",{"_index":445,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["eventhandler",{"_index":353,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["eventlisteners",{"_index":3071,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["events",{"_index":345,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["eventtype",{"_index":1583,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["example",{"_index":200,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["exceeded",{"_index":4590,"title":{},"body":{"classes/NgxValidators.html":{}}}],["execute",{"_index":325,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["executed",{"_index":348,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["exist",{"_index":1430,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxStorageService.html":{}}}],["existing",{"_index":734,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStorageService.html":{}}}],["exists",{"_index":234,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["exit",{"_index":833,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["exit.component.abstract",{"_index":3639,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.component.abstract.ts",{"_index":3642,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:12",{"_index":3648,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:22",{"_index":3666,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:27",{"_index":3665,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:33",{"_index":3658,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:38",{"_index":3654,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:43",{"_index":3655,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:45",{"_index":3657,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.service.abstract.ts",{"_index":3630,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:10",{"_index":3636,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:15",{"_index":3633,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit/save",{"_index":3629,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["exits",{"_index":3807,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["expandablerows",{"_index":4521,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["expanded",{"_index":4967,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["expiresafterdays",{"_index":1627,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["explaining",{"_index":808,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["explanations",{"_index":5143,"title":{},"body":{"index.html":{}}}],["explicitly",{"_index":3208,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["exportas",{"_index":901,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["exported",{"_index":167,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"classes/NgxValidators.html":{}}}],["exposes",{"_index":3022,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["express",{"_index":5211,"title":{},"body":{"index.html":{},"license.html":{}}}],["expresses",{"_index":1740,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["extend",{"_index":3291,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["extended",{"_index":2825,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["extender",{"_index":3888,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["extends",{"_index":171,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["external",{"_index":2900,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["extra",{"_index":993,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["extract",{"_index":3839,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["extracts",{"_index":3700,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["extras",{"_index":4296,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["fab",{"_index":1451,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["facilitate",{"_index":5120,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2428,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fall",{"_index":3209,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["fallback",{"_index":1802,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["fallback.component.ts",{"_index":1800,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback.component.ts:13",{"_index":1804,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback/cookie",{"_index":1799,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallbackcomponent",{"_index":2150,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["fallbacks",{"_index":1874,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["fallbacktemplate",{"_index":2149,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["false",{"_index":81,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["falsy",{"_index":208,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["faulty",{"_index":4881,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["feat(package",{"_index":5159,"title":{},"body":{"index.html":{}}}],["feat/package/feature",{"_index":5152,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1238,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"injectables/NgxI18nService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["feature(s",{"_index":2202,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["feature.directive.ts",{"_index":2200,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:116",{"_index":2218,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:123",{"_index":2219,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:175",{"_index":2217,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:33",{"_index":2230,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:37",{"_index":2233,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:41",{"_index":2221,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:47",{"_index":2222,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:52",{"_index":2223,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:57",{"_index":2231,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:58",{"_index":2232,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:59",{"_index":2224,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:60",{"_index":2226,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:65",{"_index":2227,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:70",{"_index":2229,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:75",{"_index":2228,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:80",{"_index":2214,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:85",{"_index":2215,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:90",{"_index":2216,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:95",{"_index":2213,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.pipe.ts",{"_index":2255,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:16",{"_index":2265,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:17",{"_index":2266,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:22",{"_index":2273,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:26",{"_index":2274,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:31",{"_index":2267,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:40",{"_index":2257,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:53",{"_index":2262,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:64",{"_index":2259,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:88",{"_index":2256,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature/has",{"_index":2199,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["features",{"_index":1236,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["featuretype",{"_index":1239,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["femke",{"_index":5173,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":836,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxModalService.html":{}}}],["fetchchannel",{"_index":263,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchchannel(ispublic",{"_index":265,"title":{},"body":{"injectables/EffectsService.html":{}}}],["fetched",{"_index":2507,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxStorageService.html":{}}}],["fetches",{"_index":2422,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetching",{"_index":2463,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fetchpath",{"_index":2508,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetchvideos",{"_index":264,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchvideos(id",{"_index":269,"title":{},"body":{"injectables/EffectsService.html":{}}}],["field",{"_index":4562,"title":{},"body":{"classes/NgxValidators.html":{}}}],["fields",{"_index":4563,"title":{},"body":{"classes/NgxValidators.html":{}}}],["figured",{"_index":2309,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["files",{"_index":2383,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"index.html":{},"license.html":{}}}],["filetype",{"_index":1204,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["fill",{"_index":1590,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["filled",{"_index":33,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["filling",{"_index":1608,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["filter",{"_index":823,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{}}}],["filter(([action",{"_index":3369,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["filter((length",{"_index":4113,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["filter((queryid",{"_index":3068,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["filter((translation",{"_index":2532,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["filter(boolean",{"_index":839,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtered",{"_index":3460,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["filters",{"_index":3475,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtersform",{"_index":3489,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["finalize",{"_index":2659,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["find",{"_index":1011,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["find/replace",{"_index":3608,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["findfocusableelement",{"_index":4426,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["findindex",{"_index":4923,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fired",{"_index":3270,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["first",{"_index":966,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["firstcookiesconsented",{"_index":1672,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["firstcookiesconsentedsubject",{"_index":1673,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["fit",{"_index":1457,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["fitness",{"_index":5215,"title":{},"body":{"index.html":{},"license.html":{}}}],["fix",{"_index":5156,"title":{},"body":{"index.html":{}}}],["fix(package",{"_index":5158,"title":{},"body":{"index.html":{}}}],["fix/package/feature",{"_index":5151,"title":{},"body":{"index.html":{}}}],["flag",{"_index":761,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["flatten",{"_index":2167,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flatten(hascookies).every((hascookie",{"_index":2188,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flexibleconnectedto(elementref",{"_index":4268,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["flip",{"_index":3970,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["flow",{"_index":1937,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["flows",{"_index":896,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["flyout",{"_index":3085,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["flyoutshown",{"_index":3100,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["fn",{"_index":4945,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fns",{"_index":5071,"title":{},"body":{"dependencies.html":{}}}],["focus",{"_index":330,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["focus.directive",{"_index":779,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["focus.directive.ts",{"_index":2292,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:13",{"_index":2298,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:15",{"_index":2307,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:18",{"_index":2295,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:20",{"_index":2301,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:25",{"_index":2294,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:31",{"_index":2300,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:34",{"_index":2296,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:39",{"_index":2306,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:41",{"_index":2302,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:43",{"_index":2297,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:45",{"_index":2304,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:47",{"_index":2305,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:54",{"_index":2303,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focusable",{"_index":4460,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusableelement",{"_index":4494,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusclick",{"_index":299,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["focusclick]'},{'name",{"_index":565,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focusclickdirective",{"_index":293,"title":{"directives/FocusClickDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focused",{"_index":3286,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["focussed",{"_index":765,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["focussedcell",{"_index":4884,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["focussedrow",{"_index":4883,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["following",{"_index":2517,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["footer",{"_index":1829,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["footertemplate",{"_index":684,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["force",{"_index":2382,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["foreach((marker",{"_index":2866,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["forkjoin",{"_index":2492,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["forkjoin(requestedtranslations).pipe",{"_index":2528,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["form",{"_index":382,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["form.accessor",{"_index":417,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["form.accessor.ts",{"_index":95,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["form/base",{"_index":94,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["formaccessor",{"_index":566,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessorcontainer",{"_index":361,"title":{"directives/FormAccessorContainer.html":{}},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessors",{"_index":411,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxImageMarkerComponent.html":{}}}],["format",{"_index":192,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"classes/NgxValidators.html":{}}}],["formcontainer",{"_index":100,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["formcontrol",{"_index":1570,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgenerated",{"_index":4842,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["formgroup",{"_index":20,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgroupdirective",{"_index":2028,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formgroupname",{"_index":2059,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formnamedirective",{"_index":2029,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formrecord",{"_index":4825,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["forms",{"_index":404,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"index.html":{}}}],["formstateoptionsentity",{"_index":390,"title":{"interfaces/FormStateOptionsEntity.html":{}},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{}}}],["formtype",{"_index":3451,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["forwardref",{"_index":242,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["found",{"_index":426,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["free",{"_index":5185,"title":{},"body":{"index.html":{},"license.html":{}}}],["friendly",{"_index":337,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["fromevent",{"_index":1419,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxOnlineService.html":{}}}],["fromevent(window",{"_index":3430,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["fromevent>(this.broadcastchannel[channelname",{"_index":1434,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["fromstore",{"_index":2501,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["frontend",{"_index":3931,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["full",{"_index":1456,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["function",{"_index":15,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxModalBaseOptions.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["functional",{"_index":108,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["functionalities",{"_index":5139,"title":{},"body":{"index.html":{}}}],["functions",{"_index":809,"title":{"miscellaneous/functions.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":5204,"title":{},"body":{"index.html":{},"license.html":{}}}],["gdpr",{"_index":3483,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["generate",{"_index":253,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["generated",{"_index":1497,"title":{},"body":{"directives/NgxButtonDirective.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform",{"_index":4827,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform(this.rowsformgroup",{"_index":4863,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generates",{"_index":248,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["generator",{"_index":148,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["generator.ts",{"_index":3829,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["generator.types",{"_index":3695,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["generic",{"_index":1817,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["get(selectablekey",{"_index":5001,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["get(url",{"_index":1171,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["get(value",{"_index":3936,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["getauthenticationresponse",{"_index":1264,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getavailablelanguages",{"_index":2626,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getchannel",{"_index":4733,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getcomponent",{"_index":3139,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["getcomponent(component",{"_index":3147,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["getcontainer",{"_index":914,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcontainer(index",{"_index":916,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcookie",{"_index":1678,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookie(cookie",{"_index":1693,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable",{"_index":1679,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable(cookie",{"_index":1695,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcurrentlanguage",{"_index":816,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["getdefaultlanguage",{"_index":2628,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getelementid",{"_index":4343,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["geterrors",{"_index":2031,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["geterrors(data",{"_index":2035,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["getfirstrow",{"_index":4512,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getitem",{"_index":3716,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitem(key",{"_index":3746,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getitemobservable",{"_index":3717,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitemobservable(key",{"_index":3748,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getlastrow",{"_index":4513,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getlocalstorage",{"_index":3766,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getmatchingquery",{"_index":3026,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["getmatchingquery$(id",{"_index":3032,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["getmessagerecord",{"_index":820,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["getmetadata",{"_index":1329,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getnewlanguage",{"_index":2548,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getnewlanguage(language",{"_index":2553,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getprop",{"_index":1850,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["getrow",{"_index":4514,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getrow(index",{"_index":4525,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["gets",{"_index":332,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["getsession",{"_index":1265,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getsessionstorage",{"_index":3768,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getstate",{"_index":3677,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{}}}],["getting",{"_index":5100,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettranslation",{"_index":2475,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{}}}],["gettranslation(key",{"_index":2610,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslation(lang",{"_index":2485,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["gettranslationobservable",{"_index":2608,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslationobservable(key",{"_index":2613,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslations",{"_index":2411,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["getuser",{"_index":1326,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getvalue",{"_index":2600,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{}}}],["getvalue(configurationvalue",{"_index":3327,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["getvideos",{"_index":4734,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getvideos(actiontype",{"_index":4740,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["give",{"_index":4349,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["given",{"_index":5056,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["global",{"_index":1281,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["globalfeatures",{"_index":1350,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globalfeaturessubject",{"_index":1261,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globally",{"_index":3899,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["go",{"_index":1010,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grab",{"_index":1612,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["grabs",{"_index":3759,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["granted",{"_index":5184,"title":{},"body":{"index.html":{},"license.html":{}}}],["grid",{"_index":1604,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive",{"_index":4538,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive.ts",{"_index":4421,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:102",{"_index":4452,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:109",{"_index":4450,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:116",{"_index":4444,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:121",{"_index":4445,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:126",{"_index":4461,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:143",{"_index":4469,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:152",{"_index":4458,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:174",{"_index":4473,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:24",{"_index":4478,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:27",{"_index":4476,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:32",{"_index":4479,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:37",{"_index":4447,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:53",{"_index":4448,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:60",{"_index":4449,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:67",{"_index":4446,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:74",{"_index":4455,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:81",{"_index":4453,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:88",{"_index":4451,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:95",{"_index":4454,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive",{"_index":4482,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive.ts",{"_index":4508,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:19",{"_index":4537,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:21",{"_index":4522,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:26",{"_index":4519,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:31",{"_index":4520,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:38",{"_index":4533,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:47",{"_index":4535,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:56",{"_index":4526,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:69",{"_index":4523,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:76",{"_index":4524,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:85",{"_index":4528,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:94",{"_index":4531,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:98",{"_index":4529,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid/tree",{"_index":4420,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["group",{"_index":45,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["groups",{"_index":472,"title":{},"body":{"pipes/IbanPipe.html":{},"injectables/NgxI18nLoadingService.html":{}}}],["guard",{"_index":2650,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["guards",{"_index":1250,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["guided",{"_index":5134,"title":{},"body":{"index.html":{}}}],["guioptions",{"_index":1635,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["handle",{"_index":57,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["handleaccessorsaction",{"_index":370,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleaccessorsaction(action",{"_index":375,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handlecomponentrender",{"_index":2032,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecomponentrender(shouldshow",{"_index":2037,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecontentscroll",{"_index":4635,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["handlecurrentsort(event",{"_index":5004,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handledatachanges",{"_index":3439,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(data",{"_index":3446,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(value",{"_index":3496,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges?(data",{"_index":3534,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledirtystate",{"_index":3632,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["handleeffect",{"_index":4787,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleeffect(actions.videos",{"_index":4790,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleformaccessormarkasdirty",{"_index":414,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkasdirty(form",{"_index":420,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched",{"_index":415,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched(form",{"_index":422,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessorupdatevalueandvalidity",{"_index":416,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleicon",{"_index":1475,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["handleinteraction",{"_index":630,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["handleloading",{"_index":1476,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["handlengxtableheadervaluechanges",{"_index":4828,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtableheadervaluechanges(this.rowsformgroup",{"_index":5035,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtablevaluechanges",{"_index":4829,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlenocomponentflow",{"_index":2033,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlenocomponentflow(shouldshow",{"_index":2041,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handler",{"_index":338,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["handlerowclicked(row",{"_index":4957,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowcolumns",{"_index":5012,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowstate(index",{"_index":4968,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlers",{"_index":1224,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["handles",{"_index":707,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort",{"_index":689,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort(column",{"_index":4994,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handletablecelltemplates",{"_index":4974,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handleunloadevent",{"_index":3644,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleunloadevent(event",{"_index":3651,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleurl",{"_index":1150,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handleurl(url",{"_index":1173,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handlewhenfocussed",{"_index":754,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handlewhenfocussed(action",{"_index":768,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handling",{"_index":254,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["happens",{"_index":3449,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["hasacceptedcategory",{"_index":1680,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedcategory(name",{"_index":1697,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice",{"_index":1681,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice(category",{"_index":1701,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasactivemodal",{"_index":3317,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasauthenticated",{"_index":1262,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasbackdrop",{"_index":3267,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["hasbundledtoasts",{"_index":4039,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["haschanges",{"_index":2751,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["hascookie",{"_index":2135,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hascookie]'},{'name",{"_index":589,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["hascookieelse",{"_index":2137,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hasdependedrequirederror",{"_index":4600,"title":{},"body":{"classes/NgxValidators.html":{}}}],["hasdocument",{"_index":4636,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["haselement",{"_index":3140,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["haselement(element",{"_index":3149,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["haserrors",{"_index":2030,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["hasfeature",{"_index":1266,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["hasfeature(converttoarray(this.feature",{"_index":2248,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["hasfeature(requiredfeatures",{"_index":1296,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasfocus",{"_index":752,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hasfootertemplates",{"_index":4878,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["hasform",{"_index":4858,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["hasmodal",{"_index":3383,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasmodalsubject",{"_index":3318,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasnext",{"_index":4377,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["hasobservers",{"_index":443,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["hasobserverspipe",{"_index":439,"title":{"pipes/HasObserversPipe.html":{}},"body":{"pipes/HasObserversPipe.html":{}}}],["hasone",{"_index":79,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["hasonekey",{"_index":77,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["haspermission",{"_index":1267,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["haspermission(requiredpermissions",{"_index":1300,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasprevious",{"_index":4375,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["haspriority",{"_index":3994,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["hasrequireddescription",{"_index":3320,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasrequireddescription(options",{"_index":3333,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["header",{"_index":1083,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["header.${keyof",{"_index":3091,"title":{},"body":{"interfaces/NgxMobileLayout.html":{}}}],["header.pipe.ts",{"_index":3960,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header.pipe.ts:18",{"_index":3963,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header/show",{"_index":3959,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["headercontrol",{"_index":4868,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["headertemplate",{"_index":685,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["heirstrate",{"_index":5168,"title":{},"body":{"index.html":{}}}],["hello",{"_index":494,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["helpers",{"_index":3925,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["here",{"_index":1355,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{}}}],["hereby",{"_index":5183,"title":{},"body":{"index.html":{},"license.html":{}}}],["hidden",{"_index":3969,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["hide",{"_index":874,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideelement",{"_index":831,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hideelement(element",{"_index":875,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hidefrombots",{"_index":1655,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["hideheaderrowoption",{"_index":3913,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["hideheaderrowoptions",{"_index":3916,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["hideheaderrowwhen",{"_index":3962,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideheaderwhen",{"_index":3910,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hides/renders",{"_index":2153,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["hidewhennotemplateprovided",{"_index":1881,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["highest",{"_index":2000,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["highlight",{"_index":4299,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["highlighted",{"_index":4313,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["highlightkey",{"_index":3912,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hold",{"_index":979,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["holder",{"_index":486,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxCookieService.html":{}}}],["holder'},{'name",{"_index":519,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["holder.component.mock.ts",{"_index":483,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:14",{"_index":500,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:16",{"_index":498,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:18",{"_index":495,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:22",{"_index":490,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holders",{"_index":5220,"title":{},"body":{"index.html":{},"license.html":{}}}],["holding",{"_index":1413,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["holds",{"_index":1930,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxStoreService.html":{}}}],["home",{"_index":1037,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["host",{"_index":334,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["host.directive.ts",{"_index":909,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:19",{"_index":933,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:20",{"_index":935,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:25",{"_index":936,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:30",{"_index":927,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:35",{"_index":929,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:42",{"_index":919,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:51",{"_index":917,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:55",{"_index":922,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:62",{"_index":924,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["hostbinding",{"_index":4345,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('attr.role",{"_index":4536,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["hostbinding('class",{"_index":667,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('class.ngx",{"_index":4341,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["hostbindings",{"_index":639,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hostdirective",{"_index":749,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["hostlistener",{"_index":340,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('blur",{"_index":772,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('click",{"_index":316,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('document:keydown.escape",{"_index":660,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["hostlistener('focus",{"_index":773,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowdown",{"_index":1052,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowleft",{"_index":4463,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowright",{"_index":4464,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowup",{"_index":1054,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.end",{"_index":4465,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.home",{"_index":4471,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.end",{"_index":1055,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.enter",{"_index":318,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('keydown.home",{"_index":1060,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pagedown",{"_index":4472,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pageup",{"_index":4470,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('mouseenter",{"_index":4146,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('mouseleave",{"_index":4145,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('window:beforeunload",{"_index":3653,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["hostlisteners",{"_index":305,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hover",{"_index":4082,"title":{},"body":{"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{}}}],["html",{"_index":515,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["htmlelement",{"_index":805,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["htmlimageelement",{"_index":2784,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["htmlparagraphelement",{"_index":862,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["htmlspanelement",{"_index":1528,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["http",{"_index":1136,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["httpbackend",{"_index":2472,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["httpclient",{"_index":1141,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["httpclient(this.httpbackend).get(fetchpath).pipe",{"_index":2511,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["httpclientconfiguration",{"_index":1227,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httpcontext",{"_index":1158,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["httperrorresponse",{"_index":117,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["httphandler",{"_index":5099,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphandlerfn",{"_index":5097,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpinterceptorfn",{"_index":1220,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httprequest",{"_index":1221,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"miscellaneous/functions.html":{}}}],["httpresponse",{"_index":1184,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["https://cookieconsent.orestbida.com",{"_index":1664,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://cookieconsent.orestbida.com/essential/getting",{"_index":1712,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://developer.mozilla.org/en",{"_index":1381,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["https://docs.cypress.io/guides/references/best",{"_index":700,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts",{"_index":2272,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts",{"_index":2204,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["https://markerjs.com",{"_index":2695,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/accordion",{"_index":951,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/treegrid",{"_index":4423,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hyperdrive",{"_index":5181,"title":{},"body":{"index.html":{},"license.html":{}}}],["i18n",{"_index":541,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["i18n.service",{"_index":2630,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["i18n.service.ts",{"_index":2543,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:120",{"_index":2560,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:129",{"_index":2554,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:17",{"_index":2569,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:22",{"_index":2574,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:27",{"_index":2572,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:34",{"_index":2568,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:41",{"_index":2566,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:48",{"_index":2573,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:53",{"_index":2552,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:65",{"_index":2571,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:71",{"_index":2575,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:80",{"_index":2562,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:98",{"_index":2556,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.types",{"_index":2494,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["i18n/root",{"_index":2542,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["i18nloadingservice",{"_index":2652,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["i18nservice",{"_index":2653,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ian",{"_index":5171,"title":{},"body":{"index.html":{}}}],["iban",{"_index":458,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibannumber",{"_index":465,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibanpipe",{"_index":456,"title":{"pipes/IbanPipe.html":{}},"body":{"pipes/IbanPipe.html":{}}}],["iben",{"_index":49,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["ibenvandeveire",{"_index":5102,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/ngx",{"_index":1257,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"index.html":{}}}],["ibenvandeveire/rxjs",{"_index":5140,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/types",{"_index":1332,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"dependencies.html":{}}}],["icon",{"_index":1437,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts",{"_index":3980,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts:15",{"_index":3983,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon/sort",{"_index":3979,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["iconcomponent",{"_index":1469,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["iconelement",{"_index":1470,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["iconposition",{"_index":1438,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["id",{"_index":271,"title":{},"body":{"injectables/EffectsService.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxMediaQuery.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["id={{id",{"_index":3584,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ideal",{"_index":3474,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["identifier",{"_index":3593,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["identify",{"_index":3587,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ids",{"_index":3011,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ids.every((item",{"_index":3013,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["idselector",{"_index":153,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["if(contenttemplate",{"_index":3122,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(hasbundledtoasts",{"_index":4053,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["if(layout",{"_index":3116,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().aside",{"_index":3121,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().flyout",{"_index":3123,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().footer",{"_index":3124,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header",{"_index":3117,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header.left",{"_index":3118,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header.right",{"_index":3119,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().navigation",{"_index":3120,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(toasts().length",{"_index":4051,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["ignore",{"_index":344,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ignored",{"_index":434,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["image",{"_index":544,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["imagedescription",{"_index":2701,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imageelement",{"_index":2702,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imagemarkerservice",{"_index":2703,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["img[data",{"_index":3585,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["implement",{"_index":2235,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["implementation",{"_index":949,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["implementations",{"_index":2577,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["implemented",{"_index":2270,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["implementing",{"_index":1873,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["implements",{"_index":206,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["implied",{"_index":5212,"title":{},"body":{"index.html":{},"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["important",{"_index":104,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["imports",{"_index":1023,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["improve",{"_index":5125,"title":{},"body":{"index.html":{}}}],["in/from",{"_index":3783,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["inactive",{"_index":1605,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["include",{"_index":3586,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["included",{"_index":1431,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["includeinnerhtml",{"_index":3540,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["including",{"_index":5192,"title":{},"body":{"index.html":{},"license.html":{}}}],["incorrectchronologicaldate",{"_index":4573,"title":{},"body":{"classes/NgxValidators.html":{}}}],["incorrectchronologicaldates",{"_index":4572,"title":{},"body":{"classes/NgxValidators.html":{}}}],["independent",{"_index":5118,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["index).concat(this.rows.slice(index",{"_index":4542,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["indexes",{"_index":997,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indexes.foreach((index",{"_index":999,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indicate",{"_index":1818,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["indicates",{"_index":3293,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["indicator",{"_index":3905,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["indices",{"_index":4852,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["indirectly",{"_index":3276,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["individual",{"_index":2184,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["infinite",{"_index":5023,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["inform",{"_index":3239,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourStepComponent.html":{},"index.html":{}}}],["information",{"_index":798,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["informing",{"_index":3887,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inheritdoc",{"_index":4417,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["inherited",{"_index":641,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["initchannel",{"_index":1385,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initchannel(...args",{"_index":1395,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initform",{"_index":3440,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["initi18n",{"_index":2609,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initi18n(language",{"_index":2616,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initial",{"_index":1914,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["initialdata",{"_index":3699,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["initialize",{"_index":1424,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initializelanguage",{"_index":2549,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["initializes",{"_index":1398,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nService.html":{}}}],["initiallayoutset",{"_index":3132,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["initiallayoutsetsubject",{"_index":3133,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["initially",{"_index":4503,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["initialstatevalue",{"_index":150,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["initialvalue",{"_index":3837,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["inject",{"_index":501,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject('selectors",{"_index":3868,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inject(actions",{"_index":4781,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(activatedroute",{"_index":3469,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(changedetectorref",{"_index":1073,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject(destroyref",{"_index":2052,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(dialog",{"_index":3343,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(document",{"_index":4656,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(domsanitizer",{"_index":3557,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(effectsservice",{"_index":4783,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(elementref",{"_index":1876,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["inject(formgroupdirective",{"_index":2057,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(formgroupname",{"_index":2060,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(httpbackend",{"_index":2479,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["inject(httpclient",{"_index":1182,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/SpecStoreService.html":{}}}],["inject(liveannouncer",{"_index":800,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["inject(ngxaccessibledraganddropabstractservice",{"_index":932,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["inject(ngxaccordioncomponent",{"_index":1086,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["inject(ngxauthenticationservicetoken",{"_index":2264,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["inject(ngxauthenticationurlhandlertoken",{"_index":1191,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["inject(ngxbuttonconfigurationtoken",{"_index":1502,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["inject(ngxcookieservice",{"_index":2161,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["inject(ngxi18nconfigurationtoken",{"_index":2476,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["inject(ngxi18nloadingservice",{"_index":2481,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngxi18nrootservice",{"_index":2618,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(ngxi18nservice",{"_index":2657,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngxi18ntranslationpathstoken",{"_index":2483,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["inject(ngximagemarkerservice",{"_index":2736,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["inject(ngxlinkconfigurationtoken",{"_index":2915,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["inject(ngxmediaqueriestoken",{"_index":2990,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["inject(ngxmediaqueryservice",{"_index":2958,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["inject(ngxmobilelayoutservice",{"_index":3112,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["inject(ngxmodalconfigurationtoken",{"_index":3341,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(ngxonlineservice",{"_index":1938,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["inject(ngxreplaceelementsconfigurationtoken",{"_index":3554,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(ngxtableconfigurationtoken",{"_index":4835,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["inject(ngxtoastservice",{"_index":4020,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["inject(ngxtooltipconfigurationtoken",{"_index":4217,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(ngxtooltipservice",{"_index":4147,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["inject(ngxtourservice",{"_index":499,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["inject(ngxtreegriddirective",{"_index":4477,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["inject(ngxwindowservice",{"_index":1415,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["inject(overlay",{"_index":4223,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(overlaypositionbuilder",{"_index":4220,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(platform_id",{"_index":4658,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(renderer2",{"_index":1089,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["inject(router",{"_index":3471,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(store",{"_index":3866,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["inject(templateref",{"_index":2065,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["inject(translateservice",{"_index":2622,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(viewcontainerref",{"_index":1523,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["inject>(elementref",{"_index":934,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["inject>(templateref",{"_index":1941,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["injectable",{"_index":259,"title":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["injectables",{"_index":261,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"overview.html":{}}}],["injection",{"_index":1218,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["injectiontoken",{"_index":3915,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["injector",{"_index":3251,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innerhtml",{"_index":1539,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innertext",{"_index":3588,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["input",{"_index":341,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["input('both",{"_index":1504,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["input('checkbox",{"_index":4908,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["input('dd/mm/yyyy",{"_index":1864,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('empty",{"_index":1860,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('eur",{"_index":1822,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["input('fit",{"_index":1500,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["input('internal",{"_index":2917,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["input('left",{"_index":2922,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["input('polite",{"_index":1933,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["input('primary",{"_index":1519,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["input('regular",{"_index":1498,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["input('text",{"_index":2924,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["input(false",{"_index":346,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(true",{"_index":2747,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(undefined",{"_index":906,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["input(uuid",{"_index":4185,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["input.required",{"_index":665,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["inputs",{"_index":304,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["inputsignal",{"_index":962,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inputted",{"_index":4589,"title":{},"body":{"classes/NgxValidators.html":{}}}],["insert",{"_index":2116,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inserts",{"_index":1486,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["inside",{"_index":3282,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["install",{"_index":5112,"title":{},"body":{"index.html":{}}}],["installation",{"_index":5109,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1392,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["instances",{"_index":2603,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instant",{"_index":2612,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instantiated",{"_index":3281,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instantiation",{"_index":3273,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instead",{"_index":384,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["intentional",{"_index":433,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["interact",{"_index":3478,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["interaction",{"_index":3296,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["interactions",{"_index":664,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["intercepted",{"_index":3660,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["interceptor",{"_index":5098,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interceptors",{"_index":1216,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"overview.html":{}}}],["internal",{"_index":231,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["internally",{"_index":4692,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["interop",{"_index":2070,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["interrupted",{"_index":3663,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["invalid",{"_index":1862,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["invaliddecimalsaftercomma",{"_index":4594,"title":{},"body":{"classes/NgxValidators.html":{}}}],["invalidrange",{"_index":4585,"title":{},"body":{"classes/NgxValidators.html":{}}}],["invisible",{"_index":3199,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["irrelevant",{"_index":4128,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["isactive",{"_index":1594,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTourItemDirective.html":{}}}],["isauthenticated",{"_index":1263,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["isbrowser",{"_index":4637,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isclicked",{"_index":302,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isclicked(event",{"_index":314,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["iscompleted",{"_index":4796,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["isdirty",{"_index":3645,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["isdisabled",{"_index":4949,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["isempty",{"_index":3927,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{}}}],["isentered",{"_index":303,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isfocussed",{"_index":4056,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["isfocussedon",{"_index":2293,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["isloading",{"_index":1922,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["isn't",{"_index":358,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["iso",{"_index":1824,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["isopen",{"_index":1031,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["isplatformbrowser",{"_index":4690,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isplatformbrowser(this.platformid",{"_index":4706,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ispublic",{"_index":267,"title":{},"body":{"injectables/EffectsService.html":{}}}],["isset",{"_index":1787,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["issues",{"_index":3174,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"pipes/TransformPipe.html":{}}}],["isvalid",{"_index":3646,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["it's",{"_index":215,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["item",{"_index":764,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["item'},{'name",{"_index":528,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["item.component",{"_index":987,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item.component.html",{"_index":1025,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.scss",{"_index":1027,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts",{"_index":1021,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:107",{"_index":1043,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:112",{"_index":1084,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:117",{"_index":1085,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:122",{"_index":1080,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:127",{"_index":1069,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:137",{"_index":1056,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:146",{"_index":1067,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:153",{"_index":1065,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:160",{"_index":1061,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:184",{"_index":1064,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:19",{"_index":1572,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:193",{"_index":1058,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:24",{"_index":1573,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:29",{"_index":1577,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:40",{"_index":1087,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:41",{"_index":1074,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:42",{"_index":1090,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:47",{"_index":1078,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:52",{"_index":1092,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:57",{"_index":1076,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:62",{"_index":1082,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:67",{"_index":1047,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:78",{"_index":1045,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:89",{"_index":1050,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:98",{"_index":1049,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.data",{"_index":3617,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["item.directive.ts",{"_index":745,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:13",{"_index":774,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:14",{"_index":4340,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:15",{"_index":4342,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:16",{"_index":4339,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:18",{"_index":763,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:21",{"_index":4334,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:26",{"_index":4333,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:33",{"_index":4338,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:44",{"_index":4344,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:48",{"_index":4335,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:58",{"_index":4336,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.filter((key",{"_index":1618,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["item.id",{"_index":1004,"title":{},"body":{"components/NgxAccordionComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["item.translations",{"_index":2539,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["item.updateaccordionitemstate(true",{"_index":996,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/accordion",{"_index":986,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/configurable",{"_index":1567,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item/items",{"_index":3878,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["item/tour",{"_index":4329,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item[itemkey",{"_index":1854,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemdirective",{"_index":748,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemid",{"_index":750,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemkey",{"_index":1853,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemregisteredsubject",{"_index":955,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["items",{"_index":50,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["items.foreach((item",{"_index":3611,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["items.length",{"_index":3604,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["itemsize",{"_index":1601,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["itself",{"_index":383,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxToastComponent.html":{},"classes/NgxValidators.html":{}}}],["join",{"_index":2525,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["json",{"_index":2470,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["json.parse(data[current",{"_index":3519,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["json.parse(value",{"_index":3827,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(item",{"_index":3811,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(parseddata[current",{"_index":3532,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["keep",{"_index":2451,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["keeps",{"_index":3347,"title":{},"body":{"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{}}}],["key",{"_index":76,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["key.isactive",{"_index":1619,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keydown",{"_index":356,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.arrowdown",{"_index":1039,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowdown(event",{"_index":1044,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.arrowleft",{"_index":4438,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowright",{"_index":4439,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup",{"_index":1040,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup(event",{"_index":1046,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.control.end",{"_index":4440,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.control.home",{"_index":4441,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.end",{"_index":1041,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.enter",{"_index":307,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.home",{"_index":1042,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pagedown",{"_index":4442,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pageup",{"_index":4443,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keyof",{"_index":3089,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["keys",{"_index":51,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["keys.reduce((hasone",{"_index":78,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["keys].map((item",{"_index":1617,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keytype",{"_index":18,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"classes/NgxValidators.html":{}}}],["key}error",{"_index":3874,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}errormessage",{"_index":3876,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}loading",{"_index":3872,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["kind",{"_index":5210,"title":{},"body":{"index.html":{},"license.html":{}}}],["know",{"_index":1944,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["labbledby",{"_index":4408,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["label",{"_index":902,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["labelledby",{"_index":675,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["labelledbyid",{"_index":3243,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["labels",{"_index":3234,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["labelwrapper",{"_index":1440,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxLinkConfiguration.html":{}}}],["lang",{"_index":2488,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["language",{"_index":819,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languagerouteparam",{"_index":2375,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{}}}],["languages",{"_index":2376,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languages?.length",{"_index":2565,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["largest",{"_index":1614,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["last",{"_index":967,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["lastly",{"_index":3581,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["later",{"_index":2824,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["latest",{"_index":2260,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["lax",{"_index":1631,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["layer",{"_index":2810,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["layout",{"_index":533,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["layout'},{'name",{"_index":531,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["layout.component.html",{"_index":3098,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts",{"_index":3095,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:21",{"_index":3113,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:26",{"_index":3110,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:31",{"_index":3108,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:36",{"_index":3104,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:41",{"_index":3105,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:43",{"_index":3102,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.header?.left",{"_index":3183,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.main",{"_index":3185,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.right",{"_index":3187,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.navigation",{"_index":3189,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts",{"_index":3126,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:127",{"_index":3153,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:153",{"_index":3146,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:161",{"_index":3151,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:177",{"_index":3145,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:184",{"_index":3157,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:19",{"_index":3167,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:199",{"_index":3150,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:213",{"_index":3148,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:26",{"_index":3166,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:31",{"_index":3162,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:39",{"_index":3170,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:45",{"_index":3172,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:50",{"_index":3171,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:55",{"_index":3169,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:60",{"_index":3164,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:65",{"_index":3160,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:72",{"_index":3155,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.ts",{"_index":1581,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["layout.types.ts",{"_index":3082,"title":{},"body":{"interfaces/NgxMobileLayout.html":{}}}],["layout/mobile",{"_index":3094,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["layoutservice",{"_index":3101,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layoutsubject",{"_index":3134,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["lazy",{"_index":2649,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["lazyhtmlgeneration",{"_index":1656,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["leaks",{"_index":2278,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["leave",{"_index":4251,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["leaving",{"_index":4180,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["left",{"_index":1439,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["legend",{"_index":514,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["length",{"_index":218,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{}}}],["level",{"_index":2714,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["levels",{"_index":2685,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["liability",{"_index":5224,"title":{},"body":{"index.html":{},"license.html":{}}}],["liable",{"_index":5221,"title":{},"body":{"index.html":{},"license.html":{}}}],["lib",{"_index":2170,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["libs/.../authentication.interceptor.ts",{"_index":5092,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../authentication.ts",{"_index":5089,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../core.ts",{"_index":5090,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../i18n",{"_index":5087,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/.../sort",{"_index":5085,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts",{"_index":1256,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103",{"_index":1327,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114",{"_index":1328,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125",{"_index":1330,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138",{"_index":1309,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158",{"_index":1318,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177",{"_index":1298,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199",{"_index":1304,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211",{"_index":1301,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232",{"_index":1294,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34",{"_index":1276,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40",{"_index":1278,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46",{"_index":1280,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53",{"_index":1289,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61",{"_index":1292,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71",{"_index":1315,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80",{"_index":1322,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89",{"_index":1325,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96",{"_index":1293,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/directives/has",{"_index":2198,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["libs/angular/authentication/src/lib/directives/is",{"_index":2867,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts",{"_index":5095,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/angular/authentication/src/lib/pipes/has",{"_index":2254,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["libs/angular/authentication/src/lib/services/authenticated",{"_index":1135,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["libs/angular/authentication/src/lib/types/authenticated",{"_index":1229,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["libs/angular/authentication/src/lib/types/authentication",{"_index":1213,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["libs/angular/cookies/src/lib/abstracts/cookie",{"_index":1798,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["libs/angular/cookies/src/lib/directives/has",{"_index":2128,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts",{"_index":1663,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166",{"_index":1698,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184",{"_index":1687,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194",{"_index":1702,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213",{"_index":1692,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220",{"_index":1715,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229",{"_index":1694,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238",{"_index":1696,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256",{"_index":1708,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277",{"_index":1705,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31",{"_index":1741,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36",{"_index":1735,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41",{"_index":1727,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46",{"_index":1746,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53",{"_index":1720,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58",{"_index":1747,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63",{"_index":1738,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69",{"_index":1730,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75",{"_index":1722,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81",{"_index":1744,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86",{"_index":1718,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99",{"_index":1710,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/types/cookie",{"_index":1624,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["libs/angular/cookies/src/lib/types/has",{"_index":2127,"title":{},"body":{"interfaces/NgxHasCookieConfiguration.html":{}}}],["libs/angular/cookies/src/lib/types/set",{"_index":1796,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts",{"_index":4626,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:106",{"_index":4643,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:115",{"_index":4646,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:136",{"_index":4641,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:15",{"_index":4657,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:20",{"_index":4659,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:25",{"_index":4668,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:30",{"_index":4663,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:35",{"_index":4655,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:40",{"_index":4665,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:45",{"_index":4661,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:50",{"_index":4653,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:56",{"_index":4650,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:61",{"_index":4640,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:89",{"_index":4649,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:99",{"_index":4642,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/forms/src/lib/abstracts/base",{"_index":93,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts",{"_index":2008,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13",{"_index":2011,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17",{"_index":2010,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9",{"_index":2012,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/form",{"_index":362,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["libs/angular/forms/src/lib/abstracts/save",{"_index":3628,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts",{"_index":2022,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:100",{"_index":2044,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:105",{"_index":2056,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:110",{"_index":2055,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:115",{"_index":2046,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:120",{"_index":2051,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:122",{"_index":2034,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:129",{"_index":2043,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:206",{"_index":2038,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:243",{"_index":2042,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:280",{"_index":2036,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:40",{"_index":2058,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:47",{"_index":2061,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:52",{"_index":2049,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60",{"_index":2067,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65",{"_index":2054,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70",{"_index":2063,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75",{"_index":2066,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80",{"_index":2045,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:85",{"_index":2053,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:90",{"_index":2062,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:95",{"_index":2064,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/interfaces/errors.interface.ts",{"_index":2015,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["libs/angular/forms/src/lib/interfaces/form",{"_index":435,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["libs/angular/forms/src/lib/utils/accessor",{"_index":227,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["libs/angular/forms/src/lib/validators/at",{"_index":6,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts",{"_index":4552,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:100",{"_index":4582,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:27",{"_index":4560,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:40",{"_index":4566,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:55",{"_index":4598,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:70",{"_index":4588,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:83",{"_index":4570,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/i18n/src/lib/abstracts/i18n",{"_index":2365,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["libs/angular/i18n/src/lib/components/empty",{"_index":2393,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["libs/angular/i18n/src/lib/i18n.types.ts",{"_index":2369,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["libs/angular/i18n/src/lib/loader/multi",{"_index":2466,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts",{"_index":2641,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16",{"_index":2658,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20",{"_index":2656,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22",{"_index":2655,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/services/i18n",{"_index":2399,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts",{"_index":2602,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:16",{"_index":2623,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:21",{"_index":2619,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:26",{"_index":2625,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:33",{"_index":2627,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:40",{"_index":2629,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:49",{"_index":2617,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:65",{"_index":2621,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:76",{"_index":2611,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:87",{"_index":2614,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/root",{"_index":2541,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts",{"_index":3210,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:22",{"_index":3224,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:23",{"_index":3223,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28",{"_index":3217,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35",{"_index":3215,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40",{"_index":3214,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45",{"_index":3216,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:50",{"_index":3219,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:56",{"_index":3222,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:58",{"_index":3218,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast",{"_index":4013,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts",{"_index":4024,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:15",{"_index":4030,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20",{"_index":4025,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:22",{"_index":4029,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:30",{"_index":4026,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts",{"_index":4131,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17",{"_index":4148,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22",{"_index":4143,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33",{"_index":4144,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47",{"_index":4141,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55",{"_index":4138,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60",{"_index":4140,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65",{"_index":4142,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tour",{"_index":4378,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/components/toast",{"_index":4033,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts",{"_index":4162,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114",{"_index":4181,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23",{"_index":4188,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24",{"_index":4183,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29",{"_index":4178,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36",{"_index":4177,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43",{"_index":4179,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50",{"_index":4175,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57",{"_index":4176,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67",{"_index":4186,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72",{"_index":4172,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77",{"_index":4184,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83",{"_index":4174,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88",{"_index":4173,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93",{"_index":4182,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tour",{"_index":4328,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["libs/angular/inform/src/lib/mocks/tour",{"_index":482,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts",{"_index":3315,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:124",{"_index":3323,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:146",{"_index":3339,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:177",{"_index":3325,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:222",{"_index":3334,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:244",{"_index":3330,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:29",{"_index":3342,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:32",{"_index":3344,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:37",{"_index":3348,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:42",{"_index":3346,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:49",{"_index":3336,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts",{"_index":4054,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:155",{"_index":4071,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:186",{"_index":4067,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:213",{"_index":4068,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:222",{"_index":4065,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:243",{"_index":4069,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:37",{"_index":4075,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:44",{"_index":4083,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:49",{"_index":4085,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:54",{"_index":4084,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:59",{"_index":4081,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:64",{"_index":4094,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:84",{"_index":4080,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:95",{"_index":4074,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:96",{"_index":4063,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts",{"_index":4200,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122",{"_index":4215,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169",{"_index":4210,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184",{"_index":4212,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197",{"_index":4209,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23",{"_index":4218,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24",{"_index":4224,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25",{"_index":4221,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28",{"_index":4216,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33",{"_index":4230,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39",{"_index":4219,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44",{"_index":4222,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49",{"_index":4229,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54",{"_index":4208,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/types/modal.types.ts",{"_index":3242,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["libs/angular/inform/src/lib/types/toast.types.ts",{"_index":3991,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["libs/angular/inform/src/lib/types/tooltip.types.ts",{"_index":4154,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["libs/angular/inform/src/lib/types/tour.token.type.ts",{"_index":4413,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["libs/angular/inform/src/lib/types/tour.types.ts",{"_index":4287,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["libs/angular/layout/src/lib/abstracts/display",{"_index":1870,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/drag",{"_index":742,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/open",{"_index":3944,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/select",{"_index":3952,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/sort",{"_index":3988,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts",{"_index":946,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111",{"_index":968,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128",{"_index":971,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33",{"_index":980,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38",{"_index":978,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43",{"_index":982,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48",{"_index":961,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82",{"_index":973,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92",{"_index":976,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/item/accordion",{"_index":1020,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts",{"_index":677,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:14",{"_index":725,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:19",{"_index":721,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:20",{"_index":723,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:21",{"_index":720,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:26",{"_index":718,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:31",{"_index":692,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:36",{"_index":705,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:42",{"_index":694,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:47",{"_index":703,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:52",{"_index":724,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:57",{"_index":706,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:82",{"_index":709,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:91",{"_index":715,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/currency",{"_index":1806,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/date",{"_index":1846,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/generic",{"_index":3889,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/configurable",{"_index":1566,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/image",{"_index":2692,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["libs/angular/layout/src/lib/components/mobile",{"_index":3093,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["libs/angular/layout/src/lib/components/table/ngx",{"_index":4818,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts",{"_index":1461,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:100",{"_index":1479,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:105",{"_index":1481,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:110",{"_index":1499,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:115",{"_index":1520,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:120",{"_index":1505,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:125",{"_index":1501,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:130",{"_index":1477,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:135",{"_index":1513,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:139",{"_index":1484,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:164",{"_index":1483,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:188",{"_index":1482,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:39",{"_index":1524,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:44",{"_index":1507,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:51",{"_index":1518,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:56",{"_index":1521,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:61",{"_index":1503,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:68",{"_index":1511,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:73",{"_index":1509,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:75",{"_index":1516,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:80",{"_index":1496,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/display",{"_index":1892,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/directives/drag",{"_index":894,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["libs/angular/layout/src/lib/directives/has",{"_index":2290,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts",{"_index":2902,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:105",{"_index":2925,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:112",{"_index":2907,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:119",{"_index":2927,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:126",{"_index":2918,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:131",{"_index":2908,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:138",{"_index":2923,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:140",{"_index":2910,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:165",{"_index":2909,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:40",{"_index":2933,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:45",{"_index":2919,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:52",{"_index":2926,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:57",{"_index":2928,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:62",{"_index":2916,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:69",{"_index":2921,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:74",{"_index":2920,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:79",{"_index":2914,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:96",{"_index":2931,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/media",{"_index":2939,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["libs/angular/layout/src/lib/directives/tree",{"_index":4419,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["libs/angular/layout/src/lib/enums/sort",{"_index":5088,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/angular/layout/src/lib/pipes/aria",{"_index":1123,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/get",{"_index":3928,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/has",{"_index":3938,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/item",{"_index":1596,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["libs/angular/layout/src/lib/pipes/show",{"_index":3958,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/sort",{"_index":3978,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["libs/angular/layout/src/lib/services/image",{"_index":2775,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["libs/angular/layout/src/lib/services/media",{"_index":2973,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["libs/angular/layout/src/lib/services/mobile",{"_index":3125,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["libs/angular/layout/src/lib/services/online",{"_index":3421,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["libs/angular/layout/src/lib/tokens/ngx",{"_index":3897,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/button.types.ts",{"_index":1436,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/configurable",{"_index":1580,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["libs/angular/layout/src/lib/types/display",{"_index":1879,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/drag",{"_index":878,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["libs/angular/layout/src/lib/types/image",{"_index":2664,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["libs/angular/layout/src/lib/types/link.types.ts",{"_index":2891,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/media",{"_index":2937,"title":{},"body":{"interfaces/NgxMediaQuery.html":{}}}],["libs/angular/layout/src/lib/types/mobile",{"_index":3081,"title":{},"body":{"interfaces/NgxMobileLayout.html":{}}}],["libs/angular/layout/src/lib/types/show",{"_index":3922,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["libs/angular/layout/src/lib/types/sort",{"_index":3974,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts",{"_index":3847,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13",{"_index":3865,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15",{"_index":3854,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42",{"_index":3860,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51",{"_index":3863,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60",{"_index":3856,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69",{"_index":3858,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78",{"_index":3867,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/base",{"_index":111,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/entity",{"_index":158,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/store",{"_index":146,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts",{"_index":262,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17",{"_index":270,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9",{"_index":266,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts",{"_index":4780,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:11",{"_index":4782,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:12",{"_index":4784,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:14",{"_index":4789,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:24",{"_index":4792,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/store",{"_index":4713,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts",{"_index":3673,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts:13",{"_index":3675,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts:18",{"_index":3678,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/types/signal",{"_index":3684,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["libs/angular/utils/src/lib/abstracts/query",{"_index":3433,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["libs/angular/utils/src/lib/directives/cypress",{"_index":1836,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["libs/angular/utils/src/lib/directives/focus",{"_index":295,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts",{"_index":178,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13",{"_index":188,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/has",{"_index":440,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts",{"_index":457,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8",{"_index":459,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/replace",{"_index":3546,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts",{"_index":5049,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17",{"_index":5053,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/services/broadcast",{"_index":1375,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["libs/angular/utils/src/lib/services/media",{"_index":3020,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["libs/angular/utils/src/lib/services/storage",{"_index":3729,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["libs/angular/utils/src/lib/types/replace",{"_index":3538,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["libs/angular/utils/src/lib/types/storage.types.ts",{"_index":3715,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["libs/javascript/core/src/lib/core.ts",{"_index":5094,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/javascript/types/authentication/src/lib/authentication.ts",{"_index":5093,"title":{},"body":{"miscellaneous/functions.html":{}}}],["license",{"_index":5175,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["lifecycle",{"_index":5015,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["limit",{"_index":2122,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["limitation",{"_index":5193,"title":{},"body":{"index.html":{},"license.html":{}}}],["limited",{"_index":4091,"title":{},"body":{"injectables/NgxToastService.html":{},"index.html":{},"license.html":{}}}],["line",{"_index":3229,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["link",{"_index":2892,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["link.\"the",{"_index":3591,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linkcomponent",{"_index":3568,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linkedsignal",{"_index":4824,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["links",{"_index":3564,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linktype",{"_index":2905,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["list",{"_index":408,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["listen",{"_index":1062,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["listened",{"_index":3035,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["listener",{"_index":1759,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["listeners",{"_index":1792,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["listens",{"_index":4109,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["listentoonlinestatus",{"_index":1882,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["listing",{"_index":3770,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["lists",{"_index":3309,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["literal",{"_index":144,"title":{},"body":{"interfaces/BaseStoreActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["live",{"_index":802,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"dependencies.html":{}}}],["liveannouncer",{"_index":799,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["liveregionservice",{"_index":789,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["load",{"_index":1734,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TableCellTemplate.html":{}}}],["loaded",{"_index":2402,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loader",{"_index":2392,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["loading",{"_index":114,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loading'},{'name",{"_index":559,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["loading.service.ts",{"_index":2401,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:15",{"_index":2429,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:21",{"_index":2446,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:23",{"_index":2433,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:25",{"_index":2445,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:28",{"_index":2444,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:40",{"_index":2431,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:48",{"_index":2419,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:57",{"_index":2415,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:67",{"_index":2421,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:77",{"_index":2424,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:91",{"_index":2427,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types",{"_index":2450,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types.ts",{"_index":5059,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loading/i18n",{"_index":2400,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loadingcomponent",{"_index":1471,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["loadingdata",{"_index":1472,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["loadingtemplate",{"_index":4892,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["loadtranslations",{"_index":2412,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loadtranslations(paths",{"_index":2423,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["local",{"_index":2557,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["locale",{"_index":1645,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["localstorage",{"_index":2589,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["localstorage.getitem('ngx",{"_index":2593,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage.setitem('ngx",{"_index":2591,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage/sessionstorage",{"_index":3778,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["localstoragerecord",{"_index":3733,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["location",{"_index":1248,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["lodash",{"_index":1843,"title":{},"body":{"directives/NgxCypressTagDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["log",{"_index":2078,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["logical",{"_index":3278,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["logs",{"_index":3791,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["longer",{"_index":380,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["longestrow",{"_index":1615,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["loop",{"_index":3001,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["lower",{"_index":3571,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercase",{"_index":3600,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercased",{"_index":3573,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["made",{"_index":1166,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["main",{"_index":3087,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"index.html":{}}}],["maintained",{"_index":5105,"title":{},"body":{"index.html":{}}}],["make",{"_index":783,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["makes",{"_index":4326,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["managescripttags",{"_index":1653,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["map",{"_index":824,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["map(([action",{"_index":3372,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map(([toasts",{"_index":4088,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["map((action",{"_index":3379,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map((hascookies",{"_index":2187,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["map((key",{"_index":2124,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["map((layout",{"_index":3206,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["map((query",{"_index":3018,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["map((response",{"_index":1203,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["map((result",{"_index":2442,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["map((status",{"_index":1286,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["map((toasts",{"_index":4111,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["map((translations",{"_index":2514,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["maps",{"_index":3077,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["mark",{"_index":920,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["markallasdirty",{"_index":371,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallasdirty(form",{"_index":388,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched",{"_index":372,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched(form",{"_index":396,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markasactive",{"_index":753,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasactive(id",{"_index":918,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasdirty",{"_index":381,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markasinitial",{"_index":3158,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["markasrendered",{"_index":4060,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["markasrendered(toast",{"_index":4064,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["markastouched",{"_index":394,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["marked",{"_index":4405,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["marker",{"_index":2672,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["marker'},{'name",{"_index":545,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["marker.addeventlistener('select",{"_index":2861,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.addeventlistener('statechange",{"_index":2855,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.all_marker_types",{"_index":2838,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.availablemarkertypes",{"_index":2818,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.close",{"_index":2813,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.component.scss",{"_index":2697,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts",{"_index":2694,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:104",{"_index":2723,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:109",{"_index":2721,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:111",{"_index":2726,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:116",{"_index":2728,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:137",{"_index":2729,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:149",{"_index":2724,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:47",{"_index":2737,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:48",{"_index":2739,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:49",{"_index":2732,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:54",{"_index":2730,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:59",{"_index":2738,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:64",{"_index":2734,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:69",{"_index":2715,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:74",{"_index":2716,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:79",{"_index":2720,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:84",{"_index":2712,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:89",{"_index":2713,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:94",{"_index":2740,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:99",{"_index":2718,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.removeeventlistener('select",{"_index":2812,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.removeeventlistener('statechange",{"_index":2822,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.restorestate(configuration.defaultstate",{"_index":2854,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts",{"_index":2776,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:117",{"_index":2786,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:188",{"_index":2796,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:207",{"_index":2792,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:221",{"_index":2799,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:26",{"_index":2801,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:31",{"_index":2800,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:40",{"_index":2789,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:66",{"_index":2798,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show",{"_index":2851,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show(configuration.defaultstate",{"_index":2820,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.targetroot",{"_index":2811,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.types.ts",{"_index":2665,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["marker.uistylesettings.clearbuttonvisible",{"_index":2835,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.notesareastyleclassname",{"_index":2840,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbaractivebuttonstylecolorsclassname",{"_index":2848,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarbuttonstylecolorsclassname",{"_index":2847,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarstylecolorsclassname",{"_index":2843,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxactivebuttonstylecolorsclassname",{"_index":2850,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxbuttonstylecolorsclassname",{"_index":2849,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxstylecolorsclassname",{"_index":2845,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoombuttonvisible",{"_index":2826,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoomoutbuttonvisible",{"_index":2828,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomlevel",{"_index":2833,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomsteps",{"_index":2829,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker/image",{"_index":2693,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markerarea",{"_index":2795,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerarea(image",{"_index":2821,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerareastate",{"_index":2670,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerbase",{"_index":2667,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerclicked",{"_index":2704,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerdestroyedsubject",{"_index":2705,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerjs",{"_index":2669,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{}}}],["markerjs2",{"_index":2671,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{}}}],["markers",{"_index":2719,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markertypes",{"_index":2684,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerview",{"_index":2791,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerview(image",{"_index":2809,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marks",{"_index":385,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["marktranslationsloadedasfailed",{"_index":2413,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["match",{"_index":471,"title":{},"body":{"pipes/IbanPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/TableCellTemplate.html":{}}}],["matched",{"_index":82,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["matchedquery",{"_index":3058,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["matchedquery.addeventlistener('change",{"_index":3063,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["matches",{"_index":2943,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["matchesquery",{"_index":2972,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["matchesquery(id",{"_index":2981,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matchesquery(this.ngxmediaquery",{"_index":2969,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["matchfunction",{"_index":4597,"title":{},"body":{"classes/NgxValidators.html":{}}}],["matching",{"_index":89,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["matchingset",{"_index":3015,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matchingset.has(query",{"_index":3019,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["math.max",{"_index":1616,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["max",{"_index":1611,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"classes/NgxValidators.html":{}}}],["maxamount",{"_index":4006,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["maxdate",{"_index":4625,"title":{},"body":{"classes/NgxValidators.html":{}}}],["maximum",{"_index":4591,"title":{},"body":{"classes/NgxValidators.html":{}}}],["maxtime",{"_index":4007,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["meant",{"_index":897,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["mechanic",{"_index":4910,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["media",{"_index":2975,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["mediaqueries",{"_index":2978,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist",{"_index":2998,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["mediaquerylist.addeventlistener('change",{"_index":3010,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist.matches",{"_index":3005,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist.removeeventlistener('change",{"_index":2999,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylistenermap",{"_index":3027,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["mediaquerylistevent",{"_index":3008,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["mediaqueryservice",{"_index":2944,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["memberof",{"_index":352,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["memoizedselector",{"_index":121,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["memory",{"_index":2277,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["merchantability",{"_index":5214,"title":{},"body":{"index.html":{},"license.html":{}}}],["merge",{"_index":1927,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{},"license.html":{}}}],["message",{"_index":815,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["messageerror",{"_index":1406,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["messagerecord",{"_index":793,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["messages",{"_index":796,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{}}}],["messagetype",{"_index":1400,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["message{any",{"_index":1429,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["met",{"_index":1252,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxModalService.html":{}}}],["metadata",{"_index":179,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["method",{"_index":350,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["methods",{"_index":183,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["methodsdictionary",{"_index":3688,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["milestone",{"_index":5163,"title":{},"body":{"index.html":{}}}],["min",{"_index":4586,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mind",{"_index":3569,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["mindate",{"_index":4624,"title":{},"body":{"classes/NgxValidators.html":{}}}],["minimum",{"_index":4381,"title":{},"body":{"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{}}}],["minmax(0",{"_index":1621,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["miscellaneous",{"_index":5083,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["missing",{"_index":3507,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["mit",{"_index":5176,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mm",{"_index":4578,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mobile",{"_index":547,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mock",{"_index":484,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockchannel",{"_index":275,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocked",{"_index":2804,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["mockprivatechannel",{"_index":276,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocktourholdercomponent",{"_index":478,"title":{"components/MockTourHolderComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mocktourstepcomponent",{"_index":520,"title":{"components/MockTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockvideos",{"_index":277,"title":{},"body":{"injectables/EffectsService.html":{}}}],["modal",{"_index":1716,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["modals",{"_index":3303,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["modalvisible",{"_index":1674,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modalvisiblesubject",{"_index":1675,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["mode",{"_index":1649,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["models",{"_index":3690,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["modifies",{"_index":1724,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modify",{"_index":5195,"title":{},"body":{"index.html":{},"license.html":{}}}],["modular",{"_index":5128,"title":{},"body":{"index.html":{}}}],["module",{"_index":2645,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["modules",{"_index":2648,"title":{"modules.html":{}},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"modules.html":{}}}],["moment",{"_index":2643,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["mono",{"_index":5103,"title":{},"body":{"index.html":{}}}],["more",{"_index":41,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["mouse",{"_index":327,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["mouseenter",{"_index":4136,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["mouseleave",{"_index":4137,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["move",{"_index":970,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["moved",{"_index":852,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["movedown",{"_index":4427,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movefocus",{"_index":957,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["movefocus(id",{"_index":963,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["moveleft",{"_index":4428,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveleft(event",{"_index":4462,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveright",{"_index":4429,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moves",{"_index":969,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["moveto",{"_index":4515,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["moveto(direction",{"_index":4527,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["movetobottomcontrolend",{"_index":4430,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetobottomend",{"_index":4431,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell",{"_index":4432,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell(cell",{"_index":4466,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcellofgrid",{"_index":4433,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcolumnofgrid",{"_index":4434,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstofrow",{"_index":4435,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetolastcellofgrid",{"_index":4436,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveup",{"_index":4437,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moving",{"_index":1588,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["mozilla",{"_index":3244,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ms",{"_index":4301,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["multi",{"_index":257,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["multiple",{"_index":2469,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["multiselect",{"_index":5030,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["multitranslationloader",{"_index":2516,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["mycomponent",{"_index":451,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["name",{"_index":180,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named",{"_index":5150,"title":{},"body":{"index.html":{}}}],["names",{"_index":2839,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["native",{"_index":3231,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["nativeelement",{"_index":1473,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["nature",{"_index":3599,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["navigate",{"_index":3515,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["navigating",{"_index":4486,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["navigation",{"_index":2897,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["navigationextras",{"_index":4289,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["near",{"_index":4263,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["necessary",{"_index":249,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourStepComponent.html":{}}}],["need",{"_index":74,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["needed",{"_index":55,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["needs",{"_index":1226,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["negative",{"_index":4323,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["nested",{"_index":1856,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["never",{"_index":105,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["new",{"_index":61,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["newcontainer",{"_index":893,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newindex",{"_index":891,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newlanguage",{"_index":2586,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["newly",{"_index":2416,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["newsortdirection",{"_index":732,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["newvalue",{"_index":3724,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["next",{"_index":1015,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["next.active",{"_index":4240,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.id",{"_index":4244,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.path",{"_index":2536,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["next.source",{"_index":4241,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.translations",{"_index":2537,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["nextstate",{"_index":3641,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ng_validators",{"_index":243,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["ng_value_accessor",{"_index":244,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngaftercontentchecked",{"_index":5016,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngafterviewinit",{"_index":636,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["ngclass",{"_index":4822,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngcomponentoutlet",{"_index":3096,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngif",{"_index":2074,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ngonchanges",{"_index":2710,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["ngonchanges(changes",{"_index":2727,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["ngondestroy",{"_index":373,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngoninit",{"_index":637,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngrx/effects",{"_index":4793,"title":{},"body":{"injectables/StoreEffects.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":154,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngrx/signals",{"_index":3687,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":124,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngtemplateoutlet",{"_index":1024,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngx",{"_index":524,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["ngxabstracttablecelldirective",{"_index":567,"title":{"directives/NgxAbstractTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxabstracttablecelldirective:14",{"_index":1833,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:21",{"_index":3894,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:26",{"_index":3895,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:27",{"_index":3892,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:31",{"_index":1809,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:32",{"_index":1831,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:33",{"_index":3893,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:36",{"_index":1812,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:38",{"_index":1828,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:42",{"_index":1810,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:44",{"_index":1820,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:47",{"_index":1811,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:49",{"_index":1816,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:52",{"_index":1832,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:57",{"_index":1813,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:59",{"_index":1867,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:65",{"_index":1863,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:72",{"_index":1859,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:77",{"_index":1858,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:82",{"_index":1814,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:91",{"_index":1815,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxaccessibleabstractdraganddropitemdirective",{"_index":569,"title":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropabstractservice",{"_index":780,"title":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddropbasemessage",{"_index":877,"title":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropcontainer",{"_index":900,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainer]'},{'name",{"_index":571,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerdirective",{"_index":570,"title":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerindex",{"_index":904,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainerlabel",{"_index":907,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropfromtomessage",{"_index":880,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddrophost",{"_index":911,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophost]'},{'name",{"_index":573,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddrophostdescription",{"_index":928,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophostdirective",{"_index":572,"title":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitem]'},{'name",{"_index":575,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitemdirective",{"_index":574,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropmessage",{"_index":813,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmessagerecord",{"_index":830,"title":{"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmessagerecords",{"_index":829,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["ngxaccessibledraganddropmoveevent",{"_index":889,"title":{"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmovetype",{"_index":888,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccordioncomponent",{"_index":523,"title":{"components/NgxAccordionComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionitemcomponent",{"_index":526,"title":{"components/NgxAccordionItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionopenbehavior",{"_index":985,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["ngxariasort",{"_index":1126,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["ngxariasortpipe",{"_index":1122,"title":{"pipes/NgxAriaSortPipe.html":{}},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxauthenticatedhttpclient",{"_index":1134,"title":{"injectables/NgxAuthenticatedHttpClient.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpclientconfiguration",{"_index":1187,"title":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpinterceptor",{"_index":5091,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedhttpinterceptor(request",{"_index":5096,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedroute",{"_index":1228,"title":{"interfaces/NgxAuthenticatedRoute.html":{}},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxauthenticatedroutes",{"_index":1255,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxauthenticationabstractservice",{"_index":1222,"title":{"classes/NgxAuthenticationAbstractService.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationconfiguration",{"_index":1225,"title":{"interfaces/NgxAuthenticationConfiguration.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticationresponsefeature",{"_index":1297,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["ngxauthenticationservicetoken",{"_index":2220,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationstatus",{"_index":1335,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["ngxauthenticationurlhandlertoken",{"_index":1185,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["ngxbroadcastchannelservice",{"_index":1374,"title":{"injectables/NgxBroadcastChannelService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["ngxbutton",{"_index":1464,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["ngxbutton]'},{'name",{"_index":577,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxbuttonconfiguration",{"_index":1435,"title":{"interfaces/NgxButtonConfiguration.html":{}},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttonconfigurationtoken",{"_index":1525,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["ngxbuttondirective",{"_index":576,"title":{"directives/NgxButtonDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxbuttondisplaytype",{"_index":1459,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttoniconposition",{"_index":1442,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttonpriority",{"_index":1444,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttontype",{"_index":1449,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttonwidth",{"_index":1455,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxconfigurablelayoutcomponent",{"_index":529,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutgrid",{"_index":1586,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxconfigurablelayoutitemcomponent",{"_index":532,"title":{"components/NgxConfigurableLayoutItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutitemdropevent",{"_index":1579,"title":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxconfigurablelayoutitementity",{"_index":1587,"title":{"interfaces/NgxConfigurableLayoutItemEntity.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsize",{"_index":1599,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsizeoption",{"_index":1589,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsizepipe",{"_index":1595,"title":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayouttype",{"_index":1592,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxcookie",{"_index":1623,"title":{"interfaces/NgxCookie.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["ngxcookiecategories",{"_index":1639,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookiechangedevent",{"_index":1659,"title":{"interfaces/NgxCookieChangedEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieconfiguration",{"_index":1648,"title":{"interfaces/NgxCookieConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieevent",{"_index":1658,"title":{"interfaces/NgxCookieEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookielanguageconfiguration",{"_index":1640,"title":{"interfaces/NgxCookieLanguageConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookies",{"_index":1758,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ngxcookieservice",{"_index":1662,"title":{"injectables/NgxCookieService.html":{}},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxcookiesfallbackcomponent",{"_index":578,"title":{"directives/NgxCookiesFallBackComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcookiesfallbackcomponenttoken",{"_index":2155,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ngxcookievalue",{"_index":1707,"title":{"interfaces/NgxCookieValue.html":{}},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{}}}],["ngxcurrencytablecellcomponent",{"_index":534,"title":{"components/NgxCurrencyTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcypresstagdirective",{"_index":579,"title":{"directives/NgxCypressTagDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdatetablecellcomponent",{"_index":538,"title":{"components/NgxDateTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentarialive",{"_index":1886,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentcomponent",{"_index":581,"title":{"directives/NgxDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentcomponent:13",{"_index":5043,"title":{},"body":{"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["ngxdisplaycontentcomponent:8",{"_index":5044,"title":{},"body":{"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["ngxdisplaycontentcomponentconfiguration",{"_index":1883,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["ngxdisplaycontentconditions",{"_index":1890,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentconfiguration",{"_index":1878,"title":{"interfaces/NgxDisplayContentConfiguration.html":{}},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentconfigurationtoken",{"_index":1931,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentdirective",{"_index":582,"title":{"directives/NgxDisplayContentDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentoverrideconfiguration",{"_index":1891,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentrecord",{"_index":1889,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["ngxdisplaycontentstatus",{"_index":1884,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxforms",{"_index":429,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["ngxformscontrolvalueaccessor",{"_index":584,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserror",{"_index":2050,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrorabstractcomponent",{"_index":585,"title":{"directives/NgxFormsErrorAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorconfigurationoptions",{"_index":2014,"title":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrordirective",{"_index":2081,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors",{"_index":2023,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors]'},{'name",{"_index":587,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorsconfigurationtoken",{"_index":2048,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrorsdirective",{"_index":586,"title":{"directives/NgxFormsErrorsDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorshowsettings",{"_index":2020,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["ngxformserrorshowwhensettings",{"_index":2021,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["ngxhascookieconfiguration",{"_index":1805,"title":{"interfaces/NgxHasCookieConfiguration.html":{}},"body":{"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxhascookiedirective",{"_index":588,"title":{"directives/NgxHasCookieDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeature",{"_index":2205,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeature]'},{'name",{"_index":591,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeaturedirective",{"_index":590,"title":{"directives/NgxHasFeatureDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeatureelse",{"_index":2208,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureguard",{"_index":1237,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhasfeaturepipe",{"_index":2253,"title":{"pipes/NgxHasFeaturePipe.html":{}},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeatureshouldhaveallfeatures",{"_index":2209,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureshouldhavefeature",{"_index":2210,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfocusdirective",{"_index":592,"title":{"directives/NgxHasFocusDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdirective:13",{"_index":4480,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:18",{"_index":4457,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:25",{"_index":4456,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:34",{"_index":4474,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:43",{"_index":4475,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective",{"_index":593,"title":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdraganddropabstractdirective:15",{"_index":778,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:20",{"_index":762,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:31",{"_index":760,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:39",{"_index":777,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:41",{"_index":767,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:45",{"_index":770,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:47",{"_index":771,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:54",{"_index":769,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhaspermission",{"_index":2316,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermission]'},{'name",{"_index":595,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissiondirective",{"_index":594,"title":{"directives/NgxHasPermissionDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissionelse",{"_index":2317,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionguard",{"_index":1242,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhaspermissionpipe",{"_index":2349,"title":{"pipes/NgxHasPermissionPipe.html":{}},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermissionshouldhaveallpermissions",{"_index":2318,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionshouldhavepermission",{"_index":2319,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxi18n",{"_index":2598,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["ngxi18nabstractservice",{"_index":2364,"title":{"classes/NgxI18nAbstractService.html":{}},"body":{"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nconfiguration",{"_index":2368,"title":{"interfaces/NgxI18nConfiguration.html":{}},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nconfigurationtoken",{"_index":2495,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nemptycomponent",{"_index":540,"title":{"components/NgxI18nEmptyComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxi18nloadingservice",{"_index":2398,"title":{"injectables/NgxI18nLoadingService.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nmodule",{"_index":2478,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi18nmultitranslationhttploader",{"_index":2465,"title":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi18nrootservice",{"_index":2540,"title":{"injectables/NgxI18nRootService.html":{}},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nservice",{"_index":2601,"title":{"injectables/NgxI18nService.html":{}},"body":{"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nsetlanguageguard",{"_index":2397,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["ngxi18ntranslationloaderresolver",{"_index":2640,"title":{"injectables/NgxI18nTranslationLoaderResolver.html":{}},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18ntranslationpathstoken",{"_index":2496,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi8nrootservice",{"_index":2620,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["ngximagemarker",{"_index":2691,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerbase",{"_index":2663,"title":{"interfaces/NgxImageMarkerBase.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkercomponent",{"_index":543,"title":{"components/NgxImageMarkerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngximagemarkerconfiguration",{"_index":2676,"title":{"interfaces/NgxImageMarkerConfiguration.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkeredit",{"_index":2690,"title":{"interfaces/NgxImageMarkerEdit.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkeritem",{"_index":2674,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerservice",{"_index":2735,"title":{"injectables/NgxImageMarkerService.html":{}},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["ngximagemarkerstate",{"_index":2673,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkertypes",{"_index":2675,"title":{"interfaces/NgxImageMarkerTypes.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerview",{"_index":2688,"title":{"interfaces/NgxImageMarkerView.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngxinform",{"_index":3355,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxisauthenticated",{"_index":2870,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticated]'},{'name",{"_index":597,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticateddirective",{"_index":596,"title":{"directives/NgxIsAuthenticatedDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticatedelse",{"_index":2871,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticatedguard",{"_index":1246,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxlayout",{"_index":1999,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxlink",{"_index":2904,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["ngxlink]'},{'name",{"_index":599,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxlinkconfiguration",{"_index":2890,"title":{"interfaces/NgxLinkConfiguration.html":{}},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinkconfigurationtoken",{"_index":2934,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["ngxlinkcontext",{"_index":2896,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinkdestination",{"_index":2901,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinkdirective",{"_index":598,"title":{"directives/NgxLinkDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxlinkiconposition",{"_index":2893,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinkpriority",{"_index":2894,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinktype",{"_index":2895,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxmediaqueriestoken",{"_index":2994,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["ngxmediaquery",{"_index":2936,"title":{"interfaces/NgxMediaQuery.html":{}},"body":{"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["ngxmediaquery]'},{'name",{"_index":601,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmediaquerydirective",{"_index":600,"title":{"directives/NgxMediaQueryDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmediaqueryelse",{"_index":2945,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["ngxmediaqueryservice",{"_index":2957,"title":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["ngxmediaqueryshouldmatch",{"_index":2946,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["ngxmobilelayout",{"_index":3080,"title":{"interfaces/NgxMobileLayout.html":{}},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayout['header",{"_index":3092,"title":{},"body":{"interfaces/NgxMobileLayout.html":{}}}],["ngxmobilelayoutcomponent",{"_index":546,"title":{"components/NgxMobileLayoutComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmobilelayoutconfigurationtoken",{"_index":3161,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutelements",{"_index":3088,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutservice",{"_index":3083,"title":{"injectables/NgxMobileLayoutService.html":{}},"body":{"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmodalabstractcomponent",{"_index":602,"title":{"directives/NgxModalAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmodalabstractcomponent`](../abstracts/modal/modal.abstract.component.ts",{"_index":3292,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalactiontype",{"_index":3225,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabelbaseoptions",{"_index":3241,"title":{"interfaces/NgxModalAriaLabelBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabelledoptions",{"_index":3261,"title":{"interfaces/NgxModalAriaLabelledOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabeloptions",{"_index":3260,"title":{"interfaces/NgxModalAriaLabelOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalbaseconfiguration",{"_index":3302,"title":{"interfaces/NgxModalBaseConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalbaseoptions",{"_index":3306,"title":{"interfaces/NgxModalBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcdkmodalconfiguration",{"_index":3272,"title":{"interfaces/NgxModalCDKModalConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalclose",{"_index":3367,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalcomponentconfiguration",{"_index":3290,"title":{"interfaces/NgxModalComponentConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcomponentoptions",{"_index":3313,"title":{"interfaces/NgxModalComponentOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalconfiguration",{"_index":3305,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalconfigurationtoken",{"_index":3350,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalglobalcdkconfiguration",{"_index":3264,"title":{"interfaces/NgxModalGlobalCDKConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodallabelariaoptions",{"_index":3262,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodaloptions",{"_index":3314,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalrole",{"_index":3252,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalservice",{"_index":3211,"title":{"injectables/NgxModalService.html":{}},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["ngxmodaltypeoptions",{"_index":3312,"title":{"interfaces/NgxModalTypeOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxngxwindowservice",{"_index":4670,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ngxonlineservice",{"_index":1948,"title":{"injectables/NgxOnlineService.html":{}},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["ngxopenrowstatecolumn",{"_index":4876,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxqueryparamformsynccomponent",{"_index":603,"title":{"directives/NgxQueryParamFormSyncComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxreplaceelements",{"_index":3550,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsconfiguration",{"_index":3543,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsconfigurationelement",{"_index":3537,"title":{"interfaces/NgxReplaceElementsConfigurationElement.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["ngxreplaceelementsconfigurationtoken",{"_index":3603,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsitem",{"_index":3544,"title":{"interfaces/NgxReplaceElementsItem.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementspipe",{"_index":3545,"title":{"pipes/NgxReplaceElementsPipe.html":{}},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsselector",{"_index":3541,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["ngxsaveonexitabstractservice",{"_index":3627,"title":{"classes/NgxSaveOnExitAbstractService.html":{}},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ngxsaveonexitcomponent",{"_index":604,"title":{"directives/NgxSaveOnExitComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxsignalstore",{"_index":3674,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreconfiguration",{"_index":3696,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoredispatchactions",{"_index":3710,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstorerecord",{"_index":3711,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreselectfunction",{"_index":3692,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreservice",{"_index":3672,"title":{"injectables/NgxSignalStoreService.html":{}},"body":{"injectables/NgxSignalStoreService.html":{}}}],["ngxsignalstoreslice",{"_index":3683,"title":{"interfaces/NgxSignalStoreSlice.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicearraygenerator",{"_index":3693,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicearraymethods",{"_index":3703,"title":{"interfaces/NgxSignalStoreSliceArrayMethods.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicebasemethods",{"_index":3704,"title":{"interfaces/NgxSignalStoreSliceBaseMethods.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoresliceconfiguration",{"_index":3698,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicedatatype",{"_index":3701,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicegenerator",{"_index":3694,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicemethods",{"_index":3702,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstorestate",{"_index":3681,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreviewstate",{"_index":3680,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxstorage",{"_index":3714,"title":{"interfaces/NgxStorage.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragebaseevent",{"_index":3721,"title":{"interfaces/NgxStorageBaseEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageclearevent",{"_index":3725,"title":{"interfaces/NgxStorageClearEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageevent",{"_index":3727,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragerecord",{"_index":3719,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageremoveevent",{"_index":3726,"title":{"interfaces/NgxStorageRemoveEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageservice",{"_index":3728,"title":{"injectables/NgxStorageService.html":{}},"body":{"injectables/NgxStorageService.html":{}}}],["ngxstoragesetevent",{"_index":3722,"title":{"interfaces/NgxStorageSetEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragetype",{"_index":3720,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstore",{"_index":3828,"title":{"interfaces/NgxStore.html":{}},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreactions",{"_index":3831,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreselectors",{"_index":3832,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreservice",{"_index":3494,"title":{"injectables/NgxStoreService.html":{}},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:13",{"_index":4766,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:15",{"_index":4767,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:42",{"_index":4744,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:51",{"_index":4745,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:60",{"_index":4742,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:69",{"_index":4743,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxtablecelldirective",{"_index":605,"title":{"directives/NgxTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableclass",{"_index":3903,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["ngxtablecomponent",{"_index":548,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableconfiguration",{"_index":3896,"title":{"interfaces/NgxTableConfiguration.html":{}},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableconfigurationtoken",{"_index":3920,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablecypressdatatags",{"_index":729,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablecypressdatatagsbase",{"_index":3921,"title":{"interfaces/NgxTableCypressDataTagsBase.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablegetpipe",{"_index":1848,"title":{"pipes/NgxTableGetPipe.html":{}},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["ngxtablehasobservers",{"_index":3939,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["ngxtablehasobserverspipe",{"_index":3937,"title":{"pipes/NgxTableHasObserversPipe.html":{}},"body":{"pipes/NgxTableHasObserversPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableopenrowstatetemplateabstractcomponent",{"_index":606,"title":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableselectcolumn",{"_index":4871,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxtableselecttemplateabstractcomponent",{"_index":607,"title":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableshowheader",{"_index":3961,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["ngxtableshowheaderpipe",{"_index":3957,"title":{"pipes/NgxTableShowHeaderPipe.html":{}},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableshowheaderrequirements",{"_index":3926,"title":{"interfaces/NgxTableShowHeaderRequirements.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablesortdirection",{"_index":714,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"miscellaneous/enumerations.html":{}}}],["ngxtablesortdirection.ascending",{"_index":733,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesortdirection.descending",{"_index":738,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["ngxtablesortevent",{"_index":730,"title":{"interfaces/NgxTableSortEvent.html":{}},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorticon",{"_index":3981,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesorticonpipe",{"_index":3977,"title":{"pipes/NgxTableSortIconPipe.html":{}},"body":{"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorttemplateabstractcomponent",{"_index":608,"title":{"directives/NgxTableSortTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoast",{"_index":3990,"title":{"interfaces/NgxToast.html":{}},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastbundlercomponent",{"_index":609,"title":{"directives/NgxToastBundlerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastcomponent",{"_index":610,"title":{"directives/NgxToastComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastconfiguration",{"_index":3993,"title":{"interfaces/NgxToastConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastconfigurationtoken",{"_index":4043,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastcontainercomponent",{"_index":550,"title":{"components/NgxToastContainerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastcreator",{"_index":4008,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastdefaultconfiguration",{"_index":4005,"title":{"interfaces/NgxToastDefaultConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastevent",{"_index":4012,"title":{"interfaces/NgxToastEvent.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastmaxamountbaseconfiguration",{"_index":3997,"title":{"interfaces/NgxToastMaxAmountBaseConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountbundleconfiguration",{"_index":4001,"title":{"interfaces/NgxToastMaxAmountBundleConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountconfiguration",{"_index":4003,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountotherconfiguration",{"_index":4002,"title":{"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastposition",{"_index":3995,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastservice",{"_index":3992,"title":{"injectables/NgxToastService.html":{}},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtooltip",{"_index":4163,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltip]'},{'name",{"_index":613,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipabstractcomponent",{"_index":611,"title":{"directives/NgxTooltipAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipactiveelementevent",{"_index":4153,"title":{"interfaces/NgxTooltipActiveElementEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipactivetooltipevent",{"_index":4160,"title":{"interfaces/NgxTooltipActiveTooltipEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipbaseevent",{"_index":4155,"title":{"interfaces/NgxTooltipBaseEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipcomponent",{"_index":4164,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipconfiguration",{"_index":4156,"title":{"interfaces/NgxTooltipConfiguration.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipconfigurationtoken",{"_index":4237,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["ngxtooltipdirective",{"_index":612,"title":{"directives/NgxTooltipDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipdisabled",{"_index":4165,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipevent",{"_index":4161,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipid",{"_index":4166,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipinactiveevent",{"_index":4159,"title":{"interfaces/NgxTooltipInactiveEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipitem",{"_index":4158,"title":{"interfaces/NgxTooltipItem.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipposition",{"_index":4149,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltippositionclass",{"_index":4150,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipservice",{"_index":4132,"title":{"injectables/NgxTooltipService.html":{}},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtouraction",{"_index":4297,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourbackdropclipevent",{"_index":4286,"title":{"interfaces/NgxTourBackdropClipEvent.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourdirection",{"_index":4290,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourinteraction",{"_index":4291,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtouritemdirective",{"_index":614,"title":{"directives/NgxTourItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourregistrationevent",{"_index":4293,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourrouteoptions",{"_index":4295,"title":{"interfaces/NgxTourRouteOptions.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourservice",{"_index":505,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtourshowwhen",{"_index":4354,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourshowwhen]'},{'name",{"_index":617,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhendirective",{"_index":616,"title":{"directives/NgxTourShowWhenDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhenelse",{"_index":4355,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourstep",{"_index":4298,"title":{"interfaces/NgxTourStep.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourstep.offset",{"_index":4418,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourstepcomponent",{"_index":618,"title":{"directives/NgxTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourstepcomponent:103",{"_index":673,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:105",{"_index":659,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:112",{"_index":658,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:33",{"_index":676,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:38",{"_index":655,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:45",{"_index":654,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:53",{"_index":649,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:58",{"_index":669,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:63",{"_index":666,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:68",{"_index":653,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:73",{"_index":646,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:78",{"_index":647,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:83",{"_index":642,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:88",{"_index":648,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:93",{"_index":651,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:98",{"_index":661,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepoffset",{"_index":4327,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourstepposition",{"_index":4292,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtourtokenconfiguration",{"_index":4412,"title":{"interfaces/NgxTourTokenConfiguration.html":{}},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourtokentype",{"_index":4416,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtreegrid",{"_index":4510,"title":{},"body":{"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtreegrid]'},{'name",{"_index":622,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcell",{"_index":4424,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcell]'},{'name",{"_index":620,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcelldirective",{"_index":619,"title":{"directives/NgxTreeGridCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcellrow",{"_index":4425,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcelltarget",{"_index":4467,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegriddirective",{"_index":621,"title":{"directives/NgxTreeGridDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridexpandable",{"_index":4511,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["ngxtreegridrow",{"_index":624,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowdirective",{"_index":623,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowtarget",{"_index":4468,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxutils",{"_index":1423,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["ngxvalidators",{"_index":4551,"title":{"classes/NgxValidators.html":{}},"body":{"classes/NgxValidators.html":{}}}],["ngxwindowservice",{"_index":1417,"title":{"injectables/NgxWindowService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["node",{"_index":1536,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["node_modules/@ngrx/signals/src/signal",{"_index":3689,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["nodes",{"_index":1533,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["non",{"_index":1606,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{}}}],["none",{"_index":1128,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["noninfringement",{"_index":5218,"title":{},"body":{"index.html":{},"license.html":{}}}],["note",{"_index":3576,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["notes",{"_index":2841,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["nothing",{"_index":67,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["notice",{"_index":5205,"title":{},"body":{"index.html":{},"license.html":{}}}],["notify",{"_index":1791,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["now",{"_index":3594,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["npm",{"_index":5111,"title":{},"body":{"index.html":{}}}],["null",{"_index":48,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{}}}],["number",{"_index":190,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["number(value",{"_index":3825,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["numbers",{"_index":199,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["obj",{"_index":23,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxMobileLayoutService.html":{},"dependencies.html":{}}}],["object",{"_index":36,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["object.entries(item.data).foreach(([key",{"_index":3618,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["object.entries(record).foreach(([key",{"_index":3818,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(storage).foreach(([key",{"_index":3821,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(this.sortabletablecellrecord()).foreach(([cellname",{"_index":4996,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.keys(categories).length",{"_index":1757,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["object.keys(data",{"_index":2121,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(data).map((key",{"_index":2119,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(data).slice(0",{"_index":2126,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(parseddata",{"_index":3531,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(selectors).reduce((previous",{"_index":3870,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["object.keys(value).length",{"_index":3521,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.values(group.controls",{"_index":63,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["object.values(this.listeners).foreach",{"_index":2997,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["object.values(this.markers",{"_index":2865,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["object.values(this.rowsformgroup.controls).some",{"_index":4939,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(this.sortabletablecellrecord()).foreach((cell",{"_index":5010,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(value).every((selected",{"_index":5025,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["objects",{"_index":3779,"title":{},"body":{"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["observable",{"_index":268,"title":{},"body":{"injectables/EffectsService.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/functions.html":{}}}],["observable.pipe(sharereplay",{"_index":2458,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["observables",{"_index":1665,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["observe",{"_index":1201,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["observer",{"_index":3941,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers",{"_index":447,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers.pipe.ts",{"_index":442,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:13",{"_index":3940,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:8",{"_index":446,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers/has",{"_index":441,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["obtaining",{"_index":5187,"title":{},"body":{"index.html":{},"license.html":{}}}],["occurring",{"_index":3777,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["of(event).pipe",{"_index":4102,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["of(mockchannel",{"_index":279,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockprivatechannel",{"_index":280,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockvideos",{"_index":281,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(payload",{"_index":4805,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["of(this.currentlanguage",{"_index":838,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["offer",{"_index":3771,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["offline",{"_index":1885,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["offline'},{'name",{"_index":561,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["offset",{"_index":4312,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["old",{"_index":3814,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["oldvalue",{"_index":3723,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["omit",{"_index":3090,"title":{},"body":{"interfaces/NgxMobileLayout.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["onblur",{"_index":755,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["once",{"_index":2019,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange",{"_index":1764,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange.bind(this",{"_index":1766,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onchanged",{"_index":4839,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onchanges",{"_index":2696,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["onclose",{"_index":3308,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["onconsent",{"_index":1736,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onconsent.bind(this",{"_index":1763,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ondestroy",{"_index":366,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ondestroycomponent",{"_index":2168,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ondestroyed",{"_index":2178,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ondestroysubject",{"_index":1898,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["one",{"_index":7,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["ones",{"_index":736,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["onescape",{"_index":638,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["onfirstconsent",{"_index":1742,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfirstconsent.bind(this",{"_index":1761,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfocus",{"_index":756,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["oninit",{"_index":1022,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["online",{"_index":1949,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["onlineservice",{"_index":1899,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["onlinesubject",{"_index":3423,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["onlyself",{"_index":438,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["onmodalhide",{"_index":1770,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalhide.bind(this",{"_index":1772,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow",{"_index":1767,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow.bind(this",{"_index":1769,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onpush",{"_index":1983,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ontouch",{"_index":4838,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ontouched",{"_index":4946,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onvisible",{"_index":4304,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["open",{"_index":956,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["open(options",{"_index":3335,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["open/closed",{"_index":1070,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["openaside",{"_index":3141,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["opened",{"_index":1114,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["openedindex",{"_index":4921,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openedrows",{"_index":4851,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openflyout",{"_index":3142,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["openflyout(component",{"_index":3152,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["opening",{"_index":3356,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["openrowstate",{"_index":3919,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["openrowstatetemplate",{"_index":4900,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["opens",{"_index":3337,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["operator",{"_index":508,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["operators",{"_index":504,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/StoreEffects.html":{}}}],["opinionated",{"_index":1139,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["opt",{"_index":1650,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["option",{"_index":4867,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":1801,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["options",{"_index":35,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStore.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["options.autoclose",{"_index":3375,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.autofocus",{"_index":3399,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.closeonnavigation",{"_index":3409,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.component",{"_index":3360,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.conditionalfunction",{"_index":52,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.controls",{"_index":53,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.data",{"_index":3415,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.describedbyid",{"_index":3395,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.direction",{"_index":3402,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.has('when",{"_index":3971,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["options.hasbackdrop",{"_index":3404,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.interface.ts",{"_index":436,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["options.label",{"_index":3393,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.labelledbyid",{"_index":3394,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.panelclass",{"_index":3406,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.restorefocus",{"_index":3398,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.role",{"_index":3391,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.ts",{"_index":149,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["options.type",{"_index":3418,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.viewcontainerref",{"_index":3400,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["optionsvalue",{"_index":3328,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["order",{"_index":97,"title":{},"body":{"classes/BaseFormAccessor.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["original",{"_index":211,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/TransformPipe.html":{}}}],["original.slice(0",{"_index":213,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["original.slice(index",{"_index":214,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["originx",{"_index":4225,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["originy",{"_index":4226,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["others",{"_index":2638,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["otherwise",{"_index":5227,"title":{},"body":{"index.html":{},"license.html":{}}}],["ouput",{"_index":452,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["out",{"_index":1319,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"index.html":{},"license.html":{}}}],["outcome",{"_index":1980,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["outerhtml",{"_index":3570,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["outline",{"_index":1452,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["output",{"_index":320,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["output.observers.length",{"_index":455,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["output['listeners']?.length",{"_index":3943,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["outputemitterref",{"_index":319,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["outputs",{"_index":2711,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["outputtoobservable",{"_index":3349,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.action).pipe(startwith(undefined",{"_index":3365,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.close).pipe",{"_index":3366,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outside",{"_index":4254,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["over",{"_index":2457,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["overarching",{"_index":4509,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["overlay",{"_index":4232,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlaypositionbuilder",{"_index":4202,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayref",{"_index":4203,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayservice",{"_index":4204,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayx",{"_index":4227,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayy",{"_index":4228,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["override",{"_index":563,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["overrideconfiguration",{"_index":1900,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["overview",{"_index":5231,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":811,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxModalService.html":{}}}],["overwrites",{"_index":3331,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["overwritten",{"_index":1515,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["p",{"_index":2018,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["package",{"_index":240,"title":{"dependencies.html":{},"properties.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{}}}],["packages",{"_index":2745,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"index.html":{}}}],["padding",{"_index":4307,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["page",{"_index":1733,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["pages",{"_index":5136,"title":{},"body":{"index.html":{}}}],["pairs",{"_index":1568,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["pairwise",{"_index":4236,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["panelclass",{"_index":3269,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["paragraph",{"_index":2111,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["param",{"_index":34,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["parameter",{"_index":2379,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parameters",{"_index":193,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["parameters[1",{"_index":1197,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[1]['params",{"_index":1194,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[2",{"_index":1210,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["params",{"_index":40,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["parent",{"_index":453,"title":{},"body":{"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["parent.appendchild(element",{"_index":871,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parent.contains(element",{"_index":3238,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["parent.setattribute('aria",{"_index":872,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parentelement",{"_index":1997,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.getattribute('aria",{"_index":2004,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.setattribute('aria",{"_index":2001,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parse",{"_index":3606,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["parsed",{"_index":3776,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parseddata",{"_index":3528,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parser",{"_index":3609,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parser.parsefromstring(value",{"_index":3610,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parses",{"_index":3752,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue",{"_index":3738,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue(value",{"_index":3750,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["part",{"_index":2201,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["partial",{"_index":169,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxDisplayContentConfiguration.html":{}}}],["particular",{"_index":5216,"title":{},"body":{"index.html":{},"license.html":{}}}],["particularly",{"_index":4561,"title":{},"body":{"classes/NgxValidators.html":{}}}],["parts",{"_index":3559,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["pass",{"_index":102,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passed",{"_index":347,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passes",{"_index":818,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["patch",{"_index":1151,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["patch(url",{"_index":1175,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["patched",{"_index":4930,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["patchvalue(true",{"_index":5003,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["path",{"_index":1628,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{}}}],["paths",{"_index":2426,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["path}${lang}.json",{"_index":2509,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["pattern",{"_index":950,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["payload",{"_index":138,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["perform",{"_index":1059,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxMediaQueryService.html":{}}}],["performance",{"_index":3966,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["permission",{"_index":1243,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"index.html":{},"license.html":{}}}],["permission(s",{"_index":2334,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permission.directive.ts",{"_index":2314,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:103",{"_index":2326,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:110",{"_index":2327,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:167",{"_index":2325,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:30",{"_index":2339,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:31",{"_index":2328,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:34",{"_index":2329,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:39",{"_index":2330,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:44",{"_index":2337,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:45",{"_index":2338,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:46",{"_index":2331,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:47",{"_index":2332,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:52",{"_index":2333,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:57",{"_index":2336,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:62",{"_index":2335,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:67",{"_index":2322,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:72",{"_index":2323,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:77",{"_index":2324,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:82",{"_index":2321,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.pipe.ts",{"_index":2350,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:18",{"_index":2356,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:19",{"_index":2357,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:24",{"_index":2359,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:28",{"_index":2360,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:33",{"_index":2358,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:42",{"_index":2352,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:55",{"_index":2355,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:68",{"_index":2353,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:92",{"_index":2351,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission/has",{"_index":2313,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permissions",{"_index":1241,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["permissions(s",{"_index":2315,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permissiontype",{"_index":1244,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permit",{"_index":5202,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":5186,"title":{},"body":{"index.html":{},"license.html":{}}}],["persons",{"_index":5203,"title":{},"body":{"index.html":{},"license.html":{}}}],["pipe",{"_index":174,"title":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["pipe(filter((languages",{"_index":2564,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["pipe(switchmap",{"_index":4771,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["pipe(usemockdataduringtour('world",{"_index":493,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["pipe,pipetransform,outputemitterref",{"_index":3942,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["pipe/get.pipe",{"_index":1869,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipe/get.pipe.ts",{"_index":3929,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipe/get.pipe.ts:16",{"_index":3930,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipes",{"_index":176,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"overview.html":{}}}],["pipes/get",{"_index":1868,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipetransform",{"_index":204,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["placed",{"_index":898,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["platform",{"_index":4644,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platform_id",{"_index":4691,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platformid",{"_index":4631,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platforms",{"_index":4669,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["played",{"_index":4028,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["please",{"_index":797,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"index.html":{}}}],["polite",{"_index":1887,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["portal",{"_index":4271,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["portions",{"_index":5208,"title":{},"body":{"index.html":{},"license.html":{}}}],["position",{"_index":631,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{}}}],["positionclass",{"_index":4133,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["positionrecord",{"_index":4205,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["positionstrategy",{"_index":4266,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["possible",{"_index":663,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxMobileLayout.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["post",{"_index":1152,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["post(url",{"_index":1178,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["postmessage",{"_index":1386,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["postmessage(channelname",{"_index":1399,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["pr",{"_index":5160,"title":{},"body":{"index.html":{}}}],["practices",{"_index":699,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["practices#selecting",{"_index":701,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["precedence",{"_index":3275,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["preconditions",{"_index":3340,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["preference",{"_index":1756,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["preferences",{"_index":1725,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["prepend",{"_index":3708,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["present",{"_index":1306,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["presented",{"_index":1563,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["preserve",{"_index":3676,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["preserved",{"_index":1995,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["pressed",{"_index":357,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["prevent",{"_index":1112,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["prevented",{"_index":3650,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["previous",{"_index":2535,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["previous.active",{"_index":4255,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.id",{"_index":4249,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.source",{"_index":4252,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previouscontainer",{"_index":892,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previousindex",{"_index":890,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previously",{"_index":3285,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["previousvalue",{"_index":4855,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["primary",{"_index":1445,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["priority",{"_index":1443,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxToastService.html":{}}}],["private",{"_index":369,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["proceed",{"_index":3299,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["programmatically",{"_index":4483,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["project",{"_index":3307,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["projects",{"_index":5141,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1646,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["proof",{"_index":3731,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["prop",{"_index":3614,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"properties.html":{}}}],["property",{"_index":136,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["proposed",{"_index":2555,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["props",{"_index":3712,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["protected",{"_index":367,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["provide",{"_index":255,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["provided",{"_index":379,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":1188,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["providengxreplaceelementsconfiguration",{"_index":3582,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["provider",{"_index":241,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["providers",{"_index":250,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["providers.util.ts",{"_index":229,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["providers/accessor",{"_index":228,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["provides",{"_index":335,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{},"index.html":{}}}],["providing",{"_index":1142,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["public",{"_index":184,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{}}}],["publish",{"_index":5196,"title":{},"body":{"index.html":{},"license.html":{}}}],["pure",{"_index":2275,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["purpose",{"_index":5217,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposes",{"_index":1575,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["put",{"_index":1153,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["put(url",{"_index":1180,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["queries",{"_index":2976,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["query",{"_index":2386,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["query.directive.ts",{"_index":2941,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:151",{"_index":2950,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:27",{"_index":2959,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:31",{"_index":2960,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:35",{"_index":2963,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:40",{"_index":2953,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:45",{"_index":2954,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:50",{"_index":2961,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:51",{"_index":2962,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:52",{"_index":2955,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:53",{"_index":2956,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:58",{"_index":2948,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:63",{"_index":2949,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:68",{"_index":2947,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:90",{"_index":2951,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:97",{"_index":2952,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.removeeventlistener('change",{"_index":3073,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query.service.ts",{"_index":2974,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:106",{"_index":2982,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:16",{"_index":2992,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:21",{"_index":2991,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:28",{"_index":2989,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:34",{"_index":2987,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:38",{"_index":2980,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:45",{"_index":2983,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:57",{"_index":2985,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.types.ts",{"_index":2938,"title":{},"body":{"interfaces/NgxMediaQuery.html":{}}}],["query/media",{"_index":2940,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["query/mediaquery.service.ts",{"_index":3021,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:102",{"_index":3033,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:121",{"_index":3037,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:13",{"_index":3047,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:18",{"_index":3046,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:23",{"_index":3045,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:29",{"_index":3042,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:37",{"_index":3044,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:44",{"_index":3040,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent",{"_index":3007,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent.currenttarget",{"_index":3062,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent.matches",{"_index":3009,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedsubject",{"_index":3028,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryid",{"_index":3069,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryidmap",{"_index":3029,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querylist",{"_index":4885,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["querylistmap",{"_index":3030,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryparam",{"_index":3466,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparams",{"_index":3436,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamshandling",{"_index":3533,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamstype",{"_index":3447,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queue",{"_index":4057,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["queue.findindex",{"_index":4106,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["queue.slice(index",{"_index":4108,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["quick",{"_index":5129,"title":{},"body":{"index.html":{}}}],["radio",{"_index":3917,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["radiocontrol",{"_index":4869,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["radiotemplate",{"_index":4896,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["random",{"_index":3487,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["range",{"_index":4584,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range.validator",{"_index":4611,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range/date",{"_index":4610,"title":{},"body":{"classes/NgxValidators.html":{}}}],["reached",{"_index":4115,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["reactiveformsmodule",{"_index":4826,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["read",{"_index":3679,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["readme",{"_index":177,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["readme’s",{"_index":5145,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":300,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ready",{"_index":2287,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["real",{"_index":3780,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["really",{"_index":1786,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["reason",{"_index":1109,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["receive",{"_index":3935,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["record",{"_index":794,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxTooltipService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["record[key",{"_index":3805,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key].asobservable",{"_index":3806,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key]?.next(undefined",{"_index":3816,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["records",{"_index":4975,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["recreate",{"_index":2757,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["redirect",{"_index":1249,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reduce",{"_index":3517,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reduce((previous",{"_index":2534,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reducers",{"_index":130,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["reducers.ts",{"_index":160,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["redux",{"_index":5126,"title":{},"body":{"index.html":{}}}],["ref",{"_index":2047,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["refer",{"_index":2578,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["reference",{"_index":1578,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["refers",{"_index":3595,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["reformat",{"_index":469,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["reformat.trim",{"_index":475,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["regarding",{"_index":5155,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":1071,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["region",{"_index":803,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{}}}],["register",{"_index":974,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["registercell",{"_index":4516,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registercell(index",{"_index":4530,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerdraganddropitem",{"_index":915,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registerdraganddropitem(item",{"_index":923,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registered",{"_index":981,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxTreeGridDirective.html":{}}}],["registeritem",{"_index":958,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registeritem(item",{"_index":972,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registermediaqueries",{"_index":3031,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["registermediaqueries(...queries",{"_index":3039,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["registeronchange(fn",{"_index":4943,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerontouched(fn",{"_index":4947,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerquery",{"_index":2979,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registerquery(value",{"_index":2984,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registerrow",{"_index":4517,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerrow(row",{"_index":4532,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registers",{"_index":2986,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["regular",{"_index":1450,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["related",{"_index":4672,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["relating",{"_index":5115,"title":{},"body":{"index.html":{}}}],["relativeto",{"_index":3527,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reload",{"_index":2661,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["remaining",{"_index":1253,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{}}}],["remove",{"_index":476,"title":{},"body":{"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["removecookie",{"_index":1682,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removecookie(cookie",{"_index":1704,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removed",{"_index":4011,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["removefocus",{"_index":757,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["removeitem",{"_index":959,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["removeitem(item",{"_index":975,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["removeitem(key",{"_index":3753,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["removeonblur",{"_index":4168,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["removeonmouseout",{"_index":4134,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["removerow",{"_index":4518,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removerow(index",{"_index":4534,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removes",{"_index":977,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["removetoast",{"_index":4061,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["removetoast(toast",{"_index":4066,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["removetooltip",{"_index":4169,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["removing",{"_index":2864,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["render",{"_index":1918,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["rendered",{"_index":1569,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["renderelsetemplate",{"_index":2140,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["renderer",{"_index":1032,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["renderer2",{"_index":1088,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["rendering",{"_index":1753,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["renderinitialtemplate",{"_index":1902,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renders",{"_index":1909,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["rendertemplate",{"_index":1903,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["rendertemplate(status",{"_index":1915,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renderthentemplate",{"_index":2141,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["reordered",{"_index":858,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["repeat(${longestrow",{"_index":1620,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["replace",{"_index":467,"title":{},"body":{"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["replace(`{{#from",{"_index":859,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replace(`{{#to",{"_index":860,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replacement",{"_index":3615,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.innerhtml",{"_index":3620,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.setattribute(key",{"_index":3619,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaces",{"_index":322,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["replacing",{"_index":3589,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaysubject",{"_index":3043,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["repo",{"_index":5104,"title":{},"body":{"index.html":{}}}],["reposition",{"_index":4261,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["repository",{"_index":5148,"title":{},"body":{"index.html":{}}}],["represent",{"_index":693,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["represented",{"_index":3773,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["represents",{"_index":1821,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["request",{"_index":1161,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/functions.html":{}}}],["requested",{"_index":2530,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["requestedtranslations",{"_index":2499,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["requests",{"_index":2380,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["require",{"_index":2859,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["requireatleastone",{"_index":3924,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["required",{"_index":72,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["required.validator",{"_index":4605,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required.validator.ts",{"_index":9,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["required/all",{"_index":4604,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required/at",{"_index":8,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["required/depended",{"_index":4616,"title":{},"body":{"classes/NgxValidators.html":{}}}],["requiredfeatures",{"_index":1299,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.every((feature",{"_index":1358,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.some((feature",{"_index":1360,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions",{"_index":1302,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.every((permission",{"_index":1366,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.some((permission",{"_index":1368,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requirements.ts",{"_index":3923,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["requires",{"_index":3295,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["rerender",{"_index":5052,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["res.status",{"_index":2521,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reset",{"_index":2289,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/TableCellTemplate.html":{}}}],["resetformonnewdata",{"_index":4911,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resetngxtableform",{"_index":4830,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resets",{"_index":710,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{}}}],["resetsortdirection",{"_index":690,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["resize",{"_index":4701,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["resolve",{"_index":2654,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resolver",{"_index":2647,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resources",{"_index":2520,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["respective",{"_index":5144,"title":{},"body":{"index.html":{}}}],["respectively",{"_index":3782,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["respond",{"_index":3221,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["response",{"_index":1202,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["response.body",{"_index":1207,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.headers.get('content",{"_index":1205,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.user",{"_index":1341,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["responsetype",{"_index":1199,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["rest",{"_index":1785,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["restore",{"_index":3284,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restorefocus",{"_index":3288,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restriction",{"_index":5191,"title":{},"body":{"index.html":{},"license.html":{}}}],["result",{"_index":842,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{},"pipes/TransformPipe.html":{}}}],["result.length",{"_index":2443,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["result.replace",{"_index":848,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["result.slice(0",{"_index":4092,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["results",{"_index":88,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["resulttype",{"_index":3840,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['actions",{"_index":3846,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['selectors",{"_index":3843,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["return",{"_index":44,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["returned",{"_index":3934,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["returning",{"_index":3625,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["returns",{"_index":196,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":4647,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["reunes",{"_index":5174,"title":{},"body":{"index.html":{}}}],["revision",{"_index":1652,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["right",{"_index":1453,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["rights",{"_index":5194,"title":{},"body":{"index.html":{},"license.html":{}}}],["role",{"_index":988,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["root",{"_index":1189,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["rootclass",{"_index":632,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["rooti18nservice",{"_index":2605,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["roottarget",{"_index":2785,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["route",{"_index":1234,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["route.types.ts",{"_index":1230,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["router",{"_index":3437,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["routermodule",{"_index":3097,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["routeroutlet",{"_index":3106,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["routerstatesnapshot",{"_index":3638,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["routes",{"_index":1231,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["routing",{"_index":3128,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["row",{"_index":1613,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["row)?.focus",{"_index":4497,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["row.directive",{"_index":4481,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["rowclass",{"_index":4913,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rowclicked",{"_index":3909,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowitem",{"_index":1851,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rowkey",{"_index":1849,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rows",{"_index":3902,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowsformgroup",{"_index":4857,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rtl",{"_index":1643,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["run",{"_index":1217,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["runariachecks",{"_index":3321,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runariachecks(options",{"_index":3338,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runinbrowser",{"_index":4638,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["runinbrowser(action",{"_index":4645,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["running",{"_index":2281,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxModalService.html":{}}}],["rxjs",{"_index":272,"title":{},"body":{"injectables/EffectsService.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{},"index.html":{}}}],["rxjs/operators",{"_index":2449,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["sadly",{"_index":166,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["safe",{"_index":4628,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["safehtml",{"_index":3553,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["safely",{"_index":4246,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["same",{"_index":2006,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["samesite",{"_index":1629,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["sanitize",{"_index":3623,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["sanitizer",{"_index":3556,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["save",{"_index":2588,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{}}}],["saved",{"_index":3048,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["saves",{"_index":2487,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["saving",{"_index":3775,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["scan",{"_index":2447,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scan((actions",{"_index":2436,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scramble",{"_index":3456,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambled",{"_index":3481,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams",{"_index":3441,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(params",{"_index":3454,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(value",{"_index":3498,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams?(params",{"_index":3535,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler",{"_index":3485,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler(value.sorting",{"_index":3499,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambling",{"_index":3506,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["screen",{"_index":2942,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["scroll",{"_index":4260,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollingup",{"_index":4632,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollingupsubject",{"_index":4633,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrolls",{"_index":4262,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollstrategy",{"_index":4264,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["scrollto",{"_index":4639,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollto(offset",{"_index":4648,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollup",{"_index":4708,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["se",{"_index":4619,"title":{},"body":{"classes/NgxValidators.html":{}}}],["searches",{"_index":4459,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["searchquery",{"_index":3488,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["second",{"_index":1978,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["secondary",{"_index":1446,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["seconds",{"_index":4120,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["see",{"_index":38,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["seen",{"_index":670,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["select",{"_index":98,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectable",{"_index":4859,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectablekey",{"_index":4906,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectabletype",{"_index":4907,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectall",{"_index":288,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectchannelmessageerrors",{"_index":1387,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessageerrors(channelname",{"_index":1404,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages",{"_index":1388,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages(channelname",{"_index":1409,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selected",{"_index":766,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectedrow",{"_index":4879,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selecterror",{"_index":142,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrorfromstore",{"_index":3849,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrorfromstore(selector",{"_index":3855,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessage",{"_index":143,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrormessagefromstore",{"_index":3850,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessagefromstore(selector",{"_index":3857,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore",{"_index":3851,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore(selector",{"_index":3859,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectid",{"_index":156,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selection",{"_index":5026,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectloading",{"_index":141,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectloadingfromstore",{"_index":3852,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectloadingfromstore(selector",{"_index":3862,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selector",{"_index":298,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["selector.selectall",{"_index":3880,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterror",{"_index":3884,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterrormessage",{"_index":3886,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selectloading",{"_index":3882,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selectors",{"_index":131,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selectors.channel",{"_index":4747,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.subscribercount",{"_index":4758,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.videos",{"_index":4760,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectrow(index",{"_index":5000,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sell",{"_index":5200,"title":{},"body":{"index.html":{},"license.html":{}}}],["send",{"_index":1164,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["sending",{"_index":3484,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sends",{"_index":1402,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["separately",{"_index":3061,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["series",{"_index":2425,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["server",{"_index":1751,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["serves",{"_index":2777,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["service",{"_index":782,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["service.abstract.ts",{"_index":2366,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.abstract.ts:9",{"_index":2367,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.ts",{"_index":4724,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:14",{"_index":4748,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:17",{"_index":4754,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:20",{"_index":4750,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:23",{"_index":4752,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:27",{"_index":4761,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:30",{"_index":4765,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:33",{"_index":4763,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:34",{"_index":4764,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:37",{"_index":4759,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:40",{"_index":4756,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:42",{"_index":4757,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:44",{"_index":4739,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:52",{"_index":4735,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:56",{"_index":4741,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:65",{"_index":4736,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:69",{"_index":4737,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:73",{"_index":4738,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service/online.service.ts",{"_index":3422,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:10",{"_index":3429,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:15",{"_index":3428,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:20",{"_index":3426,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:25",{"_index":3424,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:51",{"_index":3425,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/storage.service.ts",{"_index":3730,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:122",{"_index":3756,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:175",{"_index":3754,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:20",{"_index":3765,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:214",{"_index":3743,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:25",{"_index":3761,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:254",{"_index":3758,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:265",{"_index":3751,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:29",{"_index":3760,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:33",{"_index":3764,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:38",{"_index":3763,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:39",{"_index":3741,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:54",{"_index":3767,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:70",{"_index":3769,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:83",{"_index":3747,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:93",{"_index":3749,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["services",{"_index":506,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxStore.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["session",{"_index":1274,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["sessionfeatures",{"_index":1351,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionfeatures.has(`${feature",{"_index":1359,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions",{"_index":1364,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions.has(permission",{"_index":1367,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionstorage",{"_index":3740,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sessionstoragerecord",{"_index":3734,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["set",{"_index":137,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["set([...(features",{"_index":1352,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set([...permissions",{"_index":1365,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set(hideheaderrowwhen",{"_index":3967,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["set(ids",{"_index":3016,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["set(object.keys(cleanedformvalue",{"_index":62,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setactive",{"_index":4331,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setactive(isactive",{"_index":4337,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setariabusytag",{"_index":1904,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setariabusytag(isloading",{"_index":1919,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag",{"_index":1905,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag(value",{"_index":1923,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setavailablelanguages",{"_index":2550,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setavailablelanguages(languages",{"_index":2559,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcompleted",{"_index":4811,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setcompleted(payload",{"_index":4808,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setcookie",{"_index":1683,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcookie(cookie",{"_index":1706,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcurrentlanguage",{"_index":2551,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcurrentlanguage(language",{"_index":2561,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setdata",{"_index":4812,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setdata(payload",{"_index":4803,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setdatainroute",{"_index":3442,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdatainroute(data",{"_index":3458,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdisabledstate?(isdisabled",{"_index":4950,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["setdraganddropdescription",{"_index":790,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(parent",{"_index":804,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(this.elementref.nativeelement",{"_index":943,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["seterror",{"_index":3706,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["setfocus",{"_index":758,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["setfocus(hasfocus",{"_index":1066,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["setformerror",{"_index":25,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(control",{"_index":71,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(group.get(key",{"_index":85,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setglobalfeatures",{"_index":1268,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setglobalfeatures(features",{"_index":1303,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setitem",{"_index":3718,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["setitem(key",{"_index":3755,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setlanguage",{"_index":2606,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["setlayout",{"_index":3143,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setlayout(layout",{"_index":3154,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setloading",{"_index":3707,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["setmessage",{"_index":791,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setmessage(message",{"_index":812,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["sets",{"_index":716,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["setsortdirection",{"_index":691,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["setsortdirection(direction",{"_index":713,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["settimeout",{"_index":991,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["setting",{"_index":2017,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["settings",{"_index":1714,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["settooltipevent",{"_index":4207,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["settooltipevent(event",{"_index":4211,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["setup",{"_index":54,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["setupcookieshandler",{"_index":1684,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupcookieshandler(categories",{"_index":1709,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupinitiallayout",{"_index":3144,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setupinitiallayout(markasinitial",{"_index":3156,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setupstorage",{"_index":3739,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setupstorage(storage",{"_index":3757,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setwitherror",{"_index":4800,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["several",{"_index":4671,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["shall",{"_index":5206,"title":{},"body":{"index.html":{},"license.html":{}}}],["share",{"_index":2744,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shared",{"_index":2169,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sharereplay",{"_index":2448,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["shouldbeauthenticated",{"_index":1247,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["shouldhaveallfeatures",{"_index":1240,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["shouldhaveallpermissions",{"_index":1245,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["shouldhavefeature",{"_index":2211,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["shouldhavepermission",{"_index":2320,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["shouldn't",{"_index":3457,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shouldrender",{"_index":2250,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["shouldshow",{"_index":2040,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["show",{"_index":1506,"title":{},"body":{"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showaside",{"_index":3135,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["showbundled",{"_index":4016,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"injectables/NgxToastService.html":{}}}],["showbundledtoasts",{"_index":4058,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showdetailrow",{"_index":3900,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showdetailrowoption",{"_index":3914,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showed",{"_index":3964,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["showflyout",{"_index":3136,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["showinactive",{"_index":1584,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["showing",{"_index":4300,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["showmodal",{"_index":1685,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["shown",{"_index":1458,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showonfocus",{"_index":4170,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["showonmouseenter",{"_index":4135,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["showopenrowstate",{"_index":3904,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["shows",{"_index":4019,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"injectables/NgxToastService.html":{}}}],["showselectedopenrow",{"_index":3907,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showtoast",{"_index":4062,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showtoast(data",{"_index":4070,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showtooltip",{"_index":4171,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["showtooltip(tooltip",{"_index":4214,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["showwhen",{"_index":2016,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["side",{"_index":1752,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["sign",{"_index":1313,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signal",{"_index":672,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["signal(false",{"_index":1079,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/TableCellTemplate.html":{}}}],["signalstorefeature",{"_index":3686,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["signed",{"_index":1291,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signin",{"_index":1269,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signin(signindata",{"_index":1307,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindata",{"_index":1312,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindatatype",{"_index":1308,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signing",{"_index":1337,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser",{"_index":1270,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser(signindata",{"_index":1314,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout",{"_index":1271,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout(signoutdatatype",{"_index":1316,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutdatatype",{"_index":1317,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutresponsetype",{"_index":1336,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser",{"_index":1272,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser(signoutdatatype",{"_index":1321,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signs",{"_index":1310,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["similar",{"_index":232,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["simplechangehaschanged",{"_index":2742,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.canedit",{"_index":2753,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.currentzoomlevel",{"_index":2755,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.markertypes",{"_index":2754,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.startstate",{"_index":2752,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.zoomlevels",{"_index":2756,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simply",{"_index":3525,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["single",{"_index":2123,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["situations",{"_index":3482,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["size",{"_index":1607,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["size.pipe.ts",{"_index":1598,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size.pipe.ts:17",{"_index":1602,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size/item",{"_index":1597,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["slice",{"_index":151,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["slice(0",{"_index":2125,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["slicekey",{"_index":3834,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["slices",{"_index":3705,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["software",{"_index":5188,"title":{},"body":{"index.html":{},"license.html":{}}}],["something",{"_index":2459,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["somethinghappened",{"_index":4686,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["somethinghascompleted",{"_index":448,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["sometimes",{"_index":3480,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["someuniqueid",{"_index":3592,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["somewhere",{"_index":4877,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sort",{"_index":686,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["sort.pipe.ts",{"_index":1125,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort.pipe.ts:12",{"_index":1127,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort/aria",{"_index":1124,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sortable",{"_index":687,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sortableinput",{"_index":4982,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortabletablecellrecord",{"_index":4847,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortdirection",{"_index":688,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorted",{"_index":4903,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sorting",{"_index":708,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorttemplate",{"_index":4898,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{}}}],["sources",{"_index":4250,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["space",{"_index":474,"title":{},"body":{"pipes/IbanPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["spaces",{"_index":468,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["span",{"_index":1441,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["specific",{"_index":75,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["specifically",{"_index":3374,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["specstoreassets",{"_index":4712,"title":{"interfaces/SpecStoreAssets.html":{}},"body":{"interfaces/SpecStoreAssets.html":{}}}],["specstoreservice",{"_index":4723,"title":{"injectables/SpecStoreService.html":{}},"body":{"injectables/SpecStoreService.html":{}}}],["ssr",{"_index":3577,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["standalone",{"_index":182,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["standard",{"_index":2995,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["start",{"_index":2677,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["startcontrolkey",{"_index":4575,"title":{},"body":{"classes/NgxValidators.html":{}}}],["started",{"_index":5101,"title":{"index.html":{},"license.html":{}},"body":{}}],["started.html",{"_index":1713,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startstate",{"_index":2706,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["starttour",{"_index":489,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["startwith",{"_index":1749,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["startwith(cookieconsent.getcookie('data",{"_index":1783,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startwith(undefined",{"_index":3368,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["state",{"_index":392,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["state.service.ts",{"_index":4795,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["state.service.ts:31",{"_index":4813,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:36",{"_index":4816,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:44",{"_index":4815,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:50",{"_index":4814,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["stateinterface",{"_index":115,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["states",{"_index":1463,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["statetype",{"_index":3697,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["stateupdated",{"_index":2707,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["statewrapper",{"_index":3848,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["static",{"_index":1593,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"classes/NgxValidators.html":{}}}],["status",{"_index":1287,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["stay",{"_index":3477,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["step",{"_index":521,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["step(card",{"_index":4324,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["step.component.mock.ts",{"_index":626,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["step.component.ts",{"_index":4380,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:103",{"_index":4396,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:105",{"_index":4392,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:112",{"_index":4391,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:33",{"_index":4397,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:38",{"_index":4390,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:45",{"_index":4389,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:53",{"_index":4386,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:58",{"_index":4395,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:63",{"_index":4394,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:68",{"_index":4388,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:73",{"_index":4383,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:78",{"_index":4384,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:83",{"_index":4382,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:88",{"_index":4385,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:93",{"_index":4387,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:98",{"_index":4393,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step/tour",{"_index":4379,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["stepclass",{"_index":633,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["steps",{"_index":645,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["steptitle",{"_index":4406,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["still",{"_index":3353,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["stop",{"_index":4484,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["stopped",{"_index":1549,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["storage",{"_index":2558,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["storage.clear",{"_index":3817,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.removeitem(key",{"_index":3815,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.setitem(key",{"_index":3810,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage[key",{"_index":3808,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageevents",{"_index":3735,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageeventsubject",{"_index":3736,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice",{"_index":3787,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.localstorage.setitem('hello",{"_index":3788,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.sessionstorage.setitem('hello",{"_index":3789,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.storageevent$.subscribe(console.log",{"_index":3790,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["store",{"_index":274,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["store.spec",{"_index":278,"title":{},"body":{"injectables/EffectsService.html":{}}}],["store.ts",{"_index":112,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["store.types.ts",{"_index":3685,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["storeassetsoptions",{"_index":3835,"title":{"interfaces/StoreAssetsOptions.html":{}},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["storeauthenticationresponse",{"_index":1273,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeauthenticationresponse(response",{"_index":1323,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["stored",{"_index":1320,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeeffects",{"_index":4779,"title":{"injectables/StoreEffects.html":{}},"body":{"injectables/StoreEffects.html":{}}}],["storeflowassets",{"_index":3838,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["storeitem",{"_index":3861,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["stores",{"_index":1311,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeservice",{"_index":3493,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["storeslice",{"_index":4720,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["storestate",{"_index":3864,"title":{"interfaces/StoreState.html":{}},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["storestateservice",{"_index":4798,"title":{"injectables/StoreStateService.html":{}},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["strategy",{"_index":3998,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["streams",{"_index":3067,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["stress",{"_index":3597,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["strict",{"_index":1632,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["string",{"_index":152,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["string(date.now",{"_index":2391,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["stringifiedqueryparamstype",{"_index":3502,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["stringify",{"_index":3530,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["strings",{"_index":1354,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["stringtype",{"_index":3256,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["string}{{#from}}${string}{{#item}}${string}{{#to}}${string",{"_index":885,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#from}}${string}{{#to}}${string}{{#item}}${string",{"_index":886,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string",{"_index":887,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#from}}${string}{{#to}}${string",{"_index":882,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#to}}${string}{{#from}}${string",{"_index":881,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#from}}${string}{{#item}}${string",{"_index":884,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#item}}${string}{{#from}}${string",{"_index":883,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{id}}${string",{"_index":3542,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["structural",{"_index":2131,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["studio",{"_index":5180,"title":{},"body":{"index.html":{},"license.html":{}}}],["styleurl",{"_index":1026,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["styleurls",{"_index":4833,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["styling",{"_index":1603,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["sub",{"_index":3830,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["subject",{"_index":412,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["subject.complete",{"_index":3820,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.getvalue",{"_index":3809,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(item",{"_index":3812,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(undefined",{"_index":3819,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subjects",{"_index":3745,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sublicense",{"_index":5198,"title":{},"body":{"index.html":{},"license.html":{}}}],["subscribe",{"_index":513,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscribe(observable",{"_index":2258,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["subscribed",{"_index":3025,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["subscribercount",{"_index":4715,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["subscribes",{"_index":454,"title":{},"body":{"pipes/HasObserversPipe.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["subscription",{"_index":2146,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscriptions",{"_index":2282,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["subsequent",{"_index":386,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["subslice",{"_index":3836,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["substantial",{"_index":5207,"title":{},"body":{"index.html":{},"license.html":{}}}],["substrings",{"_index":845,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["succeeded",{"_index":473,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["such",{"_index":2504,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["summary",{"_index":1057,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["summaryelement",{"_index":1033,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["super(route",{"_index":3495,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["super(selectors",{"_index":4799,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["sure",{"_index":2642,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["survey.component.html",{"_index":3490,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["switch",{"_index":735,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["switchmap",{"_index":1334,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["switchmap((isauthenticated",{"_index":1370,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sync",{"_index":3473,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts",{"_index":3435,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:100",{"_index":3452,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:110",{"_index":3444,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:119",{"_index":3459,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:152",{"_index":3450,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:161",{"_index":3448,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:168",{"_index":3455,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:17",{"_index":3470,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:174",{"_index":3462,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:18",{"_index":3472,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:20",{"_index":3464,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:25",{"_index":3465,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:30",{"_index":3468,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:33",{"_index":3453,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync/query",{"_index":3434,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["system",{"_index":2370,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["tab",{"_index":3662,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["tabindex",{"_index":331,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTooltipDirective.html":{}}}],["table",{"_index":535,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["table'},{'name",{"_index":549,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["table.component.html",{"_index":4832,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.scss",{"_index":4834,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.ts",{"_index":4819,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplate",{"_index":4817,"title":{"interfaces/TableCellTemplate.html":{}},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplaterecord",{"_index":4846,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplates",{"_index":4886,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecolumns",{"_index":4882,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecypressrecord",{"_index":4849,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tables",{"_index":3947,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["tableviewcomponent",{"_index":3491,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tag",{"_index":695,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["tag.directive.ts",{"_index":1838,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:18",{"_index":1842,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:25",{"_index":1840,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag/cypress",{"_index":1837,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tags",{"_index":4987,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tailored",{"_index":1169,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["take",{"_index":825,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["take(1",{"_index":840,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["taken",{"_index":4319,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["takes",{"_index":3023,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["takeuntil",{"_index":1947,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.destroyed",{"_index":2192,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.hasmodalsubject.pipe(filter((hasmodal",{"_index":3382,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["takeuntil(this.markerdestroyedsubject",{"_index":2773,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["takeuntil(this.ondestroysubject",{"_index":1956,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["takeuntil(this.ondestroysubject.asobservable",{"_index":1984,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["takeuntildestroyed",{"_index":2068,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxToastService.html":{}}}],["takeuntildestroyed(this.destroyref",{"_index":2099,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["taking",{"_index":3560,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["tap",{"_index":826,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["tap(([index",{"_index":4372,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["tap(([previous",{"_index":4239,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tap((action",{"_index":3373,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["tap((currentlanguage",{"_index":841,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((data",{"_index":3511,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tap((hascookie",{"_index":2189,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["tap((hasfeature",{"_index":2249,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["tap((haspermission",{"_index":2348,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["tap((isauthenticated",{"_index":2889,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["tap((language",{"_index":864,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((matchesquery",{"_index":2970,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["tap((online",{"_index":1952,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["tap((response",{"_index":1343,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["tap((selected",{"_index":5033,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tap((translations",{"_index":2529,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["tap((value",{"_index":2286,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["target",{"_index":2906,"title":{},"body":{"directives/NgxLinkDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["target.innerhtml",{"_index":3621,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["target.replacewith(replacement",{"_index":3622,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["targetrowindex",{"_index":1585,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["td",{"_index":4502,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["technologies",{"_index":787,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["template",{"_index":509,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["template.component.ts",{"_index":3945,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:12",{"_index":3949,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:13",{"_index":3953,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:14",{"_index":3989,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:17",{"_index":3951,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:18",{"_index":3955,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:22",{"_index":3948,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:23",{"_index":3954,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["templateref",{"_index":719,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templaterefs",{"_index":2165,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["templates",{"_index":722,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templates/columns",{"_index":5018,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["templateurl",{"_index":449,"title":{},"body":{"pipes/HasObserversPipe.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["tertiary",{"_index":1447,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["test",{"_index":507,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/SpecStoreService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts",{"_index":5038,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:41",{"_index":5039,"title":{},"body":{"components/TestDisplayContentComponent.html":{}}}],["test.component.ts:62",{"_index":5045,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:63",{"_index":5046,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["testdisplaycontentcomponent",{"_index":553,"title":{"components/TestDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrorcomponent",{"_index":555,"title":{"components/TestErrorComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrordatacomponent",{"_index":557,"title":{"components/TestErrorDataComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testing",{"_index":2803,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["testloadingcomponent",{"_index":558,"title":{"components/TestLoadingComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testofflinecomponent",{"_index":560,"title":{"components/TestOfflineComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testoverridedisplaycontentcomponent",{"_index":562,"title":{"components/TestOverrideDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tests",{"_index":2237,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["text",{"_index":865,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"pipes/TransformPipe.html":{}}}],["text/html",{"_index":3607,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["that's",{"_index":2597,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["thentemplateref",{"_index":2138,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["thenviewref",{"_index":2212,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["there's",{"_index":1120,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["therefor",{"_index":2858,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["they're",{"_index":3362,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["things",{"_index":3567,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.abstractcontrol",{"_index":2082,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.dirty",{"_index":2092,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.invalid",{"_index":2090,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.statuschanges.pipe(startwith(this.abstractcontrol.status",{"_index":2088,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.valuechanges.pipe(startwith(this.abstractcontrol.value",{"_index":2086,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.accessors",{"_index":421,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.actions",{"_index":4873,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.actions$.pipe",{"_index":4786,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.activetooltip",{"_index":4243,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.allowbeforeunloadhandler",{"_index":3667,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.allowmultipleopenrows",{"_index":4971,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ariadescribedby",{"_index":3236,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.arialabelledby",{"_index":3235,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.authenticationresponsesubject.asobservable",{"_index":1339,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationresponsesubject.next(response",{"_index":1338,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationservice",{"_index":2247,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["this.authenticationservice.haspermission(converttoarray(permission",{"_index":2362,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.authenticationservice.isauthenticated",{"_index":2888,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.authenticationstatussubject.next('signed",{"_index":1344,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationstatussubject.pipe",{"_index":1284,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.availablelanguagessubject",{"_index":2563,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.getvalue().includes(language",{"_index":2596,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(languages",{"_index":2595,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(this.configuration.availablelanguages",{"_index":2584,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.baseurl",{"_index":1192,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.baseurl}/${url",{"_index":1193,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.broadcastchannel[channelname",{"_index":1425,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].close",{"_index":1428,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].postmessage(message",{"_index":1432,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.buttontype",{"_index":1489,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.buttonwidth",{"_index":1491,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.canedit",{"_index":2767,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.cdref",{"_index":2276,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.cdref.detectchanges",{"_index":1105,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.cdref.markforcheck",{"_index":4925,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.changedetectorref",{"_index":2280,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.changedetectorref.markforcheck",{"_index":2288,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["this.channel",{"_index":4772,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.cleardata",{"_index":3523,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.clearstorage(localstorage",{"_index":3802,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.clearstorage(sessionstorage",{"_index":3803,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.close(options.onclose",{"_index":3378,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.close.emit",{"_index":3226,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.column",{"_index":741,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.columns",{"_index":4872,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.component",{"_index":2196,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.componentref",{"_index":2102,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.destroy",{"_index":2101,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.instance",{"_index":2104,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('cookies",{"_index":2197,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.setinput('data",{"_index":2108,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('errorkeys",{"_index":2107,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('errors",{"_index":2106,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.conditions",{"_index":1996,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.error",{"_index":1974,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.loading",{"_index":1970,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.offline",{"_index":1967,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.config.cachebust",{"_index":2510,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.config.component",{"_index":2096,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.errors[key",{"_index":2120,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.show",{"_index":2118,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.showwhen",{"_index":2091,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.configuration.autoclose",{"_index":4122,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.component",{"_index":4274,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.components.error",{"_index":1976,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.loading",{"_index":1972,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.offline",{"_index":1969,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.defaultlanguage",{"_index":2581,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.defaultposition",{"_index":4257,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.hidewhennotemplateprovided",{"_index":1993,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.icon",{"_index":1557,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.configuration.languagerouteparam",{"_index":2583,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.listentoonlinestatus",{"_index":1950,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.maxamount",{"_index":4076,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount.amount",{"_index":4093,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount.strategy",{"_index":4077,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount?.strategy",{"_index":4129,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxtime",{"_index":4127,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration?.icon",{"_index":1553,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.configuration?.iconposition",{"_index":1512,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration?.labelwrapper",{"_index":1530,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.configuration?.loading",{"_index":1541,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration?.maxamount?.['component",{"_index":4073,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration?.modals?.[options.type",{"_index":3359,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration?.modals[options.type",{"_index":3419,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration[item.elementid",{"_index":3612,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.containers().find((container",{"_index":940,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.context",{"_index":2913,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["this.control",{"_index":2079,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.cookies",{"_index":2173,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookies.map((cookie",{"_index":2181,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookieschanged$.pipe",{"_index":1782,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.asobservable",{"_index":1717,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.next(cookieconsent.getcookie('data",{"_index":1793,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchanged$.pipe(startwith(undefined",{"_index":1775,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.asobservable",{"_index":1721,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.next(event",{"_index":1765,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsented$.pipe(startwith(undefined",{"_index":1774,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.asobservable",{"_index":1729,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.next(event",{"_index":1762,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.createimagemakeredit(id",{"_index":2807,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarker",{"_index":2748,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.createmarkerclickedlistener(marker",{"_index":2816,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarkervaluechanges(marker",{"_index":2823,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmodalcomponent(options",{"_index":3364,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.createreadonlyimagemarker(id",{"_index":2808,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.currentlanguage",{"_index":834,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.asobservable",{"_index":2570,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.getvalue",{"_index":2585,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.next(newlanguage",{"_index":2592,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentmarker",{"_index":2749,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.close",{"_index":2759,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.mode",{"_index":2770,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.valuechanges",{"_index":2771,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentquerymatch.asobservable",{"_index":2988,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentquerymatch.next(id",{"_index":3006,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentquerymatch.pipe",{"_index":3017,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentscrollposition",{"_index":4680,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentscrollpositionsubject$.asobservable",{"_index":4652,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentsorting",{"_index":4845,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.currentzoomlevel",{"_index":2763,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.custommessages",{"_index":876,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.cypresstag",{"_index":1841,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["this.data",{"_index":4860,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data().length",{"_index":4856,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data().reduce((previousvalue",{"_index":4854,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()?.length",{"_index":4927,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()[index][selectablekey",{"_index":5002,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data.length",{"_index":4969,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.datasourcesubject",{"_index":491,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.defaultlanguage",{"_index":2580,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.defaultlayout",{"_index":3177,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.aside",{"_index":3194,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.flyout",{"_index":3192,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.footer",{"_index":3195,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.left",{"_index":3184,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.main",{"_index":3186,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.right",{"_index":3188,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.navigation",{"_index":3190,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultrowopen",{"_index":4922,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.definedcolumns.set",{"_index":5013,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.description",{"_index":944,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.destination",{"_index":2912,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["this.destroyed",{"_index":2179,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.complete",{"_index":424,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next",{"_index":2193,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.next(null",{"_index":5036,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next(undefined",{"_index":423,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.destroyedsubject$.asobservable",{"_index":3664,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.complete",{"_index":3671,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.next(undefined",{"_index":3670,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject.complete",{"_index":1019,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.destroyedsubject.next",{"_index":1018,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.detailrowtemplate",{"_index":4875,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.detailselement",{"_index":1110,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.dialogservice.closeall",{"_index":3385,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.dialogservice.open(component",{"_index":3389,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.disabled",{"_index":354,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{}}}],["this.display",{"_index":1492,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.displaycontentconfiguration",{"_index":1959,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.dispose",{"_index":2177,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.document",{"_index":4684,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.addeventlistener('scroll",{"_index":4698,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.defaultview",{"_index":4697,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.draganddropservice",{"_index":942,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.editabletablecellrecord.set",{"_index":4979,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.editabletablecellrecord.update((value",{"_index":4989,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.effectsservice.fetchchannel",{"_index":4788,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.effectsservice.fetchvideos",{"_index":4791,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.elementref",{"_index":4198,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.elementref.nativeelement",{"_index":1517,"title":{},"body":{"directives/NgxButtonDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxModalAbstractComponent.html":{}}}],["this.elementref.nativeelement.children",{"_index":4499,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.focus",{"_index":2312,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.getattribute('id",{"_index":4347,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elementref.nativeelement.parentelement",{"_index":1998,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentelement?.setattribute('aria",{"_index":2007,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentnode",{"_index":2117,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.elementref.nativeelement.setattribute('id",{"_index":4350,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elsetemplateref",{"_index":2244,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.elseviewref",{"_index":2246,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.emitvalueonsingleitem",{"_index":4926,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.errorcomponent",{"_index":2100,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.errorselement",{"_index":2109,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.feature",{"_index":2242,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.findfocusableelement",{"_index":4495,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.firstcookiesconsentedsubject.asobservable",{"_index":1737,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.firstcookiesconsentedsubject.next(event",{"_index":1760,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.focusclick.emit",{"_index":360,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.focusclick.emit(event",{"_index":355,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.form",{"_index":3508,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.reset",{"_index":3524,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.setvalue(value",{"_index":3522,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.valuechanges",{"_index":3510,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.formgenerated",{"_index":4862,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.formgroupdirective",{"_index":2083,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formgroupdirective.form.get(control",{"_index":2084,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formnamedirective?.control.get(control",{"_index":2085,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getauthenticationresponse().pipe",{"_index":1340,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getcomponent",{"_index":3182,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcomponent(layout.aside",{"_index":3193,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcomponent(layout.footer",{"_index":3191,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcookie(cookie",{"_index":1784,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.geterrors(this.abstractcontrol.errors",{"_index":2105,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.geterrors(this.abstractcontrol.errors).errors.join",{"_index":2115,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getitem(key",{"_index":3798,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getitemobservable(key",{"_index":3799,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getnewlanguage(language",{"_index":2587,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.getrow(0",{"_index":4545,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(index)?.registercell(cell",{"_index":4549,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(this.rows.length",{"_index":4546,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getsession().pipe",{"_index":1363,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getvalue",{"_index":3407,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.data",{"_index":3414,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.hasbackdrop",{"_index":3403,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.panelclass",{"_index":3405,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(undefined",{"_index":3397,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.globalfeaturessubject.asobservable()]).pipe",{"_index":1349,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.globalfeaturessubject.next(features",{"_index":1361,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.handleaccessorsaction",{"_index":419,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.handlecomponentrender(this.haserrors",{"_index":2098,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlecontentscroll.bind(this",{"_index":4699,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.handlecurrentsort(this.currentsorting",{"_index":4844,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlecurrentsort(this.currentsortingevent",{"_index":4993,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handledatachanges",{"_index":3513,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handledatachanges(data",{"_index":3514,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handleicon",{"_index":1487,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.handleloading",{"_index":1488,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.handlenocomponentflow(this.haserrors",{"_index":2097,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlerowclicked(this.data()[0",{"_index":4928,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowclicked(this.data()[openedindex",{"_index":4924,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowcolumns",{"_index":5019,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowstate(index",{"_index":4965,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handletablecelltemplates",{"_index":5020,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handleurl(url",{"_index":1196,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.handlewhenfocussed",{"_index":1097,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hascookie",{"_index":2172,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hascookieelse",{"_index":2176,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hasdocument",{"_index":4696,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.haserrors",{"_index":2093,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.haserrors.set",{"_index":2089,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.hasfeature",{"_index":2284,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.hasfocus",{"_index":1121,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hasfocus.set(hasfocus",{"_index":1107,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.hasfootertemplates.set",{"_index":4990,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.hasmodalsubject.asobservable",{"_index":3345,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(false",{"_index":3386,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(true",{"_index":3358,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.value",{"_index":3354,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.haspermission",{"_index":2363,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.hasrequireddescription(options",{"_index":3387,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.headercontrol.disable",{"_index":4952,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.enable",{"_index":4955,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(false",{"_index":4941,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(true",{"_index":4942,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.setvalue",{"_index":5024,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.valuechanges",{"_index":5032,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.httpclient",{"_index":1198,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.delete",{"_index":1208,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get",{"_index":1195,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get('test",{"_index":4770,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.httpclient.patch",{"_index":1212,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.post",{"_index":1209,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.put",{"_index":1211,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.i18nloadingservice.dispatchtranslationloaderaction",{"_index":2660,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.i18nservice.initi18n(this.i18nservice.currentlanguage).pipe",{"_index":2662,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.icon",{"_index":1494,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconcomponent",{"_index":1552,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconcomponent.instance.elementref.nativeelement",{"_index":1560,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconcomponent.setinput('data",{"_index":1558,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconcomponent?.destroy",{"_index":1565,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconelement",{"_index":1551,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconelement.classname",{"_index":1555,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconposition",{"_index":1495,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.id",{"_index":4152,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.imageelement",{"_index":2750,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imageelement().nativeelement",{"_index":2766,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imagemarkerservice.createimagemarker",{"_index":2765,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.initform",{"_index":3509,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.initiallayoutset$.pipe",{"_index":3176,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.initiallayoutsetsubject",{"_index":3165,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.initiallayoutsetsubject$.next(true",{"_index":3204,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.injector",{"_index":3579,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.isactive",{"_index":4346,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.isauthenticated$.pipe",{"_index":1369,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.isbrowser",{"_index":4695,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.isdirty",{"_index":3668,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.isfocussed",{"_index":4121,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.isopen.set(isopen",{"_index":1101,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.itemregisteredsubject.next",{"_index":1001,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.itemregisteredsubject.pipe",{"_index":990,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items",{"_index":1006,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex",{"_index":1003,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex((item",{"_index":1016,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.foreach((item",{"_index":995,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.length",{"_index":1013,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.push(item",{"_index":1002,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(0",{"_index":1007,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(index",{"_index":1008,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[direction",{"_index":1012,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[id].markasactive",{"_index":939,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.items[index]?.updateaccordionitemstate(true",{"_index":1000,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[item.itemid",{"_index":945,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.languagerouteparam",{"_index":2582,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.layout$.pipe",{"_index":3205,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutservice.asideshown",{"_index":3103,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutservice.flyoutshown",{"_index":3107,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutservice.setupinitiallayout",{"_index":3115,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutsubject$.asobservable",{"_index":3168,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.getvalue",{"_index":3197,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.getvalue().aside",{"_index":3201,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next",{"_index":3181,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next(clean(layout",{"_index":3178,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next(clean(this.defaultlayout",{"_index":3179,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.linktype",{"_index":2911,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["this.listeners[id",{"_index":3003,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.listeners[item",{"_index":3014,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.liveregionservice.announce(result",{"_index":861,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.loading",{"_index":1493,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent",{"_index":1542,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.destroy",{"_index":1550,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.instance.elementref.nativeelement",{"_index":1548,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.setinput('data",{"_index":1544,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingdata",{"_index":1545,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.localstoragerecord",{"_index":3797,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.markerclicked.emit(value",{"_index":2774,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.complete",{"_index":2762,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.next",{"_index":2761,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markers[id",{"_index":2814,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.markertypes",{"_index":2769,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.mediaquerylistenermap.clear",{"_index":3079,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaquerylistenermap.get(id",{"_index":3074,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaquerylistenermap.set(id",{"_index":3064,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaqueryservice",{"_index":2968,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["this.messagerecord[currentlanguage].container",{"_index":854,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage].item",{"_index":850,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage][type",{"_index":843,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[language].description",{"_index":866,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.modalvisiblesubject.asobservable",{"_index":1743,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(false",{"_index":1771,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(true",{"_index":1768,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.movetocell('first",{"_index":4492,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell('last",{"_index":4493,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(ngxtreegridcell",{"_index":4490,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(this.ngxtreegridcell",{"_index":4491,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.nativeelement",{"_index":1547,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.nativeelement.childnodes.foreach((node",{"_index":1534,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.nativeelement.firstchild",{"_index":1562,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.ngxcookieservice.hasacceptedcategory(cookie.category",{"_index":2183,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxcookieservice.hasacceptedservice(cookie.category",{"_index":2186,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxhasfeature",{"_index":2243,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureelse",{"_index":2245,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhaveallfeatures",{"_index":2239,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhavefeature",{"_index":2241,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhaspermission",{"_index":2345,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionelse",{"_index":2346,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhaveallpermissions",{"_index":2341,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhavepermission",{"_index":2343,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxisauthenticated",{"_index":2886,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxisauthenticatedelse",{"_index":2887,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxmediaqueryshouldmatch",{"_index":2971,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["this.ngxtableconfiguration?.allowmultiplerowsopen",{"_index":4905,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.emitvalueonsingleitem",{"_index":4917,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.hideheaderwhen",{"_index":4919,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.highlightkey",{"_index":4914,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.ngxtableclass",{"_index":4837,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showdetailrow",{"_index":4916,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showopenrowstate",{"_index":4915,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showselectedopenrow",{"_index":4912,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtooltip",{"_index":4195,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipcomponent",{"_index":4197,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipdisabled",{"_index":4193,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipid",{"_index":4199,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipposition",{"_index":4196,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipservice.settooltipevent",{"_index":4151,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.ngxtourshowwhen",{"_index":4368,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtourshowwhenelse",{"_index":4369,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtreegrid",{"_index":4543,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.ngxtreegridcell",{"_index":4488,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.ngxtreegridcellrow",{"_index":4504,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.onblur",{"_index":2311,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onchanged",{"_index":4944,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(handlengxtablevaluechanges(value",{"_index":5027,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(value",{"_index":5029,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ondestroysubject.complete",{"_index":1986,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.ondestroysubject.next",{"_index":1985,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.onfocus",{"_index":2310,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onlineservice.online",{"_index":1951,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.onlinesubject.asobservable",{"_index":3427,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(false",{"_index":3432,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(true",{"_index":3431,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.ontouch",{"_index":4948,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.open",{"_index":989,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.openedrows()[index",{"_index":4966,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openedrows.set(action",{"_index":4972,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openedrows.update((value",{"_index":4970,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.overlaypositionbuilder",{"_index":4267,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref",{"_index":4258,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.attach",{"_index":4276,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.detach",{"_index":4281,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.updatepositionstrategy(positionstrategy",{"_index":4270,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref?.hasattached",{"_index":4242,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.create",{"_index":4259,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.scrollstrategies.reposition",{"_index":4265,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overrideconfiguration",{"_index":1958,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.data",{"_index":1992,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.template",{"_index":1987,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.parent.getrow(ngxtreegridcellrow",{"_index":4507,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parent.movefocus(this.id",{"_index":1100,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.registeritem(this",{"_index":1108,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.removeitem(this",{"_index":1119,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent?.registercell(ngxtreegridcellrow",{"_index":4505,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parsevalue(storage.getitem(key",{"_index":3804,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.permission",{"_index":2344,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.position",{"_index":4401,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.priority",{"_index":1490,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.querychangedsubject.asobservable().pipe",{"_index":3066,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.complete",{"_index":3076,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.next(id",{"_index":3060,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.next(null",{"_index":3075,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.get",{"_index":3050,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.get(id",{"_index":3049,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.has(id",{"_index":3065,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.set(id",{"_index":3057,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap].find",{"_index":3054,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap].some(([_",{"_index":3052,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap",{"_index":3072,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.clear",{"_index":3078,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.get(id).matches",{"_index":3070,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.set(id",{"_index":3059,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryparams",{"_index":3516,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.queue",{"_index":4110,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.getvalue().find",{"_index":4117,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.getvalue().length",{"_index":4078,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.next",{"_index":4104,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.next([...queue.slice(0",{"_index":4107,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.radiocontrol.disable",{"_index":4953,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.enable",{"_index":4956,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.patchvalue(value",{"_index":4934,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.valuechanges",{"_index":5028,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.registerquery(this.mediaqueries",{"_index":2996,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.removeitem(key",{"_index":3800,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.removetoast(toast",{"_index":4124,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.removetooltip",{"_index":4191,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.renderelsetemplate",{"_index":2191,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.renderer.addclass",{"_index":1559,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.appendchild",{"_index":1546,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.appendchild(this.nativeelement",{"_index":1540,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.appendchild(wrapperelement",{"_index":1535,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.createelement",{"_index":1529,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.createelement('i",{"_index":1554,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.createelement('p",{"_index":2112,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.insertbefore",{"_index":1561,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.listen(detailselement.nativeelement",{"_index":1115,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.renderer.nextsibling(this.elementref.nativeelement",{"_index":2094,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.removechild(this.elementref.nativeelement.parentnode",{"_index":2110,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.removechild(this.nativeelement",{"_index":1564,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.removechild(wrapperelement",{"_index":1538,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.removeclass",{"_index":2095,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setattribute(this.errorselement",{"_index":2113,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setattribute(wrapperelement",{"_index":1537,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.setproperty",{"_index":2114,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderinitialtemplate",{"_index":1977,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('error",{"_index":1975,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('loading",{"_index":1971,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('offline",{"_index":1968,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.renderthentemplate",{"_index":2190,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.resetformonnewdata",{"_index":4866,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.role",{"_index":4550,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rootclass",{"_index":4402,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.rooti18nservice.currentlanguage",{"_index":2631,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.rooti18nservice.setcurrentlanguage(language",{"_index":2634,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.route",{"_index":3467,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.router.navigate",{"_index":3526,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.row",{"_index":4506,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.row.getcell(cell",{"_index":4496,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.rowclicked.emit(row",{"_index":4958,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rows",{"_index":4540,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.length",{"_index":4548,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.push(row",{"_index":4539,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.slice(0",{"_index":4541,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[direction",{"_index":4547,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[index",{"_index":4544,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rowsformgroup",{"_index":4865,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.disable",{"_index":4951,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.enable",{"_index":4954,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue",{"_index":5034,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue(writengxtablevalue(value",{"_index":4937,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.reset",{"_index":4935,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.valuechanges",{"_index":5021,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.runariachecks(options",{"_index":3363,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(body.documentelement.innerhtml",{"_index":3626,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.scrambleparams",{"_index":3503,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrambleparams(data",{"_index":3529,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrollingup",{"_index":4678,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.asobservable",{"_index":4660,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(false",{"_index":4710,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(true",{"_index":4711,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.selectable",{"_index":4861,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectablekey",{"_index":4864,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectabletype",{"_index":4933,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow",{"_index":4960,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(index",{"_index":4964,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(undefined",{"_index":4963,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selecterrorfromstore",{"_index":4749,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors.videos",{"_index":4762,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors[key",{"_index":3875,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selecterrormessagefromstore",{"_index":4751,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrormessagefromstore(selectors[key",{"_index":3877,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectfromstore",{"_index":4746,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors.darkmode",{"_index":4755,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors[key",{"_index":3871,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectloadingfromstore",{"_index":4753,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectloadingfromstore(selectors[key",{"_index":3873,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.session",{"_index":1373,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sessionstoragerecord",{"_index":3795,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setariabusytag(this.conditions.loading",{"_index":1966,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setarialivetag(this.displaycontentarialive",{"_index":1960,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setcurrentlanguage(language",{"_index":2594,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.setdatainroute(data",{"_index":3512,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.setitem(key",{"_index":3801,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setsortdirection(newsortdirection",{"_index":739,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.setupstorage(localstorage",{"_index":3796,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setupstorage(sessionstorage",{"_index":3794,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.shouldbeauthenticated",{"_index":2885,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.shouldhaveallfeatures",{"_index":2238,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhaveallpermissions",{"_index":2340,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.shouldhavefeature",{"_index":2240,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhavepermission",{"_index":2342,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.showaside.asreadonly",{"_index":3159,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showaside.set(false",{"_index":3203,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showaside.set(true",{"_index":3202,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showbundledtoasts$.next(false",{"_index":4114,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showbundledtoasts$.next(true",{"_index":4130,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showbundledtoasts$]).pipe",{"_index":4087,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showdetailrow",{"_index":4853,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showflyout.asreadonly",{"_index":3163,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showflyout.set(false",{"_index":3200,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showflyout.set(true",{"_index":3198,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showopenrowstate",{"_index":4874,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showselectedopenrow",{"_index":4959,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showtooltip",{"_index":4190,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.signinuser(signindata).pipe",{"_index":1342,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.signoutuser(signoutdatatype).pipe",{"_index":1346,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sort.emit",{"_index":740,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.sortabletablecellrecord",{"_index":5005,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column",{"_index":4995,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column].handlesort",{"_index":4998,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].setsortdirection(event.direction",{"_index":5011,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].sortdirection",{"_index":5006,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.set",{"_index":4977,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.update((value",{"_index":4986,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortdirection",{"_index":737,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.startstate",{"_index":2768,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.state.data",{"_index":4807,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.state.iscompleted",{"_index":4810,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.stateupdated.emit(value",{"_index":2772,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.statewrapper",{"_index":3869,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.stepclass",{"_index":4403,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.storageeventsubject.asobservable",{"_index":3762,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.storageeventsubject.next(event",{"_index":3813,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.store",{"_index":3682,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store).pipe",{"_index":4806,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store.dispatch(actions.channel.clear",{"_index":4773,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.channel.effects.set",{"_index":4777,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.clear",{"_index":4776,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.effects.set",{"_index":4778,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.pipe(select(selector.error",{"_index":3883,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.errormessage",{"_index":3885,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.loading",{"_index":3881,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.select",{"_index":3879,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.storeauthenticationresponse(response",{"_index":1345,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeauthenticationresponse(undefined",{"_index":1347,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeservice.setfilters(value",{"_index":3497,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.subscribe",{"_index":2361,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.subscribe(this.authenticationservice.hasfeature(converttoarray(feature",{"_index":2283,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.summaryelement()?.nativeelement.focus",{"_index":1106,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.tablecelltemplaterecord.set",{"_index":4976,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecelltemplaterecord.update((value",{"_index":4985,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecolumns.set([...(columns",{"_index":5014,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.set",{"_index":4978,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.update((value",{"_index":4988,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.template",{"_index":2075,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.templateref",{"_index":2076,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["this.thentemplateref",{"_index":2171,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.thenviewref",{"_index":2251,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.titleelement",{"_index":4404,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.titleid.set(id",{"_index":4411,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.toastevents",{"_index":4100,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toastevents$.next",{"_index":4116,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toasts().find",{"_index":4126,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toasts().length",{"_index":4079,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toastservice.bundledcomponent",{"_index":4041,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.hasbundledtoasts",{"_index":4045,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.markasrendered(this.toast",{"_index":4031,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["this.toastservice.removetoast(this.toast",{"_index":4032,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["this.toastservice.setfocus(hasfocus",{"_index":4050,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.showbundled",{"_index":4023,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["this.toastservice.toasts",{"_index":4047,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.tooltipeventssubject",{"_index":4238,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipeventssubject.next(event",{"_index":4283,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipservice.removetooltip",{"_index":4192,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tooltipservice.settooltipevent",{"_index":4194,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tourservice.closetour().subscribe",{"_index":4398,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.tourservice.currentindex",{"_index":4370,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.currenttour",{"_index":4371,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.registerelement(this",{"_index":4348,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.tourservice.starttour",{"_index":510,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.tourservice.unregisterelement(this.touritem",{"_index":4351,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.translateservice.get(key",{"_index":2639,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.getfallbacklang",{"_index":2633,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.getlangs",{"_index":2632,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.instant(key",{"_index":2637,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.reloadlang(language",{"_index":2636,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.use(this.rooti18nservice.currentlanguage",{"_index":2635,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translationloaderactionssubject$.next(action",{"_index":2453,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloaderactionssubject$.pipe",{"_index":2434,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloadingservice.addloadedtranslations",{"_index":2531,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.gettranslations",{"_index":2498,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.loadtranslations",{"_index":2526,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.marktranslationsloadedasfailed",{"_index":2523,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationsfailedsubject$.asobservable",{"_index":2430,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsfailedsubject$.next(false",{"_index":2464,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsloading[paths",{"_index":2456,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationspaths.map((path",{"_index":2500,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationspaths.tostring",{"_index":2527,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationssubject$.getvalue",{"_index":2455,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationssubject$.next",{"_index":2454,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.unscrambleparams",{"_index":3504,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.unscrambleparams(value",{"_index":3520,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.updateaccordionitemstate(event.newstate",{"_index":1118,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.updateconditions",{"_index":1953,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateconditions(this.displaycontent",{"_index":1957,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateview",{"_index":2175,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.updateviewsubject",{"_index":1964,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateviewsubject.next",{"_index":1955,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.videos",{"_index":4775,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.viewcontainer.clear",{"_index":1965,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createcomponent",{"_index":1556,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.viewcontainer.createcomponent(component",{"_index":1990,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createcomponent(this.configuration.loading",{"_index":1543,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":2252,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.hascookieelse",{"_index":2195,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.overrideconfiguration[status]?.template",{"_index":1988,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":2077,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.templateref",{"_index":1994,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.thentemplateref",{"_index":2194,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.widthsubject$.asobservable",{"_index":4664,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.getvalue",{"_index":4704,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.next(this.window.innerwidth",{"_index":4700,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window",{"_index":4682,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.addeventlistener('resize",{"_index":4702,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.innerwidth",{"_index":4703,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.scrollto(0",{"_index":4705,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice",{"_index":3792,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.windowservice.currentscrollposition",{"_index":4681,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.document",{"_index":4685,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.hasdocument",{"_index":4689,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.isbrowser",{"_index":1755,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.runinbrowser",{"_index":1422,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollingup",{"_index":4679,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollto(500",{"_index":4687,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.width",{"_index":4677,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.window",{"_index":4683,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowsservice.runinbrowser",{"_index":2590,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.windowwidth",{"_index":4676,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.zoomlevels",{"_index":2764,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["those",{"_index":2435,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["though",{"_index":4318,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["through",{"_index":1403,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["throughout",{"_index":2604,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["throw",{"_index":377,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["throwerror",{"_index":2993,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["tick",{"_index":994,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["time",{"_index":1219,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["times",{"_index":2741,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["timing",{"_index":3173,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["title",{"_index":511,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement",{"_index":634,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.getattribute('id",{"_index":4409,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.setattribute('id",{"_index":4410,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleid",{"_index":635,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["toast",{"_index":551,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["toast.configuration?.autoclose",{"_index":4123,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toast.configuration?.haspriority",{"_index":4105,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toast.id",{"_index":4052,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["toastevents",{"_index":4059,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toasts",{"_index":4010,"title":{},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["toasts.length",{"_index":4112,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toastservice",{"_index":4015,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["toberemoved",{"_index":4009,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["todo",{"_index":133,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["toggle",{"_index":1116,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["toggleevent",{"_index":1117,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["token",{"_index":4414,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["tokens",{"_index":1186,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["toobservable",{"_index":2964,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaquery",{"_index":2965,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaqueryelse",{"_index":2966,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaqueryshouldmatch",{"_index":2967,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toolbar",{"_index":2844,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["toolbox",{"_index":2846,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["tools",{"_index":5132,"title":{},"body":{"index.html":{}}}],["tooltip",{"_index":4139,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["tooltipeventssubject",{"_index":4206,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipportal",{"_index":4272,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipposition",{"_index":4256,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref",{"_index":4275,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('id",{"_index":4280,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('position",{"_index":4278,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('positionclass",{"_index":4279,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('text",{"_index":4277,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltips",{"_index":5137,"title":{},"body":{"index.html":{}}}],["tooltipservice",{"_index":4167,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["top",{"_index":3774,"title":{},"body":{"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{}}}],["tort",{"_index":5226,"title":{},"body":{"index.html":{},"license.html":{}}}],["tosignal",{"_index":3114,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxToastService.html":{}}}],["tosignal(this.layoutservice.layout",{"_index":3109,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["total",{"_index":643,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["touched",{"_index":395,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["touchedeventlistener",{"_index":2071,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touchedeventlistener(this.abstractcontrol",{"_index":2087,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touppercase",{"_index":5057,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["tour",{"_index":485,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["tour.types",{"_index":4415,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["touritem",{"_index":4294,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["touritem]'},{'name",{"_index":615,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tourservice",{"_index":488,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["track",{"_index":2512,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxWindowService.html":{}}}],["tracked",{"_index":3041,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["trailing",{"_index":477,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["transform",{"_index":185,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["transform(direction",{"_index":3982,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["transform(feature",{"_index":2261,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["transform(output",{"_index":444,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["transform(permission",{"_index":2354,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["transform(undefined",{"_index":1600,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["transform(value",{"_index":186,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/TransformPipe.html":{}}}],["transformer",{"_index":5050,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformer(value",{"_index":5058,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformertype",{"_index":5054,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformpipe",{"_index":5048,"title":{"pipes/TransformPipe.html":{}},"body":{"pipes/TransformPipe.html":{}}}],["transforms",{"_index":5055,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["translate",{"_index":2624,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translate/core",{"_index":2489,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"dependencies.html":{}}}],["translateloader",{"_index":2471,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translateservice",{"_index":2607,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translation",{"_index":1636,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["translation.fromstore",{"_index":2533,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts",{"_index":2468,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:19",{"_index":2482,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:25",{"_index":2477,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:30",{"_index":2480,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:35",{"_index":2484,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:42",{"_index":2486,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation/multi",{"_index":2467,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationloaderactionentity",{"_index":2418,"title":{"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["translationloaderactionssubject",{"_index":2403,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationloaderactionstateenum",{"_index":5060,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["translationloadingservice",{"_index":2473,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translations",{"_index":1644,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["translationsfailed",{"_index":2404,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsfailedsubject",{"_index":2405,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloaded",{"_index":2406,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloading",{"_index":2407,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationspaths",{"_index":2474,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationssubject",{"_index":2408,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationtype",{"_index":2615,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["tree",{"_index":481,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["treegrid",{"_index":4422,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["trigger",{"_index":1102,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["triggered",{"_index":1723,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{}}}],["triggering",{"_index":1731,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["true",{"_index":47,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["trusted",{"_index":3624,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["truth",{"_index":2579,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxToastService.html":{}}}],["try",{"_index":4118,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["ts",{"_index":2491,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["tuples",{"_index":3024,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["two",{"_index":3232,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayout.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["typed",{"_index":164,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"directives/NgxDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["typedaction",{"_index":165,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["typeof",{"_index":837,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["types",{"_index":731,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["types/toast.types",{"_index":4099,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["typescript",{"_index":3351,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["typing",{"_index":1356,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["uarr",{"_index":3986,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ui",{"_index":2133,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["unauthenticated",{"_index":1146,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["uncheck",{"_index":4938,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["undefined",{"_index":1005,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["under",{"_index":4316,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["underneath",{"_index":2039,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["uniqby",{"_index":4095,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["uniqby(toasts",{"_index":4090,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["unique",{"_index":775,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{}}}],["unknown",{"_index":173,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["unless",{"_index":1514,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["unload",{"_index":3649,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["unregister",{"_index":3038,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["unscramble",{"_index":3463,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams",{"_index":3443,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(params",{"_index":3461,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(value",{"_index":3500,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams?(params",{"_index":3536,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler",{"_index":3486,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler(value.sorting",{"_index":3501,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unselect",{"_index":4962,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unset",{"_index":1288,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["unsorted",{"_index":5009,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unsubscribe",{"_index":3380,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["until",{"_index":3175,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["unused",{"_index":4840,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["up",{"_index":964,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["upcoming",{"_index":4247,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["update",{"_index":162,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["updateaccordionitemstate",{"_index":1038,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateaccordionitemstate(isopen",{"_index":1068,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateallvalueandvalidity",{"_index":374,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateallvalueandvalidity(form",{"_index":400,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateconditions",{"_index":1906,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updateconditions(conditions",{"_index":1925,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updated",{"_index":1954,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["updates",{"_index":402,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{}}}],["updatevalueandvalidity",{"_index":405,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateview",{"_index":2142,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["updateviewsubject",{"_index":1901,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["upon",{"_index":2203,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["url",{"_index":1163,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/SpecStoreAssets.html":{}}}],["us/docs/web/accessibility/aria/aria_live_regions",{"_index":1934,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["us/docs/web/accessibility/aria/attributes/aria",{"_index":3259,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["us/docs/web/api/broadcastchannel",{"_index":1382,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["use",{"_index":203,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":106,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["useexisting",{"_index":256,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["useful",{"_index":2381,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["uselocalstorage",{"_index":1630,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["usemockdataduringtour",{"_index":503,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["user",{"_index":324,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["users",{"_index":1283,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"index.html":{}}}],["uses",{"_index":1233,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxTourItemDirective.html":{},"injectables/NgxWindowService.html":{}}}],["using",{"_index":328,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["utilities",{"_index":5119,"title":{},"body":{"index.html":{}}}],["utils",{"_index":26,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["uuid",{"_index":828,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"dependencies.html":{}}}],["v",{"_index":2385,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["v3",{"_index":5130,"title":{},"body":{"index.html":{}}}],["v4",{"_index":827,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["v7",{"_index":4098,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["v=1",{"_index":2387,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1.0.0",{"_index":2388,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1743428073628",{"_index":2390,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["valcke",{"_index":5167,"title":{},"body":{"index.html":{}}}],["valid",{"_index":3656,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"classes/NgxValidators.html":{}}}],["validates",{"_index":4583,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validation",{"_index":258,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["validationerrors",{"_index":2013,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxValidators.html":{}}}],["validator",{"_index":30,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["validatorfn",{"_index":4567,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validity",{"_index":403,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["value",{"_index":32,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/enumerations.html":{}}}],["value.charat(4",{"_index":221,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.charat(8",{"_index":224,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.isempty",{"_index":3972,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.isloading",{"_index":3973,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.length",{"_index":4936,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["value.match(/^[0",{"_index":3823,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.match(/{(.*:.*[,]{0,1",{"_index":3826,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.replace(/(.{4})/g",{"_index":470,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.replace(/\\./g",{"_index":217,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.replace(/\\s/g",{"_index":466,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.tostring",{"_index":216,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value]).foreach((item",{"_index":3002,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["valuechanges",{"_index":2689,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["valuechanges.asobservable",{"_index":2860,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(event?.markerarea?.getstate",{"_index":2856,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(marker",{"_index":2863,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["values",{"_index":2005,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["van",{"_index":5106,"title":{},"body":{"index.html":{},"license.html":{}}}],["vanilla",{"_index":1637,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{}}}],["var",{"_index":517,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["variables",{"_index":56,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["vars",{"_index":4841,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["vat",{"_index":198,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["veire",{"_index":5108,"title":{},"body":{"index.html":{},"license.html":{}}}],["version",{"_index":1371,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"index.html":{},"properties.html":{}}}],["vertical",{"_index":4321,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["very",{"_index":1739,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["videos",{"_index":4716,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["videoserror",{"_index":4728,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videoserrormessage",{"_index":4729,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videosloading",{"_index":4730,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["view",{"_index":1945,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["viewchild",{"_index":1094,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchild('celltmpl",{"_index":1819,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["viewchild('details",{"_index":1077,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild('imageelement",{"_index":2733,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["viewchild('summary",{"_index":1091,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild>('contenttmpl",{"_index":1576,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["viewchild>('steptitle",{"_index":668,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchildren",{"_index":103,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["viewchildren(baseformaccessor",{"_index":406,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["viewcontainer",{"_index":1474,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewcontainerref",{"_index":1522,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewmarkerbase",{"_index":2668,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["viewport",{"_index":4325,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["views",{"_index":2180,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["visible",{"_index":1745,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["visual",{"_index":1103,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["visualize",{"_index":3950,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["visualized",{"_index":3956,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["void",{"_index":317,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["vs",{"_index":3781,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["wait",{"_index":992,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["walkthrough",{"_index":5135,"title":{},"body":{"index.html":{}}}],["want",{"_index":237,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["warn",{"_index":425,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["warning",{"_index":378,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["warranties",{"_index":5213,"title":{},"body":{"index.html":{},"license.html":{}}}],["warranty",{"_index":5209,"title":{},"body":{"index.html":{},"license.html":{}}}],["wasn't",{"_index":3196,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["way",{"_index":2132,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ways",{"_index":1144,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["wcag",{"_index":1574,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["wcag/aria",{"_index":947,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["wcag/wai",{"_index":2717,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["we'll",{"_index":2743,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["we're",{"_index":1750,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["we've",{"_index":1279,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["web",{"_index":3562,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponent",{"_index":3549,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponents",{"_index":3552,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["well",{"_index":84,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["wen",{"_index":3381,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["went",{"_index":2460,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["weren't",{"_index":3180,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["when.directive.ts",{"_index":4353,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:123",{"_index":4359,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:26",{"_index":4366,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:27",{"_index":4367,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:32",{"_index":4362,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:37",{"_index":4364,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:38",{"_index":4365,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:39",{"_index":4363,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:40",{"_index":4356,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:63",{"_index":4357,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:68",{"_index":4358,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:70",{"_index":4360,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:74",{"_index":4361,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when/tour",{"_index":4352,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenactive",{"_index":4374,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenever",{"_index":1961,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["wheninactive",{"_index":4373,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whether",{"_index":704,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{},"license.html":{}}}],["whilst",{"_index":2462,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["whitespace",{"_index":4311,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["whose",{"_index":3034,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["width",{"_index":1454,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxWindowService.html":{}}}],["widthsubject",{"_index":4634,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wiki",{"_index":5113,"title":{},"body":{"index.html":{}}}],["window",{"_index":1748,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["window.scrolly",{"_index":4709,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["window:beforeunload",{"_index":3647,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["windowservice",{"_index":1383,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["windowservice.runinbrowser",{"_index":3793,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["windowsservice",{"_index":2547,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["windowwidth",{"_index":4675,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wish",{"_index":194,"title":{},"body":{"pipes/BtwPipe.html":{},"components/MockTourStepComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayout.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["wishing",{"_index":1917,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["withcredentials",{"_index":1156,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["within",{"_index":1703,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{}}}],["withlatestfrom",{"_index":4097,"title":{},"body":{"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["withlatestfrom(this.queue",{"_index":4103,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["without",{"_index":209,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["withpositions([this.positionrecord[tooltipposition",{"_index":4269,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["work",{"_index":1357,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["workflow",{"_index":5127,"title":{},"body":{"index.html":{}}}],["works",{"_index":931,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["world",{"_index":497,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["wouter",{"_index":134,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["wrap",{"_index":230,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["wrapped",{"_index":1408,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["wrapper",{"_index":1140,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["wrapperelement",{"_index":1527,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["wraps",{"_index":1378,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["writable",{"_index":3713,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["writablesignal",{"_index":671,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["writengxtablevalue",{"_index":4831,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue",{"_index":4929,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue(value",{"_index":4931,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["wrong",{"_index":2461,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["wysiwyg",{"_index":3565,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["xxxx.xxx.xxx",{"_index":220,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["y",{"_index":4314,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["yes",{"_index":810,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"classes/NgxValidators.html":{}}}],["yourcomponent",{"_index":3785,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["youtube",{"_index":4721,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["yyyy",{"_index":4577,"title":{},"body":{"classes/NgxValidators.html":{}}}],["zone.js",{"_index":5081,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":2687,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["zooming",{"_index":2679,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["zoomlevels",{"_index":2708,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AtLeastOneRequiredValidatorOptions.html":{"url":"interfaces/AtLeastOneRequiredValidatorOptions.html","title":"interface - AtLeastOneRequiredValidatorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AtLeastOneRequiredValidatorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/at-least-one-required/at-least-one-required.validator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditionalFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            controls\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditionalFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditionalFunction:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        controls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controls:     KeyType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup } from '@angular/forms';\nimport clean from 'obj-clean';\n\nimport { clearFormError, setFormError } from '../utils';\n\nexport interface AtLeastOneRequiredValidatorOptions {\n\tcontrols?: KeyType[];\n\tconditionalFunction?: (data: any) => boolean;\n}\n\n/**\n * FormGroup validator which checks if either at least one value is filled in\n *\n * @param options - An optional object with configuration options, see below params for more info\n */\nexport const atLeastOneRequiredValidator = (\n\toptions?: AtLeastOneRequiredValidatorOptions\n) => {\n\treturn (group: FormGroup): { atLeastOneRequiredError: true } | null => {\n\t\t// Iben: Get the optional configuration items\n\t\tlet conditionalFunction: (data: any) => boolean;\n\t\tlet keys: KeyType[];\n\n\t\tif (options) {\n\t\t\tconditionalFunction = options.conditionalFunction;\n\t\t\tkeys = options.controls;\n\t\t}\n\t\t// Iben: Setup the needed variables to handle the validator\n\t\tconst cleanedFormValue = clean(group.value);\n\t\tconst cleanedKeys = new Set(Object.keys(cleanedFormValue));\n\t\tconst controls = Object.values(group.controls);\n\t\tconst empty = cleanedKeys.size === 0;\n\n\t\t// Iben: If nothing is filled in, we return an error\n\t\tif (\n\t\t\t(empty && !conditionalFunction) ||\n\t\t\t(empty && conditionalFunction && conditionalFunction(group.value))\n\t\t) {\n\t\t\tfor (const control of controls) {\n\t\t\t\tsetFormError(control, 'required');\n\t\t\t}\n\n\t\t\treturn { atLeastOneRequiredError: true };\n\t\t}\n\n\t\t// Iben: Check if we need to check on a specific key\n\t\tif (keys) {\n\t\t\tconst hasOneKey = keys.reduce((hasOne, key) => hasOne || cleanedKeys.has(key), false);\n\n\t\t\t// Iben: Only return an error when there is no key matched at all\n\t\t\t// and in case of a conditionalFunction if the conditionalFunction is matched as well\n\t\t\tif (\n\t\t\t\t(!hasOneKey && !conditionalFunction) ||\n\t\t\t\t(!hasOneKey && conditionalFunction && conditionalFunction(group.value))\n\t\t\t) {\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tsetFormError(group.get(key), 'required');\n\t\t\t\t}\n\n\t\t\t\treturn { atLeastOneRequiredError: true };\n\t\t\t}\n\t\t}\n\n\t\t// Iben: In case there are no errors, clean the required errors and return null\n\t\tfor (const control of controls) {\n\t\t\tclearFormError(control, 'required');\n\t\t}\n\n\t\treturn null;\n\t};\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormAccessor.html":{"url":"classes/BaseFormAccessor.html","title":"class - BaseFormAccessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormAccessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/base-form/base-form.accessor.ts\n        \n\n\n            \n                Description\n            \n            \n                In order to select all accessors in a FormContainer, we need this base class to pass to our ViewChildren.\nIMPORTANT: This will never be used as an actual functional component\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class BaseFormAccessor {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStore.html":{"url":"interfaces/BaseStore.html","title":"interface - BaseStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:     ErrorInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ErrorInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreActions.html":{"url":"interfaces/BaseStoreActions.html","title":"interface - BaseStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssets.html":{"url":"interfaces/BaseStoreAssets.html","title":"interface - BaseStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         BaseStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         BaseStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssetsGeneratorOptions.html":{"url":"interfaces/BaseStoreAssetsGeneratorOptions.html","title":"interface - BaseStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreSelectors.html":{"url":"interfaces/BaseStoreSelectors.html","title":"interface - BaseStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            select\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        select\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        select:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityAdapterReducerActions.html":{"url":"interfaces/BasicEntityAdapterReducerActions.html","title":"interface - BasicEntityAdapterReducerActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityAdapterReducerActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityState.html":{"url":"interfaces/BasicEntityState.html","title":"interface - BasicEntityState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityState\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityStatus:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/BtwPipe.html":{"url":"pipes/BtwPipe.html","title":"pipe - BtwPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  BtwPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        btw\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Converts a BTW number to the correct format\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to convert\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        BtwPipe\nThe BtwPipe will format Belgian VAT numbers.\nFor example\n474603875 will format to 474.603.875.\nHow to use\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'btw',\n\tstandalone: true,\n})\nexport class BtwPipe implements PipeTransform {\n\t/**\n\t * Converts a BTW number to the correct format\n\t *\n\t * @param value - The value we wish to convert\n\t */\n\tpublic transform(value: string): string {\n\t\tif (!value) {\n\t\t\t// Denis: if the value is falsy, return it without transform.\n\t\t\treturn value;\n\t\t}\n\n\t\tconst addCharAtIndex = (original: string, char: string, index: number): string => {\n\t\t\treturn original.slice(0, index) + char + original.slice(index);\n\t\t};\n\n\t\t// Iben: Convert to string if it's a number\n\t\tvalue = value.toString();\n\n\t\tif (value.replace(/\\./g, '').length === 9) {\n\t\t\tvalue = '0' + value;\n\t\t}\n\n\t\t// Iben: Format: xxxx.xxx.xxx\n\t\tif (value.charAt(4) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 4);\n\t\t}\n\n\t\tif (value.charAt(8) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 8);\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentTypeWrapper.html":{"url":"interfaces/ComponentTypeWrapper.html","title":"interface - ComponentTypeWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComponentTypeWrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/utils/accessor-providers/accessor-providers.util.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface to wrap an component class in.\nThis interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Provider, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { BaseFormAccessor } from '../../abstracts';\n\n/**\n * An interface to wrap an component class in.\n *\n * This interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n */\ninterface ComponentTypeWrapper {\n\tnew (...args: any[]): ComponentType;\n}\n\n/**\n * Generates the necessary providers for a (Data)FormAccessor.\n *\n * @param  component - The component class of the (Data)FormAccessor\n */\nexport const createAccessorProviders = (\n\tcomponent: ComponentTypeWrapper\n): Provider[] => {\n\treturn [\n\t\t// Iben: Generate a provider for the control handling\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the validation handling\n\t\t{\n\t\t\tprovide: NG_VALIDATORS,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the FormContainer handling\n\t\t{\n\t\t\tprovide: BaseFormAccessor,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t},\n\t];\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EffectsService.html":{"url":"injectables/EffectsService.html","title":"injectable - EffectsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EffectsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel(isPublic: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isPublic\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DataType } from './store-assets';\nimport { mockChannel, mockPrivateChannel, mockVideos } from './store.spec';\n\n@Injectable()\nexport class EffectsService {\n\tpublic fetchChannel(isPublic: boolean): Observable {\n\t\tif (isPublic) {\n\t\t\treturn of(mockChannel);\n\t\t}\n\n\t\treturn of(mockPrivateChannel);\n\t}\n\n\tpublic fetchVideos(id: string): Observable {\n\t\treturn of(mockVideos);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreActions.html":{"url":"interfaces/EntityStoreActions.html","title":"interface - EntityStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssets.html":{"url":"interfaces/EntityStoreAssets.html","title":"interface - EntityStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         EntityStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:         ActionReducer | Action>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionReducer | Action>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         EntityStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssetsGeneratorOptions.html":{"url":"interfaces/EntityStoreAssetsGeneratorOptions.html","title":"interface - EntityStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreSelectors.html":{"url":"interfaces/EntityStoreSelectors.html","title":"interface - EntityStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            selectAll\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        selectAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectAll:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FocusClickDirective.html":{"url":"directives/FocusClickDirective.html","title":"directive - FocusClickDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FocusClickDirective\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [focusClick]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                focusClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                isClicked\n                            \n                            \n                                    \n                                    Public\n                                isEntered\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                keydown.enter\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.enter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isClicked\n                        \n                    \n                \n            \n            \n                \n                        \n                    isClicked(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isEntered\n                        \n                    \n                \n            \n            \n                \n                        \n                    isEntered()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.enter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        focusClick\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:24\n                        \n                    \n\n            \n                \n                    This directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and  by using the enter key on focus.\nA tabindex of 0 gets added to the host.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n    \n        FocusClickDirective\nThe FocusClickDirective provides an a11y friendly click handler.\nThis directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and by using the enter key on focus.\nHow to use\nExample :\n    My Button\n\n    \n\n    \n        import { Directive, HostListener, OutputEmitterRef, input, output } from '@angular/core';\n\n@Directive({\n\tselector: '[focusClick]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.tabIndex]': '0',\n\t},\n})\nexport class FocusClickDirective {\n\t// Allow the button to ignore click events when set to true\n\tpublic readonly disabled = input(false);\n\n\t// Allow the function passed by the host to be executed\n\t// when the emit() method gets called\n\t/**\n\t * This directive replaces the default `click` directive and allows the user to execute\n\t * the `click` event by clicking the mouse **and**  by using the `enter` key on focus.\n\t *\n\t * A tabindex of `0` gets added to the host.\n\t *\n\t * @memberof FocusClickDirective\n\t */\n\tpublic readonly focusClick: OutputEmitterRef = output();\n\n\t// Add eventhandler to the click event\n\t@HostListener('click', ['$event'])\n\tpublic isClicked(event: Event): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit(event);\n\t\t}\n\t}\n\n\t// Add eventhandler to keydown event When enter is pressed and the event\n\t// isn't blocked, execute the click function of the host\n\t@HostListener('keydown.enter')\n\tpublic isEntered(): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FormAccessorContainer.html":{"url":"directives/FormAccessorContainer.html","title":"directive - FormAccessorContainer","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FormAccessorContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                accessors\n                            \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleAccessorsAction\n                            \n                            \n                                    Public\n                                markAllAsDirty\n                            \n                            \n                                    Public\n                                markAllAsTouched\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                updateAllValueAndValidity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleAccessorsAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleAccessorsAction(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:85\n                        \n                    \n\n\n            \n                \n                        Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsDirty\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsDirty on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as dirty\n                \n            \n            \n                \n                        \n                    markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:33\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as dirty\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsTouched\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsTouched on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as touched\n                \n            \n            \n                \n                        \n                    markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:47\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as touched\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:75\n                        \n                    \n\n\n            \n                \n                        Handle the destroy state of the component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAllValueAndValidity\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAllValueAndValidity(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:59\n                        \n                    \n\n\n            \n                \n                        Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe provided forms\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the updateValueAndValidity\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        accessors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChildren(BaseFormAccessor)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:18\n                        \n                    \n\n            \n                \n                    A list of all DataFormAccessors en FormAccessors of this component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:23\n                        \n                    \n\n            \n                \n                    Destroyed state of the component\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnDestroy, viewChildren } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { FormStateOptionsEntity } from '../../interfaces';\nimport {\n\thandleFormAccessorMarkAsDirty,\n\thandleFormAccessorMarkAsTouched,\n\thandleFormAccessorUpdateValueAndValidity,\n} from '../../utils';\nimport { BaseFormAccessor } from '../base-form/base-form.accessor';\n\n@Directive()\nexport class FormAccessorContainer implements OnDestroy {\n\t/**\n\t * A list of all DataFormAccessors en FormAccessors of this component\n\t */\n\treadonly accessors = viewChildren(BaseFormAccessor);\n\n\t/**\n\t * Destroyed state of the component\n\t */\n\tprotected readonly destroyed$ = new Subject();\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsDirty on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as dirty\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsDirty(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsTouched on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as touched\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsTouched(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\t *\n\t * @param form - The provided forms\n\t * @param options - Options passed to the updateValueAndValidity\n\t */\n\tpublic updateAllValueAndValidity(\n\t\tform: AbstractControl,\n\t\toptions: FormStateOptionsEntity = {}\n\t): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorUpdateValueAndValidity(\n\t\t\t\tform,\n\t\t\t\tthis.accessors() as any || [],\n\t\t\t\toptions\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Handle the destroy state of the component\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next(undefined);\n\t\tthis.destroyed$.complete();\n\t}\n\n\t/**\n\t * Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleAccessorsAction(action: () => void) {\n\t\t// Iben: Throw a warn in case there are no accessors found\n\t\tconst accessors = this.accessors();\n  if (!accessors || accessors.length === 0) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxForms: No (Data)FormAccessors were found in this component. Check if each (Data)FormAccessor also provides the BaseFormAccessor in its providers array. If this is intentional, this warning can be ignored.'\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Handle the provided action\n\t\taction();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormStateOptionsEntity.html":{"url":"interfaces/FormStateOptionsEntity.html","title":"interface - FormStateOptionsEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormStateOptionsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/form-state-options.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            emitEvent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onlySelf\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emitEvent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitEvent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onlySelf\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onlySelf:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FormStateOptionsEntity {\n\tonlySelf?: boolean;\n\temitEvent?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/HasObserversPipe.html":{"url":"pipes/HasObserversPipe.html","title":"pipe - HasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  HasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        hasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: EventEmitter<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        EventEmitter<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        HasObserversPipe\nThe HasObserversPipe will check if an Output property has observers.\nHow to use\nExample :\n  {{ somethingHasCompleted | hasObservers }}\nExample :@Component({\n    templateUrl: './my-component.component.html',\n    selector: 'my-component',\n})\nexport class MyComponent {\n    @Ouput() public somethingHasCompleted: EventEmitter = EventEmitter();\n}If a parent subscribes to the EventEmitter, hasObservers will return true\nExample :\n    \n\n    \n        import { Pipe, PipeTransform, EventEmitter } from '@angular/core';\n\n@Pipe({\n\tname: 'hasObservers',\n\tstandalone: true,\n})\nexport class HasObserversPipe implements PipeTransform {\n\tpublic transform(output: EventEmitter): boolean {\n\t\treturn output && output.observers.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IbanPipe.html":{"url":"pipes/IbanPipe.html","title":"pipe - IbanPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IbanPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        IBAN\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        IbanPipe\nThe IbanPipe will format an IBAN number.\nFor example\nBE62510007547061 will format to BE62 5100 0754 7061.\nHow to use\nExample :\n  {{ ibanNumber | IBAN }}\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'IBAN',\n\tstandalone: true,\n})\nexport class IbanPipe implements PipeTransform {\n\tpublic transform(value = ''): string {\n\t\tvalue = value.replace(/\\s/g, ''); // replace all spaces\n\n\t\tlet reformat = value.replace(/(.{4})/g, function (match) {\n\t\t\treturn match + ' '; // reformat into groups of 4 succeeded with a space\n\t\t});\n\n\t\treformat = reformat.trim(); // remove trailing space\n\n\t\treturn reformat;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourHolderComponent.html":{"url":"components/MockTourHolderComponent.html","title":"component - MockTourHolderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourHolderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-holder\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data$\n                            \n                            \n                                    Private\n                                    Readonly\n                                dataSourceSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                startTour\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        startTour\n                        \n                    \n                \n            \n            \n                \n                        \n                    startTour()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dataSourceSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('Hello world!')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { useMockDataDuringTour } from '../operators';\nimport { NgxTourService } from '../services';\n\n// Iben: This mock tour holder is used in the test to test the useMockDataDuringTour operator\n@Component({\n\tselector: 'mock-tour-holder',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourHolderComponent {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\tprivate readonly dataSourceSubject = new BehaviorSubject('Hello world!');\n\n\tpublic readonly data$ = this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'));\n\n\tpublic startTour() {\n\t\tthis.tourService.startTour([{ title: 'Mock', content: 'Mock' }]).subscribe();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourHolderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourStepComponent.html":{"url":"components/MockTourStepComponent.html","title":"component - MockTourStepComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-step.component.mock.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxTourStepComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-step-component\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:83\n\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:73\n\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:78\n\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:88\n\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:53\n\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:93\n\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:68\n\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n    \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:keydown.escape\n                        \n                    \n                \n            \n            \n                \ndocument:keydown.escape()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:112\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:105\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:83\n\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:73\n\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:78\n\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:88\n\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:53\n\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:98\n\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:63\n\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:93\n\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:68\n\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:58\n\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:103\n\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:33\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\n// Iben: This mock tour step component can be used where needed\n@Component({\n\tselector: 'mock-tour-step-component',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourStepComponent extends NgxTourStepComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourStepComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAbstractTableCellDirective.html":{"url":"directives/NgxAbstractTableCellDirective.html","title":"directive - NgxAbstractTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAbstractTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/cell.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-abstract-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                footerTemplate\n                            \n                            \n                                    Public\n                                headerTemplate\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:82\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:91\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:26\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:19\n                        \n                    \n\n            \n                \n                    The templates used to set in the table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:52\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:14\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OutputEmitterRef, TemplateRef, input, output } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums/sort-direction.enum';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\n\n@Directive({\n\tselector: 'ngx-abstract-table-cell',\n\tstandalone: true,\n})\nexport class NgxAbstractTableCellDirective {\n\t/**\n\t * The current sortDirection of the cell\n\t */\n\tpublic sortDirection: NgxTableSortDirection | null = null;\n\n\t/**\n\t * The templates used to set in the table\n\t */\n\tpublic footerTemplate: TemplateRef;\n\tpublic headerTemplate: TemplateRef;\n\tpublic cellTemplate: TemplateRef;\n\n\t/**\n\t * An optional class that can be set for the cell\n\t */\n\tpublic cellClass: string;\n\n\t/**\n\t * The name of the column we want this cell to represent\n\t */\n\tpublic readonly column = input.required();\n\n\t/**\n\t * Whether or not the cell is sortable\n\t */\n\tpublic readonly sortable = input(false);\n\n\t/**\n\t * A tag that can be added to a column in the table, set according to the cypress best practices\n\t * See https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\t */\n\tpublic readonly cypressDataTags = input();\n\n\t/**\n\t * Whether the content of a cell is editable. By default, this is set to false\n\t */\n\tpublic readonly editable = input(false);\n\n\t/**\n\t * Emits the sortable event if a column is sortable\n\t */\n\tpublic sort: OutputEmitterRef = output();\n\n\t/**\n\t * Handles the sorting click events\n\t */\n\tpublic handleSort(): void {\n\t\t// Iben: Setup the sort direction\n\t\tlet newSortDirection = NgxTableSortDirection.ASCENDING;\n\n\t\t// Iben: If a an existing sorting direction exists, we switch based on the ones we have\n\t\tif (this.sortDirection) {\n\t\t\tnewSortDirection =\n\t\t\t\tthis.sortDirection === NgxTableSortDirection.ASCENDING\n\t\t\t\t\t? NgxTableSortDirection.DESCENDING\n\t\t\t\t\t: NgxTableSortDirection.ASCENDING;\n\t\t}\n\n\t\t// Iben: Set the internal sorting direction\n\t\tthis.setSortDirection(newSortDirection);\n\n\t\t// Iben: Emit the sorting event\n\t\tthis.sort.emit({\n\t\t\tdirection: this.sortDirection,\n\t\t\tcolumn: this.column(),\n\t\t});\n\t}\n\n\t/**\n\t * Resets the sort direction back to null\n\t */\n\tpublic resetSortDirection(): void {\n\t\tthis.sortDirection = null;\n\t}\n\n\t/**\n\t * Sets the sorting direction based on the provided direction\n\t *\n\t * @param direction - The provided direction\n\t */\n\tpublic setSortDirection(direction: NgxTableSortDirection): void {\n\t\tthis.sortDirection = direction;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{"url":"directives/NgxAccessibleAbstractDragAndDropItemDirective.html","title":"directive - NgxAccessibleAbstractDragAndDropItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleAbstractDragAndDropItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDragAndDropAbstractDirective\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                itemId\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                markAsActive\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:18\n                        \n                    \n\n\n            \n                \n                         Marks the item as focussed and selected\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:41\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:54\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:45\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:47\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        itemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:13\n                        \n                    \n\n            \n                \n                    An unique id of the draggable item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:15\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, Signal } from '@angular/core';\n\nimport { NgxHasFocusDragAndDropAbstractDirective } from './has-focus.directive';\n\n/**\n * An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n */\n@Directive()\nexport abstract class NgxAccessibleAbstractDragAndDropItemDirective extends NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * An unique id of the draggable item\n\t */\n\tabstract itemId: Signal;\n\n\t/**\n\t *  Marks the item as focussed and selected\n\t */\n\tabstract markAsActive(): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAccessibleDragAndDropAbstractService.html":{"url":"classes/NgxAccessibleDragAndDropAbstractService.html","title":"class - NgxAccessibleDragAndDropAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAccessibleDragAndDropAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that is used to make drag and drop components accessible for assistive technologies\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                customMessages\n                            \n                            \n                                    Private\n                                    Readonly\n                                liveRegionService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setDragAndDropDescription\n                            \n                            \n                                    Public\n                                setMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    messageRecord\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        customMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:32\n                        \n                    \n\n            \n                \n                    A custom set of messages used for the drag and drop events.\n Please check the readme for more information on what is necessary to make these messages accessible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        liveRegionService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LiveAnnouncer\n\n                    \n                \n                \n                    \n                        Default value : inject(LiveAnnouncer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:20\n                        \n                    \n\n            \n                \n                    The live region service\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setDragAndDropDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDragAndDropDescription(parent: HTMLElement, description?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:119\n                        \n                    \n\n\n            \n                \n                        Adds a description to the drag and drop host explaining how the drag and drop functions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                parent\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe drag and drop host\n\n\n                                            \n                                        \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional description used to overwrite the default description\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setMessage(message: NgxAccessibleDragAndDropMessage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Sets a message to the live region\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            NgxAccessibleDragAndDropMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided message\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:25\n                                \n                            \n                    \n                        \n                                A method that passes the current language, can either be a string or an Observable\n\n\n                                \n                                    Returns :     string | Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        messageRecord\n                    \n                \n\n                \n                    \n                        getmessageRecord()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:161\n                                \n                            \n                    \n                        \n                                Returns the custom message record or the default when no custom record was provided\n\n\n                                \n                                    Returns :         Record\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { inject } from '@angular/core';\nimport { filter, map, Observable, of, take, tap } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccessibleDragAndDropMessageRecords } from '../../const';\nimport {\n\tNgxAccessibleDragAndDropMessage,\n\tNgxAccessibleDragAndDropMessageRecord,\n} from '../../types';\nimport { hideElement } from '../../utils';\n\n/**\n * An abstract service that is used to make drag and drop components accessible for assistive technologies\n */\nexport abstract class NgxAccessibleDragAndDropAbstractService {\n\t/**\n\t * The live region service\n\t */\n\tprivate readonly liveRegionService: LiveAnnouncer = inject(LiveAnnouncer);\n\n\t/**\n\t * A method that passes the current language, can either be a string or an Observable\n\t */\n\tabstract get currentLanguage(): string | Observable;\n\n\t/**\n\t * A custom set of messages used for the drag and drop events.\n\t *\n\t *  Please check the readme for more information on what is necessary to make these messages accessible.\n\t */\n\tpublic customMessages: Record;\n\n\t/**\n\t * Sets a message to the live region\n\t *\n\t * @param message - The provided message\n\t */\n\tpublic setMessage(message: NgxAccessibleDragAndDropMessage): Observable {\n\t\t// Iben: If no language was set, we early exit\n\t\tif (!this.currentLanguage) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No language was provided, so no message could be set.'\n\t\t\t);\n\n\t\t\treturn of();\n\t\t}\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap((currentLanguage) => {\n\t\t\t\t// Iben: Fetch the necessary data\n\t\t\t\tconst { type, data } = message;\n\n\t\t\t\tlet result: string = this.messageRecord[currentLanguage][type];\n\n\t\t\t\t// Iben: If no message was found, we early exit and throw an error\n\t\t\t\tif (!result) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No message for the corresponding drag and drop event was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Replace the necessary substrings\n\t\t\t\tif (type === 'selected' || type === 'deselected' || type === 'cancelled') {\n\t\t\t\t\tresult = result.replace(\n\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\tdata.itemLabel || `${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t);\n\t\t\t\t} else if (type === 'moved') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#from}}`,\n\t\t\t\t\t\t\tdata.fromLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.from}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#to}}`,\n\t\t\t\t\t\t\tdata.toLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.to}`\n\t\t\t\t\t\t);\n\t\t\t\t} else if (type === 'reordered') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(`{{#from}}`, data.from)\n\t\t\t\t\t\t.replace(`{{#to}}`, data.to);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Update the message in the live region\n\t\t\t\tthis.liveRegionService.announce(result);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Adds a description to the drag and drop host explaining how the drag and drop functions\n\t *\n\t * @param  parent - The drag and drop host\n\t * @param description - An optional description used to overwrite the default description\n\t */\n\tpublic setDragAndDropDescription(parent: HTMLElement, description?: string): Observable {\n\t\t// Iben: Create the description element and its id\n\t\tconst element: HTMLParagraphElement = document.createElement('p');\n\t\tconst id: string = uuid();\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\ttap((language: string) => {\n\t\t\t\t// Iben: Get the description text\n\t\t\t\tconst text = description || this.messageRecord[language].description;\n\n\t\t\t\t// Iben: If no description was found, we early exit and throw an error\n\t\t\t\tif (!text) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No description for the drag and drop container was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Set the description and id of the element\n\t\t\t\telement.innerText = text;\n\t\t\t\telement.setAttribute('id', id);\n\n\t\t\t\t// Iben: Attach the element to the parent and update the aria id\n\t\t\t\tparent.appendChild(element);\n\t\t\t\tparent.setAttribute('aria-describedby', id);\n\n\t\t\t\t// Iben: Hide element\n\t\t\t\thideElement(element);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the custom message record or the default when no custom record was provided\n\t */\n\tprivate get messageRecord(): Record {\n\t\treturn this.customMessages || NgxAccessibleDragAndDropMessageRecords;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{"url":"interfaces/NgxAccessibleDragAndDropBaseMessage.html","title":"interface - NgxAccessibleDragAndDropBaseMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropBaseMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     KeyType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropContainerDirective.html":{"url":"directives/NgxAccessibleDragAndDropContainerDirective.html","title":"directive - NgxAccessibleDragAndDropContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropContainer]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropContainer\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                index\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:15\n                        \n                    \n\n            \n                \n                    The index of the container\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:20\n                        \n                    \n\n            \n                \n                    An optional label used in the event messages\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropContainer]',\n\texportAs: 'ngxAccessibleDragAndDropContainer',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropContainerDirective {\n\t/**\n\t * The index of the container\n\t */\n\tpublic readonly index = input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" });\n\n\t/**\n\t * An optional label used in the event messages\n\t */\n\tpublic readonly label = input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropHostDirective.html":{"url":"directives/NgxAccessibleDragAndDropHostDirective.html","title":"directive - NgxAccessibleDragAndDropHostDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropHostDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropHost]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropHost\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                containers\n                            \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Private\n                                    Readonly\n                                dragAndDropService\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                items\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getContainer\n                            \n                            \n                                    Public\n                                markAsActive\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                registerDragAndDropItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getContainer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContainer(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:51\n                        \n                    \n\n\n            \n                \n                        Returns the container based on the provided index\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the container\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxAccessibleDragAndDropContainerDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:42\n                        \n                    \n\n\n            \n                \n                        Mark a specific drag and drop item as active\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the drag and drop item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerDragAndDropItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccessibleAbstractDragAndDropItemDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:30\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop containers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:35\n                        \n                    \n\n            \n                \n                    An optional description describing how the drag and drop works.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dragAndDropService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAccessibleDragAndDropAbstractService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:25\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop items\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, inject, input, contentChildren } from '@angular/core';\n\nimport {\n\tNgxAccessibleAbstractDragAndDropItemDirective,\n\tNgxAccessibleDragAndDropAbstractService,\n} from '../../abstracts';\n\nimport { NgxAccessibleDragAndDropContainerDirective } from './drag-and-drop-container.directive';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropHost]',\n\texportAs: 'ngxAccessibleDragAndDropHost',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropHostDirective implements AfterViewInit {\n\tprivate readonly dragAndDropService = inject(NgxAccessibleDragAndDropAbstractService);\n\treadonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * A list of all the drag and drop items\n\t */\n\tpublic items: Record = {};\n\n\t/**\n\t * A list of all the drag and drop containers\n\t */\n\tpublic readonly containers = contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true });\n\n\t/**\n\t * An optional description describing how the drag and drop works.\n\t */\n\tpublic readonly description = input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" });\n\n\t/**\n\t * Mark a specific drag and drop item as active\n\t *\n\t * @param  id - The id of the drag and drop item\n\t */\n\tpublic markAsActive(id: string): void {\n\t\tthis.items[id].markAsActive();\n\t}\n\n\t/**\n\t * Returns the container based on the provided index\n\t *\n\t * @param index - The index of the container\n\t */\n\tpublic getContainer(index: number): NgxAccessibleDragAndDropContainerDirective {\n\t\treturn this.containers().find((container) => container.index() === index);\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Add the description tag\n\t\tthis.dragAndDropService\n\t\t\t.setDragAndDropDescription(this.elementRef.nativeElement, this.description())\n\t\t\t.subscribe();\n\t}\n\n\tpublic registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective): void {\n\t\tthis.items[item.itemId()] = item;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{"url":"interfaces/NgxAccessibleDragAndDropMessageRecord.html","title":"interface - NgxAccessibleDragAndDropMessageRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMessageRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cancelled\n                                        \n                                \n                                \n                                        \n                                            container\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            deselected\n                                        \n                                \n                                \n                                        \n                                            item\n                                        \n                                \n                                \n                                        \n                                            moved\n                                        \n                                \n                                \n                                        \n                                            reordered\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancelled:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        container\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        container:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deselected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deselected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        moved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        moved:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reordered\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reordered:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{"url":"interfaces/NgxAccessibleDragAndDropMoveEvent.html","title":"interface - NgxAccessibleDragAndDropMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            newContainer\n                                        \n                                \n                                \n                                        \n                                            newIndex\n                                        \n                                \n                                \n                                        \n                                            previousContainer\n                                        \n                                \n                                \n                                        \n                                            previousIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        newContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionComponent.html":{"url":"components/NgxAccordionComponent.html","title":"component - NgxAccordionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/accordion.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyedSubject\n                            \n                            \n                                    Private\n                                itemRegisteredSubject\n                            \n                            \n                                    Public\n                                items\n                            \n                            \n                                    Public\n                                open\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                moveFocus\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerItem\n                            \n                            \n                                    Public\n                                removeItem\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                open\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        open\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n                \n                    \n                        Open the specific items in the accordion\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveFocus(id: string, direction: \"up\" | \"down\" | \"first\" | \"last\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Moves the focus to an accordion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the current item\n\n\n                                            \n                                        \n                                        \n                                                direction\n                                            \n                                                        \"up\" | \"down\" | \"first\" | \"last\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direction we move in\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Handle the destroyed state\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Register an accordion item to the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Removes an accordion item from the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38\n                        \n                    \n\n            \n                \n                    A subject to hold the destroyed event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        itemRegisteredSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold a registered event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionItemComponent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43\n                        \n                    \n\n            \n                \n                    A list of all accordion items\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                        \n                    \n\n            \n                \n                    Open the specific items in the accordion\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n\tChangeDetectionStrategy,\n\tComponent,\n\teffect,\n\tinput,\n\tInputSignal,\n\tOnDestroy,\n} from '@angular/core';\nimport { Subject, take, tap } from 'rxjs';\n\nimport { NgxAccordionOpenBehavior } from '../../types';\n\nimport { NgxAccordionItemComponent } from './item/accordion-item.component';\n\n/**\n * A WCAG/ARIA compliant implementation of the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion',\n\ttemplate: '',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-accordion',\n\t\trole: 'region',\n\t},\n})\nexport class NgxAccordionComponent implements OnDestroy {\n\t/**\n\t * A subject to hold a registered event\n\t */\n\tprivate itemRegisteredSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to hold the destroyed event\n\t */\n\tprivate destroyedSubject: Subject = new Subject();\n\n\t/**\n\t * A list of all accordion items\n\t */\n\tpublic items: NgxAccordionItemComponent[] = [];\n\n\t/**\n\t * Open the specific items in the accordion\n\t */\n\tpublic open: InputSignal = input();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tconst open = this.open();\n\n\t\t\tthis.itemRegisteredSubject.pipe(\n\t\t\t\ttake(1),\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Use a setTimeOut so we wait an extra tick\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Iben: Open all items\n\t\t\t\t\t\tif (open === 'all') {\n\t\t\t\t\t\t\tthis.items.forEach((item) => item.updateAccordionItemState(true));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Iben: Open specific items\n\t\t\t\t\t\t\tconst indexes =\n\t\t\t\t\t\t\t\topen === 'first' ? [0] : Array.isArray(open) ? open : [open];\n\n\t\t\t\t\t\t\tindexes.forEach((index) => {\n\t\t\t\t\t\t\t\tthis.items[index]?.updateAccordionItemState(true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Register an accordion item to the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic registerItem(item: NgxAccordionItemComponent): void {\n\t\tthis.itemRegisteredSubject.next();\n\t\tthis.items.push(item);\n\t}\n\n\t/**\n\t * Removes an accordion item from the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic removeItem(item: NgxAccordionItemComponent): void {\n\t\t// Iben: Get the index of the item\n\t\tconst index = this.items.findIndex(({ id }) => id === item.id);\n\n\t\t// Iben: If no item was found, we early exit\n\t\tif (index === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Remove the item\n\t\tthis.items = [...this.items.slice(0, index), ...this.items.slice(index + 1)];\n\t}\n\n\t/**\n\t * Moves the focus to an accordion\n\t *\n\t * @param  id - The id of the current item\n\t * @param  direction - The direction we move in\n\t */\n\tpublic moveFocus(id: string, direction: 'up' | 'down' | 'first' | 'last') {\n\t\t// Iben: If we go to the first or last accordion, we don't need to find the index\n\t\tif (direction === 'first' || direction === 'last') {\n\t\t\tthis.items[direction === 'first' ? 0 : this.items.length - 1].focus();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Find the index and move to the next\n\t\tconst index = this.items.findIndex((item) => id === item.id);\n\n\t\tthis.items[direction === 'down' ? index + 1 : index - 1]?.focus();\n\t}\n\n\t/**\n\t * Handle the destroyed state\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyedSubject.next();\n\t\tthis.destroyedSubject.complete();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionItemComponent.html":{"url":"components/NgxAccordionItemComponent.html","title":"component - NgxAccordionItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of an item in the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion-item\n            \n\n\n            \n                imports\n                \n                            NgTemplateOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./accordion-item.component.html\n            \n\n\n\n            \n                styleUrl\n                ./accordion-item.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                contentTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                detailsElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Private\n                                hasFocus\n                            \n                            \n                                    Public\n                                    Readonly\n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Public\n                                    Readonly\n                                summaryElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                arrowDown\n                            \n                            \n                                    \n                                arrowUp\n                            \n                            \n                                    \n                                end\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Private\n                                handleWhenFocussed\n                            \n                            \n                                    \n                                home\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                setFocus\n                            \n                            \n                                    Public\n                                updateAccordionItemState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                            \n                        \n                \n                    \n                        Whether the accordion item is disabled\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowDown\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowDown(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowUp\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowUp(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.End\n                        \n                    \n                \n            \n            \n                \nkeydown.End()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.Home\n                        \n                    \n                \n            \n            \n                \nkeydown.Home()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowDown(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowUp(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end\n                        \n                    \n                \n            \n            \n                \n                        \n                    end()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Set the focus on the summary item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:193\n                        \n                    \n\n\n            \n                \n                        Only perform an action when the item has focus\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        home\n                        \n                    \n                \n            \n            \n                \n                        \n                    home()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Listen to the default HTML events of the details object\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:184\n                        \n                    \n\n\n            \n                \n                        Remove the item from its parent when destroyed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:153\n                        \n                    \n\n\n            \n                \n                        Register the item to its parent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Set the focus state of the accordion item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the item has focus\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAccordionItemState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAccordionItemState(isOpen: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Updates the current open/closed state of the accordion item, regardless of the disabled state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isOpen\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        contentTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:57\n                        \n                    \n\n            \n                \n                    The template for the content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        detailsElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('details')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:47\n                        \n                    \n\n            \n                \n                    The details element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                        \n                    \n\n            \n                \n                    Whether the accordion item is disabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:122\n                        \n                    \n\n            \n                \n                    Whether the accordion item is focussed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('headerTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:62\n                        \n                    \n\n            \n                \n                    The template for the header\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuid()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:112\n                        \n                    \n\n            \n                \n                    The id of the accordion item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:117\n                        \n                    \n\n            \n                \n                    Whether the accordion item is open\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionComponent\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxAccordionComponent)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        summaryElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('summary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:52\n                        \n                    \n\n            \n                \n                    The summary element\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgTemplateOutlet } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  inject,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  input,\n  viewChild,\n  contentChild,\n  WritableSignal,\n  signal\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccordionComponent } from '../accordion.component';\n\n/**\n * A WCAG/ARIA compliant implementation of an item in the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion-item',\n\ttemplateUrl: './accordion-item.component.html',\n\tstyleUrl: './accordion-item.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\timports: [NgTemplateOutlet],\n\thost: {\n\t\tclass: 'ngx-accordion-item',\n\t},\n})\nexport class NgxAccordionItemComponent implements OnInit, AfterViewInit, OnDestroy {\n\tprivate readonly parent: NgxAccordionComponent = inject(NgxAccordionComponent);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * The details element\n\t */\n\tpublic readonly detailsElement = viewChild('details');\n\n\t/**\n\t * The summary element\n\t */\n\tpublic readonly summaryElement = viewChild('summary');\n\n\t/**\n\t * The template for the content\n\t */\n\tpublic readonly contentTemplate = contentChild>('contentTmpl');\n\n\t/**\n\t * The template for the header\n\t */\n\tpublic readonly headerTemplate = contentChild>('headerTmpl');\n\n\t/**\n\t * Moves the focus to the accordion item above the current one\n\t */\n\t@HostListener('keydown.ArrowUp', ['$event']) arrowUp(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'up');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the accordion item below the current one\n\t */\n\t@HostListener('keydown.ArrowDown', ['$event']) arrowDown(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'down');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the first accordion item\n\t */\n\t@HostListener('keydown.Home') home() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'first');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the last accordion item\n\t */\n\t@HostListener('keydown.End') end() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'last');\n\t\t});\n\t}\n\n\t/**\n\t * Whether the accordion item is disabled\n\t */\n\tpublic readonly disabled = input(false);\n\n\t/**\n\t * The id of the accordion item\n\t */\n\tpublic readonly id: string = uuid();\n\n\t/**\n\t * Whether the accordion item is open\n\t */\n\tpublic isOpen: WritableSignal = signal(false);\n\n\t/**\n\t * Whether the accordion item is focussed\n\t */\n\tprivate hasFocus: WritableSignal = signal(false);\n\n\t/**\n\t * Updates the current open/closed state of the accordion item, regardless of the disabled state\n\t */\n\tpublic updateAccordionItemState(isOpen: boolean): void {\n\t\t// Iben: Sets the item to open and updates the parent state\n\t\tthis.isOpen.set(isOpen)\n\n\t\t// Iben: Trigger the visual changes\n\t\tthis.cdRef.detectChanges();\n\t}\n\t/**\n\t * Set the focus on the summary item\n\t */\n\tpublic focus() {\n\t\tthis.summaryElement()?.nativeElement.focus();\n\t}\n\n\t/**\n\t * Set the focus state of the accordion item\n\t *\n\t * @param hasFocus - Whether the item has focus\n\t */\n\tpublic setFocus(hasFocus: boolean) {\n\t\tthis.hasFocus.set(hasFocus);\n\t}\n\n\t/**\n\t * Register the item to its parent\n\t */\n\tpublic ngOnInit(): void {\n\t\tthis.parent.registerItem(this);\n\t}\n\n\t/**\n\t * Listen to the default HTML events of the details object\n\t */\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If for some reason no accordion item is found, we return\n\t\tconst detailsElement = this.detailsElement();\n\t\tif (!detailsElement?.nativeElement) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Prevent the accordion from being opened if it is disabled\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'click', (event: Event) => {\n\t\t\tif (this.disabled()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Listen to the open state of details and update the internal one\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'toggle', (event: ToggleEvent) => {\n\t\t\tthis.updateAccordionItemState(event.newState === 'open');\n\t\t});\n\t}\n\n\t/**\n\t * Remove the item from its parent when destroyed\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.parent.removeItem(this);\n\t}\n\n\t/**\n\t * Only perform an action when the item has focus\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleWhenFocussed(action: () => void) {\n\t\t// Iben: Early exit if there's no focus\n\t\tif (!this.hasFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Perform the action\n\t\taction();\n\t}\n}\n\n    \n\n    \n        \n\t\n\t\t\n\t\n\n\t\n\t\t\n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t\t\t\t\t\t\t\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxAriaSortPipe.html":{"url":"pipes/NgxAriaSortPipe.html","title":"pipe - NgxAriaSortPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxAriaSortPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxAriaSort\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"none\" | \"ascending\" | \"descending\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from '../../components';\nimport { NgxTableSortEvent } from '../../types';\n\n\n@Pipe({\n\tname: 'ngxAriaSort',\n\tstandalone: true,\n})\nexport class NgxAriaSortPipe implements PipeTransform {\n\ttransform(value: {\n\t\tcurrentSorting: NgxTableSortEvent;\n\t\tcell: NgxAbstractTableCellDirective;\n\t}): 'none' | 'ascending' | 'descending' {\n\t\tconst { cell } = value;\n\n\t\tif (!cell || !cell.sortDirection) {\n\t\t\treturn 'none';\n\t\t}\n\n\t\treturn cell.sortDirection.toLocaleLowerCase() as 'ascending' | 'descending';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxAuthenticatedHttpClient.html":{"url":"injectables/NgxAuthenticatedHttpClient.html","title":"injectable - NgxAuthenticatedHttpClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxAuthenticatedHttpClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                download\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Private\n                                handleUrl\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:99\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a DELETE request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Constructs a GET request tailored to downloading to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:41\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a GET request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUrl(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Adds a base-url to every request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe url of the request\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                        \n                    patch(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:166\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PATCH request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n            \n                \n                        \n                    post(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:120\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a POST request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(url: string, body?: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:143\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PUT request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport clean from 'obj-clean';\nimport { map, Observable } from 'rxjs';\n\nimport { NgxAuthenticationUrlHandlerToken } from '../../tokens';\nimport { NgxAuthenticatedHttpClientConfiguration } from '../../types';\n\n/**\n * An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxAuthenticatedHttpClient {\n\tprivate readonly httpClient = inject(HttpClient);\n\n\tprivate baseUrl: string;\n\n\tconstructor() {\n\t\tconst baseUrlHandler = inject(NgxAuthenticationUrlHandlerToken);\n\n\t\t// Iben: Setup the base url\n\t\tthis.baseUrl = baseUrlHandler ? baseUrlHandler() : '';\n\t}\n\n\t/**\n\t * Adds a base-url to every request\n\t * @param {string} url - The url of the request\n\t */\n\tprivate handleUrl(url: string): string {\n\t\treturn `${this.baseUrl}/${url}`;\n\t}\n\n\t/**\n\t * Constructs a GET request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic get(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.get(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ withCredentials, params, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a GET request tailored to downloading to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic download(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient\n\t\t\t.get(\n\t\t\t\tthis.handleUrl(url),\n\t\t\t\tclean({\n\t\t\t\t\twithCredentials,\n\t\t\t\t\tparams,\n\t\t\t\t\tresponseType: 'blob',\n\t\t\t\t\tobserve: 'response',\n\t\t\t\t\tcontext,\n\t\t\t\t}) as Parameters[1]\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((response: HttpResponse) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfileType: response.headers.get('content-disposition').split('.')[1],\n\t\t\t\t\t\tblob: response.body as Blob,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\t/**\n\t * Constructs a DELETE request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic delete(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.delete(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ params, withCredentials, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a POST request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic post(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.post(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PUT request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic put(\n\t\turl: string,\n\t\tbody?: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.put(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PATCH request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic patch(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.patch(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{"url":"interfaces/NgxAuthenticatedHttpClientConfiguration.html","title":"interface - NgxAuthenticatedHttpClientConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedHttpClientConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            authenticatedCallHandler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            interceptors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authenticatedCallHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authenticatedCallHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interceptors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interceptors:     HttpInterceptorFn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpInterceptorFn[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional list of interceptors that will be provided to the HttpClient\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedRoute.html":{"url":"interfaces/NgxAuthenticatedRoute.html","title":"interface - NgxAuthenticatedRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authenticated-route.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n\n            \n\n            \n                Extends\n            \n            \n                        Route\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Route } from '@angular/router';\n\n/**\n * An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n */\nexport interface NgxAuthenticatedRoute extends Route {\n\tdata?: {\n\t\t/**\n\t\t * The features for the NgxHasFeatureGuard\n\t\t */\n\t\tfeature?: FeatureType | FeatureType[];\n\t\t/**\n\t\t * Whether all features should be provided, by default true, for the NgxHasFeatureGuard\n\t\t */\n\t\tshouldHaveAllFeatures?: boolean;\n\t\t/**\n\t\t * The permissions for the NgxHasPermissionGuard\n\t\t */\n\t\tpermission?: PermissionType | PermissionType[];\n\t\t/**\n\t\t * Whether all permissions should be provided, by default true, for the NgxHasPermissionGuard\n\t\t */\n\t\tshouldHaveAllPermissions?: boolean;\n\t\t/**\n\t\t * Whether the user should be authenticated, for the NgxIsAuthenticatedGuard\n\t\t */\n\t\tshouldBeAuthenticated?: boolean;\n\t\t/**\n\t\t * The location to redirect to if one of the guards conditions isn't met\n\t\t */\n\t\tredirect?: string[];\n\t\t/**\n\t\t * Remaining additional properties\n\t\t */\n\t\t[key: string]: unknown;\n\t};\n}\n\nexport type NgxAuthenticatedRoutes = NgxAuthenticatedRoute[];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAuthenticationAbstractService.html":{"url":"classes/NgxAuthenticationAbstractService.html","title":"class - NgxAuthenticationAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAuthenticationAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/abstracts/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationResponseSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                authenticationStatusSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                globalFeaturesSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasAuthenticated$\n                            \n                            \n                                    Public\n                                    Readonly\n                                isAuthenticated$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getAuthenticationResponse\n                            \n                            \n                                    Private\n                                getSession\n                            \n                            \n                                    Public\n                                hasFeature\n                            \n                            \n                                    Public\n                                hasPermission\n                            \n                            \n                                    Public\n                                setGlobalFeatures\n                            \n                            \n                                    Public\n                                signIn\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signInUser\n                            \n                            \n                                    Public\n                                signOut\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signOutUser\n                            \n                            \n                                    Protected\n                                storeAuthenticationResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    user$\n                                \n                                \n                                    session$\n                                \n                                \n                                    metadata$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationResponseSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to store the authentication response if no other state implementation was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationStatusSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject('unset')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40\n                        \n                    \n\n            \n                \n                    A subject to store whether we've authenticated already\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        globalFeaturesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject[]>([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46\n                        \n                    \n\n            \n                \n                    A subject to store global features that are available for all users, regardless of their authenticated state\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53\n                        \n                    \n\n            \n                \n                    Whether an authentication attempt has been made\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61\n                        \n                    \n\n            \n                \n                    Whether the user is authenticated\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthenticationResponse()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns the authentication response from the state\n\n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns a session or an empty session depending on the authenticated state\n\n\n                        \n                            Returns :     Observable<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasFeature\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasFeature(requiredFeatures: NgxAuthenticationResponseFeature[], shouldHaveAllFeatures: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required features.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredFeatures\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required features\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllFeatures\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all features in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasPermission(requiredPermissions, shouldHaveAllPermissions: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required permissions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredPermissions\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required permissions\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllPermissions\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all permissions in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setGlobalFeatures\n                        \n                    \n                \n            \n            \n                \n                        \n                    setGlobalFeatures(features: NgxAuthenticationResponseFeature[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Sets a set of global features that are always present, regardless of the authenticated state of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                features\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of features\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Signs in a user and stores the authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signInUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInUser(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71\n                        \n                    \n\n\n            \n                \n                        The call required to sign in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Signs out a user and removes the stored authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80\n                        \n                    \n\n\n            \n                \n                        The call required to sign out a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        storeAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeAuthenticationResponse(response: AuthenticationResponseType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Stores the authentication response in the state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        AuthenticationResponseType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authentication response\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        user$\n                    \n                \n\n                \n                    \n                        getuser$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103\n                                \n                            \n                    \n                        \n                                The authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        session$\n                    \n                \n\n                \n                    \n                        getsession$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114\n                                \n                            \n                    \n                        \n                                The session of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadata$\n                    \n                \n\n                \n                    \n                        getmetadata$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125\n                                \n                            \n                    \n                        \n                                The metadata of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AuthenticationResponse } from '@ibenvandeveire/types-authentication';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tObservable,\n\tof,\n\tswitchMap,\n\ttap,\n} from 'rxjs';\n\nimport { NgxAuthenticationResponseFeature, NgxAuthenticationStatus } from '../types';\n\n/**\n * An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n *\n * @template AuthenticationResponseType - The type of authentication response\n * @template SignInDataType - The data type used to sign in a user\n * @template SignoutDataType - The data type used to sign out a user\n * @template SignOutResponseType - The data type you get when signing out a user\n */\nexport abstract class NgxAuthenticationAbstractService = AuthenticationResponse,\n\tSignInDataType = any,\n\tSignoutDataType = any,\n\tSignOutResponseType = void,\n> {\n\t/**\n\t * A subject to store the authentication response if no other state implementation was provided\n\t */\n\tprivate readonly authenticationResponseSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to store whether we've authenticated already\n\t */\n\tprivate readonly authenticationStatusSubject: BehaviorSubject =\n\t\tnew BehaviorSubject('unset');\n\n\t/**\n\t * A subject to store global features that are available for all users, regardless of their authenticated state\n\t */\n\tprivate readonly globalFeaturesSubject: BehaviorSubject[]\n\t> = new BehaviorSubject[]>([]);\n\n\t/**\n\t * Whether an authentication attempt has been made\n\t */\n\tpublic readonly hasAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t);\n\n\t/**\n\t * Whether the user is authenticated\n\t */\n\tpublic readonly isAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t);\n\n\t/**\n\t * The call required to sign in a user\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tprotected abstract signInUser(\n\t\tsignInData: SignInDataType\n\t): Observable;\n\n\t/**\n\t * The call required to sign out a user\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a user\n\t */\n\tprotected abstract signOutUser(\n\t\tsignoutDataType?: SignoutDataType\n\t): Observable;\n\n\t/**\n\t * Stores the authentication response in the state\n\t *\n\t * @param response - The authentication response\n\t */\n\tprotected storeAuthenticationResponse(response: AuthenticationResponseType): void {\n\t\tthis.authenticationResponseSubject.next(response);\n\t}\n\n\t/**\n\t * Returns the authentication response from the state\n\t */\n\tprotected getAuthenticationResponse(): Observable {\n\t\treturn this.authenticationResponseSubject.asObservable();\n\t}\n\n\t/**\n\t * The authenticated user\n\t */\n\tpublic get user$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap((response) => response.user),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The session of the authenticated user\n\t */\n\tpublic get session$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ session }: AuthenticationResponseType) => session),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The metadata of the authenticated user\n\t */\n\tpublic get metadata$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ metadata }: AuthenticationResponseType) => metadata),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Signs in a user and stores the authentication response\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tpublic signIn(signInData: SignInDataType): Observable {\n\t\t// Iben: Perform the call to sign in a user\n\t\treturn this.signInUser(signInData).pipe(\n\t\t\ttap((response: AuthenticationResponseType) => {\n\t\t\t\t// Iben: Set the user as signed in\n\t\t\t\tthis.authenticationStatusSubject.next('signed-in');\n\n\t\t\t\t// Iben: Store the authentication response\n\t\t\t\tthis.storeAuthenticationResponse(response);\n\t\t\t}),\n\t\t\t// Iben: Convert to void\n\t\t\tmap(() => undefined)\n\t\t);\n\t}\n\n\t/**\n\t * Signs out a user and removes the stored authentication response\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a use\n\t */\n\tpublic signOut(signoutDataType?: SignoutDataType): Observable {\n\t\t// Iben: Perform the call to sign out a user\n\t\treturn this.signOutUser(signoutDataType).pipe(\n\t\t\ttap(() => {\n\t\t\t\t// Iben: Set the user as signed out\n\t\t\t\tthis.authenticationStatusSubject.next('signed-out');\n\n\t\t\t\t// Iben: Remove the stored authentication response\n\t\t\t\tthis.storeAuthenticationResponse(undefined);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns whether the user has the required features.\n\t *\n\t * @param requiredFeatures - An array of required features\n\t * @param shouldHaveAllFeatures - Whether all features in the array are required, by default true\n\t */\n\tpublic hasFeature(\n\t\trequiredFeatures: NgxAuthenticationResponseFeature[],\n\t\tshouldHaveAllFeatures: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn combineLatest([this.getSession(), this.globalFeaturesSubject.asObservable()]).pipe(\n\t\t\tmap(([{ features }, globalFeatures]) => {\n\t\t\t\tconst sessionFeatures = new Set([...(features || []), ...(globalFeatures || [])]);\n\t\t\t\t// Iben: Return whether the user has the required features\n\t\t\t\t// We cast to strings here to make the typing work\n\t\t\t\treturn shouldHaveAllFeatures\n\t\t\t\t\t? requiredFeatures.every((feature) => sessionFeatures.has(`${feature}`))\n\t\t\t\t\t: requiredFeatures.some((feature) => sessionFeatures.has(`${feature}`));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Sets a set of global features that are always present, regardless of the authenticated state of the user\n\t *\n\t * @param  features - A list of features\n\t */\n\tpublic setGlobalFeatures(\n\t\tfeatures: NgxAuthenticationResponseFeature[]\n\t): void {\n\t\tthis.globalFeaturesSubject.next(features);\n\t}\n\n\t/**\n\t * Returns whether the user has the required permissions.\n\t *\n\t * @param requiredPermissions - An array of required permissions\n\t * @param shouldHaveAllPermissions - Whether all permissions in the array are required, by default true\n\t */\n\tpublic hasPermission(\n\t\trequiredPermissions: AuthenticationResponseType['session']['permissions'],\n\t\tshouldHaveAllPermissions: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn this.getSession().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ permissions }) => {\n\t\t\t\tconst sessionPermissions = new Set([...permissions]);\n\n\t\t\t\t// Iben: Return whether the user has the required permissions\n\t\t\t\treturn shouldHaveAllPermissions\n\t\t\t\t\t? requiredPermissions.every((permission) => sessionPermissions.has(permission))\n\t\t\t\t\t: requiredPermissions.some((permission) => sessionPermissions.has(permission));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns a session or an empty session depending on the authenticated state\n\t */\n\tprivate getSession(): Observable {\n\t\treturn this.isAuthenticated$.pipe(\n\t\t\tswitchMap((isAuthenticated) => {\n\t\t\t\t// Iben: If the user is authenticated, we return the session, if not, we return an empty version for the hasPermission and hasFeature methods\n\t\t\t\t// This ensures we always get a response\n\t\t\t\treturn isAuthenticated\n\t\t\t\t\t? this.session$\n\t\t\t\t\t: of({\n\t\t\t\t\t\t\tfeatures: [],\n\t\t\t\t\t\t\tpermissions: [],\n\t\t\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticationConfiguration.html":{"url":"interfaces/NgxAuthenticationConfiguration.html","title":"interface - NgxAuthenticationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration of the authentication handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            httpClientConfiguration\n                                        \n                                \n                                \n                                        \n                                            service\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpClientConfiguration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        httpClientConfiguration:         NgxAuthenticatedHttpClientConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAuthenticatedHttpClientConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        service\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        service:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The provided implementation of the NgxAuthenticationAbstractService\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxBroadcastChannelService.html":{"url":"injectables/NgxBroadcastChannelService.html","title":"injectable - NgxBroadcastChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxBroadcastChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\nFor more information:\nhttps://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                broadcastChannel\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeChannel\n                            \n                            \n                                    Public\n                                initChannel\n                            \n                            \n                                    Public\n                                postMessage\n                            \n                            \n                                    Public\n                                selectChannelMessageErrors\n                            \n                            \n                                    Public\n                                selectChannelMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeChannel(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:55\n                        \n                    \n\n\n            \n                \n                        closeChannel\nThe closeChannel method closes a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    initChannel(...args: ConstructorParameters<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:29\n                        \n                    \n\n\n            \n                \n                        initChannel\nThe initChannel method initializes a new BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ConstructorParameters<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe arguments to pass to the BroadcastChannel constructor.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        postMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    postMessage(channelName: string, message: MessageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:72\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        postMessage\nThe postMessage method sends a message to a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                        MessageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to send through the channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessageErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessageErrors(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessageErrors\nThe selectChannelMessageErrors method subscribes to the messageerror (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The messageerror event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessages(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessages\nThe selectChannelMessages method subscribes to the message (bc.onmessage) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The message event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        broadcastChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:20\n                        \n                    \n\n            \n                \n                    A record holding all the broadcast channels\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { EMPTY, fromEvent, Observable } from 'rxjs';\n\n/**\n * A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\n *\n * For more information:\n * https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxBroadcastChannelService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record holding all the broadcast channels\n\t */\n\tprivate broadcastChannel: Record = {};\n\n\t/**\n\t * initChannel\n\t *\n\t * The initChannel method initializes a new BroadcastChannel instance.\n\t *\n\t * @param args{ConstructorParameters} - The arguments to pass to the BroadcastChannel constructor.\n\t */\n\tpublic initChannel(...args: ConstructorParameters): void {\n\t\t// Iben: Only run when in browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\tconst [channelName] = args;\n\n\t\t\tif (!channelName) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'NgxUtils: There was an attempt to initialize a BroadcastChannel without providing a name.'\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.broadcastChannel[channelName]) {\n\t\t\t\tthis.broadcastChannel[channelName] = new BroadcastChannel(...args);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * closeChannel\n\t *\n\t * The closeChannel method closes a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t */\n\tpublic closeChannel(channelName: string): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].close();\n\t\tdelete this.broadcastChannel[channelName];\n\t}\n\n\t/**\n\t * postMessage\n\t *\n\t * The postMessage method sends a message to a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @param message{any} - The payload to send through the channel.\n\t */\n\tpublic postMessage(channelName: string, message: MessageType): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxUtils: There was an attempt to post a message to a channel without providing a name or the selected channel does not exist. The included message was:',\n\t\t\t\tmessage\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].postMessage(message);\n\t}\n\n\t/**\n\t * selectChannelMessages\n\t *\n\t * The selectChannelMessages method subscribes to the `message` (bc.onmessage) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The message event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessages(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's messages without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(this.broadcastChannel[channelName], 'message');\n\t}\n\n\t/**\n\t * selectChannelMessageErrors\n\t *\n\t * The selectChannelMessageErrors method subscribes to the `messageerror` (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The messageerror event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessageErrors(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's message errors without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(\n\t\t\tthis.broadcastChannel[channelName],\n\t\t\t'messageerror'\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxButtonConfiguration.html":{"url":"interfaces/NgxButtonConfiguration.html","title":"interface - NgxButtonConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxButtonConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/button.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The default configuration of the button\nloading - An optional component used for the loading state\nicon - An optional component used for the icon\niconPosition - The optional default position of the icon, by default left\nlabelWrapper - The optional default HTML element used to wrap the button label, by default span\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iconPosition\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelWrapper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iconPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iconPosition:         NgxButtonIconPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxButtonIconPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelWrapper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelWrapper:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\n/**\n * The priority of the button\n */\nexport type NgxButtonPriority = 'primary' | 'secondary' | 'tertiary' | 'danger';\n\n/**\n * The type of the button\n */\nexport type NgxButtonType = 'regular' | 'fab' | 'text' | 'outline';\n\n/**\n * The position of the icon in the button\n */\nexport type NgxButtonIconPosition = 'left' | 'right';\n\n/**\n * The width of the button\n */\nexport type NgxButtonWidth = 'full' | 'fit';\n\n/**\n * Whether the text and icon or only the icon needs to be shown\n */\nexport type NgxButtonDisplayType = 'icon' | 'text' | 'both';\n\n/**\n * The default configuration of the button\n *\n * loading - An optional component used for the loading state\n * icon - An optional component used for the icon\n * iconPosition - The optional default position of the icon, by default `left`\n * labelWrapper - The optional default HTML element used to wrap the button label, by default `span`\n */\nexport interface NgxButtonConfiguration {\n\tloading?: Type;\n\ticon?: Type;\n\ticonPosition?: NgxButtonIconPosition;\n\tlabelWrapper?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxButtonDirective.html":{"url":"directives/NgxButtonDirective.html","title":"directive - NgxButtonDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxButtonDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/button/button.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds the classic button states, priority, loading and icon handling\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxButton]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                buttonClasses\n                            \n                            \n                                    Public\n                                buttonType\n                            \n                            \n                                    Public\n                                buttonWidth\n                            \n                            \n                                    Protected\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                display\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Protected\n                                iconComponent\n                            \n                            \n                                    Protected\n                                iconElement\n                            \n                            \n                                    Public\n                                iconPosition\n                            \n                            \n                                    Public\n                                loading\n                            \n                            \n                                    Protected\n                                loadingComponent\n                            \n                            \n                                    Public\n                                loadingData\n                            \n                            \n                                    Protected\n                                    Readonly\n                                nativeElement\n                            \n                            \n                                    Public\n                                priority\n                            \n                            \n                                    Protected\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleIcon\n                            \n                            \n                                    Private\n                                handleLoading\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                icon\n                            \n                            \n                                loading\n                            \n                            \n                                loadingData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:130\n                            \n                        \n                \n                    \n                        An optional icon we wish to display alongside the button text\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loading\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:100\n                            \n                        \n                \n                    \n                        Whether the button is currently loading\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loadingData\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:105\n                            \n                        \n                \n                    \n                        Optional loading data\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleIcon\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleIcon()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:188\n                        \n                    \n\n\n            \n                \n                        Adds or removes an icon\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleLoading\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLoading()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:164\n                        \n                    \n\n\n            \n                \n                        Adds or removes the loading component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        buttonClasses\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\t// Iben: Inserts the loading component when needed\n\t\tthis.handleLoading();\n\n\t\treturn `\n    ngx-button\n    ngx-button-${this.buttonType()}\n    ngx-button-${this.priority()}\n    ngx-button-${this.buttonWidth()}\n    ${this.display() !== 'both' ? `ngx-button-${this.display()}-only ` : ''}\n    ${this.loading() ? 'ngx-button-loading ' : ''}\n    ${this.icon() ? `ngx-button-icon-${this.iconPosition()}` : ''}`;\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:80\n                        \n                    \n\n            \n                \n                    The classes of the button generated by its configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buttonType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('regular')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:110\n                        \n                    \n\n            \n                \n                    Whether the button is a regular, outline, text or fab button. By default, this is regular.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buttonWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('fit')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:125\n                        \n                    \n\n            \n                \n                    The width of the button, either full or fit. By default, this is fit.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxButtonConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxButtonConfigurationToken, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:61\n                        \n                    \n\n            \n                \n                    An optional set of configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('both')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:120\n                        \n                    \n\n            \n                \n                    Whether the button has to show only the icon, the text or both. By default, this is both.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tElementRef\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:44\n                        \n                    \n\n            \n                \n                    An instance of the elementRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:130\n                        \n                    \n\n            \n                \n                    An optional icon we wish to display alongside the button text\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        iconComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:73\n                        \n                    \n\n            \n                \n                    The icon component in case we did configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        iconElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:68\n                        \n                    \n\n            \n                \n                    The icon element in case we did not configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        iconPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input(\n\t\tthis.configuration?.iconPosition || 'left'\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:135\n                        \n                    \n\n            \n                \n                    The position of the icon when provided, by default this is Left unless overwritten in the configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:100\n                        \n                    \n\n            \n                \n                    Whether the button is currently loading\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        loadingComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadingData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:105\n                        \n                    \n\n            \n                \n                    Optional loading data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        nativeElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.elementRef.nativeElement\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:51\n                        \n                    \n\n            \n                \n                    An instance of the NativeElement\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('primary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:115\n                        \n                    \n\n            \n                \n                    Whether the button has primary, secondary, tertiary or danger priority. By default, this is primary.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:56\n                        \n                    \n\n            \n                \n                    An instance of the renderer\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:39\n                        \n                    \n\n            \n                \n                    An instance of the viewContainer\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tComponentRef,\n\tcomputed,\n\tDirective,\n\tElementRef,\n\tinject,\n\tinput,\n\tInputSignal,\n\tOnInit,\n\tRenderer2,\n\tSignal,\n\tViewContainerRef,\n} from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxButtonConfigurationToken } from '../../tokens';\nimport {\n\tNgxButtonConfiguration,\n\tNgxButtonDisplayType,\n\tNgxButtonIconPosition,\n\tNgxButtonPriority,\n\tNgxButtonType,\n\tNgxButtonWidth,\n} from '../../types';\n\n/**\n * A directive that adds the classic button states, priority, loading and icon handling\n */\n@Directive({\n\tselector: '[ngxButton]',\n\thost: {\n\t\t'[attr.class]': 'buttonClasses()',\n\t},\n})\nexport class NgxButtonDirective implements OnInit {\n\t/**\n\t * An instance of the viewContainer\n\t */\n\tprotected readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n\t/**\n\t * An instance of the elementRef\n\t */\n\tprotected readonly elementRef: ElementRef = inject(\n\t\tElementRef\n\t);\n\n\t/**\n\t * An instance of the NativeElement\n\t */\n\tprotected readonly nativeElement = this.elementRef.nativeElement;\n\n\t/**\n\t * An instance of the renderer\n\t */\n\tprotected readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * An optional set of configuration\n\t */\n\tprotected readonly configuration: NgxButtonConfiguration = inject(NgxButtonConfigurationToken, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t * The icon element in case we did not configure an icon component\n\t */\n\tprotected iconElement: HTMLElement;\n\n\t/**\n\t * The icon component in case we did configure an icon component\n\t */\n\tprotected iconComponent: ComponentRef;\n\n\tprotected loadingComponent: ComponentRef;\n\n\t/**\n\t * The classes of the button generated by its configuration\n\t */\n\tprotected buttonClasses: Signal = computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\t// Iben: Inserts the loading component when needed\n\t\tthis.handleLoading();\n\n\t\treturn `\n    ngx-button\n    ngx-button-${this.buttonType()}\n    ngx-button-${this.priority()}\n    ngx-button-${this.buttonWidth()}\n    ${this.display() !== 'both' ? `ngx-button-${this.display()}-only ` : ''}\n    ${this.loading() ? 'ngx-button-loading ' : ''}\n    ${this.icon() ? `ngx-button-icon-${this.iconPosition()}` : ''}`;\n\t});\n\n\t/**\n\t * Whether the button is currently loading\n\t */\n\tpublic loading: InputSignal = input(false);\n\n\t/**\n\t * Optional loading data\n\t */\n\tpublic loadingData: InputSignal = input();\n\n\t/**\n\t * Whether the button is a regular, outline, text or fab button. By default, this is regular.\n\t */\n\tpublic buttonType: InputSignal = input('regular');\n\n\t/**\n\t * Whether the button has primary, secondary, tertiary or danger priority. By default, this is primary.\n\t */\n\tpublic priority: InputSignal = input('primary');\n\n\t/**\n\t * Whether the button has to show only the icon, the text or both. By default, this is both.\n\t */\n\tpublic display: InputSignal = input('both');\n\n\t/**\n\t * The width of the button, either full or fit. By default, this is fit.\n\t */\n\tpublic buttonWidth: InputSignal = input('fit');\n\n\t/**\n\t * An optional icon we wish to display alongside the button text\n\t */\n\tpublic icon: InputSignal = input();\n\n\t/**\n\t * The position of the icon when provided, by default this is Left unless overwritten in the configuration\n\t */\n\tpublic iconPosition: InputSignal = input(\n\t\tthis.configuration?.iconPosition || 'left'\n\t);\n\n\tngOnInit() {\n\t\t// Iben: Wrap the base text in an element\n\t\tconst wrapperElement: HTMLSpanElement = this.renderer.createElement(\n\t\t\tthis.configuration?.labelWrapper || 'span'\n\t\t);\n\n\t\t// Iben: Append all the child nodes\n\t\tthis.nativeElement.childNodes.forEach((node) => {\n\t\t\tthis.renderer.appendChild(wrapperElement, node);\n\t\t});\n\n\t\tthis.renderer.setAttribute(wrapperElement, 'class', 'ngx-button-label');\n\n\t\t// Iben: Remove all the nodes\n\t\tthis.nativeElement.childNodes.forEach((node) => {\n\t\t\tthis.renderer.removeChild(wrapperElement, node);\n\t\t});\n\n\t\t// Iben: Remove the current innerHtml and replace it with a span element\n\t\tthis.renderer.appendChild(this.nativeElement, wrapperElement);\n\t}\n\n\t/**\n\t * Adds or removes the loading component\n\t */\n\tprivate handleLoading(): void {\n\t\t// Iben: If the loading state is on and a loading component is provided we add it\n\t\tif (this.loading() && this.configuration?.loading) {\n\t\t\t// Iben: Create the loading component and set its data\n\t\t\tthis.loadingComponent = this.viewContainer.createComponent(this.configuration.loading);\n\t\t\tthis.loadingComponent.setInput('data', this.loadingData());\n\n\t\t\t// Iben: Add the loading component to the button\n\t\t\tthis.renderer.appendChild(\n\t\t\t\tthis.nativeElement,\n\t\t\t\tthis.loadingComponent.instance.elementRef.nativeElement\n\t\t\t);\n\t\t} else {\n\t\t\t// Iben: If the loading has stopped and a loading component is present, remove it\n\t\t\tif (!this.loading() && this.loadingComponent) {\n\t\t\t\tthis.loadingComponent.destroy();\n\t\t\t\tthis.loadingComponent = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds or removes an icon\n\t */\n\tprivate handleIcon(): void {\n\t\t// Iben: Check if we need to add an icon\n\t\tif (this.icon()) {\n\t\t\t// Iben: Check if the button already has an icon, if not, add it\n\t\t\tif (!this.iconElement && !this.iconComponent) {\n\t\t\t\t// Iben: If no icon component exists, we create a regular i element\n\t\t\t\tif (!this.configuration?.icon) {\n\t\t\t\t\t// Iben: Create a new icon element\n\t\t\t\t\tthis.iconElement = this.renderer.createElement('i');\n\t\t\t\t\tthis.iconElement.className = `ngx-button-icon ${this.icon()}`;\n\t\t\t\t} else {\n\t\t\t\t\t// Iben: Create new component and add the icon\n\t\t\t\t\tthis.iconComponent =\n\t\t\t\t\t\tthis.viewContainer.createComponent(\n\t\t\t\t\t\t\tthis.configuration.icon,\n\t\t\t\t\t\t\t{ index: 0 }\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.iconComponent.setInput('data', this.icon());\n\t\t\t\t\tthis.renderer.addClass(\n\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t'ngx-button-icon'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Add the icon depending on whether we want to add it on the left or the right\n\t\t\t\tthis.iconPosition() === 'left'\n\t\t\t\t\t? this.renderer.insertBefore(\n\t\t\t\t\t\t\tthis.nativeElement,\n\t\t\t\t\t\t\tthis.iconElement ||\n\t\t\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t\tthis.nativeElement.firstChild\n\t\t\t\t\t  )\n\t\t\t\t\t: this.renderer.appendChild(\n\t\t\t\t\t\t\tthis.nativeElement,\n\t\t\t\t\t\t\tthis.iconElement || this.iconComponent.instance.elementRef.nativeElement\n\t\t\t\t\t  );\n\t\t\t}\n\t\t}\n\t\t// Iben: If an icon already exists and we no longer have an icon presented, we remove it\n\t\telse if (this.iconElement || this.iconComponent) {\n\t\t\tif (!this.configuration?.icon) {\n\t\t\t\tthis.renderer.removeChild(this.nativeElement, this.iconElement);\n\t\t\t\tthis.iconElement = undefined;\n\t\t\t} else {\n\t\t\t\tthis.iconComponent?.destroy();\n\t\t\t\tthis.iconComponent = undefined;\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxConfigurableLayoutItemComponent.html":{"url":"components/NgxConfigurableLayoutItemComponent.html","title":"component - NgxConfigurableLayoutItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxConfigurableLayoutItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        The layout item pairs with the  container.\nThis component will in itself not be rendered. The key provided in this component\nwill need to be provided in the [keys] input or the formControl of the layout container\nas well. The order in which they are provided there, will define the order in which\nthe items will be rendered.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-configurable-layout-item\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./configurable-layout-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                key\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                            \n                                    Public\n                                    Readonly\n                                template\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        key\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                            \n                        \n                \n                    \n                        The unique key of the layout item.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                            \n                        \n                \n                    \n                        An optional label for the layout item used for WCAG purposes.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        key\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                        \n                    \n\n            \n                \n                    The unique key of the layout item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                        \n                    \n\n            \n                \n                    An optional label for the layout item used for WCAG purposes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:29\n                        \n                    \n\n            \n                \n                    The template reference of the;\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, TemplateRef, input, viewChild } from '@angular/core';\n\n/**\n * The layout item pairs with the `` container.\n * This component will in itself not be rendered. The key provided in this component\n * will need to be provided in the `[keys]` input or the `formControl` of the layout container\n * as well. The order in which they are provided there, will define the order in which\n * the items will be rendered.\n */\n@Component({\n\tselector: 'ngx-configurable-layout-item',\n\ttemplateUrl: './configurable-layout-item.component.html',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemComponent {\n\t/**\n\t * The unique key of the layout item.\n\t */\n\tpublic readonly key = input.required();\n\n\t/**\n\t * An optional label for the layout item used for WCAG purposes.\n\t */\n\tpublic readonly label = input();\n\n\t/**\n\t * The template reference of the;\n\t */\n\tpublic readonly template = viewChild>('contentTmpl');\n}\n\n    \n\n    \n        \n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxConfigurableLayoutItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{"url":"interfaces/NgxConfigurableLayoutItemDropEvent.html","title":"interface - NgxConfigurableLayoutItemDropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemDropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentGrid\n                                        \n                                \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                        \n                                            eventType\n                                        \n                                \n                                \n                                        \n                                            showInactive\n                                        \n                                \n                                \n                                        \n                                            targetRowIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentGrid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentGrid:         NgxConfigurableLayoutGrid\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutGrid\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         NgxConfigurableLayoutItemEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutItemEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventType:     \"sorting\" | \"moving\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"sorting\" | \"moving\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInactive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showInactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetRowIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetRowIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemEntity.html":{"url":"interfaces/NgxConfigurableLayoutItemEntity.html","title":"interface - NgxConfigurableLayoutItemEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxConfigurableLayoutItemSizePipe.html":{"url":"pipes/NgxConfigurableLayoutItemSizePipe.html","title":"pipe - NgxConfigurableLayoutItemSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxConfigurableLayoutItemSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxConfigurableLayoutItemSize\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(undefined: literal type, itemSize: NgxConfigurableLayoutItemSizeOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts:17\n                        \n                    \n\n\n            \n                \n                        Returns the needed styling for the ngx-configurable-layout component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t}\n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                itemSize\n                                            \n                                                            NgxConfigurableLayoutItemSizeOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe itemSize used by the layout\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxConfigurableLayoutItemEntity, NgxConfigurableLayoutItemSizeOption } from '../../types';\n\n@Pipe({\n\tname: 'ngxConfigurableLayoutItemSize',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemSizePipe implements PipeTransform {\n\t/**\n\t * Returns the needed styling for the ngx-configurable-layout component\n\t *\n\t * @param keys - The keys used in the grid\n\t * @param showInactive - Whether we want to show inactive items\n\t * @param itemSize - The itemSize used by the layout\n\t */\n\ttransform(\n\t\t{\n\t\t\tkeys,\n\t\t\tshowInactive,\n\t\t}: { keys: NgxConfigurableLayoutItemEntity[][]; showInactive: boolean } = {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t},\n\t\titemSize: NgxConfigurableLayoutItemSizeOption\n\t): Record {\n\t\t// Iben: If non data source is provided or if the itemSize is 'fill',\n\t\t// we can use the default grid size which will result in filling up the available grid space.\n\t\tif (!keys || itemSize === 'fill') {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Iben: If itemSize is 'fit-content', the columns will be based on the content of the template\n\t\tif (itemSize === 'fit-content') {\n\t\t\treturn {\n\t\t\t\t'grid-auto-columns': 'max-content',\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If itemSize is 'equal', all items in the grid need to be of equal size.\n\t\t// For this, we grab the row with the largest amount of items, which will define the amount of columns\n\t\tconst longestRow = Math.max(\n\t\t\t...[...keys].map((item) => {\n\t\t\t\treturn item.filter((key) => {\n\t\t\t\t\tif (!showInactive) {\n\t\t\t\t\t\treturn key.isActive;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}).length;\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\t'grid-template-columns': `repeat(${longestRow}, minmax(0, 1fr))`,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookie.html":{"url":"interfaces/NgxCookie.html","title":"interface - NgxCookie","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            domain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresAfterDays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sameSite\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useLocalStorage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        domain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAfterDays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAfterDays:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sameSite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sameSite:     \"Lax\" | \"Strict\" | \"None\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Lax\" | \"Strict\" | \"None\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useLocalStorage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useLocalStorage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieChangedEvent.html":{"url":"interfaces/NgxCookieChangedEvent.html","title":"interface - NgxCookieChangedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieChangedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxCookieEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            changedCategories\n                                        \n                                \n                                \n                                        \n                                            changedServices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        changedCategories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedCategories:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        changedServices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedServices:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieConfiguration.html":{"url":"interfaces/NgxCookieConfiguration.html","title":"interface - NgxCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClearCookies\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            autoShow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cookie\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            guiOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideFromBots\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lazyHtmlGeneration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            manageScriptTags\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            root\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClearCookies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClearCookies:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoShow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoShow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:         NgxCookie\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxCookie\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guiOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        guiOptions:     GuiOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GuiOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideFromBots\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideFromBots:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lazyHtmlGeneration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lazyHtmlGeneration:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        manageScriptTags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        manageScriptTags:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"opt-in\" | \"opt-out\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"opt-in\" | \"opt-out\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        root\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        root:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieEvent.html":{"url":"interfaces/NgxCookieEvent.html","title":"interface - NgxCookieEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cookie\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:     CookieValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CookieValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieLanguageConfiguration.html":{"url":"interfaces/NgxCookieLanguageConfiguration.html","title":"interface - NgxCookieLanguageConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieLanguageConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoDetect\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rtl\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoDetect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoDetect:     \"document\" | \"browser\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"document\" | \"browser\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rtl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rtl:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxCookieService.html":{"url":"injectables/NgxCookieService.html","title":"injectable - NgxCookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxCookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/services/cookie/cookie.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                cookiesChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsentChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                firstCookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                firstCookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                modalVisible$\n                            \n                            \n                                    Private\n                                    Readonly\n                                modalVisibleSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                acceptCategory\n                            \n                            \n                                    Public\n                                acceptService\n                            \n                            \n                                    Public\n                                getCookie\n                            \n                            \n                                    Public\n                                getCookieObservable\n                            \n                            \n                                    Public\n                                hasAcceptedCategory\n                            \n                            \n                                    Public\n                                hasAcceptedService\n                            \n                            \n                                    Public\n                                removeCookie\n                            \n                            \n                                    Public\n                                setCookie\n                            \n                            \n                                    Public\n                                setupCookiesHandler\n                            \n                            \n                                    Public\n                                showModal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the categories\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptService\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookieObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookieObservable(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie as an observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Whether a certain category of cookies was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedService\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Whether a certain service within a category was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277\n                        \n                    \n\n\n            \n                \n                        Remove a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to remove\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCookie(cookie: NgxCookieValue)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256\n                        \n                    \n\n\n            \n                \n                        Set a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            NgxCookieValue\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setupCookiesHandler\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupCookiesHandler(categories: NgxCookieCategories, language: NgxCookieLanguageConfiguration, configuration?: NgxCookieConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Sets up the CookieConsent.\nFor more information of on this configuration, check the documentation\nhttps://cookieconsent.orestbida.com/essential/getting-started.html\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                categories\n                                            \n                                                            NgxCookieCategories\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe categories of cookies\n\n\n                                            \n                                        \n                                        \n                                                language\n                                            \n                                                            NgxCookieLanguageConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe language settings of the cookies\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxCookieConfiguration\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set configuration settings\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showModal\n                        \n                    \n                \n            \n            \n                \n                        \n                    showModal()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220\n                        \n                    \n\n\n            \n                \n                        Show the cookie modal\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86\n                        \n                    \n\n            \n                \n                    Emits every time the set cookies have been changed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject>\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53\n                        \n                    \n\n            \n                \n                    Subject to hold the cookiesChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsentChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75\n                        \n                    \n\n            \n                \n                    An event triggered when the user modifies their preferences and only if consent has already been provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41\n                        \n                    \n\n            \n                \n                    Subject to hold the consentChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69\n                        \n                    \n\n            \n                \n                    An event triggering the choice of consent on every page load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36\n                        \n                    \n\n            \n                \n                    Subject to hold the onConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        firstCookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.firstCookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63\n                        \n                    \n\n            \n                \n                    An event triggered only the very first time that the user expresses their choice of consent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        firstCookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31\n                        \n                    \n\n            \n                \n                    Subject to hold the onFirstConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        modalVisible$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.modalVisibleSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81\n                        \n                    \n\n            \n                \n                    Whether the cookies modal is currently visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        modalVisibleSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tfalse\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46\n                        \n                    \n\n            \n                \n                    Subject to hold the modalVisible event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58\n                        \n                    \n\n            \n                \n                    Instance of the window service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport {\n\tBehaviorSubject,\n\tObservable,\n\tSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tmap,\n\tstartWith,\n} from 'rxjs';\nimport * as CookieConsent from 'vanilla-cookieconsent';\n\nimport {\n\tNgxCookieCategories,\n\tNgxCookieChangedEvent,\n\tNgxCookieConfiguration,\n\tNgxCookieEvent,\n\tNgxCookieLanguageConfiguration,\n\tNgxCookieValue,\n} from '../../types';\n\n/**\n * A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxCookieService {\n\t/**\n\t * Subject to hold the onFirstConsent event\n\t */\n\tprivate readonly firstCookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the onConsent event\n\t */\n\tprivate readonly cookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the consentChanged event\n\t */\n\tprivate readonly cookiesConsentChangedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the modalVisible event\n\t */\n\tprivate readonly modalVisibleSubject: BehaviorSubject = new BehaviorSubject(\n\t\tfalse\n\t);\n\n\t/**\n\t * Subject to hold the cookiesChanged event\n\t */\n\tprivate readonly cookiesChangedSubject: Subject> = new Subject();\n\n\t/**\n\t * Instance of the window service\n\t */\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * An event triggered only the very first time that the user expresses their choice of consent\n\t */\n\tpublic readonly firstCookiesConsented$: Observable =\n\t\tthis.firstCookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggering the choice of consent on every page load.\n\t */\n\tpublic readonly cookiesConsented$: Observable =\n\t\tthis.cookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggered when the user modifies their preferences and only if consent has already been provided.\n\t */\n\tpublic readonly cookiesConsentChanged$: Observable =\n\t\tthis.cookiesConsentChangedSubject.asObservable();\n\n\t/**\n\t * Whether the cookies modal is currently visible\n\t */\n\tpublic readonly modalVisible$: Observable = this.modalVisibleSubject.asObservable();\n\n\t/**\n\t * Emits every time the set cookies have been changed\n\t */\n\tpublic readonly cookiesChanged$: Observable> =\n\t\tthis.cookiesChangedSubject.asObservable();\n\n\t/**\n\t * Sets up the CookieConsent.\n\t *\n\t * For more information of on this configuration, check the documentation\n\t * https://cookieconsent.orestbida.com/essential/getting-started.html\n\t *\n\t * @param categories - The categories of cookies\n\t * @param language - The language settings of the cookies\n\t * @param configuration - An optional set configuration settings\n\t */\n\tpublic setupCookiesHandler(\n\t\tcategories: NgxCookieCategories,\n\t\tlanguage: NgxCookieLanguageConfiguration,\n\t\tconfiguration?: NgxCookieConfiguration\n\t): void {\n\t\t// Iben: If we're not in the browser, we early exit, so server-side rendering can be enabled\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If no categories were provided, we early exit and throw an error, as the cookie preference cannot be shown without.\n\t\tif (!categories || Object.keys(categories).length === 0) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxCookies: No categories were provided for the cookie handler. At least one category is required.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Setup the onFirstConsent listener\n\t\tconst onFirstConsent = (event) => {\n\t\t\tthis.firstCookiesConsentedSubject.next(event);\n\t\t};\n\t\tonFirstConsent.bind(this);\n\n\t\t// Iben: Setup the onConsent listener\n\t\tconst onConsent = (event) => {\n\t\t\tthis.cookiesConsentedSubject.next(event);\n\t\t};\n\t\tonConsent.bind(this);\n\n\t\t// Iben: Setup the onChange listener\n\t\tconst onChange = (event) => {\n\t\t\tthis.cookiesConsentChangedSubject.next(event);\n\t\t};\n\t\tonChange.bind(this);\n\n\t\t// Iben: Setup the onModalShow listener\n\t\tconst onModalShow = () => {\n\t\t\tthis.modalVisibleSubject.next(true);\n\t\t};\n\t\tonModalShow.bind(this);\n\n\t\t// Iben: Setup the onModalHide listener\n\t\tconst onModalHide = () => {\n\t\t\tthis.modalVisibleSubject.next(false);\n\t\t};\n\t\tonModalHide.bind(this);\n\n\t\t// Iben: Run the CookieConsent handler\n\t\tCookieConsent.run({\n\t\t\t...(configuration || {}),\n\t\t\tonFirstConsent,\n\t\t\tonConsent,\n\t\t\tonChange,\n\t\t\tonModalHide,\n\t\t\tonModalShow,\n\t\t\tcategories,\n\t\t\tlanguage,\n\t\t});\n\t}\n\n\t/**\n\t * Whether a certain category of cookies was accepted\n\t *\n\t * @param name - The name of the category\n\t */\n\tpublic hasAcceptedCategory(name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the category was accepted\n\t\t\t\treturn CookieConsent.acceptedCategory(name);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param name - The name of the categories\n\t */\n\tpublic acceptCategory(name: string): void {\n\t\tCookieConsent.acceptCategory(name);\n\t}\n\n\t/**\n\t * Whether a certain service within a category was accepted\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic hasAcceptedService(category: string, name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the service within the provided category was accepted\n\t\t\t\treturn CookieConsent.acceptedService(name, category);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic acceptService(category: string, name: string): void {\n\t\tCookieConsent.acceptService(name, category);\n\t}\n\n\t/**\n\t * Show the cookie modal\n\t */\n\tpublic showModal(): void {\n\t\tCookieConsent.show(true);\n\t}\n\n\t/**\n\t * Get a cookie\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookie(cookie: string): DataType | undefined {\n\t\treturn (CookieConsent.getCookie('data') || {})[cookie];\n\t}\n\n\t/**\n\t * Get a cookie as an observable\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookieObservable(cookie: string): Observable {\n\t\t// Iben: Return every time the set cookies are changed\n\t\treturn this.cookiesChanged$.pipe(\n\t\t\tstartWith(CookieConsent.getCookie('data') || {}),\n\t\t\t// Iben: Get the cookie value\n\t\t\tmap(() => {\n\t\t\t\treturn this.getCookie(cookie);\n\t\t\t}),\n\t\t\t// Iben: As the cookiesChanged event emits every time all cookies are rest, we check if the cookie value was really changed\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Set a cookie\n\t *\n\t * @param cookie - The cookie we wish to set\n\t */\n\tpublic setCookie(cookie: NgxCookieValue): void {\n\t\t// Iben: Set the cookie\n\t\tconst isSet = CookieConsent.setCookieData({\n\t\t\tvalue: { [cookie.name]: cookie.value },\n\t\t\tmode: 'update',\n\t\t});\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n\n\t/**\n\t * Remove a cookie\n\t *\n\t * @param cookie - The cookie we wish to remove\n\t */\n\tpublic removeCookie(cookie: string): void {\n\t\t// Iben: Get the current cookies\n\t\tconst currentCookies = CookieConsent.getCookie('data') || {};\n\n\t\t// Iben: Remove the cookie from the currently set cookies\n\t\tconst { [cookie]: _removedValue, ...value } = currentCookies;\n\n\t\t// Iben: Remove the cookie from the cookies holder\n\t\tconst isSet = CookieConsent.setCookieData({ value, mode: 'overwrite' });\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieValue.html":{"url":"interfaces/NgxCookieValue.html","title":"interface - NgxCookieValue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/set-cookie.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxCookieValue {\n\tname: string;\n\tvalue: DataType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCookiesFallBackComponent.html":{"url":"directives/NgxCookiesFallBackComponent.html","title":"directive - NgxCookiesFallBackComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCookiesFallBackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cookies\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts:13\n                        \n                    \n\n            \n                \n                    The cookies that were required to show the original content\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n *An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n */\n@Directive()\nexport abstract class NgxCookiesFallBackComponent {\n\t/**\n\t * The cookies that were required to show the original content\n\t */\n\treadonly cookies = input([]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxCurrencyTableCellComponent.html":{"url":"components/NgxCurrencyTableCellComponent.html","title":"component - NgxCurrencyTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxCurrencyTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/currency-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxCurrencyTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-currency-cell\n            \n\n\n            \n                imports\n                \n                            CurrencyPipe\n                \n            \n\n\n\n            \n                template\n                \n\t{{ item | currency: currency() }}\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                currency\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-currency-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:49\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a currency cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:44\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('EUR')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/currency-cell.component.ts:25\n                        \n                    \n\n            \n                \n                    The ISO 4217 format of the provided amount, by default EUR\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:38\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:32\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CurrencyPipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-currency-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxCurrencyTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t{{ item | currency: currency() }}\n\t\t\n\t`,\n\timports: [CurrencyPipe],\n})\nexport class NgxCurrencyTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format of the provided amount, by default `EUR`\n\t */\n\tpublic readonly currency = input('EUR');\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true }) public override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a currency cell\n\t */\n\tpublic override cellClass: string = 'ngx-currency-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t{{ item | currency: currency() }}\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxCurrencyTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCypressTagDirective.html":{"url":"directives/NgxCypressTagDirective.html","title":"directive - NgxCypressTagDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCypressTagDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [cypressTag]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cypressTag\n                            \n                            \n                                    Public\n                                tag\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                cypressTag\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        cypressTag\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                            \n                        \n                \n                    \n                        Sets the tag for Cypress\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cypressTag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                        \n                    \n\n            \n                \n                    Sets the tag for Cypress\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tcomputed,\n\tDirective,\n\tinput,\n\tInputSignal,\n\tSignal,\n} from '@angular/core';\nimport { get } from 'lodash';\n\n@Directive({\n\tselector: '[cypressTag]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.data-cy]': 'tag()',\n\t},\n})\nexport class NgxCypressTagDirective {\n\tpublic tag: Signal = computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t});\n\n\t/**\n\t * Sets the tag for Cypress\n\t */\n\tpublic cypressTag: InputSignal = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxDateTableCellComponent.html":{"url":"components/NgxDateTableCellComponent.html","title":"component - NgxDateTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxDateTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/date-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxDateTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-date-cell\n            \n\n\n            \n                imports\n                \n                            DatePipe\n                                NgxTableGetPipe\n                \n            \n\n\n\n            \n                template\n                \n\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\n\t\t{{ rowItem | date : format() }}\n\t\n\t} @else {\n\t{{ emptyLabel() }}\n\t} } @else { @if (item) {\n\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t} @else {\n\t{{ emptyLabel() }}\n\t} }\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                emptyLabel\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                format\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                itemKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                rowKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                itemKey\n                            \n                            \n                                rowKey\n                            \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        itemKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                            \n                        \n                \n                    \n                        In case the date is nested in an object, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rowKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                            \n                        \n                \n                    \n                        In case the date is nested in the row, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-date-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:77\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a date cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:72\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        emptyLabel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('Empty date')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:42\n                        \n                    \n\n            \n                \n                    The label to display when date is invalid or empty\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:65\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('dd/MM/yyyy')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:37\n                        \n                    \n\n            \n                \n                    The format of the provided date, by default dd/MM/yyyy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:59\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        itemKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                        \n                    \n\n            \n                \n                    In case the date is nested in an object, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        rowKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                        \n                    \n\n            \n                \n                    In case the date is nested in the row, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { DatePipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxTableGetPipe } from '../../pipes/get-pipe/get.pipe';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-date-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxDateTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\t\t\n\t\t\t\t{{ rowItem | date : format() }}\n\t\t\t\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} } @else { @if (item) {\n\t\t\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} }\n\t\t\n\t`,\n\timports: [DatePipe, NgxTableGetPipe],\n})\nexport class NgxDateTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The format of the provided date, by default `dd/MM/yyyy`\n\t */\n\tpublic readonly format = input('dd/MM/yyyy');\n\n\t/**\n\t * The label to display when date is invalid or empty\n\t */\n\tpublic readonly emptyLabel = input('Empty date');\n\n\t/**\n\t * In case the date is nested in an object, we can provide a key to fetch it\n\t */\n\tpublic readonly itemKey = input();\n\n\t/**\n\t * In case the date is nested in the row, we can provide a key to fetch it\n\t */\n\tpublic readonly rowKey = input();\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a date cell\n\t */\n\tpublic override cellClass: string = 'ngx-date-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\t\t\t{{ rowItem | date : format() }}\t\t} @else {\t{{ emptyLabel() }}\t} } @else { @if (item) {\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\t} @else {\t{{ emptyLabel() }}\t} }\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxDateTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentComponent.html":{"url":"directives/NgxDisplayContentComponent.html","title":"directive - NgxDisplayContentComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:13\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:13\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, inject, input } from '@angular/core';\n\n/**\n * An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n */\n@Directive()\nexport abstract class NgxDisplayContentComponent {\n\tpublic elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t * An optional data input to provide data to the fallback components. This property is typed as any.\n\t */\n\treadonly data = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxDisplayContentConfiguration.html":{"url":"interfaces/NgxDisplayContentConfiguration.html","title":"interface - NgxDisplayContentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxDisplayContentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/display-content.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideWhenNoTemplateProvided\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            listenToOnlineStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:         NgxDisplayContentComponentConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxDisplayContentComponentConfiguration\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideWhenNoTemplateProvided\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideWhenNoTemplateProvided:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        listenToOnlineStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        listenToOnlineStatus:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateRef, Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\nexport type NgxDisplayContentStatus = 'loading' | 'error' | 'offline';\n\nexport type NgxDisplayContentAriaLive = 'polite' | 'assertive' | 'off';\n\ntype NgxDisplayContentRecord = Partial>;\n\nexport type NgxDisplayContentConditions = NgxDisplayContentRecord;\n\nexport type NgxDisplayContentComponentConfiguration = NgxDisplayContentRecord\n>;\n\nexport type NgxDisplayContentOverrideConfiguration = NgxDisplayContentRecord;\n\tdata?: any;\n}>;\n\nexport interface NgxDisplayContentConfiguration {\n\tcomponents: NgxDisplayContentComponentConfiguration;\n\thideWhenNoTemplateProvided?: boolean;\n\tlistenToOnlineStatus?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentDirective.html":{"url":"directives/NgxDisplayContentDirective.html","title":"directive - NgxDisplayContentDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [displayContent]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                conditions\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                displayContent\n                            \n                            \n                                    Readonly\n                                displayContentAriaLive\n                            \n                            \n                                    Public\n                                displayContentConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineService\n                            \n                            \n                                    Private\n                                overrideConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                updateViewSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderInitialTemplate\n                            \n                            \n                                    Private\n                                renderTemplate\n                            \n                            \n                                    Private\n                                setAriaBusyTag\n                            \n                            \n                                    Private\n                                setAriaLiveTag\n                            \n                            \n                                    Private\n                                updateConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                displayContent\n                            \n                            \n                                displayContentConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        displayContent\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                            \n                        \n                \n                    \n                        Renders the item or a default fallback based on the provided conditions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        displayContentConfiguration\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                            \n                        \n                \n                    \n                        Override the existing configuration with custom configuration\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:168\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderInitialTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderInitialTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:214\n                        \n                    \n\n\n            \n                \n                        Renders the initial template\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderTemplate(status: NgxDisplayContentStatus, component: Type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:179\n                        \n                    \n\n\n            \n                \n                        Renders the provided component or template\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            NgxDisplayContentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status we're handling\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we're wishing to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaBusyTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaBusyTag(isLoading: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:277\n                        \n                    \n\n\n            \n                \n                        Sets the aria-busy tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isLoading\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of the item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaLiveTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaLiveTag(value: \"polite\" | \"assertive\" | \"off\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:237\n                        \n                    \n\n\n            \n                \n                        Sets the aria-live tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        \"polite\" | \"assertive\" | \"off\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateConditions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateConditions(conditions: NgxDisplayContentConditions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:223\n                        \n                    \n\n\n            \n                \n                        Updates the conditions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                conditions\n                                            \n                                                            NgxDisplayContentConditions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe conditions we want to merge with the current set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        conditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentConditions\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:63\n                        \n                    \n\n            \n                \n                    Holds the conditions we use to render the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxDisplayContentConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                        \n                    \n\n            \n                \n                    Renders the item or a default fallback based on the provided conditions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        displayContentAriaLive\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('polite')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                        \n                    \n\n            \n                \n                    The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContentConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                        \n                    \n\n            \n                \n                    Override the existing configuration with custom configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:48\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxOnlineService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overrideConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentOverrideConfiguration\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:58\n                        \n                    \n\n            \n                \n                    Holds an optional override configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        updateViewSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:53\n                        \n                    \n\n            \n                \n                    A subject to know when we need to update the view\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tDirective,\n\tElementRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, distinctUntilChanged, takeUntil, tap } from 'rxjs';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxOnlineService } from '../../services';\nimport { NgxDisplayContentConfigurationToken } from '../../tokens';\nimport {\n\tNgxDisplayContentAriaLive,\n\tNgxDisplayContentConditions,\n\tNgxDisplayContentConfiguration,\n\tNgxDisplayContentOverrideConfiguration,\n\tNgxDisplayContentStatus,\n} from '../../types';\n\n/**\n * NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n */\n@Directive({\n\tselector: '[displayContent]',\n\tstandalone: true,\n})\nexport class NgxDisplayContentDirective implements AfterViewInit, OnDestroy {\n\tprivate readonly elementRef = inject(ElementRef);\n\tprivate readonly templateRef = inject>(TemplateRef);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\tprivate readonly viewContainer = inject(ViewContainerRef);\n\tprivate readonly onlineService = inject(NgxOnlineService);\n\tprivate readonly configuration = inject(\n\t\tNgxDisplayContentConfigurationToken\n\t);\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * A subject to know when we need to update the view\n\t */\n\tprivate readonly updateViewSubject: Subject = new Subject();\n\n\t/**\n\t * Holds an optional override configuration\n\t */\n\tprivate overrideConfiguration: NgxDisplayContentOverrideConfiguration = {};\n\n\t/**\n\t * Holds the conditions we use to render the component\n\t */\n\tprivate conditions: NgxDisplayContentConditions = {};\n\n\t/**\n\t * Renders the item or a default fallback based on the provided conditions\n\t */\n\tpublic displayContent: InputSignal = input.required();\n\n\t/**\n\t * Override the existing configuration with custom configuration\n\t */\n\tpublic displayContentConfiguration: InputSignal =\n\t\tinput();\n\n\t/**\n\t * The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\n\t *\n\t * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\t */\n\treadonly displayContentAriaLive = input('polite');\n\n\tconstructor() {\n\t\t// Iben: If we want to listen to the online status, we set up a listener to the status of the application\n\t\tif (this.configuration.listenToOnlineStatus) {\n\t\t\tthis.onlineService.online$\n\t\t\t\t.pipe(\n\t\t\t\t\tdistinctUntilChanged(),\n\t\t\t\t\ttap((online) => {\n\t\t\t\t\t\t// Iben: Update the conditions with the new status\n\t\t\t\t\t\tthis.updateConditions({ offline: !online });\n\n\t\t\t\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\t\t\t\tthis.updateViewSubject.next();\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject)\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the conditions\n\t\t\tthis.updateConditions(this.displayContent() || {});\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the override configuration\n\t\t\tthis.overrideConfiguration = this.displayContentConfiguration() || {};\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Set the aria-live and aria-busy tag of the parent\n\t\tthis.setAriaLiveTag(this.displayContentAriaLive());\n\n\t\t// Iben: Listen to whenever we need to update the view and act accordingly\n\t\tthis.updateViewSubject\n\t\t\t.asObservable()\n\t\t\t.pipe(\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Clear the current view container\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Update the busy tag\n\t\t\t\t\tthis.setAriaBusyTag(this.conditions.loading);\n\n\t\t\t\t\t// Iben: If we're offline, we render the offline component or template\n\t\t\t\t\tif (this.conditions.offline) {\n\t\t\t\t\t\tthis.renderTemplate('offline', this.configuration.components.offline);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we're loading, we render the loading component or template\n\t\t\t\t\tif (this.conditions.loading) {\n\t\t\t\t\t\tthis.renderTemplate('loading', this.configuration.components.loading);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we've encountered an error, we render the error component or template\n\t\t\t\t\tif (this.conditions.error) {\n\t\t\t\t\t\tthis.renderTemplate('error', this.configuration.components.error);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: Render the initial template\n\t\t\t\t\tthis.renderInitialTemplate();\n\t\t\t\t}),\n\t\t\t\t// Iben: We add a second tap here, so the detectChanges gets run after each outcome we did earlier\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush component\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Run the initial content check\n\t\tthis.updateViewSubject.next();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n\n\t/**\n\t * Renders the provided component or template\n\t *\n\t * @param  status - The status we're handling\n\t * @param  component - The component we're wishing to render\n\t */\n\tprivate renderTemplate(\n\t\tstatus: NgxDisplayContentStatus,\n\t\tcomponent: Type\n\t): void {\n\t\t// Iben: If an override for this template exists, we render the override template and early exit\n\t\tif (this.overrideConfiguration[status]?.template) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.overrideConfiguration[status]?.template);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided, we render this component and pass along the provided data and early exit\n\t\tif (component) {\n\t\t\t// Iben: Render the component\n\t\t\tconst componentRef =\n\t\t\t\tthis.viewContainer.createComponent(component);\n\n\t\t\t// Iben: Pass the data\n\t\t\tcomponentRef.setInput('data', this.overrideConfiguration[status]?.data);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If we need to hide the template when no template was provided, we early exit\n\t\tif (this.configuration.hideWhenNoTemplateProvided) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case we don't need to hide the initial template, we render it\n\t\tthis.renderInitialTemplate();\n\t}\n\n\t/**\n\t * Renders the initial template\n\t */\n\tprivate renderInitialTemplate(): void {\n\t\tthis.viewContainer.createEmbeddedView(this.templateRef);\n\t}\n\n\t/**\n\t * Updates the conditions\n\t *\n\t * @param conditions - The conditions we want to merge with the current set\n\t */\n\tprivate updateConditions(conditions: NgxDisplayContentConditions): void {\n\t\t// Iben: Update the conditions, but use a merge so that the online status can be preserved\n\t\tif (conditions) {\n\t\t\tthis.conditions = {\n\t\t\t\t...this.conditions,\n\t\t\t\t...conditions,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Sets the aria-live tag of the item\n\t * @param  value - The value we wish to set\n\t */\n\tprivate setAriaLiveTag(value: 'polite' | 'assertive' | 'off'): void {\n\t\t// Iben: Get the parent element and early exit if it isn't found\n\t\tconst parentElement: HTMLElement = this.elementRef.nativeElement.parentElement;\n\n\t\tif (!parentElement) {\n\t\t\t// Iben:\n\t\t\tconsole.error(\n\t\t\t\t'NgxLayout: No parent element was found for NgxDisplayContentDirective. Because of that, the correct aria-live label could not be set.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the value is assertive then we always set it, as it has the highest priority\n\t\tif (value === 'assertive') {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Fetch the current aria-live label. If none were found, set it automatically\n\t\tconst currentValue = parentElement.getAttribute('aria-live');\n\n\t\tif (!currentValue) {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\t\t}\n\n\t\t// Iben: If the current value is assertive or if the values are the same, we early exit\n\t\tif (currentValue === 'assertive' || currentValue === value) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Set the value\n\t\tparentElement.setAttribute('aria-live', value);\n\t}\n\n\t/**\n\t * Sets the aria-busy tag of the item\n\t * @param  isLoading - The loading state of the item\n\t */\n\tprivate setAriaBusyTag(isLoading: boolean): void {\n\t\tthis.elementRef.nativeElement.parentElement?.setAttribute('aria-busy', `${isLoading}`);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorAbstractComponent.html":{"url":"directives/NgxFormsErrorAbstractComponent.html","title":"directive - NgxFormsErrorAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                errorKeys\n                            \n                            \n                                    Public\n                                    Readonly\n                                errors\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                            \n                        \n                \n                    \n                        The error object provided by the control\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                        \n                    \n\n            \n                \n                    The error object provided by the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errorKeys\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13\n                        \n                    \n\n            \n                \n                    An array of error keys that can be rendered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9\n                        \n                    \n\n            \n                \n                    An array of error messages that can be rendered\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\n@Directive()\nexport class NgxFormsErrorAbstractComponent {\n\t/**\n\t * An array of error messages that can be rendered\n\t */\n\tpublic readonly errors = input.required();\n\t/**\n\t * An array of error keys that can be rendered\n\t */\n\tpublic readonly errorKeys = input.required();\n\t/**\n\t * The error object provided by the control\n\t */\n\tpublic readonly data = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxFormsErrorConfigurationOptions.html":{"url":"interfaces/NgxFormsErrorConfigurationOptions.html","title":"interface - NgxFormsErrorConfigurationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxFormsErrorConfigurationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/errors.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the ngx-errors directive\n errors - A record with the error key and the corresponding message we wish to show\n showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n component - An optional component to provide, which will be used to render the error. If not provided,\n                it will render a p-tag with class ngx-forms-error\n show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            errors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            show\n                                        \n                                \n                                \n                                        \n                                            showWhen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        show\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        show:         NgxFormsErrorShowSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowSettings\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showWhen:         NgxFormsErrorShowWhenSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowWhenSettings\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxFormsErrorAbstractComponent } from '../abstracts';\n\nexport type NgxFormsErrorShowWhenSettings = 'touched' | 'dirty';\nexport type NgxFormsErrorShowSettings = 'all' | number;\n\n/**\n * Configuration for the ngx-errors directive\n *\n *  errors - A record with the error key and the corresponding message we wish to show\n *  showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n *  component - An optional component to provide, which will be used to render the error. If not provided,\n * \t\t\t\tit will render a p-tag with class `ngx-forms-error`\n *  show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n */\nexport interface NgxFormsErrorConfigurationOptions {\n\terrors: Record;\n\tshowWhen: NgxFormsErrorShowWhenSettings;\n\tcomponent?: Type;\n\tshow?: NgxFormsErrorShowSettings;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorsDirective.html":{"url":"directives/NgxFormsErrorsDirective.html","title":"directive - NgxFormsErrorsDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorsDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/directives/errors/errors.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFormsErrors]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                abstractControl\n                            \n                            \n                                    Protected\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Public\n                                    Readonly\n                                control\n                            \n                            \n                                    Protected\n                                    Readonly\n                                destroyRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                errorComponent\n                            \n                            \n                                    Private\n                                errorsElement\n                            \n                            \n                                    Protected\n                                    Readonly\n                                formGroupDirective\n                            \n                            \n                                    Protected\n                                    Readonly\n                                formNameDirective\n                            \n                            \n                                    Protected\n                                hasErrors\n                            \n                            \n                                    Protected\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Private\n                                template\n                            \n                            \n                                    Protected\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrors\n                            \n                            \n                                    Private\n                                handleComponentRender\n                            \n                            \n                                    Private\n                                handleNoComponentFlow\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:122\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrors(data: ValidationErrors)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:280\n                        \n                    \n\n\n            \n                \n                        Returns the errors based on the provided settings\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        ValidationErrors\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error data we wish to use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleComponentRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleComponentRender(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:206\n                        \n                    \n\n\n            \n                \n                        Renders a provided custom component underneath the input component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleNoComponentFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoComponentFlow(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:243\n                        \n                    \n\n\n            \n                \n                        Renders a p tag underneath the input component when no custom component was provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:129\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        abstractControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbstractControl\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:100\n                        \n                    \n\n            \n                \n                    The AbstractControl we wish to listen to when using the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80\n                        \n                    \n\n            \n                \n                     An instance of the ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:115\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to add error data to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorConfigurationOptions\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:52\n                        \n                    \n\n            \n                \n                     The optional global configuration used form the NgxFormsError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, {\n\t\talias: 'ngxFormsErrors',\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:120\n                        \n                    \n\n            \n                \n                    A reference to a control or a string reference to the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DestroyRef\n\n                    \n                \n                \n                    \n                        Default value : inject(DestroyRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:85\n                        \n                    \n\n            \n                \n                     An instance of the DestroyRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65\n                        \n                    \n\n            \n                \n                     An instance of the ElementRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorAbstractComponent\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:110\n                        \n                    \n\n            \n                \n                    The component to which the error data is added\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorsElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:105\n                        \n                    \n\n            \n                \n                    The p element we add to the dom when no component is provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        formGroupDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupDirective, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:40\n                        \n                    \n\n            \n                \n                     An optional instance of the FormGroup directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        formNameDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupName\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupName, { optional: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:47\n                        \n                    \n\n            \n                \n                     An optional instance of the FormGroupName directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:90\n                        \n                    \n\n            \n                \n                     Whether the control has errors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70\n                        \n                    \n\n            \n                \n                     An instance of Renderer2\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:95\n                        \n                    \n\n            \n                \n                     The actual template of the input element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75\n                        \n                    \n\n            \n                \n                     An instance of the TemplateRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60\n                        \n                    \n\n            \n                \n                     An instance of the ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tComponentRef,\n\tDirective,\n\tElementRef,\n\tinject,\n\tRenderer2,\n\tTemplateRef,\n\tViewContainerRef,\n\tinput,\n\tDestroyRef,\n\tWritableSignal,\n\tsignal,\n\tcomputed,\n\tSignal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n\tAbstractControl,\n\tFormGroupDirective,\n\tFormGroupName,\n\tValidationErrors,\n} from '@angular/forms';\nimport { combineLatest, startWith, tap } from 'rxjs';\n\nimport { NgxFormsErrorAbstractComponent } from '../../abstracts';\nimport { NgxFormsErrorConfigurationOptions } from '../../interfaces';\nimport { NgxFormsErrorsConfigurationToken } from '../../tokens';\nimport { touchedEventListener } from '../../utils';\n\n@Directive({\n\tselector: '[ngxFormsErrors]',\n\tstandalone: true,\n})\nexport class NgxFormsErrorsDirective implements AfterViewInit {\n\t/**\n\t *  An optional instance of the FormGroup directive\n\t */\n\tprotected readonly formGroupDirective: FormGroupDirective = inject(FormGroupDirective, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t *  An optional instance of the FormGroupName directive\n\t */\n\tprotected readonly formNameDirective: FormGroupName = inject(FormGroupName, { optional: true });\n\n\t/**\n\t *  The optional global configuration used form the NgxFormsError\n\t */\n\tprivate readonly config: NgxFormsErrorConfigurationOptions = inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t *  An instance of the ViewContainerRef\n\t */\n\tprotected readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n\t/**\n\t *  An instance of the ElementRef\n\t */\n\tprotected readonly elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t *  An instance of Renderer2\n\t */\n\tprotected readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t *  An instance of the TemplateRef\n\t */\n\tprotected readonly templateRef: TemplateRef = inject(TemplateRef);\n\n\t/**\n\t *  An instance of the ChangeDetectorRef\n\t */\n\tprotected readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n\t/**\n\t *  An instance of the DestroyRef\n\t */\n\tprotected readonly destroyRef: DestroyRef = inject(DestroyRef);\n\n\t/**\n\t *  Whether the control has errors\n\t */\n\tprotected hasErrors: WritableSignal = signal(false);\n\n\t/**\n\t *  The actual template of the input element\n\t */\n\tprivate template: TemplateRef;\n\n\t/**\n\t * The AbstractControl we wish to listen to when using the directive\n\t */\n\tprivate abstractControl: AbstractControl;\n\n\t/**\n\t * The p element we add to the dom when no component is provided\n\t */\n\tprivate errorsElement: any;\n\n\t/**\n\t * The component to which the error data is added\n\t */\n\tprivate errorComponent: NgxFormsErrorAbstractComponent;\n\n\t/**\n\t * The ref of the component we wish to add error data to\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * A reference to a control or a string reference to the control\n\t */\n\tpublic readonly control = input(undefined, {\n\t\talias: 'ngxFormsErrors',\n\t});\n\n\tconstructor() {\n\t\t// Iben: Set the current template ref at constructor time so we actually have the provided template (as done in the *ngIf directive)\n\t\tthis.template = this.templateRef;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Render the actual input so that it is always visible\n\t\tthis.viewContainer.clear();\n\t\tthis.viewContainer.createEmbeddedView(this.template);\n\n\t\t// Iben: If no control was provided, we early exit and log an error\n\t\tconst control = this.control();\n\t\tif (!control) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the control is a string, we check the parent to find the actual control.\n\t\t// If not, we use the provided control\n\t\tif (typeof control === 'string') {\n\t\t\tthis.abstractControl = this.formGroupDirective\n\t\t\t\t? this.formGroupDirective.form.get(control)\n\t\t\t\t: this.formNameDirective?.control.get(control);\n\t\t} else {\n\t\t\tthis.abstractControl = control;\n\t\t}\n\n\t\t// Iben: If no control was found, we early exit and log an error\n\t\tif (!this.abstractControl) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Listen to the value changes, status changes and the touched changes of the control\n\t\tcombineLatest([\n\t\t\tthis.abstractControl.valueChanges.pipe(startWith(this.abstractControl.value)),\n\t\t\ttouchedEventListener(this.abstractControl),\n\t\t\tthis.abstractControl.statusChanges.pipe(startWith(this.abstractControl.status)),\n\t\t])\n\t\t\t.pipe(\n\t\t\t\ttap(([, touched]) => {\n\t\t\t\t\t// Iben: Check whether we should show the error based on the provided config\n\t\t\t\t\tthis.hasErrors.set(\n\t\t\t\t\t\tthis.abstractControl.invalid &&\n\t\t\t\t\t\t\t(this.config.showWhen === 'touched'\n\t\t\t\t\t\t\t\t? touched\n\t\t\t\t\t\t\t\t: this.abstractControl.dirty)\n\t\t\t\t\t);\n\n\t\t\t\t\t// Iben: Set the errors class if needed\n\t\t\t\t\tthis.hasErrors()\n\t\t\t\t\t\t? this.renderer.addClass(\n\t\t\t\t\t\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement),\n\t\t\t\t\t\t\t\t'ngx-forms-errors-invalid'\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: this.renderer.removeClass(\n\t\t\t\t\t\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement),\n\t\t\t\t\t\t\t\t'ngx-forms-errors-invalid'\n\t\t\t\t\t\t  );\n\n\t\t\t\t\t// Iben: Show the error based on whether or not a component was provided\n\t\t\t\t\tif (!this.config.component) {\n\t\t\t\t\t\tthis.handleNoComponentFlow(this.hasErrors());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.handleComponentRender(this.hasErrors());\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush components\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed(this.destroyRef)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Renders a provided custom component underneath the input component\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleComponentRender(shouldShow: boolean) {\n\t\t// Iben: If the error should not be shown, we check if there's already an error component and destroy it if needed\n\t\tif (!shouldShow) {\n\t\t\tif (this.errorComponent) {\n\t\t\t\tthis.componentRef.destroy();\n\t\t\t\tthis.componentRef = undefined;\n\t\t\t\tthis.errorComponent = undefined;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\tif (this.componentRef) {\n\t\t\tthis.componentRef.destroy();\n\t\t\tthis.componentRef = undefined;\n\t\t}\n\n\t\t// Iben: Add the new component to the view\n\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\tthis.config.component\n\t\t);\n\t\tthis.errorComponent = this.componentRef.instance;\n\n\t\t// Iben: Set the data of the error component\n\t\tconst { errors, errorKeys, data } = this.getErrors(this.abstractControl.errors);\n\n\t\tthis.componentRef.setInput('errors', errors);\n\t\tthis.componentRef.setInput('errorKeys', errorKeys);\n\t\tthis.componentRef.setInput('data', data);\n\t}\n\n\t/**\n\t * Renders a p tag underneath the input component when no custom component was provided\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleNoComponentFlow(shouldShow: boolean) {\n\t\t// Iben: We remove the current errors so that we always have a new element to work with\n\t\tif (this.errorsElement) {\n\t\t\tthis.renderer.removeChild(this.elementRef.nativeElement.parentNode, this.errorsElement);\n\n\t\t\tthis.errorsElement = null;\n\t\t}\n\n\t\t// Iben: Early exit in case there's no error to show\n\t\tif (!shouldShow) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Create a new error paragraph\n\t\tthis.errorsElement = this.renderer.createElement('p');\n\t\tthis.renderer.setAttribute(this.errorsElement, 'class', 'ngx-forms-error');\n\n\t\t// Iben: Set the errors based on the keys\n\t\tthis.renderer.setProperty(\n\t\t\tthis.errorsElement,\n\t\t\t'innerHTML',\n\t\t\tthis.getErrors(this.abstractControl.errors).errors.join(', ')\n\t\t);\n\n\t\t// Iben: insert the paragraph underneath the input component\n\t\tthis.renderer.insertBefore(\n\t\t\tthis.elementRef.nativeElement.parentNode,\n\t\t\tthis.errorsElement,\n\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the errors based on the provided settings\n\t *\n\t * @param data - The error data we wish to use\n\t */\n\tprivate getErrors(data: ValidationErrors): {\n\t\terrors: string[];\n\t\tdata: ValidationErrors;\n\t\terrorKeys: string[];\n\t} {\n\t\t// Iben: Early exit in case the errors object is null\n\t\tif (!data) {\n\t\t\treturn {\n\t\t\t\terrors: [],\n\t\t\t\tdata: null,\n\t\t\t\terrorKeys: [],\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If the config is set to all, we always show all errors\n\t\tif (this.config.show === 'all') {\n\t\t\treturn {\n\t\t\t\terrors: Object.keys(data).map((key) => this.config.errors[key]),\n\t\t\t\terrorKeys: Object.keys(data),\n\t\t\t\tdata,\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If no limit is provided, we default to a single error\n\t\tconst limit = this.config.show === undefined ? 1 : this.config.show;\n\n\t\t// Iben: Slice the errors based on the provided limit\n\t\treturn {\n\t\t\terrors: Object.keys(data)\n\t\t\t\t.map((key) => this.config.errors[key])\n\t\t\t\t.slice(0, limit),\n\t\t\terrorKeys: Object.keys(data).slice(0, limit),\n\t\t\tdata,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxHasCookieConfiguration.html":{"url":"interfaces/NgxHasCookieConfiguration.html","title":"interface - NgxHasCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxHasCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/has-cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            services\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxHasCookieConfiguration {\n\tcategory: string;\n\tservices?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasCookieDirective.html":{"url":"directives/NgxHasCookieDirective.html","title":"directive - NgxHasCookieDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasCookieDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hasCookie]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                component\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                cookies\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Public\n                                hasCookie\n                            \n                            \n                                    Public\n                                hasCookieElse\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxCookieService\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderElseTemplate\n                            \n                            \n                                    Private\n                                renderThenTemplate\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hasCookie\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hasCookie\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                            \n                        \n                \n                    \n                        A cookie or list of cookies the item should have\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:148\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:89\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderElseTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderElseTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:168\n                        \n                    \n\n\n            \n                \n                        Render the fallbackTemplate or fallBackComponent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderThenTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderThenTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:158\n                        \n                    \n\n\n            \n                \n                        Render the template on which the directive is set\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:96\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        component\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:54\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to render as a fallback\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxHasCookieConfiguration[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:59\n                        \n                    \n\n            \n                \n                    The list of cookies we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:34\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookie\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                        \n                    \n\n            \n                \n                    A cookie or list of cookies the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookieElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                        \n                    \n\n            \n                \n                    The else template in case the cookie is not accepted\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxCookieService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxCookieService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxCookieService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:48\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tComponentRef,\n\tDirective,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\tOnDestroy,\n\tinject,\n\teffect,\n\tinput,\n\tInputSignal,\n} from '@angular/core';\nimport { flatten } from 'lodash';\nimport { Subject, tap, takeUntil, combineLatest, map } from 'rxjs';\n\nimport { NgxCookiesFallBackComponent } from '../../abstracts';\nimport { NgxCookieService } from '../../services';\nimport { NgxCookiesFallbackComponentToken } from '../../tokens';\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n * A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n */\n@Directive({\n\tselector: '[hasCookie]',\n\tstandalone: true,\n})\nexport class NgxHasCookieDirective implements OnDestroy {\n\t//TODO: Iben: Replace this with the OnDestroyComponent flow once we have a shared lib\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\tprivate readonly templateRef: TemplateRef = inject(TemplateRef);\n\tprivate viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\tprivate readonly ngxCookieService: NgxCookieService = inject(NgxCookieService);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly component: Type = inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\n\t/**\n\t * The ref of the component we wish to render as a fallback\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * The list of cookies we need to check\n\t */\n\tprivate cookies: NgxHasCookieConfiguration[] = [];\n\n\t/**\n\t * A cookie or list of cookies the item should have\n\t */\n\tpublic hasCookie: InputSignal =\n\t\tinput.required();\n\n\t/**\n\t * The else template in case the cookie is not accepted\n\t */\n\tpublic hasCookieElse: InputSignal> = input>();\n\n\tconstructor() {\n\t\tthis.thenTemplateRef = this.templateRef;\n\n\t\teffect(() => {\n\t\t\tconst value = this.hasCookie();\n\t\t\tthis.cookies = Array.isArray(value) ? value : [value];\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tif (this.hasCookieElse()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tcombineLatest(\n\t\t\t// Iben Check for each cookie if it is accepted\n\t\t\tthis.cookies.map((cookie) => {\n\t\t\t\t// Iben: If no specific services were provided, we can just check the category\n\t\t\t\tif (!cookie.services) {\n\t\t\t\t\treturn this.ngxCookieService.hasAcceptedCategory(cookie.category);\n\t\t\t\t}\n\n\t\t\t\t// Iben: If specific services were provided, we can just check each individual category\n\t\t\t\treturn combineLatest(\n\t\t\t\t\tcookie.services.map((service) => {\n\t\t\t\t\t\treturn this.ngxCookieService.hasAcceptedService(cookie.category, service);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((hasCookies) => {\n\t\t\t\t\treturn flatten(hasCookies).every((hasCookie) => hasCookie);\n\t\t\t\t}),\n\t\t\t\ttap((hasCookie) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\t\t\t\tif (this.componentRef) {\n\t\t\t\t\t\tthis.componentRef.destroy();\n\t\t\t\t\t\tthis.componentRef = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\thasCookie ? this.renderThenTemplate() : this.renderElseTemplate();\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n\n\t/**\n\t * Render the template on which the directive is set\n\t */\n\tprivate renderThenTemplate(): void {\n\t\t// Iben: If a thenTemplateRef is provided, render the template\n\t\tif (this.thenTemplateRef) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.thenTemplateRef);\n\t\t}\n\t}\n\n\t/**\n\t * Render the fallbackTemplate or fallBackComponent\n\t */\n\tprivate renderElseTemplate(): void {\n\t\t// Iben: If a custom template ref was provided, render the template and early exit\n\t\tif (this.hasCookieElse()) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.hasCookieElse());\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided as a fallback, we render that\n\t\tif (this.component) {\n\t\t\t// Iben: Render the provided component\n\t\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\t\tthis.component\n\t\t\t);\n\n\t\t\t// Iben: Set the cookies of the component\n\t\t\tthis.componentRef.setInput('cookies', this.cookies);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFeatureDirective.html":{"url":"directives/NgxHasFeatureDirective.html","title":"directive - NgxHasFeatureDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFeatureDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required feature(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasFeature]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Private\n                                feature\n                            \n                            \n                                    Public\n                                ngxHasFeature\n                            \n                            \n                                    Public\n                                ngxHasFeatureElse\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveFeature\n                            \n                            \n                                    Private\n                                shouldHaveAllFeatures\n                            \n                            \n                                    Private\n                                shouldHaveFeature\n                            \n                            \n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasFeature\n                            \n                            \n                                ngxHasFeatureElse\n                            \n                            \n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                ngxHasFeatureShouldHaveFeature\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                            \n                        \n                \n                    \n                        A feature or list of features the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                            \n                        \n                \n                    \n                        The else template in case the feature is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveAllFeatures\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n                \n                    \n                        Whether all features should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                            \n                        \n                \n                    \n                        Whether the feature should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:175\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:116\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:41\n                        \n                    \n\n            \n                \n                    The provided AuthenticationService implementation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:47\n                        \n                    \n\n            \n                \n                    The provided ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:52\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        feature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FeatureType | FeatureType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:65\n                        \n                    \n\n            \n                \n                    The (list of) feature(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                        \n                    \n\n            \n                \n                    A feature or list of features the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                        \n                    \n\n            \n                \n                    The else template in case the feature is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:75\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:33\n                        \n                    \n\n            \n                \n                    The provided template ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:57\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:37\n                        \n                    \n\n            \n                \n                    The provided ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required feature(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasFeature]',\n})\nexport class NgxHasFeatureDirective implements OnDestroy {\n\t/**\n\t * The provided template ref\n\t */\n\ttemplateRef = inject>(TemplateRef);\n\t/**\n\t * The provided ViewContainerRef\n\t */\n\tprivate viewContainer = inject(ViewContainerRef);\n\t/**\n\t * The provided AuthenticationService implementation\n\t */\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\t/**\n\t * The provided ChangeDetectorRef\n\t */\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) feature(s) we need to check\n\t */\n\tprivate feature: FeatureType | FeatureType[] = [];\n\n\t/**\n\t * Whether the feature should be enabled\n\t */\n\tprivate shouldHaveFeature: boolean = true;\n\n\t/**\n\t * Whether all features should be enabled\n\t */\n\tprivate shouldHaveAllFeatures: boolean = true;\n\n\t/**\n\t * A feature or list of features the item should have\n\t */\n\tpublic ngxHasFeature: InputSignal = input();\n\n\t/**\n\t * The else template in case the feature is not enabled\n\t */\n\tpublic ngxHasFeatureElse: InputSignal> = input();\n\n\t/**\n\t * Whether the feature should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveFeature: InputSignal = input();\n\n\t/**\n\t * Whether all features should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveAllFeatures: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = this.templateRef;\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllFeatures = this.ngxHasFeatureShouldHaveAllFeatures();\n\t\t\tthis.shouldHaveFeature = this.ngxHasFeatureShouldHaveFeature();\n\t\t\tthis.feature = this.ngxHasFeature();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasFeatureElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasFeature(convertToArray(this.feature), this.shouldHaveAllFeatures)\n\t\t\t.pipe(\n\t\t\t\ttap((hasFeature) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHaveFeature ? hasFeature : !hasFeature;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasFeaturePipe.html":{"url":"pipes/NgxHasFeaturePipe.html","title":"pipe - NgxHasFeaturePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasFeaturePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) feature(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasFeature\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:88\n                        \n                    \n\n\n            \n                \n                        Dispose of the feature observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:64\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasFeature observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasFeature observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(feature: FeatureType | FeatureType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:53\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a feature is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                feature\n                                            \n                                                        FeatureType | FeatureType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided feature\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:31\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:22\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:26\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the feature is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) feature(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasFeature',\n\tpure: false,\n})\nexport class NgxHasFeaturePipe implements PipeTransform, OnDestroy {\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the feature is provided\n\t */\n\tprivate hasFeature: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a feature is provided for the environment\n\t *\n\t * @param feature - The provided feature\n\t */\n\tpublic transform(feature: FeatureType | FeatureType[]): boolean {\n\t\tthis.subscribe(this.authenticationService.hasFeature(convertToArray(feature)));\n\n\t\treturn this.hasFeature;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasFeature observable\n\t *\n\t * @param observable - The hasFeature observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasFeature = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the feature observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDirective.html":{"url":"directives/NgxHasFocusDirective.html","title":"directive - NgxHasFocusDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:34\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:13\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener } from '@angular/core';\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') setFocus() {\n\t\tthis.hasFocus = true;\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') removeFocus() {\n\t\tthis.hasFocus = false;\n\t}\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n\n\t/**\n   * Returns when the item has been focussed on\n   */\n  public isFocussedOn(): boolean {\n\t\treturn this.hasFocus;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{"url":"directives/NgxHasFocusDragAndDropAbstractDirective.html","title":"directive - NgxHasFocusDragAndDropAbstractDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDragAndDropAbstractDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:54\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:15\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, inject } from '@angular/core';\n\n//TODO: Iben: Move this copy to a shared lib once we have figured out how to handle that.\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') public setFocus(): void {\n\t\tthis.hasFocus = true;\n\n\t\tif (this.onFocus) {\n\t\t\tthis.onFocus();\n\t\t}\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') public removeFocus() {\n\t\tthis.hasFocus = false;\n\n\t\tif (this.onBlur) {\n\t\t\tthis.onBlur();\n\t\t}\n\t}\n\n  public readonly elementRef: ElementRef = inject( ElementRef );\n\n\tpublic focus(): void {\n\t\tthis.elementRef.nativeElement.focus();\n\t}\n\n\tpublic onBlur?(): void;\n\n\tpublic onFocus?(): void;\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasPermissionDirective.html":{"url":"directives/NgxHasPermissionDirective.html","title":"directive - NgxHasPermissionDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasPermissionDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required permissions(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasPermission]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxHasPermission\n                            \n                            \n                                    Public\n                                ngxHasPermissionElse\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHavePermission\n                            \n                            \n                                    Private\n                                permission\n                            \n                            \n                                    Private\n                                shouldHaveAllPermissions\n                            \n                            \n                                    Private\n                                shouldHavePermission\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasPermission\n                            \n                            \n                                ngxHasPermissionElse\n                            \n                            \n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                ngxHasPermissionShouldHavePermission\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasPermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                            \n                        \n                \n                    \n                        A permission or list of permissions the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                            \n                        \n                \n                    \n                        The else template in case the permission is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHaveAllPermissions\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n                \n                    \n                        Whether all permissions should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHavePermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                            \n                        \n                \n                    \n                        Whether the permission should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:167\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:110\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:39\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                        \n                    \n\n            \n                \n                    A permission or list of permissions the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                        \n                    \n\n            \n                \n                    The else template in case the permission is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionType | PermissionType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:52\n                        \n                    \n\n            \n                \n                    The (list of) permission(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:62\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:57\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:44\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required permissions(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasPermission]',\n})\nexport class NgxHasPermissionDirective implements OnDestroy {\n\tprivate viewContainer = inject(ViewContainerRef);\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) permission(s) we need to check\n\t */\n\tprivate permission: PermissionType | PermissionType[] = [];\n\n\t/**\n\t * Whether the permission should be enabled\n\t */\n\tprivate shouldHavePermission: boolean = true;\n\n\t/**\n\t * Whether all permissions should be enabled\n\t */\n\tprivate shouldHaveAllPermissions: boolean = true;\n\n\t/**\n\t * A permission or list of permissions the item should have\n\t */\n\tpublic ngxHasPermission: InputSignal = input();\n\n\t/**\n\t * The else template in case the permission is not enabled\n\t */\n\tpublic ngxHasPermissionElse: InputSignal> = input();\n\n\t/**\n\t * Whether the permission should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHavePermission: InputSignal = input();\n\n\t/**\n\t * Whether all permissions should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHaveAllPermissions: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllPermissions = this.ngxHasPermissionShouldHaveAllPermissions();\n\t\t\tthis.shouldHavePermission = this.ngxHasPermissionShouldHavePermission();\n\t\t\tthis.permission = this.ngxHasPermission();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasPermissionElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasPermission(\n\t\t\t\tconvertToArray(this.permission),\n\t\t\t\tthis.shouldHaveAllPermissions\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\ttap((hasPermission) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHavePermission\n\t\t\t\t\t\t? hasPermission\n\t\t\t\t\t\t: !hasPermission;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasPermissionPipe.html":{"url":"pipes/NgxHasPermissionPipe.html","title":"pipe - NgxHasPermissionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasPermissionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) permission(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasPermission\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:92\n                        \n                    \n\n\n            \n                \n                        Dispose of the permission observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:68\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasPermission observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasPermission observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(permission: PermissionType | PermissionType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:55\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a permission is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                permission\n                                            \n                                                        PermissionType | PermissionType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided permission\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:33\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:24\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:28\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the permission is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) permission(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasPermission',\n\tpure: false,\n})\nexport class NgxHasPermissionPipe\n\timplements PipeTransform, OnDestroy\n{\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the permission is provided\n\t */\n\tprivate hasPermission: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a permission is provided for the environment\n\t *\n\t * @param permission - The provided permission\n\t */\n\tpublic transform(permission: PermissionType | PermissionType[]): boolean {\n\t\tthis.subscribe(\n\t\t\tthis.authenticationService.hasPermission(convertToArray(permission))\n\t\t);\n\n\t\treturn this.hasPermission;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasPermission observable\n\t *\n\t * @param observable - The hasPermission observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasPermission = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the permission observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nAbstractService.html":{"url":"classes/NgxI18nAbstractService.html","title":"class - NgxI18nAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used to fetch the current language\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts:9\n                                \n                            \n                    \n                        \n                                A method to return the current language\n\n\n                                \n                                    Returns :     Language\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export abstract class NgxI18nAbstractService {\n\n\t/**\n   * A method to return the current language\n   */\n  public abstract get currentLanguage(): Language;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxI18nConfiguration.html":{"url":"interfaces/NgxI18nConfiguration.html","title":"interface - NgxI18nConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxI18nConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/i18n.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration we can pass to the translation system\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            availableLanguages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cacheBust\n                                        \n                                \n                                \n                                        \n                                            defaultAssetPaths\n                                        \n                                \n                                \n                                        \n                                            defaultLanguage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            languageRouteParam\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        availableLanguages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        availableLanguages:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A list of languages the application has translations for\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cacheBust\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheBust:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The cache busting parameter to append to the translation file requests.\nThis can be useful when you want to force the browser to fetch the latest\nversion of the translation files by appending this value to the v query\nparameter.\nWhen not provided, no query parameter will be added to the request.\nExample :`?v=1` when `cacheBust: '' + 1`\n`?v=1.0.0` when `cacheBust: '1.0.0'`\n`?v=1743428073628` when `cacheBust: String(Date.now())`\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultAssetPaths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultAssetPaths:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A list of default translation files we want to load in if we don't provide a custom loader\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultLanguage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultLanguage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The default language the application should be in\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        languageRouteParam\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        languageRouteParam:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The param name we use for the language, by default this is language\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgxI18nConfiguration {\n\t/**\n\t * The default language the application should be in\n\t */\n\tdefaultLanguage: string;\n\t/**\n\t * A list of languages the application has translations for\n\t */\n\tavailableLanguages?: string[];\n\t/**\n\t * A list of default translation files we want to load in if we don't provide a custom loader\n\t */\n\tdefaultAssetPaths: string[];\n\t/**\n\t * The param name we use for the language, by default this is `language`\n\t */\n\tlanguageRouteParam?: string;\n\t/**\n\t * The cache busting parameter to append to the translation file requests.\n\t * This can be useful when you want to force the browser to fetch the latest\n\t * version of the translation files by appending this value to the `v` query\n\t * parameter.\n\t *\n\t * When not provided, no query parameter will be added to the request.\n\t *\n\t * @example\n\t * `?v=1` when `cacheBust: '' + 1`\n\t * `?v=1.0.0` when `cacheBust: '1.0.0'`\n\t * `?v=1743428073628` when `cacheBust: String(Date.now())`\n\t */\n\tcacheBust?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxI18nEmptyComponent.html":{"url":"components/NgxI18nEmptyComponent.html","title":"component - NgxI18nEmptyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxI18nEmptyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/i18n/src/lib/components/empty-component/empty.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-i18n-empty\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n */\n@Component({\n\tselector: 'ngx-i18n-empty',\n\tstandalone: true,\n\ttemplate: '',\n})\nexport class NgxI18nEmptyComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxI18nEmptyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nLoadingService.html":{"url":"injectables/NgxI18nLoadingService.html","title":"injectable - NgxI18nLoadingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nLoadingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that holds whether there currently are translation files being loaded into the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                translationLoaderActionsSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsFailed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsFailedSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsLoaded$\n                            \n                            \n                                    Private\n                                translationsLoading\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadedTranslations\n                            \n                            \n                                    Public\n                                dispatchTranslationLoaderAction\n                            \n                            \n                                    Public\n                                getTranslations\n                            \n                            \n                                    Public\n                                loadTranslations\n                            \n                            \n                                    Public\n                                markTranslationsLoadedAsFailed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadedTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadedTranslations(translations: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Add loaded translations to the loaded translations record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                translations\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly loaded translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dispatchTranslationLoaderAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Dispatch the loading state of a set of translations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            TranslationLoaderActionEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of a set of translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslations()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Fetches all the currently loaded translations\n\n\n                        \n                            Returns :     Record\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadTranslations(paths: string, observable: Observable<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paths\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe paths of we're loading translations for\n\n\n                                            \n                                        \n                                        \n                                                observable\n                                            \n                                                        Observable<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe translations loading observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markTranslationsLoadedAsFailed\n                        \n                    \n                \n            \n            \n                \n                        \n                    markTranslationsLoadedAsFailed()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Mark the loading of the translations as failed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoaderActionsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsFailed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.translationsFailedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsFailedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsLoaded$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        translationsLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>({})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:21\n                        \n                    \n\n            \n                \n                    A subject to store all the currently loaded translation files in\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { scan, map, shareReplay } from 'rxjs/operators';\n\nimport { TranslationLoaderActionEntity } from './i18n-loading.types';\n\n/**\n * A service that holds whether there currently are translation files being loaded into the application\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxI18nLoadingService {\n\t// Iben: Keep a subject to store all the translation loading actions\n\tprivate readonly translationLoaderActionsSubject$ =\n\t\tnew Subject();\n\n\t/**\n\t * A subject to store all the currently loaded translation files in\n\t */\n\tprivate readonly translationsSubject$ = new BehaviorSubject>({});\n\n\tprivate readonly translationsFailedSubject$ = new BehaviorSubject(false);\n\n\tprivate translationsLoading: Record> = {};\n\n\t// Iben: Check if all translations actions have completed\n\tpublic readonly translationsLoaded$ = this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t);\n\n\tpublic readonly translationsFailed$: Observable =\n\t\tthis.translationsFailedSubject$.asObservable();\n\n\t/**\n\t * Dispatch the loading state of a set of translations\n\t *\n\t * @param action - The loading state of a set of translations\n\t */\n\tpublic dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity) {\n\t\tthis.translationLoaderActionsSubject$.next(action);\n\t}\n\n\t/**\n\t * Add loaded translations to the loaded translations record\n\t *\n\t * @param translations - The newly loaded translations\n\t */\n\tpublic addLoadedTranslations(translations: Record) {\n\t\tthis.translationsSubject$.next({\n\t\t\t...this.translationsSubject$.getValue(),\n\t\t\t...translations,\n\t\t});\n\t}\n\n\t/**\n\t * Fetches all the currently loaded translations\n\t */\n\tpublic getTranslations(): Record {\n\t\treturn this.translationsSubject$.getValue();\n\t}\n\n\t/**\n\t * Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\t *\n\t * @param paths - The paths of we're loading translations for\n\t * @param observable - The translations loading observable\n\t */\n\tpublic loadTranslations(paths: string, observable: Observable) {\n\t\t// Iben: If loading of the translations has not been added to the array yet, we set it so we return a single observable\n\t\tif (!this.translationsLoading[paths]) {\n\t\t\t// Iben: Add shareReplay so the result is passed over each subscription\n\t\t\tthis.translationsLoading[paths] = observable.pipe(shareReplay());\n\t\t}\n\n\t\t// Iben: Return the observable\n\t\treturn this.translationsLoading[paths];\n\t}\n\n\t/**\n\t * Mark the loading of the translations as failed\n\t */\n\tpublic markTranslationsLoadedAsFailed() {\n\t\tconsole.error(\n\t\t\t'@ibenvandeveire/ngx-i18n - NgxI18nLoadingService: Something went wrong whilst fetching the translations.'\n\t\t);\n\n\t\tthis.translationsFailedSubject$.next(false);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nMultiTranslationHttpLoader.html":{"url":"classes/NgxI18nMultiTranslationHttpLoader.html","title":"class - NgxI18nMultiTranslationHttpLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nMultiTranslationHttpLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts\n        \n\n\n            \n                Description\n            \n            \n                A loader that allows to load in multiple translation JSON files at the same time\n\n            \n\n\n            \n                Implements\n            \n            \n                        TranslateLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpBackend\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationLoadingService\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsPaths\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:25\n                        \n                    \n\n            \n                \n                    The configuration for the NgxI18nModule.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpBackend\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpBackend\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpBackend)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:30\n                        \n                    \n\n            \n                \n                    Instance of the httpBackend\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:19\n                        \n                    \n\n            \n                \n                    The instance of the translation loading service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsPaths\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nTranslationPathsToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:35\n                        \n                    \n\n            \n                \n                    The translation paths\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:42\n                        \n                    \n\n\n            \n                \n                        Fetches the provided translation files and saves them to the translation store\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently used language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpBackend, HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { deepmerge } from 'deepmerge-ts';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nLoadingService } from '../../services';\nimport { NgxI18nConfigurationToken, NgxI18nTranslationPathsToken } from '../../tokens';\n\n/**\n * A loader that allows to load in multiple translation JSON files at the same time\n */\nexport class NgxI18nMultiTranslationHttpLoader implements TranslateLoader {\n\t/**\n\t * The instance of the translation loading service\n\t */\n\tprivate readonly translationLoadingService: NgxI18nLoadingService =\n\t\tinject(NgxI18nLoadingService);\n\n\t/**\n\t * The configuration for the NgxI18nModule.\n\t */\n\tprivate readonly config: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\t/**\n\t * Instance of the httpBackend\n\t */\n\tprivate readonly httpBackend: HttpBackend = inject(HttpBackend);\n\n\t/**\n\t * The translation paths\n\t */\n\tprivate readonly translationsPaths: string[] = inject(NgxI18nTranslationPathsToken);\n\n\t/**\n\t * Fetches the provided translation files and saves them to the translation store\n\t *\n\t * @param  lang - The currently used language\n\t */\n\tpublic getTranslation(lang: string): Observable {\n\t\t// Iben: Fetch the currently existing translations, so we can see if they already exist in the loading service\n\t\tconst availableTranslations = this.translationLoadingService.getTranslations();\n\n\t\t// Iben: Convert the translation paths to a combination of calls to get the translations or from the translations store\n\t\tconst requestedTranslations = this.translationsPaths.map((path) => {\n\t\t\tconst fromStore = Boolean(availableTranslations[path]);\n\t\t\tif (fromStore) {\n\t\t\t\t// Iben: If the translations came from the store, mark them as such\n\t\t\t\treturn of({\n\t\t\t\t\ttranslations: availableTranslations[path],\n\t\t\t\t\tfromStore,\n\t\t\t\t\tpath,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Iben: If the translations aren't available in the store, we fetch them from the server\n\t\t\t\t// Wouter: When provided, add a cache busting param so that each request is fetched from the server instead of the browser cache\n\t\t\t\tconst fetchPath = `${path}${lang}.json${\n\t\t\t\t\tthis.config.cacheBust ? '?v=' + this.config.cacheBust : ''\n\t\t\t\t}`;\n\n\t\t\t\treturn new HttpClient(this.httpBackend).get(fetchPath).pipe(\n\t\t\t\t\t// Iben: Map this to an object so we can track which results corresponds with which path\n\t\t\t\t\tmap((translations) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttranslations,\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t\t// Iben: In case the translation is not loaded, we log an error\n\t\t\t\t\tcatchError((res) => {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t'@ibenvandeveire/ngx-i18n - MultiTranslationLoader: Something went wrong for the following translation file:',\n\t\t\t\t\t\t\tfetchPath\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconsole.error(res.message);\n\n\t\t\t\t\t\t// Iben: If we get a not-authorized error from the server, we redirect to the resources not found page\n\t\t\t\t\t\tif (res.status === 401) {\n\t\t\t\t\t\t\tthis.translationLoadingService.markTranslationsLoadedAsFailed();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Return a translation loaded object so the translations service isn't broken\n\t\t\t\t\t\treturn of({\n\t\t\t\t\t\t\ttranslations: {},\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Join all the requests and merge them\n\t\treturn this.translationLoadingService.loadTranslations(\n\t\t\tthis.translationsPaths.toString(),\n\t\t\tforkJoin(requestedTranslations).pipe(\n\t\t\t\ttap((translations) => {\n\t\t\t\t\t// Iben: Filter out the newly requested translations, and add them to the loaded translations store\n\t\t\t\t\tthis.translationLoadingService.addLoadedTranslations(\n\t\t\t\t\t\ttranslations\n\t\t\t\t\t\t\t.filter((translation) => !translation.fromStore)\n\t\t\t\t\t\t\t.reduce((previous, next) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t\t[next.path]: next.translations,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}, {})\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\t// Iben: Merge all the translations in a single object for the translation service\n\t\t\t\tmap((response) => deepmerge(...response.map((item) => item.translations)))\n\t\t\t)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nRootService.html":{"url":"injectables/NgxI18nRootService.html","title":"injectable - NgxI18nRootService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nRootService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The single root instance of the translation service, in charge of holding the current language, the available languages and allows for the language to be changed.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                availableLanguages$\n                            \n                            \n                                    Private\n                                    Readonly\n                                availableLanguagesSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentLanguage$\n                            \n                            \n                                    Private\n                                    Readonly\n                                currentLanguageSubject\n                            \n                            \n                                    Public\n                                defaultLanguage\n                            \n                            \n                                    Public\n                                languageRouteParam\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getNewLanguage\n                            \n                            \n                                    Public\n                                initializeLanguage\n                            \n                            \n                                    Public\n                                setAvailableLanguages\n                            \n                            \n                                    Public\n                                setCurrentLanguage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:53\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getNewLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly proposed language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeLanguage()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Sets the initial language of the application when no language is set yet.\nIf a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setAvailableLanguages\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAvailableLanguages(languages: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Set the list of available languages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                languages\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of available languages\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCurrentLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCurrentLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        availableLanguages$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:41\n                        \n                    \n\n            \n                \n                    The available languages\nOnly emits once the list contains at least one language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        availableLanguagesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to hold the available languages\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:17\n                        \n                    \n\n            \n                \n                    Instance of the configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentLanguage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentLanguageSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:65\n                        \n                    \n\n            \n                \n                    The current language of the application, as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        currentLanguageSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:27\n                        \n                    \n\n            \n                \n                    A subject to hold the current language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        defaultLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:48\n                        \n                    \n\n            \n                \n                    The default language of the application\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        languageRouteParam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:53\n                        \n                    \n\n            \n                \n                    The route param we use to set the language, by default this is language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:71\n                                \n                            \n                    \n                        \n                                The current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, filter, Observable } from 'rxjs';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nConfigurationToken } from '../../tokens';\n\n//TODO: Iben: Once we have a shared lib we should replace the storage and the browser approaches with their corresponding implementations\n/**\n * The single root instance of the translation service, in charge of holding the current language, the available languages and allows for the language to be changed.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxI18nRootService {\n\t/**\n\t * Instance of the configuration\n\t */\n\tprivate readonly configuration: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\t/**\n\t * Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\t */\n\tprivate readonly windowsService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject to hold the current language\n\t */\n\tprivate readonly currentLanguageSubject: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\t/**\n\t * A subject to hold the available languages\n\t */\n\tprivate readonly availableLanguagesSubject: BehaviorSubject = new BehaviorSubject([]);\n\n\t/**\n\t * The available languages\n\t *\n\t * Only emits once the list contains at least one language\n\t */\n\tpublic readonly availableLanguages$: Observable = this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0));\n\n\t/**\n\t * The default language of the application\n\t */\n\tpublic defaultLanguage: string;\n\n\t/**\n\t * The route param we use to set the language, by default this is `language`\n\t */\n\tpublic languageRouteParam: string;\n\n\tconstructor() {\n\t\t// Iben: Set the initial values so that we can refer to the services as the source of truth\n\t\tthis.defaultLanguage = this.configuration.defaultLanguage;\n\t\tthis.languageRouteParam = this.configuration.languageRouteParam || 'language';\n\t\tthis.availableLanguagesSubject.next(this.configuration.availableLanguages || []);\n\t}\n\n\t/**\n\t * The current language of the application, as an Observable\n\t */\n\tpublic readonly currentLanguage$: Observable =\n\t\tthis.currentLanguageSubject.asObservable();\n\n\t/**\n\t * The current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.currentLanguageSubject.getValue();\n\t}\n\n\t/**\n\t * Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setCurrentLanguage(language: string): void {\n\t\t// Iben: get the new language\n\t\tconst newLanguage = this.getNewLanguage(language);\n\n\t\t// Iben: Save the current language to the localStorage when we're in the browser\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlocalStorage.setItem('ngx-i18n-language', newLanguage);\n\t\t});\n\n\t\t// Iben: Update the subject\n\t\tthis.currentLanguageSubject.next(newLanguage);\n\t}\n\n\t/**\n\t * Sets the initial language of the application when no language is set yet.\n\t *\n\t * If a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\t */\n\tpublic initializeLanguage(): void {\n\t\t// Iben: If the current language already exists, we early exit\n\t\tif (this.currentLanguage) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the current language does not exist, we check if it exists in the local storage, if not, we use the default config\n\t\tlet language = this.defaultLanguage;\n\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlanguage = localStorage.getItem('ngx-i18n-language') || this.defaultLanguage;\n\t\t});\n\n\t\t// Iben: We set the new language\n\t\tthis.setCurrentLanguage(language);\n\t}\n\n\t/**\n\t * Set the list of available languages\n\t *\n\t * @param languages - The list of available languages\n\t */\n\tpublic setAvailableLanguages(languages: string[]): void {\n\t\tthis.availableLanguagesSubject.next(languages);\n\t}\n\n\t/**\n\t * Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\t *\n\t * @param {string} language - The newly proposed language\n\t */\n\tprivate getNewLanguage(language: string): string {\n\t\t// Iben: Save the currently being set language\n\t\tlet newLanguage = language;\n\n\t\t// Iben: Check if the new language is part of the available languages\n\t\tif (!this.availableLanguagesSubject.getValue().includes(language)) {\n\t\t\t// Iben: If a language is set that's not part of the available languages, we return a warn\n\t\t\tconsole.warn(\n\t\t\t\t`NgxI18n: A language, ${language}, was attempted to be set that was not part of the available languages (${this.availableLanguagesSubject\n\t\t\t\t\t.getValue()\n\t\t\t\t\t.join(', ')})`\n\t\t\t);\n\n\t\t\t// Iben: If there is already a language set, we early exit and keep the remaining language\n\t\t\tif (this.currentLanguage) {\n\t\t\t\treturn this.currentLanguage;\n\t\t\t}\n\n\t\t\t// Iben: If no language exists, we use the default language\n\t\t\tnewLanguage = this.defaultLanguage;\n\t\t}\n\n\t\treturn newLanguage;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nService.html":{"url":"injectables/NgxI18nService.html","title":"injectable - NgxI18nService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n/i18n.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that holds the translations for an individual feature. Multiple instances of this service will exist throughout your application.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                rootI18nService\n                            \n                            \n                                    Public\n                                setLanguage\n                            \n                            \n                                    Public\n                                    Readonly\n                                translateService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                            \n                                    Public\n                                getTranslationObservable\n                            \n                            \n                                    Public\n                                initI18n\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    availableLanguages\n                                \n                                \n                                    defaultLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns an instant translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslationObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslationObservable(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:87\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TranslationType\n                            \n                        \n                    \n\n            \n                \n                        Returns a observable based translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initI18n\n                        \n                    \n                \n            \n            \n                \n                        \n                    initI18n(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Initializes the translations based on the provided language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        rootI18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nRootService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nRootService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:21\n                        \n                    \n\n            \n                \n                    Instance of the NgxI8nRootService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:65\n                        \n                    \n\n            \n                \n                    Set the current language of the application\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    language\n                                                    \n                                                            \nThe provided language\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translateService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TranslateService\n\n                    \n                \n                \n                    \n                        Default value : inject(TranslateService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:16\n                        \n                    \n\n            \n                \n                    Instance of the ngx-translate TranslateService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:26\n                                \n                            \n                    \n                        \n                                Returns the current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        availableLanguages\n                    \n                \n\n                \n                    \n                        getavailableLanguages()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:33\n                                \n                            \n                    \n                        \n                                Returns the available languages of the application\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultLanguage\n                    \n                \n\n                \n                    \n                        getdefaultLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:40\n                                \n                            \n                    \n                        \n                                Returns the default language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { NgxI18nAbstractService } from '../../abstracts';\nimport { NgxI18nRootService } from '../root-i18n/root-i18n.service';\n\n/**\n * A service that holds the translations for an individual feature. Multiple instances of this service will exist throughout your application.\n */\n@Injectable()\nexport class NgxI18nService implements NgxI18nAbstractService {\n\t/**\n\t * Instance of the ngx-translate TranslateService\n\t */\n\tpublic readonly translateService: TranslateService = inject(TranslateService);\n\n\t/**\n\t * Instance of the NgxI8nRootService\n\t */\n\tprivate readonly rootI18nService: NgxI18nRootService = inject(NgxI18nRootService);\n\n\t/**\n\t * Returns the current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.rootI18nService.currentLanguage;\n\t}\n\n\t/**\n\t * Returns the available languages of the application\n\t */\n\tpublic get availableLanguages(): string[] {\n\t\treturn this.translateService.getLangs() as string[];\n\t}\n\n\t/**\n\t * Returns the default language of the application\n\t */\n\tpublic get defaultLanguage(): string {\n\t\treturn this.translateService.getFallbackLang();\n\t}\n\n\t/**\n\t * Initializes the translations based on the provided language\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic initI18n(language: string): Observable {\n\t\t// Iben: If the language is provided, set it in the root service\n\t\tif (language) {\n\t\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\t}\n\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\n\t\treturn this.translateService.reloadLang(language);\n\t}\n\n\t/**\n\t * Set the current language of the application\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setLanguage = (language: string): void => {\n\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\t};\n\n\t/**\n\t * Returns an instant translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslation(key: string, params?: any): string {\n\t\treturn this.translateService.instant(key, params);\n\t}\n\n\t// Denis: Set the default to string but allow for others.\n\t/**\n\t * Returns a observable based translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslationObservable(\n\t\tkey: string,\n\t\tparams?: any\n\t): Observable {\n\t\treturn this.translateService.get(key, params);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nTranslationLoaderResolver.html":{"url":"injectables/NgxI18nTranslationLoaderResolver.html","title":"injectable - NgxI18nTranslationLoaderResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nTranslationLoaderResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\nIt is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                i18nLoadingService\n                            \n                            \n                                    Private\n                                    Readonly\n                                i18nService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resolve\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolve()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20\n                        \n                    \n\n            \n                \n                    The NgxI18nLoadingService instance\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16\n                        \n                    \n\n            \n                \n                    The NgxI18nService instance\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { finalize, map, Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxI18nLoadingService, NgxI18nService } from '../../services';\n\n/**\n * This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\n * It is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n */\n@Injectable()\nexport class NgxI18nTranslationLoaderResolver {\n\t/**\n\t * The NgxI18nService instance\n\t */\n\tprivate readonly i18nService: NgxI18nService = inject(NgxI18nService);\n\t/**\n\t * The NgxI18nLoadingService instance\n\t */\n\tprivate readonly i18nLoadingService: NgxI18nLoadingService = inject(NgxI18nLoadingService);\n\n\tpublic resolve(): Observable {\n\t\t// Iben: Generate an id for the translations we're about to load\n\t\tconst id = uuid();\n\n\t\t// Iben: Dispatch to the loader service that we're about to load a set of translations\n\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADING' });\n\n\t\t// Iben: This will reload the translations, and fetch the newly needed lazy loaded translations\n\t\treturn this.i18nService.initI18n(this.i18nService.currentLanguage).pipe(\n\t\t\t// Iben: Map to true for the guard\n\t\t\tmap(() => true),\n\t\t\tfinalize(() => {\n\t\t\t\t// Iben: Dispatch to the loader service that the translations have been loaded\n\t\t\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADED' });\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerBase.html":{"url":"interfaces/NgxImageMarkerBase.html","title":"interface - NgxImageMarkerBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            close\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        close\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        close:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxImageMarkerComponent.html":{"url":"components/NgxImageMarkerComponent.html","title":"component - NgxImageMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxImageMarkerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component wrapper for MarkerJs views\nhttps://markerjs.com/\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnChanges\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-image-marker\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n            \n                styleUrl\n                ./image-marker.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                canEdit\n                            \n                            \n                                    Private\n                                currentMarker\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentZoomLevel\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                image\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageDescription\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageElement\n                            \n                            \n                                    Private\n                                    Readonly\n                                imageMarkerService\n                            \n                            \n                                    Public\n                                markerClicked\n                            \n                            \n                                    Private\n                                    Readonly\n                                markerDestroyedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                markerTypes\n                            \n                            \n                                    Public\n                                    Readonly\n                                startState\n                            \n                            \n                                    Public\n                                stateUpdated\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                            \n                                    Public\n                                    Readonly\n                                zoomLevels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createMarker\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                canEdit\n                            \n                            \n                                currentZoomLevel\n                            \n                            \n                                image\n                            \n                            \n                                imageDescription\n                            \n                            \n                                markerTypes\n                            \n                            \n                                startState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                markerClicked\n                            \n                            \n                                stateUpdated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        canEdit\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                            \n                        \n                \n                    \n                        Whether we can edit the view, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentZoomLevel\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                            \n                        \n                \n                    \n                        An optional current zoom level\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        image\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                            \n                        \n                \n                    \n                        The url to the image we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imageDescription\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                            \n                        \n                \n                    \n                        A WCAG/WAI-ARIA compliant description of the image\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markerTypes\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                            \n                        \n                \n                    \n                        An optional record of types of Markerjs markers we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        startState\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                            \n                        \n                \n                    \n                        The start data we wish to render\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        markerClicked\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                            \n                        \n                \n                    \n                        Emits when a marker is clicked when the view is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stateUpdated\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                            \n                        \n                \n                    \n                        Emits when the state has been updated\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarker()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Creates a MarkerJs view based on the provided configuration\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        canEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                        \n                    \n\n            \n                \n                    Whether we can edit the view, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentMarker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarker\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:54\n                        \n                    \n\n            \n                \n                    The currently created marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentZoomLevel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                        \n                    \n\n            \n                \n                    An optional current zoom level\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        image\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                        \n                    \n\n            \n                \n                    The url to the image we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageDescription\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                        \n                    \n\n            \n                \n                    A WCAG/WAI-ARIA compliant description of the image\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('imageElement')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:64\n                        \n                    \n\n            \n                \n                    The rendered image element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imageMarkerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarkerService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxImageMarkerService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markerClicked\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                        \n                    \n\n            \n                \n                    Emits when a marker is clicked when the view is in readonly mode\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markerDestroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:59\n                        \n                    \n\n            \n                \n                    A subject holding the destroy state of the marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        markerTypes\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                        \n                    \n\n            \n                \n                    An optional record of types of Markerjs markers we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        startState\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                        \n                    \n\n            \n                \n                    The start data we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                        \n                    \n\n            \n                \n                    Emits when the state has been updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        zoomLevels\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:94\n                        \n                    \n\n            \n                \n                    An optional amount of times we can zoom in and out\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  inject,\n  OnChanges,\n  OnDestroy,\n  input,\n  OutputEmitterRef,\n  output,\n  viewChild\n} from '@angular/core';\nimport { NgxWindowService, simpleChangeHasChanged } from '@ibenvandeveire/ngx-core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxImageMarkerService } from '../../services';\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerState,\n\tNgxImageMarkerTypes,\n} from '../../types';\n\n/**\n * A component wrapper for MarkerJs views\n *\n * https://markerjs.com/\n */\n\n// TODO: Iben: Once we figured out how we'll share the FormAccessors with other packages, we should make this a ControlValueAccessor\n@Component({\n\tselector: 'ngx-image-marker',\n\ttemplate: ``,\n\tstyleUrl: './image-marker.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-image-marker',\n\t},\n})\nexport class NgxImageMarkerComponent implements AfterViewInit, OnChanges, OnDestroy {\n\tprivate readonly imageMarkerService: NgxImageMarkerService = inject(NgxImageMarkerService);\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\tprivate readonly elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t * The currently created marker\n\t */\n\tprivate currentMarker: NgxImageMarker;\n\n\t/**\n\t * A subject holding the destroy state of the marker\n\t */\n\tprivate readonly markerDestroyedSubject: Subject = new Subject();\n\n\t/**\n\t * The rendered image element\n\t */\n\tpublic readonly imageElement = viewChild('imageElement');\n\n\t/**\n\t * The url to the image we wish to render\n\t */\n\tpublic readonly image = input.required();\n\n\t/**\n\t * A WCAG/WAI-ARIA compliant description of the image\n\t */\n\tpublic readonly imageDescription = input.required();\n\n\t/**\n\t * The start data we wish to render\n\t */\n\tpublic readonly startState = input();\n\n\t/**\n\t * Whether we can edit the view, by default this is true\n\t */\n\tpublic readonly canEdit = input(true);\n\n\t/**\n\t * An optional current zoom level\n\t */\n\tpublic readonly currentZoomLevel = input();\n\n\t/**\n\t * An optional amount of times we can zoom in and out\n\t */\n\tpublic readonly zoomLevels = input();\n\n\t/**\n\t * An optional record of types of Markerjs markers we wish to render\n\t */\n\tpublic readonly markerTypes = input();\n\n\t/**\n\t * Emits when the state has been updated\n\t */\n\tpublic stateUpdated: OutputEmitterRef = output();\n\n\t/**\n\t * Emits when a marker is clicked when the view is in readonly mode\n\t */\n\tpublic markerClicked: OutputEmitterRef = output();\n\n\tngAfterViewInit(): void {\n\t\t// Iben: Create the initial marker\n\t\tthis.createMarker();\n\t}\n\n\tngOnChanges(changes: any): void {\n\t\t// Iben: If no marker exists or if the image has not rendered, early exit\n\t\tif (!this.currentMarker || !this.imageElement()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Check if there are changes to the state or the configuration when there is a marker\n\t\tconst hasChanges =\n\t\t\tthis.currentMarker &&\n\t\t\t(simpleChangeHasChanged(changes.startState) ||\n\t\t\t\tsimpleChangeHasChanged(changes.canEdit) ||\n\t\t\t\tsimpleChangeHasChanged(changes.markerTypes) ||\n\t\t\t\tsimpleChangeHasChanged(changes.currentZoomLevel) ||\n\t\t\t\tsimpleChangeHasChanged(changes.zoomLevels));\n\n\t\t// Iben: Recreate the marker whenever the configuration is adjusted\n\t\tif (!this.currentMarker || hasChanges) {\n\t\t\tthis.createMarker();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close the marker\n\t\tthis.currentMarker.close();\n\n\t\t// Iben: Complete the destroy subject\n\t\tthis.markerDestroyedSubject.next();\n\t\tthis.markerDestroyedSubject.complete();\n\t}\n\n\t/**\n\t * Creates a MarkerJs view based on the provided configuration\n\t */\n\tprivate createMarker() {\n\t\t// Iben: Only create the image when we're in the browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Iben: Close the existing marker if needed\n\t\t\tif (this.currentMarker) {\n\t\t\t\tthis.currentMarker.close();\n\t\t\t\tthis.markerDestroyedSubject.next();\n\t\t\t}\n\n\t\t\t// Iben: Create a new marker view based on the provided configuration\n\t\t\tconst currentZoomLevel = this.currentZoomLevel();\n\t\t\tconst zoomLevels = this.zoomLevels();\n\t\t\tthis.currentMarker = this.imageMarkerService.createImageMarker(\n\t\t\t\tthis.imageElement().nativeElement,\n\t\t\t\tthis.elementRef.nativeElement,\n\t\t\t\t{\n\t\t\t\t\tmode: this.canEdit() ? 'edit' : 'view',\n\t\t\t\t\tallowZoom: true,\n\t\t\t\t\tdefaultState: this.startState() || undefined,\n\t\t\t\t\tmarkerTypes: this.markerTypes(),\n\t\t\t\t\tzoom:\n\t\t\t\t\t\tcurrentZoomLevel !== undefined && zoomLevels\n\t\t\t\t\t\t\t? { current: currentZoomLevel, levels: zoomLevels }\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Iben: Listen to the valueChanges based on the provided type.\n\t\t\tif (this.currentMarker.mode === 'edit') {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.stateUpdated.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t} else {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.markerClicked.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t}\n\t\t});\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxImageMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerConfiguration.html":{"url":"interfaces/NgxImageMarkerConfiguration.html","title":"interface - NgxImageMarkerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the marker view\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowClear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowZoom\n                                        \n                                \n                                \n                                        \n                                            defaultState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            markerTypes\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zoom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowClear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowClear:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether clearing the marker view is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowZoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowZoom:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether zooming in is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultState:         NgxImageMarkerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state the view has to start from\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        markerTypes:         NgxImageMarkerTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerTypes\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default all\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the record is readonly or not\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoom:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerEdit.html":{"url":"interfaces/NgxImageMarkerEdit.html","title":"interface - NgxImageMarkerEdit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerEdit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxImageMarkerService.html":{"url":"injectables/NgxImageMarkerService.html","title":"injectable - NgxImageMarkerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxImageMarkerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\nhttps://markerjs.com/\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                markers\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createImageMakerEdit\n                            \n                            \n                                    Public\n                                createImageMarker\n                            \n                            \n                                    Private\n                                createMarkerClickedListener\n                            \n                            \n                                    Private\n                                createMarkerValueChanges\n                            \n                            \n                                    Private\n                                createReadonlyImageMarker\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createImageMakerEdit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMakerEdit(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Creates an editable marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerEdit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMarker(image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create an image with markers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarker\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerClickedListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerClickedListener(marker: MarkerView)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Listen to the marker clicks in the readonly view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerView\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerValueChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerValueChanges(marker: MarkerArea)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Listen to the value changes in the editable view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerArea\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createReadonlyImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReadonlyImageMarker(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Creates a readonly marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerView\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:221\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:31\n                        \n                    \n\n            \n                \n                    A record with all markers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { MarkerView } from 'markerjs-live';\nimport { MarkerArea, MarkerAreaState } from 'markerjs2';\nimport { Observable, Subject } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerConfiguration,\n\tNgxImageMarkerEdit,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerView,\n} from '../../types';\n\n/**\n * A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\n *\n * https://markerjs.com/\n */\n// TODO: Iben: To avoid essentially only testing a mocked version of this package, we need to test this through Cypress/Playwrite/... tests\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxImageMarkerService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record with all markers\n\t */\n\tprivate readonly markers: Record = {};\n\n\t/**\n\t * Create an image with markers\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tpublic createImageMarker(\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarker {\n\t\t// Iben: Return undefined if we're not in the browser\n\t\tif (!this.windowService.isBrowser) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Create an id for the marker\n\t\tconst id = uuid();\n\n\t\t// Iben: Depending on the provided mode, we create a edit view or a non editable view\n\t\treturn configuration.mode === 'edit'\n\t\t\t? this.createImageMakerEdit(id, image, rootTarget, configuration)\n\t\t\t: this.createReadonlyImageMarker(id, image, rootTarget, configuration);\n\t}\n\n\t/**\n\t * Creates a readonly marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createReadonlyImageMarker(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerView {\n\t\t// Iben: Create the new marker view\n\t\tconst marker = new MarkerView(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular marker view\n\t\tconst result: NgxImageMarkerView = {\n\t\t\tmode: 'view',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('select', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerClickedListener(marker),\n\t\t};\n\n\t\t// Iben: Create a clicked listener for the currently clicked item\n\t\tthis.createMarkerClickedListener(marker);\n\n\t\t// Iben: If custom marker types were provided, set them as the available types\n\t\tif (configuration.markerTypes?.view) {\n\t\t\tmarker.availableMarkerTypes = configuration.markerTypes.view;\n\t\t}\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show(configuration.defaultState);\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates an editable marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createImageMakerEdit(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerEdit {\n\t\t// Iben: Create a new marker view\n\t\tconst marker = new MarkerArea(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular based view\n\t\tconst result: NgxImageMarkerEdit = {\n\t\t\tmode: 'edit',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('statechange', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerValueChanges(marker),\n\t\t};\n\n\t\t// Iben: Set the configuration settings\n\t\t// These can later on be extended when needed\n\t\tmarker.uiStyleSettings.zoomButtonVisible = configuration.allowZoom;\n\t\tmarker.uiStyleSettings.zoomOutButtonVisible = configuration.allowZoom;\n\t\tmarker.zoomSteps = configuration.zoom?.levels || [1, 2, 3, 4];\n\t\tmarker.zoomLevel = configuration.zoom?.current ?? 1;\n\t\tmarker.uiStyleSettings.clearButtonVisible = configuration.allowClear;\n\n\t\t// Iben: Set the available marker types\n\t\tmarker.availableMarkerTypes =\n\t\t\t(configuration.markerTypes?.edit as any) || marker.ALL_MARKER_TYPES;\n\n\t\t// Iben: Set the class names of the items\n\t\tmarker.uiStyleSettings.notesAreaStyleClassName = 'ngx-image-marker-notes-area';\n\t\tmarker.uiStyleSettings.toolbarStyleColorsClassName = 'ngx-image-marker-toolbar';\n\t\tmarker.uiStyleSettings.toolboxStyleColorsClassName = 'ngx-image-marker-toolbox';\n\t\tmarker.uiStyleSettings.toolbarButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button';\n\t\tmarker.uiStyleSettings.toolbarActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button-active';\n\t\tmarker.uiStyleSettings.toolboxButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button';\n\t\tmarker.uiStyleSettings.toolboxActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button-active';\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show();\n\n\t\t// Iben: If there was state before, set it accordingly\n\t\tif (configuration.defaultState) {\n\t\t\tmarker.restoreState(configuration.defaultState);\n\t\t}\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Listen to the value changes in the editable view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerValueChanges(marker: MarkerArea): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a new item was added to the marker view\n\t\tmarker.addEventListener('statechange', (event) => {\n\t\t\tvalueChanges.next(event?.markerArea?.getState());\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\t/**\n\t * Listen to the marker clicks in the readonly view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerClickedListener(marker: MarkerView): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a marker was clicked\n\t\tmarker.addEventListener('select', (_, marker) => {\n\t\t\tvalueChanges.next(marker);\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close all existing markers, removing the listeners where needed\n\t\tObject.values(this.markers)\n\t\t\t.filter(Boolean)\n\t\t\t.forEach((marker) => {\n\t\t\t\tmarker.close();\n\t\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerTypes.html":{"url":"interfaces/NgxImageMarkerTypes.html","title":"interface - NgxImageMarkerTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A record with the marker types we wish to show, both for the view and the edit mode\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edit\n                                        \n                                \n                                \n                                        \n                                            view\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edit:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        view\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        view:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerView.html":{"url":"interfaces/NgxImageMarkerView.html","title":"interface - NgxImageMarkerView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxIsAuthenticatedDirective.html":{"url":"directives/NgxIsAuthenticatedDirective.html","title":"directive - NgxIsAuthenticatedDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxIsAuthenticatedDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on whether the user is authenticated.\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxIsAuthenticated]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxIsAuthenticated\n                            \n                            \n                                    Public\n                                ngxIsAuthenticatedElse\n                            \n                            \n                                    Private\n                                shouldBeAuthenticated\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxIsAuthenticated\n                            \n                            \n                                ngxIsAuthenticatedElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticated\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                            \n                        \n                \n                    \n                        Whether the user has to be authenticated\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticatedElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:125\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:35\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticatedElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldBeAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:40\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\n\n/**\n *  * A directive that will render a part of the template based on whether the user is authenticated.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxIsAuthenticated]',\n})\nexport class NgxIsAuthenticatedDirective implements OnDestroy {\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tprivate shouldBeAuthenticated: boolean = true;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldBeAuthenticated = this.ngxIsAuthenticated();\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxIsAuthenticatedElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tpublic ngxIsAuthenticated: InputSignal = input();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxIsAuthenticatedElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService.isAuthenticated$\n\t\t\t.pipe(\n\t\t\t\ttap((isAuthenticated) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(isAuthenticated && this.shouldBeAuthenticated) ||\n\t\t\t\t\t\t(!isAuthenticated && !this.shouldBeAuthenticated)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxLinkConfiguration.html":{"url":"interfaces/NgxLinkConfiguration.html","title":"interface - NgxLinkConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxLinkConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/link.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The default configuration of the link\nloading - An optional component used for the loading state\nicon - An optional component used for the icon\niconPosition - The optional default position of the icon, by default left\nlabelWrapper - The optional default HTML element used to wrap the button link, by default span\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iconPosition\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelWrapper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iconPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iconPosition:         NgxLinkIconPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxLinkIconPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelWrapper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelWrapper:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\n/**\n * The priority of the link\n */\nexport type NgxLinkPriority = 'primary' | 'secondary' | 'tertiary' | 'danger';\n\n/**\n * The position of the icon in the button\n */\nexport type NgxLinkIconPosition = 'left' | 'right';\n\n/**\n * The type of the link\n */\nexport type NgxLinkType = 'text' | 'icon' | 'button';\n\n/**\n * The context of the link\n */\nexport type NgxLinkContext = 'navigation' | 'breadcrumb' | 'anchor' | 'form' | 'footer';\n\n/**\n * Whether the link is an internal link or external link\n */\nexport type NgxLinkDestination = 'internal' | 'external';\n\n/**\n * The default configuration of the link\n *\n * loading - An optional component used for the loading state\n * icon - An optional component used for the icon\n * iconPosition - The optional default position of the icon, by default `left`\n * labelWrapper - The optional default HTML element used to wrap the button link, by default `span`\n */\nexport interface NgxLinkConfiguration {\n\tloading?: Type;\n\ticon?: Type;\n\ticonPosition?: NgxLinkIconPosition;\n\tlabelWrapper?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxLinkDirective.html":{"url":"directives/NgxLinkDirective.html","title":"directive - NgxLinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxLinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/link/link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds the classic link types, priority, context, destination and icon handling\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxLink]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                classes\n                            \n                            \n                                    Protected\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                    Readonly\n                                context\n                            \n                            \n                                    Public\n                                    Readonly\n                                destination\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                icon\n                            \n                            \n                                    Protected\n                                iconComponent\n                            \n                            \n                                    Protected\n                                iconElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                iconPosition\n                            \n                            \n                                    Public\n                                    Readonly\n                                linkType\n                            \n                            \n                                    Protected\n                                    Readonly\n                                nativeElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                priority\n                            \n                            \n                                    Protected\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Protected\n                                    Readonly\n                                target\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleIcon\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                icon\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:112\n                            \n                        \n                \n                    \n                        The context in which the link is used, by default undefined.\nThe options are navigation, breadcrumb, anchor, form and footer.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     InputSignal<>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:131\n                            \n                        \n                \n                    \n                        An optional icon we wish to show\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleIcon\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleIcon()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:165\n                        \n                    \n\n\n            \n                \n                        Adds or removes an icon\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:140\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        classes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\treturn `\n    ngx-link\n    ngx-link-${this.linkType()}\n    ngx-link-${this.priority()}\n    ngx-link-${this.destination()}\n    ${this.context() ? `ngx-link-${this.context()}` : ''}\n    ${this.icon() ? 'ngx-link-with-icon' : ''}\n    `;\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:79\n                        \n                    \n\n            \n                \n                    The classes we set to the link\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxLinkConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxLinkConfigurationToken, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:62\n                        \n                    \n\n            \n                \n                    An optional set of configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:112\n                        \n                    \n\n            \n                \n                    The context in which the link is used, by default undefined.\nThe options are navigation, breadcrumb, anchor, form and footer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('internal')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:126\n                        \n                    \n\n            \n                \n                    The destination of the link, by default internal.\nThe options are internal and external.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tElementRef\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:45\n                        \n                    \n\n            \n                \n                    An instance of the elementRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal<>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:131\n                        \n                    \n\n            \n                \n                    An optional icon we wish to show\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        iconComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:74\n                        \n                    \n\n            \n                \n                    The icon component in case we did configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        iconElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:69\n                        \n                    \n\n            \n                \n                    The icon element in case we did not configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        iconPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('left')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:138\n                        \n                    \n\n            \n                \n                    The position of the icon when provided, by default this is left unless overwritten in the configuration\nThe options are left and right.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        linkType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('text')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:105\n                        \n                    \n\n            \n                \n                    The visual type of the link, by default text.\nThe options are text, button and icon.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        nativeElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.elementRef.nativeElement\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:52\n                        \n                    \n\n            \n                \n                    An instance of the NativeElement\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('primary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:119\n                        \n                    \n\n            \n                \n                    The priority the link, by default primary.\nThe options are primary, secondary, tertiary and danger.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:57\n                        \n                    \n\n            \n                \n                    An instance of the renderer\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() =>\n\t\tthis.destination() === 'internal' ? '_self' : '_blank'\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:96\n                        \n                    \n\n            \n                \n                    The target calculated based on the destination\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:40\n                        \n                    \n\n            \n                \n                    An instance of the viewContainer\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tComponentRef,\n\tcomputed,\n\tDirective,\n\tElementRef,\n\tinject,\n\tinput,\n\tInputSignal,\n\tOnInit,\n\tRenderer2,\n\tSignal,\n\tViewContainerRef,\n} from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxLinkConfigurationToken } from '../../tokens';\nimport {\n\tNgxLinkConfiguration,\n\tNgxLinkContext,\n\tNgxLinkDestination,\n\tNgxLinkIconPosition,\n\tNgxLinkPriority,\n\tNgxLinkType,\n} from '../../types';\n\n/**\n * A directive that adds the classic link types, priority, context, destination and icon handling\n */\n@Directive({\n\tselector: '[ngxLink]',\n\thost: {\n\t\t'[attr.class]': 'classes()',\n\t\t'[attr.target]': 'target()',\n\t},\n})\nexport class NgxLinkDirective implements OnInit {\n\t/**\n\t * An instance of the viewContainer\n\t */\n\tprotected readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n\t/**\n\t * An instance of the elementRef\n\t */\n\tprotected readonly elementRef: ElementRef = inject(\n\t\tElementRef\n\t);\n\n\t/**\n\t * An instance of the NativeElement\n\t */\n\tprotected readonly nativeElement = this.elementRef.nativeElement;\n\n\t/**\n\t * An instance of the renderer\n\t */\n\tprotected readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * An optional set of configuration\n\t */\n\tprotected readonly configuration: NgxLinkConfiguration = inject(NgxLinkConfigurationToken, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t * The icon element in case we did not configure an icon component\n\t */\n\tprotected iconElement: HTMLElement;\n\n\t/**\n\t * The icon component in case we did configure an icon component\n\t */\n\tprotected iconComponent: ComponentRef;\n\n\t/**\n\t * The classes we set to the link\n\t */\n\tprotected readonly classes: Signal = computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\treturn `\n    ngx-link\n    ngx-link-${this.linkType()}\n    ngx-link-${this.priority()}\n    ngx-link-${this.destination()}\n    ${this.context() ? `ngx-link-${this.context()}` : ''}\n    ${this.icon() ? 'ngx-link-with-icon' : ''}\n    `;\n\t});\n\n\t/**\n\t * The target calculated based on the destination\n\t */\n\tprotected readonly target: Signal = computed(() =>\n\t\tthis.destination() === 'internal' ? '_self' : '_blank'\n\t);\n\n\t/**\n\t * The visual type of the link, by default `text`.\n\t *\n\t * The options are `text`, `button` and `icon`.\n\t */\n\tpublic readonly linkType: InputSignal = input('text');\n\n\t/**\n\t * The context in which the link is used, by default undefined.\n\t *\n\t * The options are `navigation`, `breadcrumb`, `anchor`, `form` and `footer`.\n\t */\n\tpublic readonly context: InputSignal = input();\n\n\t/**\n\t * The priority the link, by default `primary`.\n\t *\n\t * The options are `primary`, `secondary`, `tertiary` and `danger`.\n\t */\n\tpublic readonly priority: InputSignal = input('primary');\n\n\t/**\n\t * The destination of the link, by default `internal`.\n\t *\n\t * The options are `internal` and `external`.\n\t */\n\tpublic readonly destination: InputSignal = input('internal');\n\n\t/**\n\t * An optional icon we wish to show\n\t */\n\tpublic readonly icon: InputSignal = input();\n\n\t/**\n\t * The position of the icon when provided, by default this is `left` unless overwritten in the configuration\n\t *\n\t * The options are `left` and `right`.\n\t */\n\tpublic readonly iconPosition: InputSignal = input('left');\n\n\tngOnInit(): void {\n\t\t// Iben: Wrap the base text in an element\n\t\tconst wrapperElement: HTMLSpanElement = this.renderer.createElement(\n\t\t\tthis.configuration?.labelWrapper || 'span'\n\t\t);\n\n\t\t// Iben: Append all the child nodes\n\t\tthis.nativeElement.childNodes.forEach((node) => {\n\t\t\tthis.renderer.appendChild(wrapperElement, node);\n\t\t});\n\n\t\tthis.renderer.setAttribute(wrapperElement, 'class', 'ngx-link-label');\n\n\t\t// Iben: Remove all the nodes\n\t\tthis.nativeElement.childNodes.forEach((node) => {\n\t\t\tthis.renderer.removeChild(wrapperElement, node);\n\t\t});\n\n\t\t// Iben: Remove the current innerHtml and replace it with a span element\n\t\tthis.renderer.appendChild(this.nativeElement, wrapperElement);\n\t}\n\n\t/**\n\t * Adds or removes an icon\n\t */\n\tprivate handleIcon(): void {\n\t\t// Iben: Check if we need to add an icon\n\t\tif (this.icon()) {\n\t\t\t// Iben: Check if the link already has an icon, if not, add it\n\t\t\tif (!this.iconElement && !this.iconComponent) {\n\t\t\t\t// Iben: If no icon component exists, we create a regular i element\n\t\t\t\tif (!this.configuration?.icon) {\n\t\t\t\t\t// Iben: Create a new icon element\n\t\t\t\t\tthis.iconElement = this.renderer.createElement('i');\n\t\t\t\t\tthis.iconElement.className = `ngx-link-icon ${this.icon()}`;\n\t\t\t\t} else {\n\t\t\t\t\t// Iben: Create new component and add the icon\n\t\t\t\t\tthis.iconComponent =\n\t\t\t\t\t\tthis.viewContainer.createComponent(\n\t\t\t\t\t\t\tthis.configuration.icon,\n\t\t\t\t\t\t\t{ index: 0 }\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.iconComponent.setInput('data', this.icon());\n\t\t\t\t\tthis.renderer.addClass(\n\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t'ngx-link-icon'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Add the icon depending on whether we want to add it on the left or the right\n\t\t\t\tthis.iconPosition() === 'left'\n\t\t\t\t\t? this.renderer.insertBefore(\n\t\t\t\t\t\t\tthis.nativeElement,\n\t\t\t\t\t\t\tthis.iconElement ||\n\t\t\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t\tthis.nativeElement.firstChild\n\t\t\t\t\t  )\n\t\t\t\t\t: this.renderer.appendChild(\n\t\t\t\t\t\t\tthis.nativeElement,\n\t\t\t\t\t\t\tthis.iconElement || this.iconComponent.instance.elementRef.nativeElement\n\t\t\t\t\t  );\n\t\t\t}\n\t\t}\n\t\t// Iben: If an icon already exists and we no longer have an icon presented, we remove it\n\t\telse if (this.iconElement || this.iconComponent) {\n\t\t\tif (!this.configuration?.icon) {\n\t\t\t\tthis.renderer.removeChild(this.nativeElement, this.iconElement);\n\t\t\t\tthis.iconElement = undefined;\n\t\t\t} else {\n\t\t\t\tthis.iconComponent?.destroy();\n\t\t\t\tthis.iconComponent = undefined;\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxMediaQuery.html":{"url":"interfaces/NgxMediaQuery.html","title":"interface - NgxMediaQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxMediaQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/media-query.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxMediaQuery {\n\tid: string;\n\tquery: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxMediaQueryDirective.html":{"url":"directives/NgxMediaQueryDirective.html","title":"directive - NgxMediaQueryDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxMediaQueryDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the current screen size matches the provided query\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxMediaQuery]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Protected\n                                destroyed$\n                            \n                            \n                                    Protected\n                                elseTemplateRef\n                            \n                            \n                                    Protected\n                                elseViewRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                mediaQueryService\n                            \n                            \n                                    Public\n                                ngxMediaQuery\n                            \n                            \n                                    Public\n                                ngxMediaQueryElse\n                            \n                            \n                                    Public\n                                ngxMediaQueryShouldMatch\n                            \n                            \n                                    Protected\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Protected\n                                thenTemplateRef\n                            \n                            \n                                    Protected\n                                thenViewRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxMediaQuery\n                            \n                            \n                                ngxMediaQueryElse\n                            \n                            \n                                ngxMediaQueryShouldMatch\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxMediaQuery\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:58\n                            \n                        \n                \n                    \n                        The query it should match\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxMediaQueryElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:63\n                            \n                        \n                \n                    \n                        The else template in case the query isn't matched\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxMediaQueryShouldMatch\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                            \n                        \n                \n                    \n                        Whether the query should be matched, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:151\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:97\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:40\n                        \n                    \n\n            \n                \n                    The provided ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:45\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        mediaQueryService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMediaQueryService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMediaQueryService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQuery\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:58\n                        \n                    \n\n            \n                \n                    The query it should match\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQueryElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:63\n                        \n                    \n\n            \n                \n                    The else template in case the query isn't matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQueryShouldMatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                        \n                    \n\n            \n                \n                    Whether the query should be matched, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:31\n                        \n                    \n\n            \n                \n                    The provided template ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:50\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:35\n                        \n                    \n\n            \n                \n                    The provided ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tinject,\n\tinput,\n\tInputSignal,\n\tTemplateRef,\n\tViewContainerRef,\n\tOnDestroy,\n} from '@angular/core';\nimport { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';\nimport { Subject, tap, takeUntil, combineLatest } from 'rxjs';\n\nimport { NgxMediaQueryService } from '../../services';\n\n/**\n * A directive that will render a part of the template based on whether the current screen size matches the provided query\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n@Directive({\n\tselector: '[ngxMediaQuery]',\n})\nexport class NgxMediaQueryDirective implements OnDestroy {\n\tprotected readonly mediaQueryService: NgxMediaQueryService = inject(NgxMediaQueryService);\n\t/**\n\t * The provided template ref\n\t */\n\tprotected readonly templateRef = inject>(TemplateRef);\n\t/**\n\t * The provided ViewContainerRef\n\t */\n\tprotected readonly viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The provided ChangeDetectorRef\n\t */\n\tprotected readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprotected destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprotected thenTemplateRef: TemplateRef | null = null;\n\tprotected thenViewRef: EmbeddedViewRef | null = null;\n\tprotected elseTemplateRef: TemplateRef | null = null;\n\tprotected elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The query it should match\n\t */\n\tpublic ngxMediaQuery: InputSignal = input();\n\n\t/**\n\t * The else template in case the query isn't matched\n\t */\n\tpublic ngxMediaQueryElse: InputSignal> = input(undefined);\n\n\t/**\n\t * Whether the query should be matched, by default this is true\n\t */\n\tpublic ngxMediaQueryShouldMatch: InputSignal = input(true);\n\n\tconstructor() {\n\t\tconst templateRef = this.templateRef;\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\t// Iben: Listen to the changes and handle them accordingly\n\t\tcombineLatest([\n\t\t\ttoObservable(this.ngxMediaQuery),\n\t\t\ttoObservable(this.ngxMediaQueryElse),\n\t\t\ttoObservable(this.ngxMediaQueryShouldMatch),\n\t\t])\n\t\t\t.pipe(\n\t\t\t\ttap(() => {\n\t\t\t\t\tthis.updateView();\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.mediaQueryService\n\t\t\t.matchesQuery(this.ngxMediaQuery())\n\t\t\t.pipe(\n\t\t\t\ttap((matchesQuery) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.ngxMediaQueryShouldMatch()\n\t\t\t\t\t\t? matchesQuery\n\t\t\t\t\t\t: !matchesQuery;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMediaQueryService.html":{"url":"injectables/NgxMediaQueryService.html","title":"injectable - NgxMediaQueryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMediaQueryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/media-query/media-query.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that can be used to track media queries and their changes.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                currentQueryMatch\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentQueryMatch$\n                            \n                            \n                                    Private\n                                listeners\n                            \n                            \n                                    Private\n                                    Readonly\n                                mediaQueries\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matchesQuery\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:38\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        matchesQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    matchesQuery(id: string | string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Check if the query matches with the current screen size\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the query we wish to match\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerQuery(value: NgxMediaQuery | NgxMediaQuery[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Registers one or multiple queries to listen to\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            NgxMediaQuery | NgxMediaQuery[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOne or multiple queries to register\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        currentQueryMatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:34\n                        \n                    \n\n            \n                \n                    The id of the current query match\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentQueryMatch$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentQueryMatch.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        listeners\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:28\n                        \n                    \n\n            \n                \n                    A record of all the registered listeners\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaQueries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMediaQuery[]\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMediaQueriesToken, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:21\n                        \n                    \n\n            \n                \n                    An optional list of default mediaQueries we want to register at start time\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:16\n                        \n                    \n\n            \n                \n                    An instance of the NgxWindowService\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, distinctUntilChanged, filter, map, Observable, throwError } from 'rxjs';\n\nimport { NgxMediaQueriesToken } from '../../tokens';\nimport { NgxMediaQuery } from '../../types';\n\n/**\n * A service that can be used to track media queries and their changes.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxMediaQueryService implements OnDestroy {\n\t/**\n\t * An instance of the NgxWindowService\n\t */\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * An optional list of default mediaQueries we want to register at start time\n\t */\n\tprivate readonly mediaQueries: NgxMediaQuery[] = inject(NgxMediaQueriesToken, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t * A record of all the registered listeners\n\t */\n\tprivate listeners: Record =\n\t\t{};\n\n\t/**\n\t * The id of the current query match\n\t */\n\tprivate readonly currentQueryMatch: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\tpublic readonly currentQueryMatch$: Observable = this.currentQueryMatch.asObservable();\n\n\tconstructor() {\n\t\t// Iben: Register the optionally provided standard queries\n\t\tthis.registerQuery(this.mediaQueries || []);\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Remove all the listeners\n\t\tObject.values(this.listeners).forEach(({ listener, mediaQueryList }) => {\n\t\t\tmediaQueryList.removeEventListener('change', listener);\n\t\t});\n\t}\n\n\t/**\n\t * Registers one or multiple queries to listen to\n\t *\n\t * @param value - One or multiple queries to register\n\t */\n\tpublic registerQuery(value: NgxMediaQuery | NgxMediaQuery[]): void {\n\t\t// Iben: Only run when we're in the browser\n\t\tthis.windowService.runInBrowser(({ browserWindow }) => {\n\t\t\t// Iben: Loop over all the queries\n\t\t\t(Array.isArray(value) ? value : [value]).forEach((item) => {\n\t\t\t\tconst { id, query } = item;\n\n\t\t\t\t// Iben: Early exit if a query already exists\n\t\t\t\tif (this.listeners[id]) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t'@ibenvandeveire/ngx-layout: NgxMediaQueryService: A query with this id already exists.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Match the query with the browser\n\t\t\t\tconst mediaQueryList = browserWindow.matchMedia(query);\n\n\t\t\t\t// Iben: Perform an initial check to see if the query matches\n\t\t\t\tif (mediaQueryList.matches) {\n\t\t\t\t\tthis.currentQueryMatch.next(id);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Setup a listener to track the changes\n\t\t\t\tconst listener = (queryChangedEvent: MediaQueryListEvent) => {\n\t\t\t\t\tif (queryChangedEvent.matches) {\n\t\t\t\t\t\t// Iben: Emit the id of the query that has changed\n\t\t\t\t\t\tthis.currentQueryMatch.next(id);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Iben: Register the listener to the query\n\t\t\t\tmediaQueryList.addEventListener('change', listener);\n\n\t\t\t\t// Iben: Save the listener to remove it later\n\t\t\t\tthis.listeners[id] = {\n\t\t\t\t\tlistener,\n\t\t\t\t\tmediaQueryList,\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Check if the query matches with the current screen size\n\t *\n\t * @param id - The id of the query we wish to match\n\t */\n\tpublic matchesQuery(id: string | string[]): Observable {\n\t\tconst ids = Array.isArray(id) ? id : [id];\n\n\t\t// Iben: If the listener does not exist yet, throw an error\n\t\tif (ids.every((item) => !this.listeners[item])) {\n\t\t\treturn throwError(\n\t\t\t\t() =>\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t'@ibenvandeveire/ngx-layout: NgxMediaQueryService: No provided query matched with the provided ids.'\n\t\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Create a matching set\n\t\tconst matchingSet = new Set(ids);\n\n\t\t// Iben: Return whether the current screen size matches the query\n\t\treturn this.currentQueryMatch.pipe(\n\t\t\tfilter(Boolean),\n\t\t\tdistinctUntilChanged(),\n\t\t\tmap((query) => matchingSet.has(query))\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMediaQueryService-1.html":{"url":"injectables/NgxMediaQueryService-1.html","title":"injectable - NgxMediaQueryService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMediaQueryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that can be used to track media queries and their changes. It exposes a method\nto register media queries, which takes an array of tuples with the id of the media query\nand the query itself. The service will then emit the id of the media query that has\nchanged when subscribed to the getMatchingQuery$ method.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                mediaQueryListenerMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryChangedSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryIdMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryListMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMatchingQuery$\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerMediaQueries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getMatchingQuery$\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMatchingQuery$(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Pass the id of the query whose changes need to be listened to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the media query that should be checked.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits a boolean value whenever the requested media query changes.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Unregister all media query subscriptions from the service.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerMediaQueries\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerMediaQueries(...queries: [])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Register a list of media queries that need to be tracked by the service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                        []\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of media queries that should be registered with the service.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaQueryListenerMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReplaySubject\n\n                    \n                \n                \n                    \n                        Default value : new ReplaySubject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that emits the id of the media query that has changed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryIdMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:23\n                        \n                    \n\n            \n                \n                    A map of the registered media queries with their id.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryListMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:18\n                        \n                    \n\n            \n                \n                    A map of media queries that are registered with the service.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { filter, map, Observable, ReplaySubject } from 'rxjs';\n\n/**\n * A service that can be used to track media queries and their changes. It exposes a method\n * to register media queries, which takes an array of tuples with the id of the media query\n * and the query itself. The service will then emit the id of the media query that has\n * changed when subscribed to the `getMatchingQuery$` method.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxMediaQueryService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A map of media queries that are registered with the service.\n\t */\n\tprivate readonly queryListMap: Map = new Map();\n\n\t/**\n\t * A map of the registered media queries with their id.\n\t */\n\tprivate readonly queryIdMap: Map = new Map();\n\n\t/*\n\t * A map of listeners that are registered with the service.\n\t * They are saved to be able to remove them when the service is destroyed.\n\t */\n\tprivate readonly mediaQueryListenerMap: Map void\n\t> = new Map();\n\n\t/**\n\t * A subject that emits the id of the media query that has changed.\n\t */\n\tprivate readonly queryChangedSubject: ReplaySubject = new ReplaySubject();\n\n\t/**\n\t * Register a list of media queries that need to be tracked by the service.\n\t *\n\t * @param queries - A list of media queries that should be registered with the service.\n\t */\n\tpublic registerMediaQueries(...queries: [id: string, query: string][]): void {\n\t\tthis.windowService.runInBrowser(({ browserWindow }) => {\n\t\t\tfor (const [id, query] of queries) {\n\t\t\t\t// Wouter: Warn if the id has already been registered.\n\t\t\t\tif (this.queryIdMap.get(id)) {\n\t\t\t\t\treturn console.warn(\n\t\t\t\t\t\t`NgxMediaQueryService: Media query with id '${id}' already exists and is defined by '${this.queryIdMap.get(\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t)}'`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: If the query has already been registered, throw an error to prevent duplicate subscriptions\n\t\t\t\tif ([...this.queryIdMap].some(([_, value]) => value === query)) {\n\t\t\t\t\tconst duplicateQuery = [...this.queryIdMap].find(\n\t\t\t\t\t\t([_, value]) => value === query\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`NgxMediaQueryService: Query of ['${id}', ${query}] already exists and is defined by ['${duplicateQuery[0]}', ${duplicateQuery[1]}]`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: save the id and query\n\t\t\t\tthis.queryIdMap.set(id, query);\n\n\t\t\t\t// Wouter: For each query, create a MediaQueryList object\n\t\t\t\tconst matchedQuery = browserWindow.matchMedia(query);\n\n\t\t\t\t// Wouter: Save the query\n\t\t\t\tthis.queryListMap.set(id, matchedQuery);\n\n\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\tthis.queryChangedSubject.next(id);\n\n\t\t\t\t// Wouter: Create a listener for the query. This is done separately to be\n\t\t\t\t// able to remove the listener when the service is destroyed\n\t\t\t\tconst listener = (queryChangedEvent: MediaQueryListEvent) => {\n\t\t\t\t\tthis.queryListMap.set(id, queryChangedEvent.currentTarget as MediaQueryList);\n\n\t\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\t\tthis.queryChangedSubject.next(id);\n\t\t\t\t};\n\n\t\t\t\t// Wouter: Register the listener to the query\n\t\t\t\tmatchedQuery.addEventListener('change', listener);\n\n\t\t\t\t// Wouter: Save the listener\n\t\t\t\tthis.mediaQueryListenerMap.set(id, listener);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Pass the id of the query whose changes need to be listened to.\n\t *\n\t * @param id - The id of the media query that should be checked.\n\t * @returns An observable that emits a boolean value whenever the requested media query changes.\n\t */\n\tpublic getMatchingQuery$(id: string): Observable {\n\t\t// Wouter: Throw an error if the query has not been registered\n\t\tif (!this.queryIdMap.has(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`NgxMediaQueryService: No media query with id '${id}' has been registered. Please register the media query first using the 'registerMediaQueries' method.`\n\t\t\t);\n\t\t}\n\n\t\treturn this.queryChangedSubject.asObservable().pipe(\n\t\t\t// Wouter: Filter the query that has changed.\n\t\t\t// This will make sure only the [id] streams are triggered.\n\t\t\tfilter((queryId) => queryId === id),\n\t\t\tmap(() => this.queryListMap.get(id).matches)\n\t\t);\n\t}\n\n\t/**\n\t * Unregister all media query subscriptions from the service.\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Wouter: Remove all eventListeners\n\t\t\tfor (const [id, query] of this.queryListMap) {\n\t\t\t\tquery.removeEventListener('change', this.mediaQueryListenerMap.get(id));\n\t\t\t}\n\n\t\t\t// Wouter: Complete subscriptions\n\t\t\tthis.queryChangedSubject.next(null);\n\t\t\tthis.queryChangedSubject.complete();\n\n\t\t\t// Wouter: Clear maps\n\t\t\tthis.queryListMap.clear();\n\t\t\tthis.mediaQueryListenerMap.clear();\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxMobileLayout.html":{"url":"interfaces/NgxMobileLayout.html","title":"interface - NgxMobileLayout","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxMobileLayout\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/mobile-layout.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A layout configuration for the NgxMobileLayoutService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            aside\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            flyout\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            navigation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aside\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aside:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional aside we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        flyout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flyout:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional flyout we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The footer we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The header we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        navigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        navigation:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional navigation we wish to render\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nexport type ComponentType = Type | null;\n\n/**\n * A layout configuration for the `NgxMobileLayoutService`\n */\nexport interface NgxMobileLayout {\n\t/**\n\t * The header we wish to render\n\t */\n\theader?: {\n\t\t/**\n\t\t * The center part of the header we wish to render\n\t\t */\n\t\tmain?: ComponentType;\n\t\t/**\n\t\t * The left part of the header we wish to render\n\t\t */\n\t\tleft?: ComponentType;\n\t\t/**\n\t\t * The right part of the header we wish to render\n\t\t */\n\t\tright?: ComponentType;\n\t};\n\t/**\n\t * An optional flyout we wish to render\n\t */\n\tflyout?: ComponentType;\n\t/**\n\t * An optional aside we wish to render\n\t */\n\taside?: ComponentType;\n\t/**\n\t * An optional navigation we wish to render\n\t */\n\tnavigation?: ComponentType;\n\t/**\n\t * The footer we wish to render\n\t */\n\tfooter?: ComponentType;\n}\n\n/**\n * All possible elements of the mobile layout\n */\nexport type NgxMobileLayoutElements =\n\t| keyof Omit\n\t| `header.${keyof NgxMobileLayout['header']}`;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMobileLayoutComponent.html":{"url":"components/NgxMobileLayoutComponent.html","title":"component - NgxMobileLayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxMobileLayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component used to render a mobile-first layout\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-mobile-layout\n            \n\n\n            \n                imports\n                \n                            NgComponentOutlet\n                            NgTemplateOutlet\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./mobile-layout.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                asideShown\n                            \n                            \n                                    Public\n                                    Readonly\n                                contentTemplate\n                            \n                            \n                                    Protected\n                                    Readonly\n                                flyoutShown\n                            \n                            \n                                    Protected\n                                layout\n                            \n                            \n                                    Protected\n                                    Readonly\n                                layoutService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        asideShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.layoutService.asideShown\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:36\n                        \n                    \n\n            \n                \n                    Whether the aside needs to be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        contentTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:41\n                        \n                    \n\n            \n                \n                    An optional template we can pass to replace the default routerOutlet\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        flyoutShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.layoutService.flyoutShown\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:31\n                        \n                    \n\n            \n                \n                    Whether the flyout needs to be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        layout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : toSignal(this.layoutService.layout$)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:26\n                        \n                    \n\n            \n                \n                    The currently displayed layout\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        layoutService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMobileLayoutService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMobileLayoutService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:21\n                        \n                    \n\n            \n                \n                    The instance of the NgxMobileLayoutService\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgComponentOutlet, NgTemplateOutlet } from '@angular/common';\nimport { Component, contentChild, inject, OnInit, Signal, TemplateRef } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { RouterModule } from '@angular/router';\n\nimport { NgxMobileLayoutService } from '../../services';\nimport { NgxMobileLayout } from '../../types';\n\n/**\n * A component used to render a mobile-first layout\n */\n@Component({\n\tselector: 'ngx-mobile-layout',\n\timports: [NgComponentOutlet, NgTemplateOutlet, RouterModule],\n\ttemplateUrl: './mobile-layout.component.html',\n})\nexport class NgxMobileLayoutComponent implements OnInit {\n\t/**\n\t * The instance of the NgxMobileLayoutService\n\t */\n\tprotected readonly layoutService: NgxMobileLayoutService = inject(NgxMobileLayoutService);\n\n\t/**\n\t * The currently displayed layout\n\t */\n\tprotected layout: Signal = toSignal(this.layoutService.layout$);\n\n\t/**\n\t * Whether the flyout needs to be shown\n\t */\n\tprotected readonly flyoutShown: Signal = this.layoutService.flyoutShown;\n\n\t/**\n\t * Whether the aside needs to be shown\n\t */\n\tprotected readonly asideShown: Signal = this.layoutService.asideShown;\n\n\t/**\n\t * An optional template we can pass to replace the default routerOutlet\n\t */\n\tpublic readonly contentTemplate = contentChild>('contentTmpl');\n\n\tngOnInit(): void {\n\t\t// Iben: Sets up the initial layout if one was provided\n\t\tthis.layoutService.setUpInitialLayout();\n\t}\n}\n\n    \n\n    \n        @if(layout()) {\n\n\t@if(layout().header) {\n\t\n\t\t@if(layout().header.left) {\n\t\t\n\t\t}\n\t\t\n\n\t\t@if(layout().header.right) {\n\t\t\n\t\t}\n\t\n\t} @if(layout().navigation) {\n\t\n\t\t\n\t\n\t} @if(layout().aside && asideShown()) {\n\t\n\t\t\n\t\n\t}\n\n\t\n\t\t@if(contentTemplate()) {\n\t\t\n\t\t} @else {\n\t\t\n\t\t}\n\t\n\n\t@if(layout().flyout && flyoutShown()) {\n\t\n\t\t\n\t\n\t} @if(layout().footer) {\n\t\n\t\t\n\t\n\t}\n\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if(layout()) {\t@if(layout().header) {\t\t\t@if(layout().header.left) {\t\t\t\t}\t\t\t\t@if(layout().header.right) {\t\t\t\t}\t\t} @if(layout().navigation) {\t\t\t\t\t} @if(layout().aside && asideShown()) {\t\t\t\t\t}\t\t\t@if(contentTemplate()) {\t\t\t\t} @else {\t\t\t\t}\t\t@if(layout().flyout && flyoutShown()) {\t\t\t\t\t} @if(layout().footer) {\t\t\t\t\t}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMobileLayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMobileLayoutService.html":{"url":"injectables/NgxMobileLayoutService.html","title":"injectable - NgxMobileLayoutService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMobileLayoutService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The NgxMobileLayoutService allows us to configure an entire layout based on routing rather than on HTML. This allows for an easier use for mobile-first applications.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                asideShown\n                            \n                            \n                                    Protected\n                                    Readonly\n                                defaultLayout\n                            \n                            \n                                    Public\n                                flyoutShown\n                            \n                            \n                                    Protected\n                                    Readonly\n                                initialLayoutSet$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                initialLayoutSetSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                layout$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                layoutSubject$\n                            \n                            \n                                    Protected\n                                showAside\n                            \n                            \n                                    Protected\n                                showFlyout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeAside\n                            \n                            \n                                    Public\n                                closeFlyout\n                            \n                            \n                                    Private\n                                getComponent\n                            \n                            \n                                    Public\n                                hasElement\n                            \n                            \n                                    Public\n                                openAside\n                            \n                            \n                                    Public\n                                openFlyout\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setUpInitialLayout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeAside\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeAside()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Close the currently open aside\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeFlyout\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeFlyout()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:153\n                        \n                    \n\n\n            \n                \n                        Close the currently open flyout\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComponent(component: ComponentType, fallback: ComponentType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Returns either the component or the fallback we wish to render\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                component\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component\n\n\n                                            \n                                        \n                                        \n                                                fallback\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe fallback\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasElement(element: NgxMobileLayoutElements)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Returns whether an element is defined in the layout\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            NgxMobileLayoutElements\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we wish to check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        openAside\n                        \n                    \n                \n            \n            \n                \n                        \n                    openAside()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Open a aside\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        openFlyout\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFlyout(component?: ComponentType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Open a flyout\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                component\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLayout\n                        \n                    \n                \n            \n            \n                \n                        \n                    setLayout(layout: NgxMobileLayout)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Sets the provided layout for the\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                layout\n                                            \n                                                            NgxMobileLayout\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe layout we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setUpInitialLayout\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpInitialLayout(markAsInitial: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Provides an initial layout if one was provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                markAsInitial\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        asideShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.showAside.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:65\n                        \n                    \n\n            \n                \n                    Whether the aside is visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        defaultLayout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMobileLayout | undefined\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxMobileLayoutConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:31\n                        \n                    \n\n            \n                \n                    An optional default layout that was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        flyoutShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.showFlyout.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:60\n                        \n                    \n\n            \n                \n                    Whether the flyout is visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        initialLayoutSet$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.initialLayoutSetSubject$\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:26\n                        \n                    \n\n            \n                \n                    Whether the initial layout has been set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        initialLayoutSetSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tfalse\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:19\n                        \n                    \n\n            \n                \n                    A subject holding whether the initial layout has been set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layout$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.layoutSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:55\n                        \n                    \n\n            \n                \n                    The current layout of the application as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        layoutSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:39\n                        \n                    \n\n            \n                \n                    A subject holding the current layout of the application\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        showAside\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:50\n                        \n                    \n\n            \n                \n                    Whether the aside should be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        showFlyout\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:45\n                        \n                    \n\n            \n                \n                    Whether the flyout should be shown\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable, signal, Signal, WritableSignal } from '@angular/core';\nimport { get } from 'lodash';\nimport clean from 'obj-clean';\nimport { BehaviorSubject, distinctUntilChanged, filter, map, Observable, take, tap } from 'rxjs';\n\nimport { NgxMobileLayoutConfigurationToken } from '../../tokens';\nimport { ComponentType, NgxMobileLayout, NgxMobileLayoutElements } from '../../types';\n\n/**\n * The `NgxMobileLayoutService` allows us to configure an entire layout based on routing rather than on HTML. This allows for an easier use for mobile-first applications.\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxMobileLayoutService {\n\t/**\n\t * A subject holding whether the initial layout has been set\n\t */\n\tprotected readonly initialLayoutSetSubject$: BehaviorSubject = new BehaviorSubject(\n\t\tfalse\n\t);\n\n\t/**\n\t * Whether the initial layout has been set\n\t */\n\tprotected readonly initialLayoutSet$: Observable = this.initialLayoutSetSubject$;\n\n\t/**\n\t * An optional default layout that was provided\n\t */\n\tprotected readonly defaultLayout: NgxMobileLayout | undefined = inject(\n\t\tNgxMobileLayoutConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * A subject holding the current layout of the application\n\t */\n\tprotected readonly layoutSubject$: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * Whether the flyout should be shown\n\t */\n\tprotected showFlyout: WritableSignal = signal(false);\n\n\t/**\n\t * Whether the aside should be shown\n\t */\n\tprotected showAside: WritableSignal = signal(false);\n\n\t/**\n\t * The current layout of the application as an Observable\n\t */\n\tpublic readonly layout$: Observable = this.layoutSubject$.asObservable();\n\n\t/**\n\t * Whether the flyout is visible\n\t */\n\tpublic flyoutShown: Signal = this.showFlyout.asReadonly();\n\n\t/**\n\t * Whether the aside is visible\n\t */\n\tpublic asideShown: Signal = this.showAside.asReadonly();\n\n\t/**\n\t * Sets the provided layout for the\n\t *\n\t * @param layout - The layout we wish to set\n\t */\n\tpublic setLayout(layout: NgxMobileLayout): Observable {\n\t\t// Iben: To prevent timing issues, we wait until the initial layout has been set\n\t\treturn this.initialLayoutSet$.pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap(() => {\n\t\t\t\t// Iben: If no default layout is provided, we set the layout as is\n\t\t\t\tif (!this.defaultLayout && layout) {\n\t\t\t\t\tthis.layoutSubject$.next(clean(layout) as NgxMobileLayout);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If layout is provided, we set the default layout\n\t\t\t\tif (!layout && this.defaultLayout) {\n\t\t\t\t\tthis.layoutSubject$.next(clean(this.defaultLayout) as NgxMobileLayout);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If a default layout is provided, we want to only replace the layout elements that weren't part of the original default\n\t\t\t\tthis.layoutSubject$.next(\n\t\t\t\t\tclean({\n\t\t\t\t\t\theader: {\n\t\t\t\t\t\t\tleft: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.left,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.left\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmain: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.main,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.main\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tright: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.right,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.right\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnavigation: this.getComponent(\n\t\t\t\t\t\t\tlayout.navigation,\n\t\t\t\t\t\t\tthis.defaultLayout.navigation\n\t\t\t\t\t\t),\n\t\t\t\t\t\tflyout: this.getComponent(layout.footer, this.defaultLayout.flyout),\n\t\t\t\t\t\taside: this.getComponent(layout.aside, this.defaultLayout.aside),\n\t\t\t\t\t\tfooter: this.getComponent(layout.footer, this.defaultLayout.footer),\n\t\t\t\t\t}) as NgxMobileLayout\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Open a flyout\n\t *\n\t * @param flyout - An optional flyout\n\t */\n\tpublic openFlyout(component?: ComponentType): void {\n\t\t//Iben: Get the flyout based on whether one was provided\n\t\tconst flyout = component || this.defaultLayout.flyout;\n\n\t\t// Iben: Early exit if needed\n\t\tif (!flyout) {\n\t\t\tconsole.warn(\n\t\t\t\t'@ibenvandeveire/ngx-layout - NgxMobileLayoutService: No flyout component was provided to the method or to the default configuration.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Add the flyout if there wasn't one defined\n\t\tthis.layoutSubject$.next({\n\t\t\t...this.layoutSubject$.getValue(),\n\t\t\tflyout,\n\t\t});\n\n\t\t// Iben: Make the flyout visible\n\t\tthis.showFlyout.set(true);\n\t}\n\n\t/**\n\t * Close the currently open flyout\n\t */\n\tpublic closeFlyout(): void {\n\t\t// Iben: Make the flyout invisible\n\t\tthis.showFlyout.set(false);\n\t}\n\n\t/**\n\t * Open a aside\n\t */\n\tpublic openAside(): void {\n\t\t// Iben: Early exit if needed\n\t\tif (!this.layoutSubject$.getValue().aside) {\n\t\t\tconsole.warn(\n\t\t\t\t'@ibenvandeveire/ngx-layout - NgxMobileLayoutService: No aside component was provided to the configuration.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.showAside.set(true);\n\t}\n\n\t/**\n\t * Close the currently open aside\n\t */\n\tpublic closeAside(): void {\n\t\tthis.showAside.set(false);\n\t}\n\n\t/**\n\t * Provides an initial layout if one was provided\n\t */\n\tpublic setUpInitialLayout(markAsInitial: boolean = true): void {\n\t\t// Iben: Set initial layout\n\t\tthis.layoutSubject$.next(clean(this.defaultLayout) as NgxMobileLayout);\n\n\t\t// Iben: Mark the initial layout set as true\n\t\tif (markAsInitial) {\n\t\t\tthis.initialLayoutSetSubject$.next(true);\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether an element is defined in the layout\n\t *\n\t * @param element - The element we wish to check\n\t */\n\tpublic hasElement(element: NgxMobileLayoutElements): Observable {\n\t\treturn this.layout$.pipe(\n\t\t\tfilter(Boolean),\n\t\t\tdistinctUntilChanged(),\n\t\t\tmap((layout) => Boolean(get(layout, element)))\n\t\t);\n\t}\n\n\t/**\n\t * Returns either the component or the fallback we wish to render\n\t *\n\t * @param component - The component\n\t * @param fallback - The fallback\n\t */\n\tprivate getComponent(component: ComponentType, fallback: ComponentType): ComponentType {\n\t\t// Iben: If the component was explicitly set to `null`, we know we need to remove the current component and not fall back to the fallback\n\t\tif (component === null) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Either return the component, or the fallback\n\t\treturn component || fallback;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxModalAbstractComponent.html":{"url":"directives/NgxModalAbstractComponent.html","title":"directive - NgxModalAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxModalAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxModalService\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaDescribedBy\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaLabelledBy\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ariaDescribedBy\n                            \n                            \n                                ariaLabelledBy\n                            \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ariaDescribedBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40\n                            \n                        \n                \n                    \n                        An optional aria-describedBy property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ariaLabelledBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35\n                            \n                        \n                \n                    \n                        An optional aria-labelledby property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45\n                            \n                        \n                \n                    \n                        Optional data that can be passed to the modal\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28\n                \n            \n\n\n            \n                \n                    Remove the modal on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28\n                        \n                    \n\n\n            \n                \n                        Remove the modal on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:50\n                        \n                    \n\n            \n                \n                    An emitter that will emit an action we can later respond to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaDescribedBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40\n                        \n                    \n\n            \n                \n                    An optional aria-describedBy property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaLabelledBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35\n                        \n                    \n\n            \n                \n                    An optional aria-labelledby property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:56\n                        \n                    \n\n            \n                \n                    An emitter that will emit if the modal is closed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45\n                        \n                    \n\n            \n                \n                    Optional data that can be passed to the modal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tDirective,\n\tElementRef,\n\tHostListener,\n\tOutputEmitterRef,\n\tinject,\n\tinput,\n\toutput,\n} from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nimport { NgxModalActionType } from '../../types';\n\n/**\n * An abstract for the NgxModalService\n */\n@Directive()\nexport class NgxModalAbstractComponent\n\timplements AfterViewInit\n{\n\tprivate readonly windowService = inject(NgxWindowService);\n\tprivate readonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * Remove the modal on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.close.emit();\n\t}\n\n\t/**\n\t * An optional aria-labelledby property\n\t */\n\tpublic readonly ariaLabelledBy = input();\n\n\t/**\n\t * An optional aria-describedBy property\n\t */\n\tpublic readonly ariaDescribedBy = input();\n\n\t/**\n\t * Optional data that can be passed to the modal\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * An emitter that will emit an action we can later respond to\n\t */\n\tpublic action: OutputEmitterRef = output();\n\n\t/**\n\t * An emitter that will emit if the modal is closed\n\t */\n\t// eslint-disable-next-line @angular-eslint/no-output-native\n\tpublic close: OutputEmitterRef = output();\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If we are in the browser, check if either of the two accessibility labels are set\n\t\tconst ariaLabelledBy = this.ariaLabelledBy();\n\t\tconst ariaDescribedBy = this.ariaDescribedBy();\n\t\tif (this.windowService.isBrowser() && (ariaLabelledBy || ariaDescribedBy)) {\n\t\t\t// Iben: Find the element with the id and the parent\n\t\t\tconst element = document.getElementById(ariaLabelledBy || ariaDescribedBy);\n\t\t\tconst parent = this.elementRef.nativeElement;\n\n\t\t\t// Iben: If no corresponding element was found or if it isn't part of the modal, throw an error\n\t\t\tif (!element || !parent.contains(element)) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`@ibenvandeveire/ngx-inform - NgxModalAbstractComponent: The ${\n\t\t\t\t\t\tariaLabelledBy ? '\"aria-labelledBy\"' : 'aria-describedBy'\n\t\t\t\t\t} property was passed to the modal but no element with said id was found. Because of that, the necessary accessibility attributes could not be set. Please add an id with the value \"${\n\t\t\t\t\t\tariaLabelledBy || ariaDescribedBy\n\t\t\t\t\t}\" to an element of the modal.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelBaseOptions.html":{"url":"interfaces/NgxModalAriaLabelBaseOptions.html","title":"interface - NgxModalAriaLabelBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The label passed to the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that labels the modal.\nFrom the Mozilla docs:\nIt should reference brief text that provides the element with an accessible name.\n[...] a label describes the essence of an object.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelOptions.html":{"url":"interfaces/NgxModalAriaLabelOptions.html","title":"interface - NgxModalAriaLabelOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelledOptions.html":{"url":"interfaces/NgxModalAriaLabelledOptions.html","title":"interface - NgxModalAriaLabelledOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelledOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseConfiguration.html":{"url":"interfaces/NgxModalBaseConfiguration.html","title":"interface - NgxModalBaseConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            modals\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        modals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modals:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The global modals that were configured in the root of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseOptions.html":{"url":"interfaces/NgxModalBaseOptions.html","title":"interface - NgxModalBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            describedById\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\nThis property will take precedence over the type property.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        describedById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        describedById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that describes the dialog.\nFrom the Mozilla docs:\n[...] [it] lists the ids of the descriptions or elements providing more information\nthat the user might need.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClose:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The method that should be called when the modal is closed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The name of a config object defined in the global config at the root of\nthe project.\nIf a component value is provided alongside a type in the local config, the\ncomponent value will take precedence.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalCDKModalConfiguration.html":{"url":"interfaces/NgxModalCDKModalConfiguration.html","title":"interface - NgxModalCDKModalConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalCDKModalConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            injector\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            restoreFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            viewContainerRef\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoFocus:     AutoFocusTarget | string | boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AutoFocusTarget | string | boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where (or whether) the dialog should focus after it is opened.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        injector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        injector:     Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Injector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                     The Injector used for the instantiation of the component to be attached.\nIf provided, takes precedence over the injector indirectly provided by\nthe ViewContainerRef. This will allow for host-service injection to\nthe component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        restoreFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        restoreFocus:     boolean | string | HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | string | HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the dialog should restore focus to the previously-focused element\nupon closing.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewContainerRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewContainerRef:     ViewContainerRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ViewContainerRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where the attached component should live in Angular's logical component tree.\nThis affects what is available for injection and the change detection order\nfor the component instantiated inside of the dialog. This does not affect\nwhere the dialog content will be rendered in the DOM.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentConfiguration.html":{"url":"interfaces/NgxModalComponentConfiguration.html","title":"interface - NgxModalComponentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentOptions.html":{"url":"interfaces/NgxModalComponentOptions.html","title":"interface - NgxModalComponentOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalGlobalCDKConfiguration.html":{"url":"interfaces/NgxModalGlobalCDKConfiguration.html","title":"interface - NgxModalGlobalCDKConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalGlobalCDKConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            closeOnNavigation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            direction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasBackdrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            panelClass\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClose:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close when an event is fired.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        closeOnNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closeOnNavigation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close on navigation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:     Direction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Direction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The direction of the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasBackdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasBackdrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal has a backdrop.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        panelClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        panelClass:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class that should be applied to the modal.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxModalService.html":{"url":"injectables/NgxModalService.html","title":"injectable - NgxModalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxModalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/modal/modal.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogService\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasActiveModal$\n                            \n                            \n                                    Private\n                                hasModalSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Private\n                                createModalComponent\n                            \n                            \n                                    Private\n                                getValue\n                            \n                            \n                                    Private\n                                hasRequiredDescription\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Private\n                                runARIAChecks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                        \n                    close(onClose?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Closes the currently active modal\n\n@param onClose - An optional onClose function\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                onClose\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional onClose function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createModalComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createModalComponent(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:177\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Creates the modal component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxModalAbstractComponent\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getValue(configurationValue: any, optionsValue: any, defaultValue: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:244\n                        \n                    \n\n\n            \n                \n                        Returns a value based on whether one of the overwrites is defined\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                configurationValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on configuration level\n\n\n                                            \n                                        \n                                        \n                                                optionsValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on options level\n\n\n                                            \n                                        \n                                        \n                                                defaultValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe default value if no overwrite was defined\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasRequiredDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasRequiredDescription(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:222\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if the description is provided when the role requires it\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n            \n                \n                        \n                    open(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:49\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Opens a modal based on the provided options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe modal options\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        runARIAChecks\n                        \n                    \n                \n            \n            \n                \n                        \n                    runARIAChecks(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:146\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if all the necessary preconditions are met\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Dialog)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasActiveModal$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.hasModalSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:42\n                        \n                    \n\n            \n                \n                    An observable that keeps track of whether a modal is currently active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasModalSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that keeps track of whether a modal is currently active\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Dialog } from '@angular/cdk/dialog';\nimport { Injectable, Type, inject } from '@angular/core';\nimport { outputToObservable } from '@angular/core/rxjs-interop';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tfilter,\n\tmap,\n\tNEVER,\n\tObservable,\n\tstartWith,\n\ttakeUntil,\n\ttap,\n} from 'rxjs';\n\nimport { NgxModalAbstractComponent } from '../../abstracts';\nimport { NgxModalConfigurationToken } from '../../tokens';\nimport { NgxModalActionType, NgxModalConfiguration, NgxModalOptions } from '../../types';\n\n/**\n * A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n *\n * @export\n * @class NgxModalService\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxModalService {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tprivate readonly configuration = inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly dialogService = inject(Dialog);\n\n\t/**\n\t * A subject that keeps track of whether a modal is currently active\n\t */\n\tprivate hasModalSubject: BehaviorSubject = new BehaviorSubject(false);\n\n\t/**\n\t * An observable that keeps track of whether a modal is currently active.\n\t */\n\tpublic readonly hasActiveModal$: Observable = this.hasModalSubject.asObservable();\n\n\t/**\n\t * Opens a modal based on the provided options\n\t *\n\t * @param {NgxModalOptions} options - The modal options\n\t */\n\tpublic open(\n\t\toptions: NgxModalOptions\n\t): Observable {\n\t\t// Iben: If a previous modal is still active, we early exit.\n\t\tif (this.hasModalSubject.value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxInform: An active modal is currently displayed, close the active modal before opening a new one'\n\t\t\t);\n\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Declare the modal as active\n\t\tthis.hasModalSubject.next(true);\n\n\t\t// Iben: Fetch the type of component we wish to show\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\t\tconst component: Type> =\n\t\t\toptions.component ||\n\t\t\t(configuration.component as Type>);\n\n\t\t// Iben: Check if all the correct parameters are set and return NEVER when they're not correctly set\n\t\tif (!this.runARIAChecks(options, component)) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Render the modal\n\t\tconst modal = this.createModalComponent(options, component);\n\n\t\t// Iben: Return the modal action\n\t\treturn combineLatest([\n\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\toutputToObservable(modal.action).pipe(startWith(undefined)),\n\t\t\toutputToObservable(modal.close).pipe(\n\t\t\t\t// Iben: Map so we can keep the emit value void, but can work with the filter later down the line\n\t\t\t\tmap(() => 'NgxModalClose'),\n\t\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\t\tstartWith(undefined)\n\t\t\t),\n\t\t]).pipe(\n\t\t\t// Iben: Only emit if one of the two actions actually has an emit\n\t\t\tfilter(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn Boolean(action) || Boolean(closed);\n\t\t\t}),\n\t\t\tmap(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn closed || action;\n\t\t\t}),\n\t\t\ttap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\t// Iben: If the autoClose is specifically set to false, we early exit unless we're running in a close event\n\t\t\t\tif (\n\t\t\t\t\taction !== 'NgxModalClose' &&\n\t\t\t\t\t((options.autoClose !== undefined && options.autoClose === false) ||\n\t\t\t\t\t\t(configuration?.autoClose !== undefined &&\n\t\t\t\t\t\t\tconfiguration.autoClose === false))\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Close the modal\n\t\t\t\tthis.close(options.onClose);\n\t\t\t}),\n\t\t\t// Iben: Map the action back to the ActionType\n\t\t\tmap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\treturn action === 'NgxModalClose' ? undefined : (action as ActionType);\n\t\t\t}),\n\t\t\t// Wouter: Unsubscribe wen no modal is open\n\t\t\ttakeUntil(this.hasModalSubject.pipe(filter((hasModal) => !hasModal)))\n\t\t);\n\t}\n\n\t/**\n\t * Closes the currently active modal\n\t *\n\t * * @param onClose - An optional onClose function\n\t */\n\tpublic close(onClose?: () => void): void {\n\t\t// Wouter: The setTimeout delay is needed, so that the `open` method can emit before its subscription end gets triggered\n\t\tsetTimeout(() => {\n\t\t\t// Iben: Close the modal\n\t\t\tthis.dialogService.closeAll();\n\n\t\t\t// Iben: Mark the modal as closed\n\t\t\tthis.hasModalSubject.next(false);\n\n\t\t\t// Iben: Run an optional onClose function\n\t\t\tif (onClose) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks if all the necessary preconditions are met\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate runARIAChecks(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): boolean {\n\t\t// Iben: If no component was found, we return NEVER and throw an error\n\t\tif (!component) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxModalService: No component was provided or found in the configuration to render.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Iben: If no description was provided when required, we return NEVER and throw an error\n\t\tif (!this.hasRequiredDescription(options)) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxModalService: The role of the modal was set to \"alertdialog\" but no \"describedById\" was provided.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates the modal component\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate createModalComponent(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): NgxModalAbstractComponent {\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\n\t\t// Iben: Create the modal and render it\n\t\tconst dialogRef = this.dialogService.open(component, {\n\t\t\trole: configuration?.role || options.role,\n\t\t\tariaLabel: options.label,\n\t\t\tariaLabelledBy: options.labelledById,\n\t\t\tariaDescribedBy: options.describedById,\n\t\t\tdisableClose: true,\n\t\t\trestoreFocus: this.getValue(undefined, options.restoreFocus, true),\n\t\t\tautoFocus: this.getValue(undefined, options.autoFocus, true),\n\t\t\tviewContainerRef: options.viewContainerRef,\n\t\t\tdirection: configuration?.direction || options.direction,\n\t\t\thasBackdrop: this.getValue(configuration?.hasBackdrop, options.hasBackdrop, true),\n\t\t\tpanelClass: this.getValue(configuration?.panelClass, options.panelClass, []),\n\t\t\tcloseOnNavigation: this.getValue(\n\t\t\t\tconfiguration?.closeOnNavigation,\n\t\t\t\toptions.closeOnNavigation,\n\t\t\t\ttrue\n\t\t\t),\n\t\t\tcloseOnDestroy: true,\n\t\t\tcloseOnOverlayDetachments: true,\n\t\t});\n\t\tconst modal = dialogRef.componentInstance;\n\n\t\t// Iben: Set the data of the modal\n\t\tdialogRef.componentRef.setInput(\n\t\t\t'data',\n\t\t\tthis.getValue(configuration?.data, options.data, undefined)\n\t\t);\n\t\tdialogRef.componentRef.setInput('ariaDescribedBy', options.describedById);\n\t\tdialogRef.componentRef.setInput('ariaLabelledBy', options.labelledById);\n\n\t\treturn modal;\n\t}\n\n\t/**\n\t * Checks if the description is provided when the role requires it\n\t *\n\t * @param options - The options of the modal\n\t */\n\tprivate hasRequiredDescription(\n\t\toptions: NgxModalOptions\n\t): boolean {\n\t\t// Iben: If the options has provided a default type, we check based on the configuration role\n\t\tif (options.type) {\n\t\t\tconst configuration = this.configuration?.modals[options.type];\n\n\t\t\treturn !(configuration.role === 'alertdialog' && !options.describedById);\n\t\t}\n\n\t\t//  Iben: Check based on the options role\n\t\treturn !(options.role === 'alertdialog' && !options.describedById);\n\t}\n\n\t/**\n\t * Returns a value based on whether one of the overwrites is defined\n\t *\n\t * @private\n\t * @param configurationValue - The overwrite on configuration level\n\t * @param optionsValue - The overwrite on options level\n\t * @param defaultValue - The default value if no overwrite was defined\n\t */\n\tprivate getValue(configurationValue: any, optionsValue: any, defaultValue: any): any {\n\t\tif (configurationValue === undefined && optionsValue === undefined) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\tif (optionsValue !== undefined) {\n\t\t\treturn optionsValue;\n\t\t}\n\n\t\treturn configurationValue;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalTypeOptions.html":{"url":"interfaces/NgxModalTypeOptions.html","title":"interface - NgxModalTypeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalTypeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxOnlineService.html":{"url":"injectables/NgxOnlineService.html","title":"injectable - NgxOnlineService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxOnlineService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/online-service/online.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides the currently online status of the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                online$\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:20\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        online$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.onlineSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:15\n                        \n                    \n\n            \n                \n                    A subject that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { Observable, Subject, fromEvent, takeUntil, tap } from 'rxjs';\n\n/**\n * A service that provides the currently online status of the application\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxOnlineService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject that emits whenever the application is on or offline\n\t */\n\tprivate readonly onlineSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the application is on or offline\n\t */\n\tpublic readonly online$: Observable = this.onlineSubject.asObservable();\n\n\tconstructor() {\n\t\t// Iben: When we're in the browser, listen to the online and offline status of the application\n\t\tif (this.windowService.isBrowser()) {\n\t\t\t// Iben: Handle the on and offline status of the application\n\t\t\tfromEvent(window, 'online')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(true);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\n\t\t\tfromEvent(window, 'offline')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(false);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Complete the destroyed subject\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxQueryParamFormSyncComponent.html":{"url":"directives/NgxQueryParamFormSyncComponent.html","title":"directive - NgxQueryParamFormSyncComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxQueryParamFormSyncComponent\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Public\n                                form\n                            \n                            \n                                    Protected\n                                queryParams$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                route\n                            \n                            \n                                    Protected\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearData\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Optional\n                                handleDataChanges\n                            \n                            \n                                    Protected\n                                    Abstract\n                                initForm\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Protected\n                                    Optional\n                                scrambleParams\n                            \n                            \n                                    Private\n                                setDataInRoute\n                            \n                            \n                                    Protected\n                                    Optional\n                                unscrambleParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearData\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearData()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:110\n                        \n                    \n\n\n            \n                \n                        Clears the data in the form\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                            Optional\n                        handleDataChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDataChanges(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:161\n                        \n                    \n\n\n            \n                \n                        An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\nThis method is useful in case you wish to save your currently selected data to a global state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data provided by the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        initForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initForm()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:152\n                        \n                    \n\n\n            \n                \n                        A method that that will provide a form that will be used to store the current data\n\n\n                        \n                            Returns :     FormType\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:100\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        scrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:168\n                        \n                    \n\n\n            \n                \n                        An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to set in the route\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setDataInRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDataInRoute(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:119\n                        \n                    \n\n\n            \n                \n                        Sets the provided data in the route, so the filtered view can be shared by url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided data\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        unscrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    unscrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:174\n                        \n                    \n\n\n            \n                \n                        An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to patch in the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormType\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:25\n                        \n                    \n\n            \n                \n                    The form in which we will save the queryParam data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        queryParams$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.route\n\t\t.queryParams as Observable>\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:30\n                        \n                    \n\n            \n                \n                    The query params we wish to form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n    \n        NgxQueryParamFormSyncComponent\nThe NgxQueryParamFormSyncComponent allows you to sync queryParams with a form provided in the component.\nAn ideal use-case for this component is filtered views that keep the selected filters in queryParams. This abstraction ensures that both the visual filters and the url stay in sync. This way the url can be shared, and the view will be filtered as shared.\nMethods\nWhen implementing the NgxQueryParamFormSyncComponent, there is only one method that requires implementation, being the initForm method. This method should return a form that will be used to store the queryParams in the component.\nThe component also provides a clearData method that will automatically clear the form.\nOptional methods\nOptionally, you want to interact with the changes in the form, like dispatching the data to a store. By implementing the optional handleDataChanges method, you can listen to these changes and handle them accordingly. It is very important to not subscribe to an Observable in this method, as it within itself is already used within a subscription.\nSometimes, certain data cannot be put in the queryParams without being scrambled first. This can be useful in situations in which some of the items in the queryParams are protected by GDPR, but you still wish to be able to share the url to a filtered view. In order to handle these situations, we provide the optional methods scrambleParams and the unscrambleParams, in which you can provide an implementation to scramble these items before sending them to the url.\nExample\nExample :import { scrambler, unscrambler } from 'ngx-random-package';\n\ninterface Filters {\n    searchQuery: string;\n    sorting: string;\n}\n\ninterface FiltersForm {\n    searchQuery: FormControl;\n    sorting: FormControl;\n}\n\n@Component({\n    selector: 'table-view',\n    templateUrl: './survey.component.html',\n})\nexport class TableViewComponent extends NgxQueryParamFormSyncComponent\n> {\n    constructor(\n        readonly route: ActivatedRoute,\n        readonly router: Router,\n        readonly storeService: NgxStoreService\n    ) {\n        super(route, router);\n    }\n\n    initForm(): FormGroup {\n        return new FormGroup({\n            searchQuery: new FormControl(),\n            sorting: new FormControl(),\n        });\n    }\n\n    handleDataChanges(value: Filters) {\n        this.storeService.setFilters(value);\n    }\n\n    scrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: scrambler(value.sorting),\n        };\n    }\n\n    unscrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: unscrambler(value.sorting),\n        };\n    }\n}\n    \n\n    \n        import { Directive, OnDestroy, OnInit, inject } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subject, filter, take, takeUntil, tap } from 'rxjs';\n\nexport type StringifiedQueryParamsType = {\n\t[key in keyof QueryParamsType]: string;\n};\n\n@Directive()\nexport abstract class NgxQueryParamFormSyncComponent\n\timplements OnInit, OnDestroy\n{\n\tprotected readonly route = inject(ActivatedRoute);\n\tprotected readonly router = inject(Router);\n\n\tprotected readonly destroyed$: Subject = new Subject();\n\n\t/**\n\t * The form in which we will save the queryParam data\n\t */\n\tpublic form: FormType;\n\n\t/**\n\t * The query params we wish to form\n\t */\n\tprotected queryParams$: Observable> = this.route\n\t\t.queryParams as Observable>;\n\n\tpublic ngOnInit(): void {\n\t\t//Iben: Warn the user if one of the two methods isn't provided\n\t\tif (\n\t\t\t(!this.scrambleParams && this.unscrambleParams) ||\n\t\t\t(this.scrambleParams && !this.unscrambleParams)\n\t\t) {\n\t\t\tconsole.error(\n\t\t\t\t`NgxUtils: NgxQueryParamFormSyncComponent detected the use of the parameter scrambling but is missing an implementation for the ${\n\t\t\t\t\tthis.scrambleParams ? 'unscrambleParams' : 'scrambleParams'\n\t\t\t\t} method. Please provide this method in order for this flow to work correctly.`\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Setup the form for the data\n\t\tthis.form = this.initForm();\n\n\t\t// Iben: Listen to the form changes\n\t\tthis.form.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Update the route params\n\t\t\t\t\tthis.setDataInRoute(data);\n\n\t\t\t\t\t// Iben: Handle the route data changes\n\t\t\t\t\tif (this.handleDataChanges) {\n\t\t\t\t\t\tthis.handleDataChanges(data);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the initial query param update so we can set the data in the form if we navigate to a link with the params\n\t\tthis.queryParams$\n\t\t\t.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tfilter(Boolean),\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Convert the route data properties to the actual data\n\t\t\t\t\tlet value: QueryParamsType = Object.keys(data || {}).reduce(\n\t\t\t\t\t\t(previous, current) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t[current]: data[current] ? JSON.parse(data[current]) : undefined,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as QueryParamsType;\n\n\t\t\t\t\t// Iben: In case the unscrambleParams method is provided, we unscramble the data\n\t\t\t\t\tif (this.unscrambleParams) {\n\t\t\t\t\t\tvalue = this.unscrambleParams(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: If the entire object is empty, we early exit and do not set the form\n\t\t\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Set the current form value\n\t\t\t\t\tthis.form.setValue(value);\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next();\n\t\tthis.destroyed$.complete();\n\n\t\tthis.clearData();\n\t}\n\n\t/**\n\t * Clears the data in the form\n\t */\n\tpublic clearData(): void {\n\t\tthis.form.reset();\n\t}\n\n\t/**\n\t * Sets the provided data in the route, so the filtered view can be shared by url\n\t *\n\t * @param  data - The provided data\n\t */\n\tprivate setDataInRoute(data: QueryParamsType): void {\n\t\t// Iben: If no data was provided, we simply unset the current params\n\t\tif (Object.keys(data || {}).length === 0) {\n\t\t\tthis.router.navigate([], {\n\t\t\t\trelativeTo: this.route,\n\t\t\t\tqueryParams: {},\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case a scrambleParams function was provided, we scramble the params first\n\t\tconst parsedData = this.scrambleParams ? this.scrambleParams(data) : data;\n\n\t\t// Iben: Stringify all properties of the data\n\t\tconst queryParams = Object.keys(parsedData || {}).reduce((previous, current) => {\n\t\t\treturn {\n\t\t\t\t...previous,\n\t\t\t\t[current]: JSON.stringify(parsedData[current]),\n\t\t\t};\n\t\t}, {});\n\n\t\t// Iben: Add the queryParams to the route\n\t\tthis.router.navigate([], {\n\t\t\trelativeTo: this.route,\n\t\t\tqueryParamsHandling: 'merge',\n\t\t\tqueryParams,\n\t\t});\n\t}\n\n\t/**\n\t * A method that that will provide a form that will be used to store the current data\n\t */\n\tprotected abstract initForm(): FormType;\n\n\t/**\n\t * An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\n\t *\n\t * This method is useful in case you wish to save your currently selected data to a global state.\n\t *\n\t * @param data - The data provided by the form\n\t */\n\tprotected abstract handleDataChanges?(data: QueryParamsType): void;\n\n\t/**\n\t * An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to set in the route\n\t */\n\tprotected scrambleParams?(params: QueryParamsType): QueryParamsType;\n\t/**\n\t * An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to patch in the form\n\t */\n\tprotected unscrambleParams?(params: QueryParamsType): QueryParamsType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsConfigurationElement.html":{"url":"interfaces/NgxReplaceElementsConfigurationElement.html","title":"interface - NgxReplaceElementsConfigurationElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsConfigurationElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includeInnerHtml\n                                        \n                                \n                                \n                                        \n                                            selector\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeInnerHtml\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includeInnerHtml:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selector:         NgxReplaceElementsSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxReplaceElementsSelector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsItem.html":{"url":"interfaces/NgxReplaceElementsItem.html","title":"interface - NgxReplaceElementsItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            elementId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Record | string>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record | string>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxReplaceElementsPipe.html":{"url":"pipes/NgxReplaceElementsPipe.html","title":"pipe - NgxReplaceElementsPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxReplaceElementsPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that allows to replace text elements with a WebComponent\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxReplaceElements\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, items: NgxReplaceElementsItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:24\n                        \n                    \n\n\n            \n                \n                        Replaces all matches of a specific selector with provided WebComponents\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe original string value\n\n\n                                            \n                                        \n                                        \n                                                items\n                                            \n                                                            NgxReplaceElementsItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe items we wish to replace\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SafeHtml\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxReplaceElementsConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitizer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n    \n        ngxReplaceElements\nThe ngxReplaceElements pipe will provide a way to transform a string that contains one or more parts that need an Angular component by taking advantage of Angular web components.\nThis can be useful in combination with translation strings that require in-app links or WYSIWYG content from an external source.\nHow to use\nSet up\nThe pipe requires a couple of things to be provided before it can be used.\nFirst, create a component that will be used to replace your target:\nExample :@Component({\n    selector: 'link',\n    template: '',\n})\nexport class LinkComponent {\n    // Keep in mind that Angular's innerHTML & outerHTML will convert attributes to lower casing.\n    // This input property will need to be lowercased to make this work.\n    public link: InputSignal: input();\n}Then register it as a web component in your app.component.ts:\nExample :@Component({\n    //...\n})\nexport class AppComponent {\n    constructor(\n        // ...\n        private readonly windowService: NgxWindowService,\n        private readonly injector: Injector\n    ) {\n        // Note that we are using our NgxWindowService (ngx-core) to avoid SSR issues.\n        if (this.windowService.isBrowser) {\n            const linkComponent = createCustomElement(LinkComponent, { injector: this.injector });\n\n            customElements.define('ngx-link', linkComponent);\n        }\n    }\n}Lastly set up the global config in your root provider array:\nExample :providers: [\n    //...\n    provideNgxReplaceElementsConfiguration({\n        link: {\n            element: 'ngx-link',\n            selector: 'a[data-link-id={{id}}]',\n            includeInnerHtml: true,\n        },\n        image: {\n            element: 'ngx-image',\n            selector: 'img[data-link-id={{id}}]',\n        },\n    }),\n];For each element we want to register, we define the WebComponent name using the element property. In order to be able to select an item to replace later on in the text, we create a selector. This selector should always include a part to identify the id, being {{id}}.\nIf we wish to use the original innerText of the element whilst replacing, we can do so by setting includeInnerHtml to true.\nUsing the pipe\nWhen the web component is set up, you can start using the pipe.\nFirst set up anchors in your input string:\nExample :\"This is a text with a link.\"The someUniqueId will be used by the pipe to find and replace your link element so make sure that each anchor within your translation has a unique identifier.\nWithin the template you can now provide the string and transform it like this:\nExample :Whilst id refers to the id in the string, elementId refers to the element we have configured in the configuration.\nThe data property can be used to set the inputs of our provided WebComponent. We once again want to stress that due to the nature of WebComponents, these properties can only have lowercase keys.\n\n    \n\n    \n        import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { NgxReplaceElementsConfigurationToken } from '../../tokens';\nimport { NgxReplaceElementsConfiguration, NgxReplaceElementsItem } from '../../types';\n\n/**\n * A pipe that allows to replace text elements with a WebComponent\n */\n@Pipe({\n\tname: 'ngxReplaceElements',\n\tstandalone: true,\n})\nexport class NgxReplaceElementsPipe implements PipeTransform {\n\tprivate readonly configuration = inject(NgxReplaceElementsConfigurationToken);\n\tprivate readonly sanitizer = inject(DomSanitizer);\n\n\t/**\n\t * Replaces all matches of a specific selector with provided WebComponents\n\t *\n\t * @param value - The original string value\n\t * @param items - The items we wish to replace\n\t */\n\ttransform(value: string, items: NgxReplaceElementsItem[]): SafeHtml {\n\t\t// Iben: If the value isn't a string we early exit and warn the user\n\t\tif (typeof value !== 'string') {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxReplaceElements: A non string-value was provided to the NgxReplaceElementsPipe'\n\t\t\t);\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no items were provided to replace, we just return the value\n\t\tif (!items || items.length === 0) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: set up a new instance of the DOMParser and parse the value as text/html.\n\t\t// This will return a Document which we can work with to find/replace elements.\n\t\tconst parser: DOMParser = new DOMParser();\n\t\tconst body: Document = parser.parseFromString(value, 'text/html');\n\n\t\t// Iben: Loop over all items we wish to replace\n\t\titems.forEach((item) => {\n\t\t\t// Iben: Get the selector and the element we want to replace the target with\n\t\t\tconst { selector, element, includeInnerHtml } = this.configuration[item.elementId];\n\n\t\t\t// Iben: Select the target\n\t\t\tconst target: HTMLElement = body.querySelector(selector.replace('{{id}}', item.id));\n\n\t\t\t// Iben: If no target was found, early exit\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Create a new element within the Document based on the provided selector.\n\t\t\t// The selector can be any native or custom web component (not an Angular component).\n\t\t\t// Keep in mind that the element will need to have a lowercase input prop for the reference.\n\t\t\tconst replacement: HTMLElement = body.createElement(element);\n\n\t\t\t// Iben: If the item included data, we set these attributes\n\t\t\tif (item.data) {\n\t\t\t\tObject.entries(item.data).forEach(([key, value]) => {\n\t\t\t\t\treplacement.setAttribute(key, value);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: Copy the innerHtml of the target element to the new element if needed.\n      if (includeInnerHtml) {\n\t\t\treplacement.innerHTML = target.innerHTML;\n\t\t}\n\n\t\t\t// Iben: Replace the target with the new element within the Document.\n\t\t\ttarget.replaceWith(replacement);\n\t\t});\n\n\t\t// Iben: sanitize the document and mark it as trusted HTML before returning it to the template.\n\t\treturn this.sanitizer.bypassSecurityTrustHtml(body.documentElement.innerHTML);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxSaveOnExitAbstractService.html":{"url":"classes/NgxSaveOnExitAbstractService.html","title":"class - NgxSaveOnExitAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxSaveOnExitAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bypassSaveOnExit\n                            \n                            \n                                    Public\n                                    Abstract\n                                handleDirtyState\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bypassSaveOnExit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:15\n                        \n                    \n\n            \n                \n                    An optional method that, if implemented, provides the ability to bypass the guard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        handleDirtyState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:10\n                        \n                    \n\n            \n                \n                    Take action when the component is dirty\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxSaveOnExitComponent } from './save-on-exit.component.abstract';\n\nexport abstract class NgxSaveOnExitAbstractService {\n\t/**\n\t * Take action when the component is dirty\n\t */\n\tpublic abstract handleDirtyState: (component: NgxSaveOnExitComponent) => Observable;\n\n\t/**\n\t * An optional method that, if implemented, provides the ability to bypass the guard\n\t */\n\tpublic bypassSaveOnExit?: (\n\t\tcurrentRoute: ActivatedRouteSnapshot,\n\t\tnextState: RouterStateSnapshot\n\t) => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxSaveOnExitComponent.html":{"url":"directives/NgxSaveOnExitComponent.html","title":"directive - NgxSaveOnExitComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxSaveOnExitComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                allowBeforeUnloadHandler\n                            \n                            \n                                    Public\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                destroyedSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleUnloadEvent\n                            \n                            \n                                    Public\n                                    Abstract\n                                isDirty\n                            \n                            \n                                    Public\n                                    Abstract\n                                isValid\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:beforeunload\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:beforeunload\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                \n            \n\n\n            \n                \n                    Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe unload event from the browser\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUnloadEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUnloadEvent(event: BeforeUnloadEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:beforeunload', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                        \n                    \n\n\n            \n                \n                        Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        BeforeUnloadEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unload event from the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isDirty\n                        \n                    \n                \n            \n            \n                \n                        \n                    isDirty()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:38\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is dirty\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValid()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:43\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is valid\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        allowBeforeUnloadHandler\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:33\n                        \n                    \n\n            \n                \n                    Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\nIf set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.destroyedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:27\n                        \n                    \n\n            \n                \n                    An observable that emits the onDestroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        destroyedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:22\n                        \n                    \n\n            \n                \n                    A subject to handle the onDestroy flow\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive()\nexport abstract class NgxSaveOnExitComponent implements OnDestroy {\n\t/**\n\t * Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\t *\n\t * @param event - The unload event from the browser\n\t */\n\t@HostListener('window:beforeunload', ['$event'])\n\thandleUnloadEvent(event: BeforeUnloadEvent) {\n\t\t// Iben: If the component is dirty, we prevent the browser from closing the window or tab\n\t\tif (this.allowBeforeUnloadHandler && this.isDirty()) {\n\t\t\tevent.returnValue = true;\n\t\t}\n\t}\n\n\t/**\n\t * A subject to handle the onDestroy flow\n\t */\n\tprivate readonly destroyedSubject$ = new Subject();\n\n\t/**\n\t * An observable that emits the onDestroy event\n\t */\n\tpublic readonly destroyed$ = this.destroyedSubject$.asObservable();\n\n\t/**\n\t * Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\n\t * If set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\t */\n\tpublic readonly allowBeforeUnloadHandler: boolean = false;\n\n\t/**\n\t * Return whether or not the component is dirty\n\t */\n\tpublic abstract isDirty(): boolean;\n\n\t/**\n\t * Return whether or not the component is valid\n\t */\n\tpublic abstract isValid(): boolean;\n\n\tngOnDestroy() {\n\t\t// Iben: Emit if the component gets destroyed\n\t\tthis.destroyedSubject$.next(undefined);\n\t\tthis.destroyedSubject$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxSignalStoreService.html":{"url":"injectables/NgxSignalStoreService.html","title":"injectable - NgxSignalStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxSignalStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/abstracts/store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that can be used to store handle a NgxSignalStore\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Abstract\n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxSignalStore\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:13\n                        \n                    \n\n            \n                \n                    The store we preserve the state in\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:18\n                                \n                            \n                    \n                        \n                                Returns a read only version of the state\n\n\n                                \n                                    Returns :         NgxSignalStoreViewState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { NgxSignalStore, NgxSignalStoreState, NgxSignalStoreViewState } from '../types';\n\n/**\n * An abstract service that can be used to store handle a NgxSignalStore\n */\n@Injectable()\nexport abstract class NgxSignalStoreService {\n\t/**\n\t * The store we preserve the state in\n\t */\n\tprotected abstract store: NgxSignalStore;\n\n\t/**\n\t * Returns a read only version of the state\n\t */\n\tpublic get state(): NgxSignalStoreViewState {\n\t\t// Iben: If no initial created store was passed to the service, we early exit\n\t\tif (!this.store) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-store: No created store was provided to the NgxSignalStoreService in the constructor, so no state could be generated.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the store\n\t\treturn this.store;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSlice.html":{"url":"interfaces/NgxSignalStoreSlice.html","title":"interface - NgxSignalStoreSlice","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSlice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Data of an individual slice within an NgxSignalStore\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSliceArrayMethods.html":{"url":"interfaces/NgxSignalStoreSliceArrayMethods.html","title":"interface - NgxSignalStoreSliceArrayMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSliceArrayMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Extra methods that are available in the store for array slices\n\n            \n\n            \n                Extends\n            \n            \n                            NgxSignalStoreSliceBaseMethods\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            prepend\n                                        \n                                \n                                \n                                        \n                                            remove\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prepend\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prepend:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remove\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        remove:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSliceBaseMethods.html":{"url":"interfaces/NgxSignalStoreSliceBaseMethods.html","title":"interface - NgxSignalStoreSliceBaseMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSliceBaseMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The methods that are available in the store for all slices\n\n            \n\n            \n                Extends\n            \n            \n                        MethodsDictionary\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            reset\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            setError\n                                        \n                                \n                                \n                                        \n                                            setLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reset:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setLoading:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorage.html":{"url":"interfaces/NgxStorage.html","title":"interface - NgxStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            getItem\n                                        \n                                \n                                \n                                        \n                                            getItemObservable\n                                        \n                                \n                                \n                                        \n                                            removeItem\n                                        \n                                \n                                \n                                        \n                                            setItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemObservable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemObservable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        removeItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageBaseEvent.html":{"url":"interfaces/NgxStorageBaseEvent.html","title":"interface - NgxStorageBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            storage\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        storage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storage:         NgxStorageType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStorageType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"set\" | \"clear\" | \"remove\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"set\" | \"clear\" | \"remove\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageClearEvent.html":{"url":"interfaces/NgxStorageClearEvent.html","title":"interface - NgxStorageClearEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageClearEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageRemoveEvent.html":{"url":"interfaces/NgxStorageRemoveEvent.html","title":"interface - NgxStorageRemoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageRemoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStorageService.html":{"url":"injectables/NgxStorageService.html","title":"injectable - NgxStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStorageService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/storage-service/storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                localStorageRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                sessionStorageRecord\n                            \n                            \n                                    Public\n                                    Readonly\n                                storageEvents$\n                            \n                            \n                                    Private\n                                    Readonly\n                                storageEventSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clearStorage\n                            \n                            \n                                    Private\n                                getItem\n                            \n                            \n                                    Private\n                                getItemObservable\n                            \n                            \n                                    Private\n                                parseValue\n                            \n                            \n                                    Private\n                                removeItem\n                            \n                            \n                                    Private\n                                setItem\n                            \n                            \n                                    Private\n                                setupStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    localStorage\n                                \n                                \n                                    sessionStorage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:39\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clearStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearStorage(storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Clears the storage, completes all subjects and emits a clear event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to clear\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subjects\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageClearEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(key: string, storage: Storage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:83\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItemObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemObservable(key: string, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Returns an observable version of the storage value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the storage value\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage record\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:265\n                        \n                    \n\n\n            \n                \n                        Parses a string value from the storage to an actual value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided string value\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(key: string, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Remove an item from the storage and emit a remove event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to remove the item from\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subject\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageRemoveEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    setItem(key: string, item: DataType, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:122\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Sets an item in the storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                item\n                                            \n                                                            DataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe item in the storage\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage in which we want to save the item\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe corresponding storage record\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageSetEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupStorage(storage: Storage, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:254\n                        \n                    \n\n\n            \n                \n                        Grabs the existing storage and updates the record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current state of the storage\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        localStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:29\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the localStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sessionStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:25\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the sessionStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        storageEvents$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.storageEventSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:38\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the session- or the localStorage was updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        storageEventSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the events of the storage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        localStorage\n                    \n                \n\n                \n                    \n                        getlocalStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:54\n                                \n                            \n                    \n                        \n                                A localStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sessionStorage\n                    \n                \n\n                \n                    \n                        getsessionStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:70\n                                \n                            \n                    \n                        \n                                A sessionStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n    \n        NgxStorageService\nThe NgxStorageService provides a SSR proof Observable approach to both session- and localStorage. It allows for listing to change events on specific properties or on the entire storage.\nApproach\nIn order to provide an Observable based approach to both the session- and localStorage, the session provides a localStorage and a sessionStorage object that offer custom methods that will also emit to the corresponding Observables. Data that was set to the session- or localStorage on the window directly will not be represented in the Observable.\nOn top of an Observable based approach, the new localStorage and sessionStorage implementations will automatically parse the data to a string when saving it to the window session- or localStorage, and will return the parsed value back when calling either getItem or getItemObservable.\nThe service is also SSR proof, and will prevent any actions from occurring when not in the browser.\nProperties\nlocalStorage/sessionStorage\nThe localStorage and sessionStorage objects of the NgxStorageService provide an Observable based approach to storage.\nIf we want to get an item from the storage, we can either use getItem or getItemObservable if we want the real time value vs an Observable respectively.\nUsing setItem and removeItem will set and remove an item in/from the storage respectively, and will emit an event on the storageEvents$ Observable.\nWhen using clear, the entire storage will be cleared, the Observables that were fetched using getItemObservable will be completed and an event will be emitted on the storageEvents$ observable.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.localStorage.setItem('Hello', { world: true });\n        storageService.sessionStorage.setItem('Hello', { world: true });\n    }\n}storageEvents$\nThe storageEvents$ property is an Observable that will emit a NgxStorageEvent whenever the session- or localStorage was updated (set or remove) or cleared.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.storageEvent$.subscribe(console.log);\n        // logs: {type: 'update', oldValue: undefined, newValue: {world: true}, key: 'Hello', storage: 'local'}\n        storageService.localStorage.setItem('Hello', { world: true });\n    }\n}\n    \n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, NEVER, Observable, Subject } from 'rxjs';\n\nimport {\n\tNgxStorage,\n\tNgxStorageClearEvent,\n\tNgxStorageEvent,\n\tNgxStorageRecord,\n\tNgxStorageRemoveEvent,\n\tNgxStorageSetEvent,\n\tNgxStorageType,\n} from '../../types';\n\n/**\n * A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxStorageService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record to hold the properties in the sessionStorage\n\t */\n\tprivate readonly sessionStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A record to hold the properties in the localStorage\n\t */\n\tprivate readonly localStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A subject to hold the events of the storage\n\t */\n\tprivate readonly storageEventSubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the session- or the localStorage was updated\n\t */\n\tpublic readonly storageEvents$: Observable =\n\t\tthis.storageEventSubject.asObservable();\n\n\tconstructor() {\n\t\tconst windowService = this.windowService;\n\n\t\t// Iben: Get the initial values of the session and the local storage\n\t\twindowService.runInBrowser(() => {\n\t\t\tthis.setupStorage(sessionStorage, this.sessionStorageRecord);\n\t\t\tthis.setupStorage(localStorage, this.localStorageRecord);\n\t\t});\n\t}\n\n\t/**\n\t * A localStorage implementation using observables\n\t */\n\tpublic get localStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, localStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.localStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, localStorage, this.localStorageRecord, 'local'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, localStorage, this.localStorageRecord, 'local'),\n\t\t\tclear: () => this.clearStorage(localStorage, this.localStorageRecord, 'local'),\n\t\t};\n\t}\n\n\t/**\n\t * A sessionStorage implementation using observables\n\t */\n\tpublic get sessionStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, sessionStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.sessionStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tclear: () => this.clearStorage(sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t};\n\t}\n\n\tprivate getItem(key: string, storage: Storage): DataType {\n\t\treturn this.parseValue(storage.getItem(key));\n\t}\n\n\t/**\n\t * Returns an observable version of the storage value\n\t *\n\t * @param key - The key of the storage value\n\t * @param record  - The storage record\n\t */\n\tprivate getItemObservable(\n\t\tkey: string,\n\t\trecord: NgxStorageRecord\n\t): Observable {\n\t\t// Iben: Return NEVER when not in browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: If the subject already exists, we return the observable\n\t\tif (record[key]) {\n\t\t\treturn record[key].asObservable();\n\t\t}\n\n\t\t// Iben: If no subject exits, we create a new one\n\t\trecord[key] = new BehaviorSubject(undefined);\n\n\t\t// Iben: Return the observable\n\t\treturn this.getItemObservable(key, record);\n\t}\n\n\t/**\n\t * Sets an item in the storage\n\t *\n\t * @param key - The key of the item\n\t * @param item - The item in the storage\n\t * @param storage - The storage in which we want to save the item\n\t * @param record - The corresponding storage record\n\t */\n\tprivate setItem(\n\t\tkey: string,\n\t\titem: DataType,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageSetEvent | undefined {\n\t\t// Iben: Early exit when we're in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Check if there's already a subject for this item. If not, we create one\n\t\tlet subject = record[key];\n\n\t\tif (!subject) {\n\t\t\tsubject = new BehaviorSubject(undefined);\n\t\t\tstorage[key] = subject;\n\t\t}\n\n\t\t// Iben: Store the current value of the subject\n\t\tconst oldValue = subject.getValue();\n\n\t\t// Iben: Set the item in the storage\n\t\tstorage.setItem(key, typeof item === 'string' ? item : JSON.stringify(item));\n\n\t\t// Iben: Update the subject in the record\n\t\tsubject.next(item);\n\n\t\t// Iben: Create the storage event\n\t\tconst event: NgxStorageSetEvent = {\n\t\t\tkey,\n\t\t\tnewValue: item,\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\ttype: 'set',\n\t\t};\n\n\t\t// Iben: Emit the storage event\n\t\tthis.storageEventSubject.next(event);\n\n\t\t// Iben: Return the storage event\n\t\treturn event;\n\t}\n\n\t/**\n\t * Remove an item from the storage and emit a remove event\n\t *\n\t * @param  key - The key of the item\n\t * @param storage - The storage we wish to remove the item from\n\t * @param record - The record with the subject\n\t * @param type - The type of storage\n\t */\n\tprivate removeItem(\n\t\tkey: string,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageRemoveEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Get the old item\n\t\tconst oldValue = this.parseValue(storage.getItem(key));\n\n\t\t// Iben: Remove the item from the storage\n\t\tstorage.removeItem(key);\n\n\t\t// Iben Update the subject if it exists\n\t\trecord[key]?.next(undefined);\n\n\t\t// Iben: Create the event and return and emit it\n\t\tconst event: NgxStorageRemoveEvent = {\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\tkey,\n\t\t\ttype: 'remove',\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\t\treturn event;\n\t}\n\n\t/**\n\t * Clears the storage, completes all subjects and emits a clear event\n\t *\n\t * @param storage - The storage we wish to clear\n\t * @param record - The record with the subjects\n\t * @param type - The type of storage\n\t */\n\tprivate clearStorage(\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageClearEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Clear the storage\n\t\tstorage.clear();\n\n\t\t// Iben: Clear the record and complete all subjects\n\t\tObject.entries(record).forEach(([key, subject]) => {\n\t\t\tsubject.next(undefined);\n\t\t\tsubject.complete();\n\n\t\t\trecord[key] = undefined;\n\t\t});\n\n\t\t// Iben: Create and emit event\n\t\tconst event: NgxStorageClearEvent = {\n\t\t\ttype: 'clear',\n\t\t\tstorage: type,\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\n\t\treturn event;\n\t}\n\n\t/**\n\t * Grabs the existing storage and updates the record\n\t *\n\t * @private\n\t * @param {Storage} storage - The current state of the storage\n\t * @param {NgxStorageRecord} record\n\t * @memberof NgxStorageService\n\t */\n\tprivate setupStorage(storage: Storage, record: NgxStorageRecord) {\n\t\tObject.entries(storage).forEach(([key, value]) => {\n\t\t\trecord[key] = new BehaviorSubject(this.parseValue(value));\n\t\t});\n\t}\n\n\t/**\n\t * Parses a string value from the storage to an actual value\n\t *\n\t * @param value - The provided string value\n\t */\n\tprivate parseValue(value: string): any {\n\t\t// Iben: If the value does not exist, return the value\n\t\tif (!value) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: If the value is either true or false, return a boolean version of the value\n\t\tif (value === 'true' || value === 'false') {\n\t\t\treturn value === 'true';\n\t\t}\n\n\t\t// Iben: If the value is a number, return the parsed number\n\t\tif (value.match(/^[0-9]*[,.]{0,1}[0-9]*$/)) {\n\t\t\treturn Number(value);\n\t\t}\n\n\t\t// Iben: If the value is an object, return the parsed object\n\t\tif (value.match(/{(.*:.*[,]{0,1})*}/)) {\n\t\t\treturn JSON.parse(value);\n\t\t}\n\n\t\t// Iben: Return the string value as is\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageSetEvent.html":{"url":"interfaces/NgxStorageSetEvent.html","title":"interface - NgxStorageSetEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageSetEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            newValue\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStore.html":{"url":"interfaces/NgxStore.html","title":"interface - NgxStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                The typing of the store of all sub slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         NgxStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         NgxStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStoreService.html":{"url":"injectables/NgxStoreService.html","title":"injectable - NgxStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/abstracts/store.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(selectors?: NgxStoreSelectors)\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        selectors\n                                                  \n                                                        \n                                                                        NgxStoreSelectors\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78\n                                \n                            \n                    \n                        \n                                An object that holds all the state selectors of the provided store slice.\nThe generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\n\n                                \n                                    Returns :         StoreState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Inject, inject, Injectable, Optional } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { NgxStoreSelectors, StoreFlowAssets, StoreState } from '../interfaces';\n\n@Injectable()\nexport class NgxStoreService {\n\t/**\n\t * A wrapper object for the store state selectors\n\t */\n\tprivate stateWrapper: StoreState;\n\n\tprotected readonly store: Store = inject(Store);\n\n\tconstructor(\n\t\t@Optional()\n\t\t@Inject('selectors')\n\t\tselectors?: NgxStoreSelectors\n\t) {\n\t\t// Iben: If the selectors are provided, we create an object that will create an object with selectors for each slice in the state\n\t\tif (selectors) {\n\t\t\tthis.stateWrapper = Object.keys(selectors).reduce((previous, key) => {\n\t\t\t\treturn {\n\t\t\t\t\t...previous,\n\t\t\t\t\t[`${key}$`]: this.selectFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Loading$`]: this.selectLoadingFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Error$`]: this.selectErrorFromStore(selectors[key]),\n\t\t\t\t\t[`${key}ErrorMessage$`]: this.selectErrorMessageFromStore(selectors[key]),\n\t\t\t\t};\n\t\t\t}, {}) as StoreState;\n\t\t}\n\t}\n\n\t/**\n\t * Select the data of a store slice\n\t *\n\t * @template StoreItem - The interface of the selected item/items\n\t * @param selector - The selector object\n\t */\n\tpublic selectFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.select || selector.selectAll));\n\t}\n\n\t/**\n\t * Select the loading state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectLoadingFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.loading || selector.selectLoading));\n\t}\n\n\t/**\n\t * Select the error state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.error || selector.selectError));\n\t}\n\n\t/**\n\t * Select the error message state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorMessageFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.errorMessage || selector.selectErrorMessage));\n\t}\n\n\t/**\n\t * An object that holds all the state selectors of the provided store slice.\n\t *\n\t * The generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\t */\n\tpublic get state(): StoreState {\n\t\t// Iben: If no selectors were provided, we throw an error informing the user\n\t\tif (!this.stateWrapper) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxStore: No selectors were provided to the constructor of the NgxStoreService extender. Without it, the state object cannot be created and will result in an error.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the stateWrapper\n\t\treturn this.stateWrapper;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableCellDirective.html":{"url":"directives/NgxTableCellDirective.html","title":"directive - NgxTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/generic-cell.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxAbstractTableCellDirective\n            \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxTableCellDirective,\n}\n                            \n                        \n                    \n\n                    \n                        Selector\n                        ngx-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('cellTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:27\n\n                        \n                    \n\n            \n                \n                    A template for the body of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:33\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:21\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:26\n\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { ContentChild, Directive, TemplateRef } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Directive({\n\tselector: 'ngx-table-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxTableCellDirective,\n\t\t},\n\t],\n\tstandalone: true,\n})\nexport class NgxTableCellDirective extends NgxAbstractTableCellDirective {\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the body of the cell\n\t */\n\n\t@ContentChild('cellTmpl', { static: false })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableConfiguration.html":{"url":"interfaces/NgxTableConfiguration.html","title":"interface - NgxTableConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/tokens/ngx-table-config.token.ts\n        \n\n\n            \n                Description\n            \n            \n                A configuration we can provide to set properties of the table globally\nshowDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\nngxTableClass - A default class that will be set on the ngx-table component itself\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nallowMultipleRowsOpen - Defines whether multiple rows can be open at once.\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nshowSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\nemitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\nhideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\ncomponents - A set of components we can use as defaults for the loading, error and empty state of the\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowMultipleRowsOpen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emitValueOnSingleItem\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideHeaderWhen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            highlightKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ngxTableClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDetailRow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showOpenRowState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showSelectedOpenRow\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowMultipleRowsOpen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowMultipleRowsOpen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emitValueOnSingleItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitValueOnSingleItem:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideHeaderWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideHeaderWhen:         HideHeaderRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HideHeaderRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        highlightKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ngxTableClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ngxTableClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDetailRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDetailRow:         ShowDetailRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShowDetailRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showOpenRowState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showOpenRowState:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showSelectedOpenRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showSelectedOpenRow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken, Type } from '@angular/core';\n\nimport {\n\tNgxDisplayContentComponent,\n\tNgxTableOpenRowStateTemplateAbstractComponent,\n\tNgxTableSelectTemplateAbstractComponent,\n\tNgxTableSortTemplateAbstractComponent,\n} from '../abstracts';\n\ntype HideHeaderRowOptions = 'when-loading' | 'when-empty';\nexport type HideHeaderRowOption =\n\t| 'never'\n\t| [HideHeaderRowOptions]\n\t| [HideHeaderRowOptions, HideHeaderRowOptions];\nexport type ShowDetailRowOption = 'always' | 'on-click' | 'on-single-item';\n\n/**\n * A configuration we can provide to set properties of the table globally\n *\n * showDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\n * ngxTableClass - A default class that will be set on the ngx-table component itself\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * allowMultipleRowsOpen - Defines whether multiple rows can be open at once.\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * showSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\n * emitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\n * hideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\n * components - A set of components we can use as defaults for the loading, error and empty state of the\n */\nexport interface NgxTableConfiguration {\n\tshowDetailRow?: ShowDetailRowOption;\n\tngxTableClass?: string;\n\tshowOpenRowState?: boolean;\n\tallowMultipleRowsOpen?: boolean;\n\thighlightKey?: string;\n\tshowSelectedOpenRow?: boolean;\n\temitValueOnSingleItem?: boolean;\n\thideHeaderWhen?: HideHeaderRowOption;\n\tcomponents?: {\n\t\tloading?: Type;\n\t\tempty?: Type;\n\t\tradio?: Type;\n\t\tcheckbox?: Type;\n\t\topenRowState?: Type;\n\t\tsort?: Type;\n\t};\n}\n\nexport const NgxTableConfigurationToken = new InjectionToken(\n\t'NgxTableConfiguration'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableCypressDataTagsBase.html":{"url":"interfaces/NgxTableCypressDataTagsBase.html","title":"interface - NgxTableCypressDataTagsBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableCypressDataTagsBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cell\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cell\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cell:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableGetPipe.html":{"url":"pipes/NgxTableGetPipe.html","title":"pipe - NgxTableGetPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableGetPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns a value based on a provided path\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        getProp\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value, path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { get } from 'lodash';\n\n/**\n * This pipe returns a value based on a provided path\n *\n * @export\n * @class NgxTableGetPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'getProp',\n\tstandalone: true,\n})\nexport class NgxTableGetPipe implements PipeTransform {\n\tpublic transform(value: unknown, path: string): any {\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || Array.isArray(value) || value === null) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe encountered a value that was not an object and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no path was provided, we return the value and warn the user\n\t\tif (!path) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe did not receive a path to a property and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Return the property\n\t\treturn get(value, path);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableHasObserversPipe.html":{"url":"pipes/NgxTableHasObserversPipe.html","title":"pipe - NgxTableHasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableHasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableHasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: OutputEmitterRef<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Returns true in case an observer was set to an EventEmitter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        OutputEmitterRef<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided EventEmitter\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe,PipeTransform,OutputEmitterRef } from '@angular/core';\n\n@Pipe({\n\tname: 'ngxTableHasObservers',\n\tstandalone: true,\n})\nexport class NgxTableHasObserversPipe implements PipeTransform {\n\t/**\n\t * Returns true in case an observer was set to an EventEmitter\n\t *\n\t * @param output - The provided EventEmitter\n\t */\n  public transform ( output: OutputEmitterRef ): boolean {\n\t\treturn output && output['listeners']?.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{"url":"directives/NgxTableOpenRowStateTemplateAbstractComponent.html","title":"directive - NgxTableOpenRowStateTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableOpenRowStateTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                            \n                                isOpen\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isOpen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                            \n                        \n                \n                    \n                        The current open state the component has to visualize\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                            \n                        \n                \n                    \n                        The row data\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                        \n                    \n\n            \n                \n                    The current open state the component has to visualize\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                        \n                    \n\n            \n                \n                    The row data\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableOpenRowStateTemplateAbstractComponent {\n\t/**\n\t * The current open state the component has to visualize\n\t */\n\tpublic isOpen: InputSignal = input();\n\n\t/**\n\t * The row data\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSelectTemplateAbstractComponent.html":{"url":"directives/NgxTableSelectTemplateAbstractComponent.html","title":"directive - NgxTableSelectTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSelectTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/select-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                control\n                            \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                control\n                            \n                            \n                                index\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        control\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                            \n                        \n                \n                    \n                        The control we wish to pass to the input\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                            \n                        \n                \n                    \n                        The row that is visualized\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                        \n                    \n\n            \n                \n                    The control we wish to pass to the input\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                        \n                    \n\n            \n                \n                    The row that is visualized\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSelectTemplateAbstractComponent {\n\t/**\n\t * The control we wish to pass to the input\n\t */\n\tpublic control: InputSignal> = input();\n\n\t/**\n\t * The row that is visualized\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableShowHeaderPipe.html":{"url":"pipes/NgxTableShowHeaderPipe.html","title":"pipe - NgxTableShowHeaderPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableShowHeaderPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns whether we want to show the header\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableShowHeader\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: NgxTableShowHeaderRequirements, hideHeaderRowWhen: HideHeaderRowOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            NgxTableShowHeaderRequirements\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hideHeaderRowWhen\n                                            \n                                                            HideHeaderRowOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { HideHeaderRowOption } from '../../tokens';\nimport { NgxTableShowHeaderRequirements } from '../../types';\n\n/**\n * This pipe returns whether we want to show the header\n *\n * @export\n * @class NgxTableShowHeaderPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'ngxTableShowHeader',\n\tstandalone: true,\n})\nexport class NgxTableShowHeaderPipe implements PipeTransform {\n\tpublic transform(\n\t\tvalue: NgxTableShowHeaderRequirements,\n\t\thideHeaderRowWhen: HideHeaderRowOption\n\t): boolean {\n\t\t// Iben: If we never want to hide the header row, we return true\n\t\tif (hideHeaderRowWhen === 'never') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || !value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableShowHeaderPipe encountered a value that was not an object and showed the header.'\n\t\t\t);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Add to set for better performance\n\t\tconst options = new Set(hideHeaderRowWhen);\n\n\t\t// Iben: Check which cases need the header to be hidden, and then flip it\n\t\treturn !(\n\t\t\t(options.has('when-empty') && value.isEmpty) ||\n\t\t\t(options.has('when-loading') && value.isLoading)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableShowHeaderRequirements.html":{"url":"interfaces/NgxTableShowHeaderRequirements.html","title":"interface - NgxTableShowHeaderRequirements","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableShowHeaderRequirements\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isEmpty\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isEmpty\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEmpty:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableSortEvent.html":{"url":"interfaces/NgxTableSortEvent.html","title":"interface - NgxTableSortEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableSortEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/sort-event.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            direction\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:     ColumnKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColumnKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:         NgxTableSortDirection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTableSortDirection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgxTableSortDirection } from '../enums/sort-direction.enum';\n\nexport interface NgxTableSortEvent {\n\tdirection: NgxTableSortDirection;\n\tcolumn: ColumnKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableSortIconPipe.html":{"url":"pipes/NgxTableSortIconPipe.html","title":"pipe - NgxTableSortIconPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableSortIconPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableSortIcon\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(direction: null | NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts:15\n                        \n                    \n\n\n            \n                \n                        Returns a icon based on the provided sort direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            null | NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided sort direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n@Pipe({\n\tname: 'ngxTableSortIcon',\n\tstandalone: true,\n})\nexport class NgxTableSortIconPipe implements PipeTransform {\n\t/**\n\t * Returns a icon based on the provided sort direction\n\t *\n\t * @param direction - The provided sort direction\n\t */\n\tpublic transform(direction: null | NgxTableSortDirection): string {\n\t\tif (!direction) {\n\t\t\treturn '&equiv;';\n\t\t}\n\n\t\treturn direction === NgxTableSortDirection.ASCENDING ? '&uArr;' : '&dArr;';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSortTemplateAbstractComponent.html":{"url":"directives/NgxTableSortTemplateAbstractComponent.html","title":"directive - NgxTableSortTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSortTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                direction\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                direction\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        direction\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                            \n                        \n                \n                    \n                        The current sort direction the component has to visualize\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                        \n                    \n\n            \n                \n                    The current sort direction the component has to visualize\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal} from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSortTemplateAbstractComponent {\n\t/**\n\t * The current sort direction the component has to visualize\n\t */\n\tpublic direction: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToast.html":{"url":"interfaces/NgxToast.html","title":"interface - NgxToast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The interface for a toast in the NgxToastService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            configuration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        configuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        configuration:         NgxToastConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxToastBundlerComponent.html":{"url":"directives/NgxToastBundlerComponent.html","title":"directive - NgxToastBundlerComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxToastBundlerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amount\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showBundled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        amount\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:16\n                            \n                        \n                \n                    \n                        The amount of toasts that are left and currently not shown\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showBundled\n                        \n                    \n                \n            \n            \n                \n                        \n                    showBundled()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:21\n                        \n                    \n\n\n            \n                \n                        Shows all the toasts that were bundled\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:16\n                        \n                    \n\n            \n                \n                    The amount of toasts that are left and currently not shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, inject, input, InputSignal } from '@angular/core';\n\nimport { NgxToastService } from '../../services';\n\n@Directive({\n\thost: {\n\t\t'attr.role': 'alert',\n\t},\n})\nexport abstract class NgxToastBundlerComponent {\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The amount of toasts that are left and currently not shown\n\t */\n\tpublic readonly amount: InputSignal = input.required();\n\n\t/**\n\t * Shows all the toasts that were bundled\n\t */\n\tpublic showBundled(): void {\n\t\tthis.toastService.showBundled();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxToastComponent.html":{"url":"directives/NgxToastComponent.html","title":"directive - NgxToastComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxToastComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/toast/toast.component.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toast\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                toast\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        toast\n                    \n                \n                \n                    \n                        Type :         InputSignal>\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20\n                            \n                        \n                \n                    \n                        The toast we wish to show\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                        \n                    close()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:30\n                        \n                    \n\n\n            \n                \n                        Removes the toast from the DOM after the animation is played\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toast\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20\n                        \n                    \n\n            \n                \n                    The toast we wish to show\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:15\n                        \n                    \n\n            \n                \n                    Instance of the toast service\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, inject, input, InputSignal } from '@angular/core';\n\nimport { NgxToastService } from '../../services';\nimport { NgxToast } from '../../types';\n\n@Directive({\n\thost: {\n\t\t'attr.role': 'alert',\n\t},\n})\nexport abstract class NgxToastComponent implements AfterViewInit {\n\t/**\n\t * Instance of the toast service\n\t */\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The toast we wish to show\n\t */\n\tpublic toast: InputSignal> = input.required();\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Mark the toast as rendered so it can auto remove itself if need be\n\t\tthis.toastService.markAsRendered(this.toast());\n\t}\n\n\t/**\n\t * Removes the toast from the DOM after the animation is played\n\t */\n\tpublic close(): void {\n\t\tthis.toastService.removeToast(this.toast());\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastConfiguration.html":{"url":"interfaces/NgxToastConfiguration.html","title":"interface - NgxToastConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration for an individual toast\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasPriority\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClose:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasPriority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasPriority:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxToastContainerComponent.html":{"url":"components/NgxToastContainerComponent.html","title":"component - NgxToastContainerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxToastContainerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-toast-container\n            \n\n\n            \n                imports\n                \n                            NgComponentOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./toast-container.component.html\n            \n\n\n\n            \n                styleUrl\n                ./toast-container.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bundledComponent\n                            \n                            \n                                    Public\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                hasBundledToasts\n                            \n                            \n                                    Public\n                                toasts\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:52\n                        \n                    \n\n\n            \n                \n                        Set whether the element has focus\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bundledComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.bundledComponent\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:45\n                        \n                    \n\n            \n                \n                    A component that will display the amount of bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastDefaultConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxToastConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:28\n                        \n                    \n\n            \n                \n                    The default configuration provided for the toast\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasBundledToasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.hasBundledToasts\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:40\n                        \n                    \n\n            \n                \n                    Whether there are bundled toasts that aren't currently visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.toasts\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:35\n                        \n                    \n\n            \n                \n                    A list of toasts to display\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:23\n                        \n                    \n\n            \n                \n                    The default configuration required for the toast\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgComponentOutlet } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject, Signal, Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent } from '../../abstracts';\nimport { NgxToastService } from '../../services';\nimport { NgxToastConfigurationToken } from '../../tokens';\nimport { NgxToast, NgxToastDefaultConfiguration } from '../../types';\n\n@Component({\n\tselector: 'ngx-toast-container',\n\ttemplateUrl: './toast-container.component.html',\n\tstyleUrl: './toast-container.component.scss',\n\timports: [NgComponentOutlet],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-toast-container',\n\t},\n})\nexport class NgxToastContainerComponent {\n\t/**\n\t * The default configuration required for the toast\n\t */\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The default configuration provided for the toast\n\t */\n\tpublic readonly configuration: NgxToastDefaultConfiguration = inject(\n\t\tNgxToastConfigurationToken\n\t);\n\n\t/**\n\t * A list of toasts to display\n\t */\n\tpublic toasts: Signal = this.toastService.toasts;\n\n\t/**\n\t * Whether there are bundled toasts that aren't currently visible\n\t */\n\tpublic hasBundledToasts: Signal = this.toastService.hasBundledToasts;\n\n\t/**\n\t * A component that will display the amount of bundled toasts\n\t */\n\tpublic bundledComponent: Type = this.toastService.bundledComponent;\n\n\t/**\n\t * Set whether the element has focus\n\t *\n\t * @param hasFocus\n\t */\n\tpublic setFocus(hasFocus: boolean): void {\n\t\tthis.toastService.setFocus(hasFocus);\n\t}\n}\n\n    \n\n    \n        @if(toasts().length > 0) {\n\n\t@for (toast of toasts(); track toast.id) {\n\t\n\t\t\n\t\n\t} @if(hasBundledToasts()) {\n\t\n\t\t\n\t\n\t}\n\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if(toasts().length > 0) {\t@for (toast of toasts(); track toast.id) {\t\t\t\t\t} @if(hasBundledToasts()) {\t\t\t\t\t}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxToastContainerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastDefaultConfiguration.html":{"url":"interfaces/NgxToastDefaultConfiguration.html","title":"interface - NgxToastDefaultConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastDefaultConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration we wish to apply to every toast unless we override it\n\n            \n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxTime\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAmount:         NgxToastMaxAmountConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastMaxAmountConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxToastPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastPosition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastEvent.html":{"url":"interfaces/NgxToastEvent.html","title":"interface - NgxToastEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An event for when toasts are shown, updated or removed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            toast\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        toast\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        toast:         NgxToast\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToast\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"add\" | \"remove\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"add\" | \"remove\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{"url":"interfaces/NgxToastMaxAmountBaseConfiguration.html","title":"interface - NgxToastMaxAmountBaseConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountBaseConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The base configuration for a toast setup with a max amount\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \"wait\" | \"ignore\" | \"bundle\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"wait\" | \"ignore\" | \"bundle\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{"url":"interfaces/NgxToastMaxAmountBundleConfiguration.html","title":"interface - NgxToastMaxAmountBundleConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountBundleConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration for a toast setup with a max amount that need to be bundled\n\n            \n\n            \n                Extends\n            \n            \n                            NgxToastMaxAmountBaseConfiguration\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{"url":"interfaces/NgxToastMaxAmountOtherConfiguration.html","title":"interface - NgxToastMaxAmountOtherConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountOtherConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The base configuration for a toast setup with a max amount that is not bundled\n\n            \n\n            \n                Extends\n            \n            \n                            NgxToastMaxAmountBaseConfiguration\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \"wait\" | \"ignore\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"wait\" | \"ignore\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxToastService.html":{"url":"injectables/NgxToastService.html","title":"injectable - NgxToastService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxToastService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/toast/toast.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that acts as the single source of truth in the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bundledComponent\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                hasBundledToasts\n                            \n                            \n                                    Private\n                                isFocussed\n                            \n                            \n                                    Private\n                                queue$\n                            \n                            \n                                    Private\n                                showBundledToasts$\n                            \n                            \n                                    Private\n                                toastEvents$\n                            \n                            \n                                    Public\n                                toasts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                markAsRendered\n                            \n                            \n                                    Public\n                                removeToast\n                            \n                            \n                                    Public\n                                setFocus\n                            \n                            \n                                    Public\n                                showBundled\n                            \n                            \n                                    Public\n                                showToast\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:96\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxToastService.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAsRendered\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsRendered(toast: NgxToast)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Mark the toast as rendered, so that we can automatically remove it if needed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                toast\n                                            \n                                                            NgxToast\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe toast we wish to remove if needed\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeToast\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToast(toast: NgxToast)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Removes a toast based on the provided id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                toast\n                                            \n                                                            NgxToast\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe toast we wish to remove\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Sets whether the list of toasts is currently being focussed on by the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether or not it is being focussed\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showBundled\n                        \n                    \n                \n            \n            \n                \n                        \n                    showBundled()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:243\n                        \n                    \n\n\n            \n                \n                        Shows the bundled toasts in case there are\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showToast\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToast(data: NgxToastCreator | string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:155\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Displays a provided toast and returns the generated id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            NgxToastCreator | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed for the toast\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxToast\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bundledComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : this.configuration?.maxAmount?.['component']\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:95\n                        \n                    \n\n            \n                \n                    The component used to represent the bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastDefaultConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxToastConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:37\n                        \n                    \n\n            \n                \n                    The default configuration required for the toast\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasBundledToasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\tif (!this.configuration.maxAmount || this.configuration.maxAmount.strategy !== 'bundle') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.queue$.getValue().length - this.toasts().length;\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:84\n                        \n                    \n\n            \n                \n                    The amount of bundled toasts there are\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFocussed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:59\n                        \n                    \n\n            \n                \n                    Whether the list of all toasts is focussed upon, either by focus or by hover\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queue$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:44\n                        \n                    \n\n            \n                \n                    The queue with all the toasts in it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showBundledToasts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:54\n                        \n                    \n\n            \n                \n                    Whether we want to show the bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toastEvents$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:49\n                        \n                    \n\n            \n                \n                    The toast event handler that will handle updates to the queue\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : toSignal(\n\t\tcombineLatest([this.queue$, this.showBundledToasts$]).pipe(\n\t\t\tmap(([toasts, showBundled]) => {\n\t\t\t\t// Iben: Prevent duplicates\n\t\t\t\tconst result = uniqBy(toasts, (item) => item.id) || [];\n\n\t\t\t\t// Iben: If there is no max amount, we return the toasts as is\n\t\t\t\tif (!this.configuration.maxAmount || showBundled) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If the there is a max amount, we return the limited list\n\t\t\t\treturn result.slice(0, this.configuration.maxAmount.amount);\n\t\t\t})\n\t\t)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:64\n                        \n                    \n\n            \n                \n                    A list of all the currently visible toasts\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { computed, inject, Injectable, Signal, Type } from '@angular/core';\nimport { takeUntilDestroyed, toSignal } from '@angular/core/rxjs-interop';\nimport { uniqBy } from 'lodash';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tconcatMap,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tof,\n\tSubject,\n\ttap,\n\twithLatestFrom,\n} from 'rxjs';\nimport { v7 as uuid } from 'uuid';\n\nimport { NgxToastBundlerComponent } from '../../abstracts';\nimport { NgxToastConfigurationToken } from '../../tokens';\nimport {\n\tNgxToast,\n\tNgxToastCreator,\n\tNgxToastDefaultConfiguration,\n\tNgxToastEvent,\n} from '../../types/toast.types';\n\n/**\n * A service that acts as the single source of truth in the application\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxToastService {\n\t/**\n\t * The default configuration required for the toast\n\t */\n\tprivate readonly configuration: NgxToastDefaultConfiguration = inject(\n\t\tNgxToastConfigurationToken\n\t);\n\n\t/**\n\t * The queue with all the toasts in it\n\t */\n\tprivate queue$: BehaviorSubject = new BehaviorSubject([]);\n\n\t/**\n\t * The toast event handler that will handle updates to the queue\n\t */\n\tprivate toastEvents$: Subject = new Subject();\n\n\t/**\n\t * Whether we want to show the bundled toasts\n\t */\n\tprivate showBundledToasts$: BehaviorSubject = new BehaviorSubject(false);\n\n\t/**\n\t * Whether the list of all toasts is focussed upon, either by focus or by hover\n\t */\n\tprivate isFocussed: boolean = false;\n\n\t/**\n\t * A list of all the currently visible toasts\n\t */\n\tpublic toasts: Signal = toSignal(\n\t\tcombineLatest([this.queue$, this.showBundledToasts$]).pipe(\n\t\t\tmap(([toasts, showBundled]) => {\n\t\t\t\t// Iben: Prevent duplicates\n\t\t\t\tconst result = uniqBy(toasts, (item) => item.id) || [];\n\n\t\t\t\t// Iben: If there is no max amount, we return the toasts as is\n\t\t\t\tif (!this.configuration.maxAmount || showBundled) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If the there is a max amount, we return the limited list\n\t\t\t\treturn result.slice(0, this.configuration.maxAmount.amount);\n\t\t\t})\n\t\t)\n\t);\n\n\t/**\n\t * The amount of bundled toasts there are\n\t */\n\tpublic hasBundledToasts: Signal = computed(() => {\n\t\tif (!this.configuration.maxAmount || this.configuration.maxAmount.strategy !== 'bundle') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.queue$.getValue().length - this.toasts().length;\n\t});\n\n\t/**\n\t * The component used to represent the bundled toasts\n\t */\n\tpublic bundledComponent: Type =\n\t\tthis.configuration?.maxAmount?.['component'];\n\n\t/**\n\t * Creates an instance of NgxToastService.\n\t */\n\tconstructor() {\n\t\t// Iben: Subscribe to the toast events\n\t\tthis.toastEvents$\n\t\t\t.pipe(\n\t\t\t\t// Iben: Concatmap all the events so we will handle them one by one\n\t\t\t\tconcatMap((event) => {\n\t\t\t\t\t// Iben: Get the latest version of the queue\n\t\t\t\t\treturn of(event).pipe(\n\t\t\t\t\t\twithLatestFrom(this.queue$),\n\t\t\t\t\t\ttap(([{ toast, type }, queue]) => {\n\t\t\t\t\t\t\t// Iben: If we need to add the item to the queue, we add it based on its priority\n\t\t\t\t\t\t\tif (type === 'add') {\n\t\t\t\t\t\t\t\tthis.queue$.next(\n\t\t\t\t\t\t\t\t\ttoast.configuration?.hasPriority\n\t\t\t\t\t\t\t\t\t\t? [toast, ...queue]\n\t\t\t\t\t\t\t\t\t\t: [...queue, toast]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Iben: Get the index of the toast we need to update or remove\n\t\t\t\t\t\t\tconst index = queue.findIndex(({ id }) => id === toast.id);\n\n\t\t\t\t\t\t\t// Iben: Remove the toast when needed\n\t\t\t\t\t\t\tthis.queue$.next([...queue.slice(0, index), ...queue.slice(index + 1)]);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t/**\n\t\t * Listens to the amount of items in the queue and resets the showBundledToasts accordingly\n\t\t */\n\t\tthis.queue$\n\t\t\t.pipe(\n\t\t\t\tmap((toasts) => toasts.length),\n\t\t\t\tdistinctUntilChanged(),\n\t\t\t\tfilter((length) => !length),\n\t\t\t\ttap(() => {\n\t\t\t\t\tthis.showBundledToasts$.next(false);\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Displays a provided toast and returns the generated id\n\t *\n\t * @param data - The data needed for the toast\n\t */\n\tpublic showToast(\n\t\tdata: NgxToastCreator | string\n\t): NgxToast {\n\t\t// Iben: Early exit if we reached\n\t\tif (\n\t\t\tthis.configuration.maxAmount &&\n\t\t\tthis.queue$.getValue().length === this.configuration.maxAmount.amount &&\n\t\t\tthis.configuration.maxAmount.strategy === 'ignore'\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Generate an id for the toast\n\t\tconst id = uuid();\n\t\tconst toast = { ...(typeof data === 'string' ? { text: data } : data), id };\n\n\t\t// Iben: Add the toast to the toast list\n\t\tthis.toastEvents$.next({\n\t\t\ttype: 'add',\n\t\t\ttoast: toast,\n\t\t});\n\n\t\t// Iben: Return the toast\n\t\treturn toast;\n\t}\n\n\t/**\n\t * Removes a toast based on the provided id\n\t *\n\t * @param toast - The toast we wish to remove\n\t */\n\tpublic removeToast(toast: NgxToast): void {\n\t\t// Iben: If the toast is no longer in the queue, because it was removed by the end user, we early exit\n\t\tif (!this.queue$.getValue().find(({ id }) => toast.id === id)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the toast list is currently being focussed on, we try again within 5 seconds\n\t\tif (this.isFocussed && (this.configuration.autoClose || toast.configuration?.autoClose)) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.removeToast(toast);\n\t\t\t}, 5000);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the toast list isn't focussed on, we remove it from the dom\n\t\tthis.toastEvents$.next({\n\t\t\ttoast,\n\t\t\ttype: 'remove',\n\t\t});\n\t}\n\n\t/**\n\t * Sets whether the list of toasts is currently being focussed on by the user\n\t *\n\t * @param hasFocus - Whether or not it is being focussed\n\t */\n\tpublic setFocus(hasFocus: boolean) {\n\t\tthis.isFocussed = hasFocus;\n\t}\n\n\t/**\n\t * Mark the toast as rendered, so that we can automatically remove it if needed\n\t *\n\t * @param toast - The toast we wish to remove if needed\n\t */\n\tpublic markAsRendered(toast: NgxToast): void {\n\t\t// Iben: If the toast isn't currently visible, we early exit\n\t\tif (!this.toasts().find(({ id }) => toast.id === id)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Check if we need to autoclose the toast and close it if it is set to true\n\t\tconst autoClose = toast.configuration?.autoClose || this.configuration.autoClose;\n\n\t\tif (autoClose === true || autoClose === undefined) {\n\t\t\tconst maxTime = this.configuration.maxTime || 5000;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.removeToast(toast);\n\t\t\t}, maxTime);\n\t\t}\n\t}\n\n\t/**\n\t * Shows the bundled toasts in case there are\n\t */\n\tpublic showBundled(): void {\n\t\t// Iben: If the maxAmount strategy isn't bundle, we early exit as this method is then irrelevant\n\t\tif (this.configuration.maxAmount?.strategy !== 'bundle') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.showBundledToasts$.next(true);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipAbstractComponent.html":{"url":"directives/NgxTooltipAbstractComponent.html","title":"directive - NgxTooltipAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxTooltipDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxTooltipService\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    Public\n                                    Readonly\n                                positionClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                text\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                position\n                            \n                            \n                                positionClass\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                            \n                        \n                \n                    \n                        The id of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        position\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                            \n                        \n                \n                    \n                        The current position of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        positionClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                            \n                        \n                \n                    \n                        The position class of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                \n            \n\n\n            \n                \n                    Set tooltip as active\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                \n            \n\n\n            \n                \n                    Set the tooltip as inactive\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Set the tooltip as inactive\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Set tooltip as active\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                        \n                    \n\n            \n                \n                    The id of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxTooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                        \n                    \n\n            \n                \n                    The current position of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        positionClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                        \n                    \n\n            \n                \n                    The position class of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        text\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, inject, input } from '@angular/core';\n\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition, NgxTooltipPositionClass } from '../../types';\n\n/**\n * An abstract for the NgxTooltipDirective\n */\n@Directive({\n\thost: {\n\t\tid: 'id()',\n    class: 'positionClass()',\n    'attr.role': 'tooltip'\n\t},\n})\nexport abstract class NgxTooltipAbstractComponent {\n\tprivate readonly ngxTooltipService = inject(NgxTooltipService);\n\n\t/**\n\t * Set tooltip as active\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Set the tooltip as inactive\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: false,\n\t\t});\n\t}\n\n\t/**\n\t * The position class of the tooltip\n\t */\n\t/**\n\t * The position class of the tooltip\n\t */\n\tpublic readonly positionClass = input();\n\n\t/**\n\t * The id of the tooltip\n\t */\n\t/**\n\t * The id of the tooltip\n\t */\n\tpublic readonly id = input.required();\n\n\t/**\n\t * The current position of the tooltip\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly text = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveElementEvent.html":{"url":"interfaces/NgxTooltipActiveElementEvent.html","title":"interface - NgxTooltipActiveElementEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveElementEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveTooltipEvent.html":{"url":"interfaces/NgxTooltipActiveTooltipEvent.html","title":"interface - NgxTooltipActiveTooltipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveTooltipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipBaseEvent.html":{"url":"interfaces/NgxTooltipBaseEvent.html","title":"interface - NgxTooltipBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \"tooltip\" | \"element\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"tooltip\" | \"element\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipConfiguration.html":{"url":"interfaces/NgxTooltipConfiguration.html","title":"interface - NgxTooltipConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultPosition\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultPosition:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipDirective.html":{"url":"directives/NgxTooltipDirective.html","title":"directive - NgxTooltipDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds a ARIA compliant tooltip to a component\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTooltip]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltip\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipComponent\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipDisabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipId\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipPosition\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onEscape\n                            \n                            \n                                    \n                                removeOnBlur\n                            \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    Private\n                                removeTooltip\n                            \n                            \n                                    \n                                showOnFocus\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                            \n                                    Private\n                                showTooltip\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTooltip\n                            \n                            \n                                ngxTooltipDisabled\n                            \n                            \n                                ngxTooltipPosition\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                document:keydown.escape\n                            \n                            \n                                focus\n                            \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTooltip\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipDisabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                            \n                        \n                \n                    \n                        Prevent the tooltip from being shown, by default this is false.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipPosition\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                            \n                        \n                \n                    \n                        An optional position we can pass to tooltip, by default this is 'above'.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                \n            \n\n\n            \n                \n                    Remove the tooltip on blur\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                \n            \n\n\n            \n                \n                    Remove the tooltip on escape pressed\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                \n            \n\n\n            \n                \n                    Show the tooltip on focus\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                \n            \n\n\n            \n                \n                    Show the tooltip on hover\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                \n            \n\n\n            \n                \n                    Remove the tooltip on leaving hover\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnBlur()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on blur\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on leaving hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on focus\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93\n                        \n                    \n\n\n            \n                \n                        Show the tooltip if it is not visible yet\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltip\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipComponent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77\n                        \n                    \n\n            \n                \n                    An optional component we can pass to replace the default configured component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                        \n                    \n\n            \n                \n                    Prevent the tooltip from being shown, by default this is false.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(uuid())\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67\n                        \n                    \n\n            \n                \n                    The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipPosition\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                        \n                    \n\n            \n                \n                    An optional position we can pass to tooltip, by default this is 'above'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, Type, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTooltipAbstractComponent } from '../../abstracts';\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition } from '../../types';\n\n/**\n * A directive that adds a ARIA compliant tooltip to a component\n *\n * @export\n * @class NgxTooltipDirective\n */\n@Directive({\n\tselector: '[ngxTooltip]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.aria-describedby]': 'ngxTooltipId()',\n\t\ttabIndex: '0',\n\t},\n})\nexport class NgxTooltipDirective {\n\tprivate readonly tooltipService = inject(NgxTooltipService);\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * Show the tooltip on hover\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Show the tooltip on focus\n\t */\n\t@HostListener('focus') showOnFocus() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on leaving hover\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on blur\n\t */\n\t@HostListener('blur') removeOnBlur() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') onEscape() {\n\t\tthis.tooltipService.removeToolTip();\n\t}\n\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\tpublic readonly ngxTooltipId = input(uuid());\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly ngxTooltip = input.required();\n\n\t/**\n\t * An optional component we can pass to replace the default configured component\n\t */\n\tpublic readonly ngxTooltipComponent = input>();\n\n\t/**\n\t * An optional position we can pass to tooltip, by default this is 'above'.\n\t */\n\t// Iben: The default is set in the NgxTooltipService\n\tpublic readonly ngxTooltipPosition = input();\n\n\t/**\n\t * Prevent the tooltip from being shown, by default this is false.\n\t */\n\tpublic readonly ngxTooltipDisabled = input(false);\n\n\t/**\n\t * Show the tooltip if it is not visible yet\n\t */\n\tprivate showTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Show the tooltip\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\ttext: this.ngxTooltip(),\n\t\t\tposition: this.ngxTooltipPosition(),\n\t\t\tcomponent: this.ngxTooltipComponent(),\n\t\t\telementRef: this.elementRef,\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Remove the tooltip\n\t */\n\tprivate removeTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Emit a remove event\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: false,\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipInactiveEvent.html":{"url":"interfaces/NgxTooltipInactiveEvent.html","title":"interface - NgxTooltipInactiveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipInactiveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipItem.html":{"url":"interfaces/NgxTooltipItem.html","title":"interface - NgxTooltipItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxTooltipService.html":{"url":"injectables/NgxTooltipService.html","title":"injectable - NgxTooltipService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxTooltipService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeTooltip\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayPositionBuilder\n                            \n                            \n                                    Private\n                                overlayRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayService\n                            \n                            \n                                    Private\n                                    Readonly\n                                positionRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipEventsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                removeToolTip\n                            \n                            \n                                    Public\n                                setToolTipEvent\n                            \n                            \n                                    Public\n                                showToolTip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Emit the destroy event\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToolTip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Removes the tooltip.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setToolTipEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    setToolTipEvent(event: NgxTooltipEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Dispatches the tooltip event to the subject\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NgxTooltipEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA tooltip event\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToolTip(tooltip: NgxTooltipItem)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Show a tooltip\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tooltip\n                                            \n                                                            NgxTooltipItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration of the tooltip\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeTooltip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39\n                        \n                    \n\n            \n                \n                    A subject to hold the destroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayPositionBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(OverlayPositionBuilder)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OverlayRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44\n                        \n                    \n\n            \n                \n                    The overlayRef used to attach the tooltip too\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        positionRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49\n                        \n                    \n\n            \n                \n                    The position record for the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipEventsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the tooltip events\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n\tConnectedPosition,\n\tOverlay,\n\tOverlayPositionBuilder,\n\tOverlayRef,\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, OnDestroy, inject } from '@angular/core';\nimport { BehaviorSubject, pairwise, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxTooltipConfigurationToken } from '../../tokens';\nimport {\n\tNgxTooltipConfiguration,\n\tNgxTooltipEvent,\n\tNgxTooltipItem,\n\tNgxTooltipPosition,\n} from '../../types';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxTooltipService implements OnDestroy {\n\tprivate readonly configuration = inject(NgxTooltipConfigurationToken);\n\tprivate readonly overlayService = inject(Overlay);\n\tprivate readonly overlayPositionBuilder = inject(OverlayPositionBuilder);\n\n\t// Iben: The id of the active tooltip\n\tprivate activeTooltip: string = undefined;\n\n\t/**\n\t * A subject to hold the tooltip events\n\t */\n\tprivate readonly tooltipEventsSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to hold the destroy event\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * The overlayRef used to attach the tooltip too\n\t */\n\tprivate overlayRef: OverlayRef;\n\n\t/**\n\t * The position record for the tooltip\n\t */\n\tprivate readonly positionRecord: Record = {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t};\n\n\tconstructor() {\n\t\t// Iben: Listen to the tooltip events and handle accordingly\n\t\tthis.tooltipEventsSubject\n\t\t\t.pipe(\n\t\t\t\tpairwise(),\n\t\t\t\ttap(([previous, next]) => {\n\t\t\t\t\t// Iben: When we enter an element, we show the tooltip\n\t\t\t\t\tif (next.active && next.source === 'element') {\n\t\t\t\t\t\t// Iben: Check if we have a previous element, and if so, if we have to remove it\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tprevious &&\n\t\t\t\t\t\t\tthis.overlayRef?.hasAttached() &&\n\t\t\t\t\t\t\tthis.activeTooltip !== next.id\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Add the new tooltip\n\t\t\t\t\t\tconst { component, text, position, elementRef, id } = next;\n\n\t\t\t\t\t\tthis.showToolTip({\n\t\t\t\t\t\t\tcomponent: component,\n\t\t\t\t\t\t\ttext: text,\n\t\t\t\t\t\t\tposition: position,\n\t\t\t\t\t\t\telementRef: elementRef,\n\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: We do a check on previous here so we can continue safely in the upcoming checks\n\t\t\t\t\tif (!previous) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If we're entering a new element, we early exit\n\t\t\t\t\tif (previous.id !== next.id) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If the sources are the same, we check if we need to remove the tooltip\n\t\t\t\t\t// In this case we either leave the tooltip or leave the element\n\t\t\t\t\tif (previous.source === next.source) {\n\t\t\t\t\t\tif (!next.active) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If both actives are false (element => tooltip => outside or tooltip => element => outside), we remove the tooltip\n\t\t\t\t\tif (!next.active && !previous.active) {\n\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Show a tooltip\n\t *\n\t * @param tooltip - The configuration of the tooltip\n\t */\n\tpublic showToolTip(tooltip: NgxTooltipItem): void {\n\t\t// Iben: If no tooltip was provided or if we already have a tooltip attached, we early exit\n\t\tif (!tooltip || this.overlayRef?.hasAttached()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Get the configuration of the tooltip\n\t\tconst { text, component, position, elementRef, id } = tooltip;\n\n\t\t// Iben: Set the active tooltip\n\t\tthis.activeTooltip = id;\n\n\t\t// Iben: Get the tooltip position. If no position was provided by the tooltip, we use the configured default, if none is configured we use 'above'\n\t\tconst tooltipPosition = position || this.configuration.defaultPosition || 'above';\n\n\t\t// Iben: If the previous overlayRef still exists, we remove it\n\t\tif (!this.overlayRef) {\n\t\t\tthis.overlayRef = this.overlayService.create({\n\t\t\t\t// Iben: Set the scroll strategy to reposition so that whenever the user scrolls, the tooltip is still near the element\n\t\t\t\tscrollStrategy: this.overlayService.scrollStrategies.reposition(),\n\t\t\t});\n\t\t}\n\n\t\t// Iben: Create the position of the overlay\n\t\tconst positionStrategy = this.overlayPositionBuilder\n\t\t\t.flexibleConnectedTo(elementRef)\n\t\t\t.withPositions([this.positionRecord[tooltipPosition]]);\n\n\t\t// Iben: Update the position of the current overlayRef\n\t\tthis.overlayRef.updatePositionStrategy(positionStrategy);\n\n\t\t// Iben: Create a new component portal\n\t\tconst tooltipPortal = new ComponentPortal(component || this.configuration.component);\n\n\t\t// Iben: Attach the tooltipPortal to the overlayRef\n    const tooltipRef = this.overlayRef.attach( tooltipPortal );\n\n\t\t// Iben: Pass the data to the component\n\t\ttooltipRef.setInput('text', text);\n\t\ttooltipRef.setInput('position', tooltipPosition);\n\t\ttooltipRef.setInput('positionClass', `ngx-tooltip-position-${tooltipPosition}`);\n\t\ttooltipRef.setInput('id', id);\n\t}\n\n\t/**\n\t * Removes the tooltip.\n\t */\n\tpublic removeToolTip(): void {\n\t\tif (this.activeTooltip) {\n\t\t\t// Iben: Unset the active tooltip\n\t\t\tthis.activeTooltip = undefined;\n\n\t\t\t// Iben: Remove the active tooltip from view\n\t\t\tthis.overlayRef.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches the tooltip event to the subject\n\t *\n\t * @param event - A tooltip event\n\t */\n\tpublic setToolTipEvent(event: NgxTooltipEvent): void {\n\t\t// Iben: We add a delay so that the user can navigate between the tooltip and the element\n\t\tsetTimeout(\n\t\t\t() => {\n\t\t\t\tthis.tooltipEventsSubject.next(event);\n\t\t\t},\n\t\t\tevent.active ? 0 : 100\n\t\t);\n\t}\n\n\t/**\n\t * Emit the destroy event\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourBackdropClipEvent.html":{"url":"interfaces/NgxTourBackdropClipEvent.html","title":"interface - NgxTourBackdropClipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourBackdropClipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backdrop\n                                        \n                                \n                                \n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backdrop:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourItemDirective.html":{"url":"directives/NgxTourItemDirective.html","title":"directive - NgxTourItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to mark elements in the DOM to be highlighted during a tour\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [tourItem]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    \n                                    Public\n                                isActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                tourItem\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                setActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                tourItem\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.ngx-tour-item-active\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementId\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        tourItem\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                            \n                        \n                \n                    \n                        The id of the item that corresponds with the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class.ngx-tour-item-active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    setActive(isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:33\n                        \n                    \n\n\n            \n                \n                        Mark an element as active or inactive\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether or not the element should be active\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class.ngx-tour-item-active')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        tourItem\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                        \n                    \n\n            \n                \n                    The id of the item that corresponds with the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n\n                \n                    \n                        getelementId()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:44\n                                \n                            \n                    \n                        \n                                Returns the id of the element. Uses for the aria-details on the tour-item component\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Directive, ElementRef, HostBinding, OnDestroy, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\n\n/**\n * A directive to mark elements in the DOM to be highlighted during a tour\n */\n@Directive({\n\tselector: '[tourItem]',\n  standalone: true,\n})\nexport class NgxTourItemDirective implements AfterViewInit, OnDestroy {\n\treadonly elementRef = inject>(ElementRef);\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * A class added to the currently active item\n\t */\n\t@HostBinding('class.ngx-tour-item-active') public isActive: boolean = false;\n\n\t/**\n\t * The id of the item that corresponds with the step\n\t */\n\tpublic readonly tourItem = input();\n\n\t/**\n\t * Mark an element as active or inactive\n\t *\n\t * @param isActive - Whether or not the element should be active\n\t */\n\tpublic setActive(isActive: boolean): void {\n\t\t// Iben: Mark the current item as active or inactive\n\t\tthis.isActive = isActive;\n\n\t\t// Iben: Detect the changes on the component\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Returns the id of the element. Uses for the `aria-details` on the tour-item component\n\t */\n\tpublic get elementId(): string {\n\t\treturn this.elementRef.nativeElement.getAttribute('id');\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Register the element when rendered\n\t\tthis.tourService.registerElement(this);\n\n\t\t// Iben: Check if the element has an id, if not, give it a new id for accessibility\n\t\tif (!this.elementRef.nativeElement.getAttribute('id')) {\n\t\t\tthis.elementRef.nativeElement.setAttribute('id', uuid());\n\t\t}\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Unregister the element when the element gets destroyed\n\t\tthis.tourService.unregisterElement(this.tourItem());\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourRouteOptions.html":{"url":"interfaces/NgxTourRouteOptions.html","title":"interface - NgxTourRouteOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourRouteOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            extras\n                                        \n                                \n                                \n                                        \n                                            route\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        extras\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extras:     NavigationExtras\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NavigationExtras\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourShowWhenDirective.html":{"url":"directives/NgxTourShowWhenDirective.html","title":"directive - NgxTourShowWhenDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourShowWhenDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on the condition and the currently active tour\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTourShowWhen]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxTourShowWhen\n                            \n                            \n                                    Public\n                                ngxTourShowWhenElse\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTourShowWhen\n                            \n                            \n                                ngxTourShowWhenElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTourShowWhen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                            \n                        \n                \n                    \n                        Under which condition the item should be shown whilst the tour is active\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTourShowWhenElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:32\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                        \n                    \n\n            \n                \n                    Under which condition the item should be shown whilst the tour is active\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhenElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:37\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { combineLatest, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\n\nimport { NgxTourService } from '../../services';\n\n/**\n *  * A directive that will render a part of the template based on the condition and the currently active tour\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxTourShowWhen]',\n})\nexport class NgxTourShowWhenDirective implements OnDestroy {\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tif (this.ngxTourShowWhen()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxTourShowWhenElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Under which condition the item should be shown whilst the tour is active\n\t */\n\tpublic ngxTourShowWhen: InputSignal =\n\t\tinput();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxTourShowWhenElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.tourService.currentIndex$\n\t\t\t.pipe(\n\t\t\t\tdistinctUntilChanged(),\n        withLatestFrom( this.tourService.currentTour$ ),\n\t\t\t\ttap(([index, tour]) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenInactive' && index === undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenActive' && index !== undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasPrevious' && Boolean(tour?.[index - 1])) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasNext' && Boolean(tour?.[index + 1]))\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourStep.html":{"url":"interfaces/NgxTourStep.html","title":"interface - NgxTourStep","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourStep\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            afterVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            beforeVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            delay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableBackDrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offset\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stepClass\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tourItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        afterVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        afterVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run when a step is no longer visible\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        beforeVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        beforeVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right before a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional component to replace the default provided component within the tour step configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The content we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional padding we can set for the cutout around an element. By default, this is set to 5px.\nThis will add some additional whitespace within the cutout.\nThis is not the same as the offset, which is the whitespace around the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional extra data we wish to provide to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional amount of time we want to wait before showing the next step.\nBy default this is 100 ms.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableBackDrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableBackDrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether we want to disable the backdrop\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right when a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTourStepPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional position where we wish to render the tour step.\nBy default, this is below.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stepClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stepClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional class we can attach to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The title we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tourItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tourItem:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional corresponding id of the element we wish to highlight. This is the string we pass to the tourItem directive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourStepComponent.html":{"url":"directives/NgxTourStepComponent.html","title":"directive - NgxTourStepComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class that defines the minimum properties needed for the step component to be rendered\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                \n            \n\n\n            \n                \n                    Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:98\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:63\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:58\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:103\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tDirective,\n\tElementRef,\n\tHostBinding,\n\tHostListener,\n\tOnInit,\n\tsignal,\n\tWritableSignal,\n\tinject,\n\tinput,\n\tOutputEmitterRef,\n\toutput,\n\tviewChild,\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\nimport { NgxTourInteraction, NgxTourStepPosition } from '../../types';\n\n/**\n * An abstract class that defines the minimum properties needed for the step component to be rendered\n */\n@Directive({\n\thost: {\n\t\trole: 'dialog',\n\t\t'[attr.aria-modal]': 'true',\n\t\t'[attr.aria-labelledby]': 'titleId()',\n\t\t'[attr.aria-details]': 'elementId()',\n\t},\n})\nexport abstract class NgxTourStepComponent implements OnInit, AfterViewInit {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\t/**\n\t * Close the tour on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.tourService.closeTour().subscribe();\n\t}\n\n\t/**\n\t * The ngx-tour-step class of the component\n\t */\n\t@HostBinding('class') protected rootClass: string;\n\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\tpublic readonly elementId = input.required();\n\n\t/**\n\t * The element of the tour-step that is seen as the title\n\t */\n\tpublic readonly titleElement = viewChild>('stepTitle');\n\n\t/**\n\t * The position of the step\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The title of the step\n\t */\n\tpublic readonly title = input.required();\n\n\t/**\n\t * The content of the step\n\t */\n\tpublic readonly content = input.required();\n\n\t/**\n\t * The index of the step\n\t */\n\tpublic readonly currentStep = input.required();\n\n\t/**\n\t * The total amount of steps\n\t */\n\tpublic readonly amountOfSteps = input.required();\n\n\t/**\n\t * Optional data we wish to use in a step\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * A custom step class we can set\n\t */\n\tpublic readonly stepClass = input();\n\n\t/**\n\t * Emits the possible interactions with a step\n\t */\n\tpublic handleInteraction: OutputEmitterRef = output();\n\n\t/**\n\t * The aria-labelledby id of the title element\n\t */\n\tpublic titleId: WritableSignal = signal('');\n\n\tpublic ngOnInit(): void {\n\t\t// Iben: We set the correct host class. As this step is rendered and not changed afterwards, we do not have to adjust this in the onChanges\n\t\tconst position = this.position();\n\t\tconst positionClass = position ? `ngx-tour-step-position-${position}` : '';\n\t\tthis.rootClass = `ngx-tour-step ${positionClass} ${this.stepClass() || ''}`;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If no title element was found, we throw an error\n\t\tconst titleElement = this.titleElement();\n\t\tif (!titleElement) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxTourService: The tour step component does not have an element marked with `stepTitle`. Because of that, the necessary accessibility attributes could not be set. Please add the `stepTitle` tag to the element that represents the title of the step.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Connect the aria-labbledby tag to the title element\n\t\tlet id = titleElement.nativeElement.getAttribute('id');\n\n\t\t// Iben: If the title element does not have an id, we generate one\n\t\tif (!id) {\n\t\t\tid = uuid();\n\t\t\ttitleElement.nativeElement.setAttribute('id', id);\n\t\t}\n\n\t\t// Iben: To prevent issues with changeDetection, we use a signal here to update the id\n\t\tthis.titleId.set(id);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourTokenConfiguration.html":{"url":"interfaces/NgxTourTokenConfiguration.html","title":"interface - NgxTourTokenConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourTokenConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.token.type.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration object to be passed as token to the tour provider\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component to be used as the tour step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\nimport { NgxTourStepOffset } from './tour.types';\n\n/**\n * The token type for the tour provider\n */\nexport type NgxTourTokenType = Type | NgxTourTokenConfiguration;\n\n/**\n * The configuration object to be passed as token to the tour provider\n */\nexport interface NgxTourTokenConfiguration {\n\t/**\n\t * The component to be used as the tour step.\n\t */\n\tcomponent: Type;\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t *\n\t * @inheritdoc NgxTourStep.offset\n\t */\n\toffset: NgxTourStepOffset;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridCellDirective.html":{"url":"directives/NgxTreeGridCellDirective.html","title":"directive - NgxTreeGridCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A cell directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDirective\n            \n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGridCell]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCell\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCellRow\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                row\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                findFocusableElement\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    \n                                moveDown\n                            \n                            \n                                    \n                                moveLeft\n                            \n                            \n                                    \n                                moveRight\n                            \n                            \n                                    \n                                moveToBottomControlEnd\n                            \n                            \n                                    \n                                moveToBottomEnd\n                            \n                            \n                                    Private\n                                moveToCell\n                            \n                            \n                                    \n                                moveToFirstCellOfGrid\n                            \n                            \n                                    \n                                moveToFirstColumnOfGrid\n                            \n                            \n                                    \n                                moveToFirstOfRow\n                            \n                            \n                                    \n                                moveToLastCellOfGrid\n                            \n                            \n                                    \n                                moveUp\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGridCell\n                            \n                            \n                                ngxTreeGridCellRow\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowLeft\n                            \n                            \n                                keydown.ArrowRight\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.control.End\n                            \n                            \n                                keydown.control.Home\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                            \n                                keydown.PageDown\n                            \n                            \n                                keydown.PageUp\n                            \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGridCell\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                            \n                        \n                \n                    \n                        The index of the cell in the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridCellRow\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                \n            \n\n\n            \n                \n                    Set focus on the cell below\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowLeft\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                \n            \n\n\n            \n                \n                    Set focus on the previous cell to the left\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowRight\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                \n            \n\n\n            \n                \n                    Set focus on the next cell to the right\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                \n            \n\n\n            \n                \n                    Set focus on the cell above\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:25\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:18\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        findFocusableElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFocusableElement()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:152\n                        \n                    \n\n\n            \n                \n                        Searches for a focusable element in the cell\n\n\n                        \n                            Returns :     HTMLElement | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:126\n                        \n                    \n\n\n            \n                \n                        Sets focus on the cell or on the first focusable item in the cell\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveDown()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell below\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveLeft\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveLeft(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowLeft', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                        \n                    \n\n\n            \n                \n                        Set focus on the previous cell to the left\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveRight\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveRight()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowRight')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                        \n                    \n\n\n            \n                \n                        Set focus on the next cell to the right\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomControlEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomControlEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        moveToCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:143\n                        \n                    \n\n\n            \n                \n                        Moves focus to a provided cell in a provided row\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cell we wish to put focus on\n\n\n                                            \n                                        \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe row in which the cell is\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstColumnOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstColumnOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstOfRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstOfRow()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToLastCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToLastCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveUp()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell above\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:174\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:34\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:43\n\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:25\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:18\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCell\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                        \n                    \n\n            \n                \n                    The index of the cell in the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCellRow\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:32\n                        \n                    \n\n            \n                \n                    The parent row of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDirective:13\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, AfterViewInit, inject, input } from '@angular/core';\n\nimport { NgxTreeGridCellTarget, NgxTreeGridRowTarget } from '../../types';\nimport { NgxHasFocusDirective } from '../has-focus-action';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridDirective } from './tree-grid.directive';\n\n/**\n * A cell directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGridCell]',\n\tstandalone: true,\n\thost: {\n\t\t// Iben: Marks the cell as focusable, but only by setting its focus programmatically, not by the tab key\n\t\t'[attr.tabIndex]': '-1',\n\t},\n})\nexport class NgxTreeGridCellDirective extends NgxHasFocusDirective implements AfterViewInit {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tprivate readonly parent: NgxTreeGridDirective = inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * The parent row of the cell\n\t */\n\tprivate row: NgxTreeGridRowDirective;\n\n\t/**\n\t * Set focus on the previous cell to the left\n\t */\n\t@HostListener('keydown.ArrowLeft', ['$event']) moveLeft(event: Event): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\t// Iben: Stop the event from bubbling so that the row does not open when navigating through the row (see arrowLeft in the NgxTreeGridRowDirective )\n\t\t\tconst ngxTreeGridCell = this.ngxTreeGridCell();\n   if (ngxTreeGridCell === 0) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.moveToCell(ngxTreeGridCell - 1, 'current');\n\t\t});\n\t}\n\n\t/**\n\t * Set focus on the next cell to the right\n\t */\n\t@HostListener('keydown.ArrowRight') moveRight(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell() + 1, 'current');\n\t}\n\n\t/**\n\t * Set focus on the cell above\n\t */\n\t@HostListener('keydown.ArrowUp') moveUp(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'above');\n\t}\n\n\t/**\n\t * Set focus on the cell below\n\t */\n\t@HostListener('keydown.ArrowDown') moveDown(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'below');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the grid\n\t */\n\t@HostListener('keydown.PageUp') moveToFirstCellOfGrid(): void {\n\t\tthis.moveToCell('first', 'first');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the row\n\t */\n\t@HostListener('keydown.Home') moveToFirstOfRow(): void {\n\t\tthis.moveToCell('first', 'current');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.Home') moveToFirstColumnOfGrid(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'first');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the grid\n\t */\n\t@HostListener('keydown.PageDown') moveToLastCellOfGrid(): void {\n\t\tthis.moveToCell('last', 'last');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the row\n\t */\n\t@HostListener('keydown.End') moveToBottomEnd(): void {\n\t\tthis.moveToCell('last', 'current');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.End') moveToBottomControlEnd(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'last');\n\t}\n\n\t/**\n\t * The index of the cell in the row\n\t */\n\tpublic readonly ngxTreeGridCell = input.required();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic readonly ngxTreeGridCellRow = input.required();\n\n\t/**\n\t * Sets focus on the cell or on the first focusable item in the cell\n\t */\n\tpublic focus(): void {\n\t\t// Iben: Check if any of the child elements are focusable\n\t\tconst focusableElement = this.findFocusableElement();\n\n\t\t// Iben: If no element was focusable, focus on the current element\n\t\tif (!focusableElement) {\n\t\t\tthis.elementRef.nativeElement.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Moves focus to a provided cell in a provided row\n\t *\n\t * @private\n\t * @param cell - The cell we wish to put focus on\n\t * @param row - The row in which the cell is\n\t */\n\tprivate moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.row.getCell(cell, row)?.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Searches for a focusable element in the cell\n\t */\n\tprivate findFocusableElement(): HTMLElement | undefined {\n\t\tlet result: HTMLElement;\n\n\t\t// Iben: Loop over each first-level element of the children\n\t\tfor (const element of [...this.elementRef.nativeElement.children]) {\n\t\t\tif (!result) {\n\t\t\t\t// Iben: Check if we can focus on the element\n        element.focus();\n\n\t\t\t\t// Iben: If the current active element is the same as the element we focussed, on, we break\n\t\t\t\tif (element === document?.activeElement) {\n\t\t\t\t\tresult = element;\n\t\t\t\t\tthis.hasFocus = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: We register the cell and the row through the parent, as the td elements are not rendered within the row initially.\n\t\tconst ngxTreeGridCellRow = this.ngxTreeGridCellRow();\n  this.parent?.registerCell(ngxTreeGridCellRow, this);\n\t\tthis.row = this.parent.getRow(ngxTreeGridCellRow);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridDirective.html":{"url":"directives/NgxTreeGridDirective.html","title":"directive - NgxTreeGridDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An overarching directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGrid]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGrid\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridExpandable\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    Private\n                                rows\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFirstRow\n                            \n                            \n                                    Public\n                                getLastRow\n                            \n                            \n                                    Public\n                                getRow\n                            \n                            \n                                    Public\n                                moveTo\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                    Public\n                                registerCell\n                            \n                            \n                                    Public\n                                registerRow\n                            \n                            \n                                    Public\n                                removeRow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGrid\n                            \n                            \n                                ngxTreeGridExpandable\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.role\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGrid\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                            \n                        \n                \n                    \n                        Whether the current item is a treegrid\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridExpandable\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                            \n                        \n                \n                    \n                        Whether the treegrid has expandableRows\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFirstRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFirstRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the first row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getLastRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLastRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns the last row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:56\n                        \n                    \n\n\n            \n                \n                        Returns a row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveTo(direction: \"top\" | \"bottom\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:85\n                        \n                    \n\n\n            \n                \n                        Moves the row focus to either the top or the bottom row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                        \"top\" | \"bottom\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether we want to go to the top or the bottom of the grid\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerCell(index: number, cell: NgxTreeGridCellDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:94\n                        \n                    \n\n\n            \n                \n                        Registers a a cell to a row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided cell\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerRow(row: NgxTreeGridRowDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:38\n                        \n                    \n\n\n            \n                \n                        Registers a row to the rows array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:47\n                        \n                    \n\n\n            \n                \n                        Removes a registered row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGrid\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                        \n                    \n\n            \n                \n                    Whether the current item is a treegrid\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridExpandable\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                        \n                    \n\n            \n                \n                    Whether the treegrid has expandableRows\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.role')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        rows\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:19\n                        \n                    \n\n            \n                \n                    An array of all rows in the treegrid\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostBinding, OnChanges, input } from '@angular/core';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridCellDirective } from './tree-grid.cell.directive';\n\n/**\n * An overarching directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGrid]',\n\tstandalone: true,\n})\nexport class NgxTreeGridDirective implements OnChanges {\n\t/**\n\t * An array of all rows in the treegrid\n\t */\n\tprivate rows: NgxTreeGridRowDirective[] = [];\n\n\t@HostBinding('attr.role') role: 'table' | 'treegrid' = 'table';\n\n\t/**\n\t * Whether the current item is a treegrid\n\t */\n\tpublic readonly ngxTreeGrid = input.required();\n\n\t/**\n\t * Whether the treegrid has expandableRows\n\t */\n\tpublic readonly ngxTreeGridExpandable = input.required();\n\n\t/**\n\t * Registers a row to the rows array\n\t *\n\t * @param row - The provided row\n\t */\n\tpublic registerRow(row: NgxTreeGridRowDirective): void {\n\t\tthis.rows.push(row);\n\t}\n\n\t/**\n\t * Removes a registered row from the grid\n\t *\n\t * @param index - The index of the provided row\n\t */\n\tpublic removeRow(index: number): void {\n\t\tthis.rows = this.rows.slice(0, index).concat(this.rows.slice(index + 1));\n\t}\n\n\t/**\n\t * Returns a row from the grid\n\t *\n\t * @param index - The index of the row\n\t */\n\tpublic getRow(index: number): NgxTreeGridRowDirective {\n\t\t// Iben: Early exit if the row is not found\n\t\tif (!this.ngxTreeGrid()) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Iben: Return the row\n\t\treturn this.rows[index];\n\t}\n\n\t/**\n\t * Returns the first row of the grid\n\t */\n\tpublic getFirstRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(0);\n\t}\n\n\t/**\n\t * Returns the last row of the grid\n\t */\n\tpublic getLastRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(this.rows.length - 1);\n\t}\n\n\t/**\n\t * Moves the row focus to either the top or the bottom row of the grid\n\t *\n\t * @param direction - Whether we want to go to the top or the bottom of the grid\n\t */\n\tpublic moveTo(direction: 'top' | 'bottom') {\n\t\tthis.rows[direction === 'top' ? 0 : this.rows.length - 1]?.focus();\n\t}\n\n\t/**\n\t * Registers a a cell to a row of the grid\n\t *\n\t * @param cell - The provided cell\n\t */\n\tpublic registerCell(index: number, cell: NgxTreeGridCellDirective) {\n\t\tthis.getRow(index)?.registerCell(cell);\n\t}\n\n\tngOnChanges() {\n\t\t// Iben: Set the role based on the tree grid\n\t\tthis.role = this.ngxTreeGrid() ? 'treegrid' : 'table';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxValidators.html":{"url":"classes/NgxValidators.html","title":"class - NgxValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/validators.ts\n        \n\n\n            \n                Description\n            \n            \n                Exported Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                allOrNothingRequired\n                            \n                            \n                                    Static\n                                atLeastOneRequired\n                            \n                            \n                                    Static\n                                chronologicalDates\n                            \n                            \n                                    Static\n                                dateRangeValidator\n                            \n                            \n                                    Static\n                                decimalsAfterComma\n                            \n                            \n                                    Static\n                                dependedRequired\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        allOrNothingRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    allOrNothingRequired(control: FormGroup)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:27\n                        \n                    \n\n\n            \n                \n                        A validator to check if all or none of the values of a form group are filled in.\nParticularly useful in situations where a form group field within itself is optional,\nbut all fields are required in case it does get filled in\nReturns an allOrNothingRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        FormGroup\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA form group control\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        atLeastOneRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    atLeastOneRequired(options?: AtLeastOneRequiredValidatorOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        A validator to check if at least one of the provided controls of the form group are filled in\nReturns an atLeastOneRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            AtLeastOneRequiredValidatorOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional object with configuration options, see below params for more info\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        chronologicalDates\n                        \n                    \n                \n            \n            \n                \n                        \n                    chronologicalDates(startControlKey: string, endControlKey: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:83\n                        \n                    \n\n\n            \n                \n                        A FormGroup validator to check whether a start and end date are chronologically correct\nReturns an incorrectChronologicalDates error on the provided FormGroup and a incorrectChronologicalDate on the endControl\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                startControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the start date value\n\n\n                                            \n                                        \n                                        \n                                                endControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the end date value\n\n\n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format of the dates provided by the controls, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dateRangeValidator\n                        \n                    \n                \n            \n            \n                \n                        \n                    dateRangeValidator(min: string, max: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:100\n                        \n                    \n\n\n            \n                \n                        Form control validator which validates if a date is between a provided range\nReturns an invalidRange error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                min\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                max\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format used for all 3 dates, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        decimalsAfterComma\n                        \n                    \n                \n            \n            \n                \n                        \n                    decimalsAfterComma(max: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:70\n                        \n                    \n\n\n            \n                \n                        Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\nReturns an invalidDecimalsAfterComma error on the provided control\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                max\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of decimals after the comma\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dependedRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    dependedRequired(controls: KeyType[], dependedControlKey: KeyType, matchFunction?: (data?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:55\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\nReturns a hasDependedRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                controls\n                                            \n                                                        KeyType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of controls.\n\n\n                                            \n                                        \n                                        \n                                                dependedControlKey\n                                            \n                                                        KeyType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA control within the group which the other controls depend on.\n\n\n                                            \n                                        \n                                        \n                                                matchFunction\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional function the dependedControl should check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nimport { allOrNothingRequiredValidator } from './all-or-nothing-required/all-or-nothing-required.validator';\nimport {\n\tAtLeastOneRequiredValidatorOptions,\n\tatLeastOneRequiredValidator,\n} from './at-least-one-required/at-least-one-required.validator';\nimport { chronologicalDatesValidator } from './chronological-dates/chronological-dates.validator';\nimport { dateRangeValidator } from './date-range/date-range.validator';\nimport { decimalsAfterCommaValidator } from './decimals-after-comma/decimals-after-comma.validator';\nimport { dependedRequiredValidator } from './depended-required/depended-required.validator';\n\n/**\n * Exported Class\n */\n\nexport class NgxValidators {\n\t/**\n\t * A validator to check if all or none of the values of a form group are filled in.\n\t * Particularly useful in situations where a form group field within itself is optional,\n\t * but all fields are required in case it does get filled in\n\t *\n\t * Returns an `allOrNothingRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param control - A form group control\n\t */\n\tstatic allOrNothingRequired(control: FormGroup): ValidationErrors | null {\n\t\treturn allOrNothingRequiredValidator(control);\n\t}\n\n\t/**\n\t * A validator to check if at least one of the provided controls of the form group are filled in\n\t *\n\t * Returns an `atLeastOneRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param options - An optional object with configuration options, see below params for more info\n\t * @param controlNames - Optional list of controls, if not provided the validator is applied to all controls of the group\n\t * @param conditionalFunction - Optional function the form value needs to return true to for the required to be se\n\t */\n\tstatic atLeastOneRequired(\n\t\toptions?: AtLeastOneRequiredValidatorOptions\n\t): ValidatorFn {\n\t\treturn atLeastOneRequiredValidator(options);\n\t}\n\n\t/**\n\t * FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\n\t *\n\t * Returns a `hasDependedRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param controls - An array of controls.\n\t * @param dependedControlKey - A control within the group which the other controls depend on.\n\t * @param matchFunction - Optional function the dependedControl should check\n\t */\n\tstatic dependedRequired(\n\t\tcontrols: KeyType[],\n\t\tdependedControlKey: KeyType,\n\t\tmatchFunction?: (data: any) => boolean\n\t): ValidatorFn {\n\t\treturn dependedRequiredValidator(controls, dependedControlKey, matchFunction);\n\t}\n\n\t/**\n\t * Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\n\t *\n\t * Returns an `invalidDecimalsAfterComma` error on the provided control\n\t *\n\t * @param max - The maximum number of decimals after the comma\n\t */\n\tstatic decimalsAfterComma(max: number): ValidatorFn {\n\t\treturn decimalsAfterCommaValidator(max);\n\t}\n\n\t/**\n\t * A FormGroup validator to check whether a start and end date are chronologically correct\n\t *\n\t * Returns an `incorrectChronologicalDates` error on the provided FormGroup and a `incorrectChronologicalDate` on the endControl\n\t *\n\t * @param startControlKey - The key of the control containing the start date value\n\t * @param endControlKey - The key of the control containing the end date value\n\t * @param format - Optional format of the dates provided by the controls, by default yyyy-MM-dd\n\t */\n\tstatic chronologicalDates(\n\t\tstartControlKey: string,\n\t\tendControlKey: string,\n\t\tformat = 'yyyy-MM-dd'\n\t): ValidatorFn {\n\t\treturn chronologicalDatesValidator(startControlKey, endControlKey, format);\n\t}\n\n\t/**\n\t * Form control validator which validates if a date is between a provided range\n\t *\n\t * Returns an `invalidRange` error\n\t *\n\t * @param minDate - Minimum valid date\n\t * @param maxDate - Maximum valid date\n\t * @param format - Optional format used for all 3 dates, by default yyyy-MM-dd\n\t */\n\tstatic dateRangeValidator(min: string, max: string, format = 'yyyy-MM-dd'): ValidatorFn {\n\t\treturn dateRangeValidator(min, max, format);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxWindowService.html":{"url":"injectables/NgxWindowService.html","title":"injectable - NgxWindowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxWindowService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/core/src/lib/services/window/window.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service used to access the document and window in a SSR safe way\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentScrollPosition\n                            \n                            \n                                    Public\n                                currentScrollPosition$\n                            \n                            \n                                    Private\n                                currentScrollPositionSubject$\n                            \n                            \n                                    Private\n                                    Readonly\n                                document\n                            \n                            \n                                    Private\n                                    Readonly\n                                platformId\n                            \n                            \n                                    Public\n                                scrollingUp$\n                            \n                            \n                                    Private\n                                scrollingUpSubject$\n                            \n                            \n                                    Public\n                                width$\n                            \n                            \n                                    Private\n                                widthSubject$\n                            \n                            \n                                    Public\n                                window\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleContentScroll\n                            \n                            \n                                    Public\n                                hasDocument\n                            \n                            \n                                    Public\n                                isBrowser\n                            \n                            \n                                    Public\n                                runInBrowser\n                            \n                            \n                                    Public\n                                scrollTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContentScroll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContentScroll()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasDocument()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Returns whether there is a document present\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isBrowser()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Returns whether the current platform is a browser\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        runInBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    runInBrowser(action: (data: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ReturnType\n                            \n                        \n                    \n\n            \n                \n                        Run a provided function only when we're in the browser and not in a server side rendered application\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFunction we want to run in the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ReturnType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrollTo(offset: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Scrolls to the provided position of the page\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    \nOffset to which we want to scroll, scrolls to top when no offset is provided\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:56\n                        \n                    \n\n            \n                \n                    Current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentScrollPositionSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:50\n                        \n                    \n\n            \n                \n                    Observable of the current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentScrollPositionSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:35\n                        \n                    \n\n            \n                \n                    Subject to hold the current scroll position\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Document\n\n                    \n                \n                \n                    \n                        Default value : inject(DOCUMENT)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:15\n                        \n                    \n\n            \n                \n                    Instance of the document if exists\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        platformId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(PLATFORM_ID)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:20\n                        \n                    \n\n            \n                \n                    Instance of the platform detector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollingUp$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.scrollingUpSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:45\n                        \n                    \n\n            \n                \n                    Observable to track when the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scrollingUpSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(true)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:30\n                        \n                    \n\n            \n                \n                    Subject to hold the scroll up event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        width$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.widthSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:40\n                        \n                    \n\n            \n                \n                    Observable to get the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        widthSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(1200)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:25\n                        \n                    \n\n            \n                \n                    Subject to hold the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        window\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Window\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                        \n                    \n\n            \n                \n                    The platforms Window object\n\n                \n            \n\n        \n    \n\n\n    \n\n    \n        NgxNgxWindowService\nThis service uses the DOCUMENT injection-token to provide several methods to access both document and window and related information.\nIt is convenient for using the document or window without breaking SSR.\nProperties\nwidth$\nThe window-service exposes a width$ observable to get the window-width. It defaults to 1200 when no window is defined.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public windowWidth$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.windowWidth$ = this.windowService.width$;\n    }\n}scrollingUp$\nThe window-service exposes a scrollingUp$ observable to know when the scroll has ended.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public scrollingUp$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.scrollingUp$ = this.windowService.scrollingUp$;\n    }\n}currentScrollPosition\nThe window-service exposes a currentScrollPosition property that contains the currentScrollPosition after handleContentScroll has been called.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public currentScrollPosition: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.currentScrollPosition = this.windowService.currentScrollPosition;\n    }\n}window\nThe window-service exposes the window property which is a link to the Window object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public window$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.window = this.windowService.window;\n    }\n}document\nThe window-service also exposes the document property which is a link to the Document object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public document$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.document = this.windowService.document;\n    }\n}Methods\nscrollTo\nA scrollTo method is provided to scroll to a position on the page. When there is no window, it will do nothing.\nThe offset is set to 0 by default so triggering the method without a value will scroll to the top of the page.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public somethingHappened(): void {\n        this.windowService.scrollTo(500);\n    }\n}hasDocument\nThe hasDocument-method is provided to check if there is a document.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.hasDocument()) {\n            // do something that depends on the document.\n        }\n    }\n}isBrowser\nThe isBrowser-method is provided to check if the current platform is a browser.\nIt uses the isPlatformBrowser method with the PLATFORM_ID injection-token internally.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.isBrowser()) {\n            // do something that depends on the browser.\n        }\n    }\n}runInBrowser\nThe runInBrowser-method is provided to run a specific callback only when in the browser.\nThe callback has access to the window and the document elements provided in its parameters.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        this.windowService.runInBrowser(({ browserWindow, browserDocument }) => {\n            // Do something with the browser window or document\n        });\n    }\n}\n    \n\n    \n        import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * A service used to access the document and window in a SSR safe way\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxWindowService {\n\t/**\n\t * Instance of the document if exists\n\t */\n\tprivate readonly document: Document = inject(DOCUMENT);\n\n\t/**\n\t * Instance of the platform detector\n\t */\n\tprivate readonly platformId = inject(PLATFORM_ID);\n\n\t/**\n\t * Subject to hold the window-width, defaults to 1200 when no window is defined\n\t */\n\tprivate widthSubject$: BehaviorSubject = new BehaviorSubject(1200);\n\n\t/**\n\t * Subject to hold the scroll up event\n\t */\n\tprivate scrollingUpSubject$: BehaviorSubject = new BehaviorSubject(true);\n\n\t/**\n\t * Subject to hold the current scroll position\n\t */\n\tprivate currentScrollPositionSubject$: BehaviorSubject = new BehaviorSubject(0);\n\n\t/**\n\t * Observable to get the window-width, defaults to 1200 when no window is defined\n\t */\n\tpublic width$: Observable = this.widthSubject$.asObservable();\n\n\t/**\n\t * Observable to track when the scroll has ended\n\t */\n\tpublic scrollingUp$: Observable = this.scrollingUpSubject$.asObservable();\n\n\t/**\n\t * Observable of the current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition$: Observable =\n\t\tthis.currentScrollPositionSubject$.asObservable();\n\n\t/**\n\t * Current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition: number = 0;\n\n\t/**\n\t * The platforms Window object\n\t */\n\tpublic window: Window;\n\n\tconstructor() {\n\t\t// Iben: Handle the initial setup of the service\n\t\tif (this.isBrowser() && this.hasDocument()) {\n\t\t\t// Iben: Set the window using the default view\n\t\t\tthis.window = this.document.defaultView as Window;\n\n\t\t\t// Iben: Listen to the scroll event of the document\n\t\t\tthis.document.addEventListener('scroll', this.handleContentScroll.bind(this));\n\n\t\t\t// Iben: Set the current window width\n\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\n\t\t\t// Iben: Listen to the resize event and update the window width\n\t\t\tthis.window.addEventListener('resize', () => {\n\t\t\t\tif (this.window.innerWidth && this.widthSubject$.getValue()) {\n\t\t\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls to the provided position of the page\n\t *\n\t * @param offset - Offset to which we want to scroll, scrolls to top when no offset is provided\n\t */\n\tpublic scrollTo(offset: number = 0): void {\n\t\tif (!this.window) {\n\t\t\treturn;\n\t\t}\n\t\tthis.window.scrollTo(0, offset);\n\t}\n\n\t/**\n\t * Returns whether there is a document present\n\t */\n\tpublic hasDocument(): boolean {\n\t\treturn !!this.document;\n\t}\n\n\t/**\n\t * Returns whether the current platform is a browser\n\t */\n\tpublic isBrowser(): boolean {\n\t\treturn isPlatformBrowser(this.platformId);\n\t}\n\n\t/**\n\t * Run a provided function only when we're in the browser and not in a server side rendered application\n\t *\n\t * @param action - Function we want to run in the browser\n\t */\n\tpublic runInBrowser(\n\t\taction: (data: { browserWindow: Window; browserDocument: Document }) => ReturnType\n\t): ReturnType {\n\t\tif (this.isBrowser()) {\n\t\t\treturn action({\n\t\t\t\tbrowserWindow: this.window,\n\t\t\t\tbrowserDocument: this.document,\n\t\t\t});\n\t\t}\n\n\t\tconsole.warn('Browser depended function has not run.');\n\n\t\treturn undefined as ReturnType;\n\t}\n\n\t/**\n\t *\n\t *\n\t * @private\n\t * @memberof NgxWindowService\n\t */\n\tprivate handleContentScroll(): void {\n\t\t// Iben: Update the scrollUp subject\n\t\tif (window.scrollY > this.currentScrollPosition) {\n\t\t\tthis.scrollingUpSubject$.next(false);\n\t\t} else {\n\t\t\tthis.scrollingUpSubject$.next(true);\n\t\t}\n\n\t\t// Iben: Update the current scroll position\n\t\tthis.currentScrollPosition = window.scrollY \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpecStoreAssets.html":{"url":"interfaces/SpecStoreAssets.html","title":"interface - SpecStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpecStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-assets.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            channel\n                                        \n                                \n                                \n                                        \n                                            darkMode\n                                        \n                                \n                                \n                                        \n                                            subscriberCount\n                                        \n                                \n                                \n                                        \n                                            videos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channel:         BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        darkMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        darkMode:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriberCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscriberCount:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        videos:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport { createBaseStoreAssets, createEntityAdapterStoreAssets, createStoreAssets } from '../utils';\n\nexport type DataType = { id: string; url: string };\n\ninterface SpecStoreAssets extends StoreFlowAssets {\n\tchannel: BaseStoreAssets;\n\tvideos: EntityStoreAssets;\n\tsubscriberCount: BaseStoreAssets;\n\tdarkMode: BaseStoreAssets;\n}\n\nexport const StoreSlice = 'YouTube';\n\nexport const { actions, reducers, selectors } = createStoreAssets(StoreSlice, [\n\t{\n\t\tsubSlice: 'channel',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'videos',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'subscriberCount',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: 0,\n\t},\n\t{\n\t\tsubSlice: 'darkMode',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: false,\n\t},\n]);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpecStoreService.html":{"url":"injectables/SpecStoreService.html","title":"injectable - SpecStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpecStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                channel$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelLoading$\n                            \n                            \n                                    Public\n                                    Readonly\n                                darkMode$\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                            \n                                    Public\n                                    Readonly\n                                subscriberCount$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videos$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosLoading$\n                            \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearChannel\n                            \n                            \n                                    Public\n                                clearVideos\n                            \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                            \n                                    Public\n                                getChannel\n                            \n                            \n                                    Public\n                                getVideos\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVideos(actionType: \"set\" | \"add\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                actionType\n                                            \n                                                        \"set\" | \"add\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'set'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channel$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        darkMode$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(selectors.darkMode)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        subscriberCount$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.subscriberCount\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videos$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(selectors.videos)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { NgxStoreService } from '../abstracts';\nimport { dispatchDataToStore } from '../utils';\n\nimport { DataType, actions, selectors } from './store-assets';\n\n@Injectable()\nexport class SpecStoreService extends NgxStoreService {\n\tpublic readonly channel$: Observable = this.selectFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelError$: Observable = this.selectErrorFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t);\n\n\tpublic readonly videos$: Observable = this.selectFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosError$: Observable = this.selectErrorFromStore(selectors.videos);\n\tpublic readonly videosErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly subscriberCount$: Observable = this.selectFromStore(\n\t\tselectors.subscriberCount\n\t);\n\tpublic readonly darkMode$: Observable = this.selectFromStore(selectors.darkMode);\n\n\tprivate readonly httpClient: HttpClient = inject(HttpClient);\n\n\tpublic getChannel(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.channel,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => this.channel$));\n\t}\n\n\tpublic clearChannel(): void {\n\t\tthis.store.dispatch(actions.channel.clear());\n\t}\n\n\tpublic getVideos(actionType: 'set' | 'add' = 'set'): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.videos,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store,\n\t\t\tactionType\n\t\t).pipe(switchMap(() => this.videos$));\n\t}\n\n\tpublic clearVideos(): void {\n\t\tthis.store.dispatch(actions.videos.clear());\n\t}\n\n\tpublic fetchChannel() {\n\t\tthis.store.dispatch(actions.channel.effects.set({ payload: false }));\n\t}\n\n\tpublic fetchVideos() {\n\t\tthis.store.dispatch(actions.videos.effects.set({ payload: 'test' }));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreAssetsOptions.html":{"url":"interfaces/StoreAssetsOptions.html","title":"interface - StoreAssetsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreAssetsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                These objects will be used as a blueprint for our store slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            generator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initialValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            subSlice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        generator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generator:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subSlice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subSlice:     SliceKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SliceKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreEffects.html":{"url":"injectables/StoreEffects.html","title":"injectable - StoreEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                actions$\n                            \n                            \n                                    Private\n                                    Readonly\n                                effectsService\n                            \n                            \n                                    Public\n                                fetchChannel$\n                            \n                            \n                                    Public\n                                fetchVideos$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        actions$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Actions\n\n                    \n                \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        effectsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsService\n\n                    \n                \n                \n                    \n                        Default value : inject(EffectsService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Actions, createEffect } from '@ngrx/effects';\n\nimport { handleEffect } from '../operators';\n\nimport { EffectsService } from './effects.service';\nimport { DataType, actions } from './store-assets';\n\n@Injectable()\nexport class StoreEffects {\n\tprivate readonly actions$: Actions = inject(Actions);\n\tprivate readonly effectsService: EffectsService = inject(EffectsService);\n\n\tpublic fetchChannel$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t});\n\n\tpublic fetchVideos$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t});\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreState.html":{"url":"interfaces/StoreState.html","title":"interface - StoreState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreStateService.html":{"url":"injectables/StoreStateService.html","title":"injectable - StoreStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setCompleted\n                            \n                            \n                                setData\n                            \n                            \n                                setWithError\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setCompleted\n                        \n                    \n                \n            \n            \n                \nsetCompleted(payload: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setData\n                        \n                    \n                \n            \n            \n                \nsetData(payload: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWithError\n                        \n                    \n                \n            \n            \n                \nsetWithError()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TableCellTemplate.html":{"url":"interfaces/TableCellTemplate.html","title":"interface - TableCellTemplate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TableCellTemplate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/table/ngx-table.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cellClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cellTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headerTemplate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cellClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cellTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CdkTableModule } from '@angular/cdk/table';\nimport { NgTemplateOutlet, NgClass, NgComponentOutlet } from '@angular/common';\nimport {\n\tAfterContentChecked,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tHostBinding,\n\tInject,\n\tOnDestroy,\n\tOnInit,\n\tTemplateRef,\n\tWritableSignal,\n\tinject,\n\tsignal,\n\tinput,\n\tOutputEmitterRef,\n\toutput,\n\tcontentChildren,\n\tcontentChild,\n\teffect,\n\tInputSignal,\n\tlinkedSignal,\n\tcomputed,\n\tSignal,\n} from '@angular/core';\nimport {\n\tControlValueAccessor,\n\tFormControl,\n\tFormRecord,\n\tNG_VALUE_ACCESSOR,\n\tReactiveFormsModule,\n} from '@angular/forms';\nimport { isEmpty } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxTreeGrid } from '../../directives';\nimport {\n\tNgxAriaSortPipe,\n\tNgxTableHasObserversPipe,\n\tNgxTableShowHeaderPipe,\n\tNgxTableSortIconPipe,\n} from '../../pipes';\nimport {\n\tHideHeaderRowOption,\n\tNgxTableConfiguration,\n\tNgxTableConfigurationToken,\n\tShowDetailRowOption,\n} from '../../tokens';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\nimport {\n\tgenerateNgxTableForm,\n\thandleNgxTableHeaderValueChanges,\n\thandleNgxTableValueChanges,\n\tresetNgxTableForm,\n\twriteNgxTableValue,\n} from '../../utils';\nimport { NgxAbstractTableCellDirective } from '../cell';\n\ninterface TableCellTemplate {\n\theaderTemplate?: TemplateRef;\n\tcellTemplate?: TemplateRef;\n\tfooterTemplate?: TemplateRef;\n\tcellClass?: string;\n}\n\n@Component({\n\tselector: 'ngx-table',\n\ttemplateUrl: './ngx-table.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tstyleUrls: ['./ngx-table.component.scss'],\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tmulti: true,\n\t\t\tuseExisting: NgxTableComponent,\n\t\t},\n\t],\n\timports: [\n\t\tCdkTableModule,\n\t\tNgTemplateOutlet,\n\t\tNgClass,\n\t\tReactiveFormsModule,\n\t\tNgxTableHasObserversPipe,\n\t\tNgxTableSortIconPipe,\n\t\tNgxTableShowHeaderPipe,\n\t\tNgxAriaSortPipe,\n\t\tNgxTreeGrid,\n\t\tNgComponentOutlet,\n\t],\n\thost: {\n\t\t'class.ngx-table-loading': 'loading()',\n\t},\n})\nexport class NgxTableComponent\n\timplements AfterContentChecked, ControlValueAccessor, OnInit, OnDestroy\n{\n\tprivate cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\t@Inject(NgxTableConfigurationToken)\n\tpublic readonly ngxTableConfiguration: NgxTableConfiguration = inject(\n\t\tNgxTableConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * Default class that will be put on the ngx-table component\n\t */\n\t@HostBinding('class') public readonly componentClass =\n\t\tthis.ngxTableConfiguration?.ngxTableClass || '';\n\n\t/**\n\t * A subject to handle the observables when the component gets destroyed\n\t */\n\tprivate readonly destroyed$ = new Subject();\n\t/**\n\t * onTouch function for the control value accessor\n\t */\n\tprivate onTouch: Function = () => {};\n\t/**\n\t * onChanged function for the control value accessor\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tprivate onChanged: Function = (_: any) => {};\n\n\t/**\n\t * Whether or not the form was generated\n\t */\n\tprivate formGenerated: boolean = false;\n\t/**\n\t * The current sorting event\n\t */\n\tprotected currentSortingEvent: WritableSignal = linkedSignal(\n\t\t() => {\n\t\t\tthis.handleCurrentSort(this.currentSorting());\n\n\t\t\treturn this.currentSorting();\n\t\t}\n\t);\n\n\t/**\n\t * Keeps a record with the column and it's templates\n\t */\n\tprotected tableCellTemplateRecord: WritableSignal> = signal(\n\t\t{}\n\t);\n\t/**\n\t * Keeps a record of which columns are sortable\n\t */\n\tprotected sortableTableCellRecord: WritableSignal\n\t> = signal({});\n\t/**\n\t * Keeps a record of which cells have a cypress tag\n\t */\n\tprotected tableCypressRecord: WritableSignal> = signal(\n\t\t{}\n\t);\n\t/**\n\t * Keeps a record of which cells are editable\n\t */\n\tprotected editableTableCellRecord: WritableSignal\n\t> = signal({});\n\n\t/**\n\t * An object with all the open rows\n\t */\n\tprotected openedRows: WritableSignal> = linkedSignal(() => {\n\t\t// Wouter: If all detail rows should be shown by default, we add all indices to the open rows\n\t\tif (this.showDetailRow() === 'always') {\n\t\t\treturn this.data().reduce((previousValue, _, index) => {\n\t\t\t\treturn {\n\t\t\t\t\t...previousValue,\n\t\t\t\t\t[index]: true,\n\t\t\t\t};\n\t\t\t}, {});\n\t\t} else if (\n\t\t\t// Wouter: If the detail row should be shown on single item and there is only one item, we add the first index to the open rows\n\t\t\tthis.showDetailRow() === 'on-single-item' &&\n\t\t\tthis.data().length === 1\n\t\t) {\n\t\t\treturn { 0: true };\n\t\t} else {\n\t\t\t// Iben: If no detail row should be shown due to global config, we reset the open rows\n\t\t\treturn {};\n\t\t}\n\t});\n\n\t/**\n\t * A FormGroup that adds a control for each row\n\t */\n\tprotected readonly rowsFormGroup = new FormRecord>({});\n\n\t/**\n\t * A computed signal to see if we have a form\n\t */\n\tprotected readonly hasForm: Signal = computed(() => {\n\t\t// Iben: Setup the form when the data or selectable state changes\n\t\tif (this.data() && this.selectable()) {\n\t\t\t// Iben: If no form was generated, first generate the form we need\n\t\t\tif (!this.formGenerated) {\n\t\t\t\tgenerateNgxTableForm(this.rowsFormGroup, this.data(), this.selectableKey());\n\n\t\t\t\tthis.formGenerated = true;\n\t\t\t} else {\n\t\t\t\t// Iben: If a form was generated, reset it as required\n\t\t\t\tresetNgxTableForm(\n\t\t\t\t\tthis.rowsFormGroup,\n\t\t\t\t\tthis.data(),\n\t\t\t\t\tthis.selectableKey(),\n\t\t\t\t\tthis.resetFormOnNewData()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this.formGenerated;\n\t});\n\n\t/**\n\t * A control for the select all option in the header of the table\n\t */\n\tprotected readonly headerControl = new FormControl();\n\n\t/**\n\t * A control for when we use a radio button\n\t */\n\tprotected readonly radioControl = new FormControl();\n\n\t/**\n\t * A list of all defined columns\n\t */\n\tprotected definedColumns: WritableSignal = linkedSignal(() => {\n\t\treturn [\n\t\t\t...(this.selectable() ? ['ngxTableSelectColumn'] : []),\n\t\t\t...(this.columns() || []),\n\t\t\t...(this.actions() || []),\n\t\t\t...(this.showOpenRowState() && this.detailRowTemplate()\n\t\t\t\t? ['ngxOpenRowStateColumn']\n\t\t\t\t: []),\n\t\t];\n\t});\n\n\t/**\n\t * Whether or not there was a footer template set somewhere in one of the cells\n\t */\n\tprotected hasFooterTemplates: WritableSignal = signal(false);\n\n\t/**\n\t * Whether or not there was a row selected\n\t */\n\tpublic selectedRow: WritableSignal = linkedSignal(() => {\n\t\t// Iben: Subscribe to the data changes\n\t\tthis.data();\n\n\t\t// Wouter: Deselect any row that was selected to prevent faulty class toggle.\n\t\treturn undefined;\n\t});\n\n\t/**\n\t * An array of table columns\n\t */\n\tprotected tableColumns: WritableSignal = linkedSignal(() => {\n\t\treturn [...(this.columns() || []), ...(this.actions() || [])];\n\t});\n\n\t/**\n\t * The currently focussed row\n\t */\n\tprotected focussedRow: string;\n\n\t/**\n\t * The currently focussed cell\n\t */\n\tprotected focussedCell: string;\n\n\t/**\n\t * A QueryList of all the table cell templates\n\t */\n\tprotected readonly tableCellTemplates = contentChildren(NgxAbstractTableCellDirective);\n\n\t/**\n\t * A template to provide a detail row\n\t */\n\tprotected readonly detailRowTemplate = contentChild>('detailRowTmpl');\n\n\t/**\n\t * A template to provide an empty view\n\t */\n\tprotected readonly emptyTemplate = contentChild>('emptyTmpl');\n\n\t/**\n\t * A template to provide a loading view\n\t */\n\tprotected readonly loadingTemplate = contentChild>('loadingTmpl');\n\n\t/**\n\t * A template to provide a checkbox template\n\t */\n\n\tprotected checkboxTemplate = contentChild>('checkboxTmpl');\n\n\t/**\n\t * A template to provide a radio button template\n\t */\n\n\tprotected radioTemplate = contentChild>('radioTmpl');\n\n\t/**\n\t * A template to provide a sort template\n\t */\n\n\tprotected sortTemplate = contentChild>('sortTmpl');\n\n\t/**\n\t * A template to provide a open state template\n\t */\n\tprotected readonly openRowStateTemplate = contentChild>('openRowStateTmpl');\n\n\t/**\n\t * A list of all column names we want to represent in the table\n\t */\n\tpublic readonly columns = input([]);\n\n\t/**\n\t * An optional list of all columns we wish to attribute to row actions, which are sorted to the end of the row by default\n\t */\n\tpublic readonly actions = input([]);\n\n\t/**\n\t * The data we wish to render in the table\n\t */\n\tpublic readonly data = input([]);\n\n\t/**\n\t * An optional property that defines whether multiple rows can be open at once.\n\t * By default, this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly allowMultipleOpenRows = input(\n\t\tthis.ngxTableConfiguration?.allowMultipleRowsOpen || false\n\t);\n\n\t/**\n\t * Whether or not rows in the table are selectable\n\t */\n\tpublic readonly selectable = input(false);\n\n\t/**\n\t * In case the rows are selectable, we can pass a key we want to use as return value instead of the index of the row\n\t */\n\tpublic readonly selectableKey = input();\n\n\t/**\n\t * In case the rows are selectable, we pass whether we want a radio button or a checkbox. By default, this is a checkbox\n\t */\n\tpublic readonly selectableType = input('checkbox');\n\n\t/**\n\t * In case the rows are selectable, we can determine whether we want to reset the form based on new data. Setting this to false will add new controls to the FormGroup; but will not remove the earlier controls from the form.\n\t * This is a useful feature for when the data is being filtered or new data is added through a load more mechanic\n\t *\n\t * By default, this is true. This default cannot be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly resetFormOnNewData = input(true);\n\n\t/**\n\t *\n\t * The current sorting event.\n\t */\n\tpublic currentSorting: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want to add a class to the currently opened row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showSelectedOpenRow = input(\n\t\tthis.ngxTableConfiguration?.showSelectedOpenRow || false\n\t);\n\n\t/**\n\t * An optional class to add to the rows of the table\n\t */\n\tpublic readonly rowClass = input();\n\n\t/**\n\t * An optional key that can be used in the data in order to highlight a row. If this property is present and true, the highlight class will be provided.\n\t * By default, this key is ngx-highlight. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly highlightKey = input(\n\t\tthis.ngxTableConfiguration?.highlightKey || 'ngx-highlight'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to show a visual indicator of the open and closed state of a detail row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showOpenRowState = input(\n\t\tthis.ngxTableConfiguration?.showOpenRowState || false\n\t);\n\n\t/**\n\t * An optional property to define the default open state of the detail row.\n\t * By default this is 'on-click'. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showDetailRow = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow || 'on-click'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to emit the row when there's only one item in the table and the showDetailRow is set to `on-single-item`\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly emitValueOnSingleItem = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow === 'on-single-item' &&\n\t\t\tthis.ngxTableConfiguration?.emitValueOnSingleItem\n\t);\n\n\t/**\n\t * An optional key to open a row by default upon rendering.\n\t */\n\tpublic defaultRowOpen: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want the header to be hidden in certain cases.\n\t * By default this is never. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly hideHeaderWhen = input(\n\t\tthis.ngxTableConfiguration?.hideHeaderWhen || 'never'\n\t);\n\n\t/**\n\t * The loading state of our table\n\t */\n\tpublic loading = input(false);\n\n\t/**\n\t * An optional set of data we pass if the loading state is shown\n\t */\n\tpublic loadingData = input();\n\n\t/**\n\t * An optional set of data we pass if the empty state is shown\n\t */\n\tpublic emptyData = input();\n\n\t/**\n\t * Returns the data of the row that was clicked\n\t */\n\tpublic rowClicked: OutputEmitterRef = output();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tconst openedIndex = this.defaultRowOpen();\n\t\t\t// Wouter: The function findIndex is most likely to be used. It returns\n\t\t\t// -1 if the index was not found.\n\t\t\tif (openedIndex  {\n\t\t\t\tthis.handleRowClicked(this.data()[openedIndex], openedIndex);\n\t\t\t\tthis.cdRef.markForCheck();\n\t\t\t});\n\t\t});\n\n\t\t// Iben: If there's only one item in the data and we open the detail row by default, we emit the row clicked value\n\t\teffect(() => {\n\t\t\tif (\n\t\t\t\tthis.emitValueOnSingleItem() &&\n\t\t\t\tthis.data()?.length === 1 &&\n\t\t\t\tthis.showDetailRow() === 'on-single-item'\n\t\t\t) {\n\t\t\t\tthis.handleRowClicked(this.data()[0], 0);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * WriteValue method for the value accessor\n\t *\n\t * @param value - The value patched to the control\n\t */\n\tpublic writeValue(value: string[] | unknown): void {\n\t\t// Iben: In case we're using radio buttons, we set the radio control and early exit\n\t\tif (this.selectableType() === 'radio') {\n\t\t\tthis.radioControl.patchValue(value, { emitEvent: false });\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Reset the form\n\t\tthis.rowsFormGroup.reset({}, { emitEvent: false });\n\n\t\t// Iben: Early exit if the value is empty or not an array\n\t\tif (!Array.isArray(value) || value.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Patch the value to the form\n\t\tthis.rowsFormGroup.patchValue(writeNgxTableValue(value, this.selectableKey()), {\n\t\t\temitEvent: false,\n\t\t});\n\n\t\t// Wouter: Some rows are not selected, so uncheck the header checkbox\n\t\tif (\n\t\t\tObject.values(this.rowsFormGroup.controls).some(\n\t\t\t\t(control: FormControl) => !control?.value\n\t\t\t)\n\t\t) {\n\t\t\tthis.headerControl.patchValue(false, { emitEvent: false });\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: Set the header checkbox to `checked`, because all rows are selected\n\t\tthis.headerControl.patchValue(true, { emitEvent: false });\n\t}\n\n\t/**\n\t * Register the onChange function\n\t */\n\tpublic registerOnChange(fn: any): void {\n\t\tthis.onChanged = fn;\n\t}\n\n\t/**\n\t * Register the onTouched function\n\t */\n\tpublic registerOnTouched(fn: any): void {\n\t\tthis.onTouch = fn;\n\t}\n\n\t/**\n\t * Handle the disabled state of the form\n\t *\n\t * @param  isDisabled - Whether or not the form is disabled\n\t */\n\tpublic setDisabledState?(isDisabled: boolean): void {\n\t\tif (isDisabled) {\n\t\t\tthis.rowsFormGroup.disable({ emitEvent: false });\n\t\t\tthis.headerControl.disable({ emitEvent: false });\n\t\t\tthis.radioControl.disable({ emitEvent: false });\n\t\t} else {\n\t\t\tthis.rowsFormGroup.enable({ emitEvent: false });\n\t\t\tthis.headerControl.enable({ emitEvent: false });\n\t\t\tthis.radioControl.enable({ emitEvent: false });\n\t\t}\n\t}\n\n\t/**\n\t * Handle a click on a row\n\t *\n\t * @param row - The data of the row that was clicked\n\t * @param index - The index of the row that was clicked\n\t */\n\tpublic handleRowClicked(row: any, index: number) {\n\t\t// Iben: Emit a row click event\n\t\tthis.rowClicked.emit(row);\n\n\t\t// Iben: Handle the selected open row if needed\n\t\tif (this.showSelectedOpenRow()) {\n\t\t\tif (this.selectedRow() === index) {\n\t\t\t\t// Benoit: If you close the selected row, unselect that row\n\t\t\t\tthis.selectedRow.set(undefined);\n\t\t\t} else {\n\t\t\t\tthis.selectedRow.set(index);\n\t\t\t}\n\t\t}\n\t\tthis.handleRowState(index, !this.openedRows()[index] ? 'open' : 'close');\n\t}\n\n\t/**\n\t * Handle the expanded state of a row\n\t *\n\t * @param index - The index of the row\n\t * @param action - Whether the row needs to be opened or closed\n\t */\n\tpublic handleRowState(index: number, action: 'open' | 'close'): void {\n\t\t// Iben: If there's no detail row we early exit\n\t\tif (!this.detailRowTemplate()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: When the detail row should be shown due to global config, we add the index to the open rows\n\t\tif (\n\t\t\tthis.showDetailRow() === 'always' ||\n\t\t\t(this.showDetailRow() === 'on-single-item' && this.data.length === 1)\n\t\t) {\n\t\t\tthis.openedRows.update((value) => ({ ...value, 0: true }));\n\t\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\t}\n\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\telse if (this.allowMultipleOpenRows()) {\n\t\t\tthis.openedRows.update((value) => ({\n\t\t\t\t...value,\n\t\t\t\tindex: action === 'open',\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.openedRows.set(action === 'open' ? { [index]: true } : {});\n\t\t}\n\t}\n\n\t/**\n\t * Assigns the templates of each cell to the correct columns\n\t */\n\tprivate handleTableCellTemplates(): void {\n\t\t// Iben: Reset the provided records\n\t\tthis.tableCellTemplateRecord.set({});\n\t\tthis.sortableTableCellRecord.set({});\n\t\tthis.tableCypressRecord.set({});\n\t\tthis.editableTableCellRecord.set({});\n\n\t\t// Iben: Loop over all provided table cell templates\n\t\tArray.from(this.tableCellTemplates()).forEach((tableCellTemplate) => {\n\t\t\t// Iben: Early exit in case for some reason the template is undefined\n\t\t\tif (!tableCellTemplate) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Add the template to the template record for easy access in the table template\n\t\t\tconst {\n\t\t\t\tcolumn: columnInput,\n\t\t\t\theaderTemplate,\n\t\t\t\tcellTemplate,\n\t\t\t\tfooterTemplate,\n\t\t\t\tsortable: sortableInput,\n\t\t\t\tcellClass,\n\t\t\t\tcypressDataTags: cypressDataTagsInput,\n\t\t\t\teditable: editableInput,\n\t\t\t} = tableCellTemplate;\n\t\t\tconst column = columnInput();\n\t\t\tconst sortable = sortableInput();\n\t\t\tconst cypressDataTags = cypressDataTagsInput();\n\t\t\tconst editable = editableInput();\n\n\t\t\tthis.tableCellTemplateRecord.update((value) => {\n\t\t\t\treturn {\n\t\t\t\t\t...value,\n\t\t\t\t\t[column]: {\n\t\t\t\t\t\theaderTemplate,\n\t\t\t\t\t\tcellTemplate,\n\t\t\t\t\t\tfooterTemplate,\n\t\t\t\t\t\tcellClass,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Iben: If the column is sortable, we add it to the sortable record\n\t\t\tif (sortable) {\n\t\t\t\tthis.sortableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the column has cypress tags, we add them to the record\n\t\t\tif (cypressDataTags) {\n\t\t\t\tthis.tableCypressRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: cypressDataTags,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the cell is editable, we add it to the record\n\t\t\tif (editable) {\n\t\t\t\tthis.editableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Check if at least one template has a footer template, so that we know whether or not we have to render the footer row\n\t\tthis.hasFooterTemplates.set(\n\t\t\tArray.from(this.tableCellTemplates()).some((cellTemplate) =>\n\t\t\t\tBoolean(cellTemplate.footerTemplate)\n\t\t\t)\n\t\t);\n\n\t\t// Iben:\n\t\tthis.handleCurrentSort(this.currentSortingEvent());\n\n\t\t// Iben: Detect changes to update the view\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Respond to a click on the sort of a column\n\t *\n\t * @param column - The column we clicked on\n\t */\n\tpublic handleSort(column: string): void {\n\t\t// Iben: If the column is not sortable we early exit\n\t\tif (!this.sortableTableCellRecord()[column]) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Loop over the sortable columns and reset all columns that don't match with the clicked column\n\t\tObject.entries(this.sortableTableCellRecord()).forEach(([cellName, cell]) => {\n\t\t\tif (cellName === column) {\n\t\t\t\tthis.sortableTableCellRecord()[column].handleSort();\n\t\t\t} else {\n\t\t\t\tcell.resetSortDirection();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic selectRow(index: number): void {\n\t\tconst selectableKey = this.selectableKey();\n\t\tthis.rowsFormGroup\n\t\t\t.get(selectableKey ? `${this.data()[index][selectableKey]}` : `${index}`)\n\t\t\t.patchValue(true);\n\t}\n\n\t/**\n\t * Handle the changes in sort events\n\t *\n\t * @param event - The new sorting event\n\t */\n\tprivate handleCurrentSort(event: NgxTableSortEvent): void {\n\t\t// Iben: Early exit if the sortable cell record is empty or if the cell already has the sortDirection of the event\n\t\tif (\n\t\t\tisEmpty(\n\t\t\t\tthis.sortableTableCellRecord() ||\n\t\t\t\t\t(event &&\n\t\t\t\t\t\tthis.sortableTableCellRecord()[event.column].sortDirection ===\n\t\t\t\t\t\t\tevent.direction)\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: We reset all the sort directions by default, so all of them are unsorted.\n\t\tObject.values(this.sortableTableCellRecord()).forEach((cell) => cell.resetSortDirection());\n\n\t\t// Iben: If there's no sort event passed, we early exit\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case there was a sorting provided and we set the sorting to the provided column and direction\n\t\tthis.sortableTableCellRecord()[event.column].setSortDirection(event.direction);\n\t}\n\n\t/**\n\t * Setup the columns array\n\t */\n\tprivate handleRowColumns(): void {\n\t\t// Iben: Make sure that the select option, the open row state and the defined actions are correctly placed\n\t\tconst columns = this.columns();\n\t\tconst actions = this.actions();\n\t\tthis.definedColumns.set([\n\t\t\t...(this.selectable() ? ['ngxTableSelectColumn'] : []),\n\t\t\t...(columns || []),\n\t\t\t...(actions || []),\n\t\t\t...(this.showOpenRowState() && this.detailRowTemplate()\n\t\t\t\t? ['ngxOpenRowStateColumn']\n\t\t\t\t: []),\n\t\t]);\n\n\t\t// Iben: Set the actual table columns\n\t\tthis.tableColumns.set([...(columns || []), ...(actions || [])]);\n\t}\n\n\t// Lifecycle methods\n\t// ==============================\n\tpublic ngAfterContentChecked(): void {\n\t\t// Iben: Run with content check so that we can dynamically add templates/columns\n\t\tthis.handleRowColumns();\n\t\tthis.handleTableCellTemplates();\n\t}\n\n\tpublic ngOnInit() {\n\t\t// Iben: Subscribe to the form to handle the selectable behavior\n\t\tthis.rowsFormGroup.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: If not all items are selected, we uncheck the headerControl without emitting a value to prevent an infinite loop in the next subscription\n\t\t\t\t\tthis.headerControl.setValue(\n\t\t\t\t\t\tObject.values(value).every((selected) => selected),\n\t\t\t\t\t\t{ emitEvent: false }\n\t\t\t\t\t);\n\n\t\t\t\t\t// Iben: Emit the current selection and mark the form as touched\\\n\t\t\t\t\tthis.onChanged(handleNgxTableValueChanges(value));\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the radio control and update the value accordingly\n\t\tthis.radioControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\tthis.onChanged(value);\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Subscribe to the headerControl to handle multiSelect behaviour\n\t\tthis.headerControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((selected) => {\n\t\t\t\t\t// Iben: Select all items when this control is selected, if not, unselect them all\n\t\t\t\t\tif (selected) {\n\t\t\t\t\t\tthis.rowsFormGroup.patchValue(\n\t\t\t\t\t\t\thandleNgxTableHeaderValueChanges(this.rowsFormGroup)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.rowsFormGroup.reset();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy() {\n\t\tthis.destroyed$.next(null);\n\t\tthis.destroyed$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestDisplayContentComponent.html":{"url":"components/TestDisplayContentComponent.html","title":"component - TestDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                \n            \n\n\n\n            \n                template\n                Content\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Content'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorComponent.html":{"url":"components/TestErrorComponent.html","title":"component - TestErrorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorDataComponent.html":{"url":"components/TestErrorDataComponent.html","title":"component - TestErrorDataComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorDataComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error {{data()}}\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error {{data()}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorDataComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestLoadingComponent.html":{"url":"components/TestLoadingComponent.html","title":"component - TestLoadingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestLoadingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-loading\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Loading\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Loading'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestLoadingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOfflineComponent.html":{"url":"components/TestOfflineComponent.html","title":"component - TestOfflineComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOfflineComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-offline\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Offline\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Offline'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOfflineComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOverrideDisplayContentComponent.html":{"url":"components/TestOverrideDisplayContentComponent.html","title":"component - TestOverrideDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOverrideDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-override-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                            CommonModule\n                \n            \n\n\n\n            \n                template\n                \n\tContent\n\n\nCustom loading\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                            \n                                    Readonly\n                                errorData\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                            \n                                errorData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        errorData\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errorData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\tContentCustom loading\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOverrideDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/TransformPipe.html":{"url":"pipes/TransformPipe.html","title":"pipe - TransformPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  TransformPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        transform\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any, transformer: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TransformerType\n                            \n                        \n                    \n\n            \n                \n                        Transforms a value based on a provided transform function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided value we wish to transform\n\n\n                                            \n                                        \n                                        \n                                                transformer\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA provided transform function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     TransformerType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        TransformPipe\nThe TransformPipe will transform a given value with the provided transform-function.\nHow to use\nExample :\n  {{ value | transform: toUpperCase }}\nWith a given value 'my text', will result in the following:\nExample :MY TEXT\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n */\n@Pipe({\n\tname: 'transform',\n\tstandalone: true,\n})\nexport class TransformPipe implements PipeTransform {\n\t/**\n\t * Transforms a value based on a provided transform function\n\t *\n\t * @param value - The provided value we wish to transform\n\t * @param transformer - A provided transform function\n\t */\n\tpublic transform(value: any, transformer: Function): TransformerType {\n\t\t// Iben: If no transformer is passed, we return the original value\n\t\tif (!transformer) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Transform the value and return\n\t\treturn transformer(value);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TranslationLoaderActionEntity.html":{"url":"interfaces/TranslationLoaderActionEntity.html","title":"interface - TranslationLoaderActionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TranslationLoaderActionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A translation loading action, in which we indicate whether a file has been loaded or not\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TranslationLoaderActionEntity {\n\tid: string;\n\tstate: keyof typeof TranslationLoaderActionStateEnum;\n}\n\n/**\n * The state of a translation loading action\n */\nenum TranslationLoaderActionStateEnum {\n\tLOADING = 'LOADING',\n\tLOADED = 'LOADED',\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : 20.2.0\n        \n            @angular/common : 20.2.1\n        \n            @angular/compiler : 20.2.1\n        \n            @angular/core : 20.2.1\n        \n            @angular/forms : 20.2.1\n        \n            @angular/platform-browser : 20.2.1\n        \n            @angular/platform-browser-dynamic : 20.2.1\n        \n            @angular/router : 20.2.1\n        \n            @ibenvandeveire/ngx-core : 20.1.0\n        \n            @ibenvandeveire/types-authentication : ^1.0.0\n        \n            @ngrx/effects : 20.0.0\n        \n            @ngrx/entity : 20.0.0\n        \n            @ngrx/signals : 20.0.0\n        \n            @ngrx/store : 20.0.0\n        \n            @ngx-translate/core : 17.0.0\n        \n            date-fns : ^4.1.0\n        \n            deepmerge-ts : ^7.1.5\n        \n            lodash : ^4.17.21\n        \n            markerjs-live : ^1.2.1\n        \n            markerjs2 : ^2.32.4\n        \n            obj-clean : ^3.0.1\n        \n            rxjs : ~7.8.0\n        \n            uuid : ^11.1.0\n        \n            vanilla-cookieconsent : ^3.1.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NgxTableSortDirection   (libs/.../sort-direction.enum.ts)\n                        \n                        \n                            TranslationLoaderActionStateEnum   (libs/.../i18n-loading.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/angular/layout/src/lib/enums/sort-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NgxTableSortDirection\n                    \n                \n                        \n                            \n                                 ASCENDING\n                            \n                        \n                        \n                            \n                                Value : ASCENDING\n                            \n                        \n                        \n                            \n                                 DESCENDING\n                            \n                        \n                        \n                            \n                                Value : DESCENDING\n                            \n                        \n            \n        \n\n    libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n    \n        \n            \n                \n                    \n                        \n                        TranslationLoaderActionStateEnum\n                    \n                \n                    \n                        \n                            The state of a translation loading action\n\n                        \n                    \n                        \n                            \n                                 LOADING\n                            \n                        \n                        \n                            \n                                Value : LOADING\n                            \n                        \n                        \n                            \n                                 LOADED\n                            \n                        \n                        \n                            \n                                Value : LOADED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authentication   (libs/.../authentication.ts)\n                        \n                        \n                            core   (libs/.../core.ts)\n                        \n                        \n                            NgxAuthenticatedHttpInterceptor   (libs/.../authentication.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/javascript/types/authentication/src/lib/authentication.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authentication\n                        \n                    \n                \n            \n            \n                \nauthentication()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/javascript/core/src/lib/core.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        core\n                        \n                    \n                \n            \n            \n                \ncore()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NgxAuthenticatedHttpInterceptor\n                        \n                    \n                \n            \n            \n                \nNgxAuthenticatedHttpInterceptor(request: HttpRequest, next: HttpHandlerFn)\n                \n            \n\n\n\n\n            \n                \n                        An interceptor that will handle any request that needs to be authenticated\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided request\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandlerFn\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HttpHandler\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@ibenvandeveire open-source\n@ibenvandeveire open source is a mono-repo providing several of Angular and non-Angular based packages created and maintained by Iben Van de Veire.\nInstallation\nTo setup this project, clone the repo and run npm i to install the dependencies.\nDocumentation\nYou can find the documentation for all of the packages on the Wiki.\nFor more in depth documentation relating to individual components of each package, please consult the Compodoc Documentation\nPackages\n\nutils (@ibenvandeveire/ngx-utils) :\n\nThis Angular package provides several independent utilities to facilitate common use-cases for users and developers.\n\n\nforms (@ibenvandeveire/ngx-forms):\n\nThis Angular package provides multiple utilities for complex form use-cases.\n\n\nstore (@ibenvandeveire/ngx-store):\n\nThis Angular package provides several utils and abstractions to improve the Redux workflow\n\n\ni18n (@ibenvandeveire/ngx-i18n):\n\nThis Angular package provides a lazy-loaded modular approach to translations.\n\n\ncookies (@ibenvandeveire/ngx-cookies):\n\nThis Angular package provides a quick and easy wrapper for CookieConsent V3.\n\n\nlayout (@ibenvandeveire/ngx-layout):\n\nThis Angular package is a collection of Angular components related to layout.\n\n\ntour (@ibenvandeveire/ngx-inform):\n\nThis Angular package provides the tools to build a guided walkthrough of one or more pages, tooltips, modals etc.\n\n\ncore (@ibenvandeveire/ngx-core):\n\nThis Angular package provides the core functionalities for the other packages.\n\n\nrxjs-utils (@ibenvandeveire/rxjs-utils):\n\nThis package provides the common use-cases for RXJS based projects.\n\n\n\nYou can find detailed explanations in their respective README’s.\nContributions\nIn order to contribute to this repository you must:\n\nStart a new branch from main named either fix/PACKAGE/FEATURE-NAME or feat/PACKAGE/FEATURE-NAME.\nCommit all code regarding the fix or feature to this branch, but do not include a version bump. Your commit message should start with either fix(PACKAGE) or feat(PACKAGE) for a fix or feature respectively.\nOpen a PR and add the correct package label, an enhancement or bug tag, the project and milestone.\n\nContributors\n\nBenoît Dossoine\nDenis Valcke\nIben Van de Veire\nWouter Heirstrate\nAbdurrahman Ekinci\nIan Emsens\nFemke Reunes\n\nLicense\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    42 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    88 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
