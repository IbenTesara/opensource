var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.077,1,4.055]],["body/interfaces/AtLeastOneRequiredValidatorOptions.html",[0,0.089,1,6.805,2,0.843,3,0.067,4,0.045,5,0.051,6,5.63,7,3.515,8,5.039,9,5.63,10,0.134,11,0.185,12,0.837,13,8.924,14,7.843,15,3.032,16,0.159,17,0.006,18,6.412,19,0.216,20,6.041,21,3.381,22,6.38,23,4.36,24,5.63,25,5.63,26,2.931,27,0.067,28,1.425,29,1.105,30,6.608,31,4.128,32,0.783,33,6.608,34,1.613,35,4.235,36,2.112,37,1.939,38,2.553,39,3.008,40,4.128,41,2.666,42,2.792,43,5.039,44,2.196,45,5.039,46,7.374,47,1.681,48,3.383,49,2.01,50,3.381,51,5.631,52,5.63,53,5.63,54,2.553,55,2.076,56,5.63,57,2.402,58,5.63,59,5.63,60,5.63,61,1.687,62,5.63,63,5.63,64,4.948,65,5.63,66,2.501,67,4.651,68,2.466,69,7.382,70,4.944,71,5.63,72,3.398,73,2.589,74,1.88,75,3.77,76,3.224,77,8.237,78,5.63,79,5.63,80,5.63,81,1.851,82,5.161,83,3.214,84,5.039,85,5.63,86,5.414,87,5.63,88,0.004,89,0.004]],["title/classes/BaseFormAccessor.html",[90,0.465,91,3.801]],["body/classes/BaseFormAccessor.html",[3,0.071,4,0.062,5,0.071,17,0.005,27,0.071,74,2.596,88,0.005,89,0.005,90,0.854,91,6.98,92,4.669,93,7.774,94,6.959,95,7.774,96,0.973,97,3.766,98,4.391,99,4.524,100,6.422,101,3.766,102,3.854,103,6.959,104,6.959,105,4.829,106,2.102,107,5.701,108,7.774,109,1.164]],["title/interfaces/BaseStore.html",[0,0.077,110,3.599]],["body/interfaces/BaseStore.html",[0,0.145,2,0.965,3,0.059,4,0.052,5,0.059,10,0.154,11,0.202,16,0.198,17,0.006,19,0.23,27,0.084,28,1.776,29,1.482,68,3.224,88,0.004,89,0.004,98,3.642,110,5.905,111,4.994,112,4.994,113,5.713,114,3.375,115,5.713,116,7.331,117,4.994,118,4.005,119,6.465,120,4.318,121,6.339,122,3.385,123,5.002,124,3.446,125,4.994,126,5.393,127,3.873,128,2.864,129,5.905,130,3.642,131,3.446,132,5.905,133,3.753,134,4.005,135,2.054,136,2.599,137,1.333,138,5.524,139,2.648,140,4.318,141,4.318,142,4.318,143,4.318]],["title/interfaces/BaseStoreActions.html",[0,0.077,129,3.599]],["body/interfaces/BaseStoreActions.html",[0,0.144,2,0.951,3,0.058,4,0.051,5,0.058,10,0.151,11,0.2,12,0.717,16,0.21,17,0.006,19,0.229,27,0.083,28,1.226,29,1.369,68,3.212,88,0.004,89,0.004,98,3.587,110,4.657,111,4.919,112,4.919,113,3.945,114,3.359,115,4.954,116,6.754,117,4.919,118,3.945,119,6.843,120,4.253,121,6.311,122,3.372,123,4.954,124,3.394,125,4.919,126,6.311,127,3.814,128,2.821,129,6.395,130,3.587,131,3.394,132,5.849,133,3.696,134,3.945,135,2.023,136,2.559,137,1.56,138,5.494,139,3.756,140,4.253,141,4.253,142,4.253,143,4.253,144,4.262]],["title/interfaces/BaseStoreAssets.html",[0,0.077,127,2.948]],["body/interfaces/BaseStoreAssets.html",[0,0.146,2,0.975,3,0.059,4,0.052,5,0.059,10,0.155,11,0.203,16,0.19,17,0.006,19,0.231,27,0.084,28,1.257,29,1.382,68,2.946,88,0.004,89,0.004,98,3.678,110,4.775,111,5.043,112,5.043,113,4.045,114,2.888,115,5.033,116,6.831,117,5.043,118,4.045,119,6.481,120,4.361,121,6.357,122,3.393,123,5.733,124,3.48,125,5.043,126,5.426,127,4.866,128,4.1,129,6.768,130,5.213,131,4.932,132,6.768,133,3.79,134,4.045,135,2.075,136,2.625,137,1.341,138,5.543,139,2.674,140,4.361,141,4.361,142,4.361,143,4.361]],["title/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.077,145,3.599]],["body/interfaces/BaseStoreAssetsGeneratorOptions.html",[0,0.139,2,1.117,3,0.068,4,0.06,5,0.068,10,0.178,11,0.22,12,0.791,16,0.189,17,0.005,19,0.196,27,0.08,88,0.005,89,0.005,115,6.003,145,6.451,146,5.777,147,4.995,148,4.213,149,6.677,150,8.825,151,6.124,152,1.247,153,6.814,154,4.995,155,5.47,156,4.634]],["title/interfaces/BaseStoreSelectors.html",[0,0.077,132,3.599]],["body/interfaces/BaseStoreSelectors.html",[0,0.145,2,0.965,3,0.059,4,0.052,5,0.059,10,0.154,11,0.202,16,0.198,17,0.006,19,0.23,27,0.084,28,1.245,29,1.377,68,2.933,88,0.004,89,0.004,98,5.195,110,4.729,111,4.994,112,4.994,113,4.005,114,2.871,115,5.002,116,6.801,117,4.994,118,4.005,119,6.465,120,4.318,121,6.831,122,3.385,123,5.002,124,3.446,125,4.994,126,5.393,127,3.873,128,2.864,129,5.905,130,3.642,131,3.446,132,6.439,133,3.753,134,4.005,135,2.054,136,2.599,137,1.333,138,5.524,139,2.648,140,4.318,141,6.159,142,6.159,143,6.159]],["title/interfaces/BasicEntityAdapterReducerActions.html",[0,0.077,157,4.055]],["body/interfaces/BasicEntityAdapterReducerActions.html",[0,0.136,2,1.08,3,0.066,4,0.058,5,0.066,10,0.172,11,0.216,16,0.213,17,0.005,19,0.189,27,0.078,29,1.291,49,1.556,68,2.41,88,0.005,89,0.005,113,4.481,114,2.572,124,3.855,128,3.205,135,3.045,137,1.582,154,4.831,157,7.125,158,5.291,159,5.291,160,6.458,161,6.401,162,3.925,163,7.72,164,4.831,165,6.458,166,6.458,167,5.96,168,6.458,169,5.96,170,5.043,171,1.716,172,6.458,173,4.646]],["title/interfaces/BasicEntityState.html",[0,0.077,170,3.431]],["body/interfaces/BasicEntityState.html",[0,0.137,2,1.096,3,0.067,4,0.059,5,0.067,10,0.174,11,0.218,16,0.211,17,0.005,19,0.192,27,0.079,29,1.302,49,1.579,68,2.444,88,0.005,89,0.005,113,4.545,114,2.609,124,3.91,128,3.251,135,2.331,137,1.211,144,4.648,154,4.9,157,6.045,158,5.366,159,5.366,160,6.55,161,4.9,162,3.005,163,8.308,164,4.9,165,6.55,166,6.55,167,6.045,168,6.55,169,6.045,170,6.08,171,2.069,172,8.597,173,4.712]],["title/pipes/BtwPipe.html",[174,1.428,175,4.394]],["body/pipes/BtwPipe.html",[3,0.057,4,0.05,5,0.057,10,0.189,12,0.566,16,0.135,17,0.006,19,0.165,27,0.057,32,1.415,34,1.805,42,1.805,44,2.109,47,1.619,49,1.712,66,2.798,88,0.004,89,0.004,90,0.597,96,0.788,152,1.284,174,2.308,175,8.163,176,3.199,177,3.783,178,6.298,179,1.703,180,1.418,181,9.119,182,2.737,183,1.134,184,1.24,185,4.24,186,5.314,187,0.764,188,6.298,189,7.935,190,3.095,191,4.132,192,6.894,193,1.541,194,2.414,195,6.371,196,1.134,197,6.298,198,6.298,199,6.298,200,3.783,201,6.298,202,6.298,203,2.448,204,4.24,205,0.468,206,1.832,207,5.203,208,6.298,209,3.783,210,6.298,211,4.619,212,7.935,213,6.298,214,6.298,215,5.638,216,6.298,217,6.298,218,4.878,219,5.638,220,6.298,221,6.298,222,7.935,223,5.203,224,6.298,225,6.298]],["title/interfaces/ComponentRecord.html",[0,0.077,226,4.055]],["body/interfaces/ComponentRecord.html",[0,0.125,2,0.94,3,0.057,4,0.05,5,0.057,10,0.15,11,0.198,12,0.78,16,0.212,17,0.006,19,0.165,27,0.087,37,1.65,48,2.579,76,2.921,88,0.004,89,0.004,152,1.022,187,0.762,194,2.997,205,0.466,226,7.167,227,7.091,228,5.623,229,1.123,230,6.281,231,7.542,232,6.281,233,5.189,234,7.167,235,4.77,236,4.564,237,4.206,238,5.049,239,4.865,240,3.008,241,3.078,242,3.315,243,6.135,244,6.135,245,3.927,246,4.125,247,3.777,248,5.809,249,4.865,250,5.189,251,4.045,252,2.79,253,2.91,254,5.189,255,3.902,256,3.548,257,5.623,258,5.623]],["title/interfaces/ComponentTypeWrapper.html",[0,0.077,259,4.394]],["body/interfaces/ComponentTypeWrapper.html",[0,0.149,2,0.969,3,0.059,4,0.052,5,0.059,7,3.445,17,0.006,19,0.231,21,3.889,27,0.059,34,1.856,42,1.856,44,1.498,47,1.648,49,1.898,61,1.941,70,4.336,88,0.004,89,0.004,90,0.834,91,6.253,96,0.811,100,5.349,109,1.483,203,3.138,205,0.481,231,5.015,259,7.875,260,6.475,261,6.475,262,6.475,263,5.921,264,5.407,265,8.074,266,4.204,267,4.433,268,7.227,269,5.921,270,3.445,271,2.977,272,7.227,273,5.644,274,7.829,275,9.21,276,8.074,277,7.227,278,1.54,279,5.796,280,6.475,281,4.527,282,4.336,283,7.227,284,6.475,285,6.452,286,6.814,287,3.754,288,6.452,289,7.227,290,6.475]],["title/injectables/EffectsService.html",[291,1.428,292,4.055]],["body/injectables/EffectsService.html",[3,0.064,4,0.056,5,0.064,10,0.167,12,0.76,16,0.182,17,0.005,19,0.248,27,0.064,29,1.362,44,2.104,88,0.004,89,0.004,90,0.662,147,4.678,152,1.174,180,1.38,183,1.523,184,1.539,187,1.027,193,2.069,196,1.523,205,0.519,240,2.158,291,2.46,292,6.988,293,2.981,294,6.985,295,6.988,296,6.988,297,8.458,298,6.985,299,8.458,300,2.992,301,8.458,302,6.985,303,1.861,304,1.709,305,3.236,306,6.985,307,6.985,308,6.985,309,6.985,310,6.985,311,6.985,312,6.985]],["title/interfaces/EntityStoreActions.html",[0,0.077,313,3.801]],["body/interfaces/EntityStoreActions.html",[0,0.133,2,0.879,3,0.053,4,0.047,5,0.053,10,0.14,11,0.19,12,0.682,16,0.213,17,0.006,19,0.22,27,0.076,29,1.136,68,2.968,88,0.004,89,0.004,114,3.168,115,5.716,119,6.958,120,3.933,121,6.162,122,3.535,123,4.714,124,3.139,126,6.162,128,2.609,130,4.287,131,3.139,135,2.932,137,1.523,138,5.948,139,3.649,140,3.933,141,3.933,142,3.933,143,3.933,144,4.055,158,4.307,159,4.307,161,6.162,162,3.779,170,4.106,305,2.721,313,6.512,314,4.549,315,4.852,316,4.307,317,3.648,318,5.878,319,4.852,320,4.852,321,4.852,322,4.852]],["title/interfaces/EntityStoreAssets.html",[0,0.077,317,3.049]],["body/interfaces/EntityStoreAssets.html",[0,0.135,2,0.92,3,0.056,4,0.049,5,0.056,10,0.147,11,0.196,16,0.185,17,0.006,19,0.225,27,0.078,29,1.17,68,2.053,88,0.004,89,0.004,114,2.192,115,5.797,119,6.76,120,4.117,121,6.249,122,3.581,123,5.615,124,3.285,126,5.233,128,4.015,130,5.271,131,4.83,135,2.489,137,1.293,138,5.993,139,2.524,140,4.117,141,4.117,142,4.117,143,4.117,158,4.508,159,4.508,161,5.233,162,3.209,170,4.297,305,2.848,313,7.001,314,4.761,315,5.078,316,4.508,317,4.854,318,7.001,319,5.078,320,5.078,321,5.078,322,5.078]],["title/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.077,155,3.599]],["body/interfaces/EntityStoreAssetsGeneratorOptions.html",[0,0.138,2,1.101,3,0.067,4,0.059,5,0.067,10,0.175,11,0.218,12,0.864,16,0.2,17,0.005,19,0.193,27,0.079,88,0.005,89,0.005,115,5.975,145,5.392,146,5.695,147,4.924,148,4.153,149,6.582,150,8.791,151,6.1,152,1.241,153,7.45,154,4.924,155,6.397,156,5.975]],["title/interfaces/EntityStoreSelectors.html",[0,0.077,318,3.801]],["body/interfaces/EntityStoreSelectors.html",[0,0.135,2,0.917,3,0.056,4,0.049,5,0.056,10,0.146,11,0.195,16,0.194,17,0.006,19,0.225,27,0.078,29,1.167,68,2.045,88,0.004,89,0.004,114,2.183,115,5.79,119,6.756,120,4.1,121,6.787,122,3.554,123,4.841,124,3.272,126,5.22,128,2.72,130,4.402,131,3.272,135,2.483,137,1.29,138,5.989,139,2.514,140,4.1,141,6.044,142,6.044,143,6.044,158,4.49,159,4.49,161,5.22,162,3.201,170,4.28,305,2.837,313,6.037,314,4.742,315,5.058,316,4.49,317,3.803,318,6.641,319,7.456,320,5.058,321,5.058,322,5.058]],["title/directives/FocusClickDirective.html",[323,0.724,324,2.324]],["body/directives/FocusClickDirective.html",[3,0.049,4,0.043,5,0.049,10,0.128,11,0.179,12,0.482,15,2.938,16,0.154,17,0.005,19,0.141,27,0.049,32,1.119,47,1.642,66,3.574,76,2.967,81,2.352,88,0.004,89,0.004,90,0.509,135,2.279,137,0.888,177,3.224,179,1.451,180,0.876,182,2.468,183,1.288,184,1.547,187,1.139,193,1.313,196,1.288,200,3.224,203,2.086,205,0.399,229,1.133,323,1.406,324,4.233,325,1.295,326,9.532,327,9.532,328,5.368,329,2.112,330,8.937,331,1.587,332,6.248,333,7.153,334,8.581,335,2.244,336,4.041,337,6.374,338,7.153,339,7.153,340,3.936,341,3.222,342,7.153,343,7.153,344,7.153,345,3.547,346,7.153,347,1.545,348,7.153,349,4.682,350,4.545,351,5.368,352,7.202,353,5.388,354,3.184,355,6.293,356,8.046,357,8.046,358,4.998,359,7.681,360,3.649,361,6.403,362,4.418,363,3.928,364,3.602,365,2.384,366,5.368,367,5.368,368,3.124,369,4.791,370,3.224,371,1.633,372,4.805,373,3.547,374,3.334,375,3.124,376,3.752,377,2.6,378,5.368,379,3.032,380,2.247,381,3.032,382,4.434,383,7.153,384,6.403,385,5.368,386,5.368,387,3.936,388,3.334,389,5.368,390,5.368]],["title/directives/FormAccessorContainer.html",[323,0.724,391,2.324]],["body/directives/FormAccessorContainer.html",[2,0.606,3,0.037,4,0.032,5,0.037,10,0.097,11,0.147,12,0.682,15,1.663,16,0.163,17,0.006,19,0.22,21,2.432,26,2.108,27,0.037,32,1.207,34,2.487,35,4.815,42,1.16,49,1.268,57,3.441,61,1.762,66,1.798,73,1.42,83,1.762,88,0.003,89,0.003,90,0.384,91,4.552,94,3.624,96,0.95,99,5.715,100,4.855,101,1.961,103,3.624,106,2.403,109,1.396,122,3.117,180,1.239,183,1.058,184,1.474,187,1.053,193,1.857,196,1.452,203,2.951,205,0.301,206,1.71,229,0.994,282,2.711,283,3.624,304,0.991,323,0.867,325,0.977,331,1.452,335,2.789,347,1.679,365,1.798,377,4.074,380,3.178,391,2.784,392,8.889,393,8.7,394,8.889,395,4.048,396,3.012,397,3.206,398,3.818,399,1.717,400,5.877,401,5.877,402,5.877,403,3.305,404,6.919,405,5.877,406,4.048,407,4.298,408,6.919,409,1.585,410,5.084,411,5.877,412,6.602,413,5.084,414,5.88,415,6.948,416,8.889,417,5.359,418,5.877,419,7.603,420,7.603,421,4.048,422,2.832,423,7.592,424,5.877,425,5.359,426,5.877,427,4.048,428,4.048,429,3.785,430,4.048,431,4.048,432,3.651,433,5.877,434,4.552,435,5.877,436,5.877,437,4.048,438,2.666,439,5.877,440,5.877,441,5.261,442,2.596,443,4.048,444,4.048,445,4.048,446,5.877,447,4.048,448,5.877,449,6.919,450,4.048,451,7.592,452,4.048,453,4.048,454,2.287,455,2.607,456,3.227,457,4.048,458,2.607,459,4.048,460,4.048,461,2.164,462,2.287,463,4.048,464,4.048]],["title/interfaces/FormStateOptionsEntity.html",[0,0.077,420,4.055]],["body/interfaces/FormStateOptionsEntity.html",[0,0.121,2,1.145,3,0.07,4,0.061,5,0.07,10,0.182,11,0.223,12,0.875,16,0.192,17,0.005,27,0.07,29,1.504,88,0.005,89,0.005,420,7.373,422,2.436,465,7.645,466,7.645,467,8.719,468,9.74]],["title/pipes/HasObserversPipe.html",[174,1.428,469,4.394]],["body/pipes/HasObserversPipe.html",[3,0.063,4,0.055,5,0.063,12,0.619,16,0.148,17,0.005,19,0.181,27,0.076,29,1.256,44,1.94,47,1.846,66,3.061,73,2.416,88,0.004,89,0.004,90,0.795,109,1.256,136,2.777,174,2.44,176,3.5,177,4.139,179,1.863,180,1.476,182,2.894,183,1.241,184,1.414,185,3.683,187,0.836,193,1.686,196,1.241,200,5.433,203,2.678,204,4.483,205,0.512,206,2.004,329,2.035,350,5.109,469,8.426,470,8.389,471,7.51,472,6.169,473,9.412,474,7.51,475,8.89,476,6.891,477,6.891,478,8.389,479,4.615,480,6.891,481,6.891,482,6.891,483,4.615,484,6.169,485,6.891]],["title/pipes/IbanPipe.html",[174,1.428,486,4.394]],["body/pipes/IbanPipe.html",[3,0.062,4,0.055,5,0.062,12,0.612,15,2.796,16,0.146,17,0.006,19,0.178,27,0.062,32,1.252,44,1.926,47,1.7,88,0.004,89,0.004,90,0.645,152,1.21,174,2.423,176,3.459,177,4.09,179,1.841,180,1.468,182,2.873,183,1.226,184,1.302,185,3.639,186,5.578,187,0.826,190,2.311,192,6.108,193,1.666,196,1.226,200,5.003,203,2.647,204,4.451,205,0.506,206,1.981,223,5.626,229,0.839,486,8.391,487,6.81,488,9.374,489,6.81,490,6.81,491,6.81,492,6.81,493,6.81,494,6.81,495,6.81,496,6.81,497,3.739,498,6.81,499,9.374,500,6.81,501,6.451,502,6.096,503,6.81,504,7.455,505,6.81,506,2.239,507,6.81]],["title/components/MockTourHolderComponent.html",[109,0.735,508,2.377]],["body/components/MockTourHolderComponent.html",[3,0.043,4,0.038,5,0.043,10,0.114,11,0.165,17,0.005,19,0.214,27,0.043,28,1.658,32,1.054,47,1.349,49,1.031,61,1.981,88,0.003,89,0.003,90,0.453,106,1.292,109,1.135,179,1.292,180,1.66,182,2.28,183,1.19,184,1.388,187,0.992,196,0.86,205,0.355,229,0.934,247,2.08,253,2.214,304,1.169,323,0.705,324,2.263,325,1.153,329,3.104,331,1.626,347,0.86,391,2.263,399,2.203,508,3.961,509,2.616,510,1.762,511,1.857,512,7.685,513,4.778,514,4.513,515,3.593,516,6.784,517,7.579,518,5.558,519,8.178,520,4.778,521,6.61,522,5.461,523,6.61,524,5.917,525,4.778,526,6.61,527,5.917,528,4.778,529,4.847,530,4.778,531,1.255,532,2.369,533,6.61,534,4.277,535,3.701,536,2.167,537,4.394,538,4.778,539,1.546,540,4.778,541,3.34,542,1.703,543,2.214,544,2.369,545,2.998,546,1.595,547,4.055,548,2.369,549,2.369,550,2.315,551,2.08,552,2.369,553,2.315,554,3.166,555,2.369,556,2.315,557,2.369,558,3.277,559,2.369,560,3.202,561,3.277,562,2.315,563,2.315,564,3.56,565,2.369,566,4.055,567,2.315,568,2.263,569,2.315,570,2.167,571,2.369,572,2.263,573,2.263,574,2.369,575,2.315,576,2.167,577,2.369,578,2.315,579,1.962,580,2.369,581,2.315,582,2.369,583,2.315,584,3.277,585,2.315,586,2.315,587,2.369,588,2.315,589,2.369,590,2.315,591,1.962,592,2.369,593,2.369,594,2.369,595,2.123,596,1.596,597,2.214,598,2.214,599,2.369,600,2.263,601,2.369,602,2.369,603,2.369,604,2.263,605,2.369,606,2.214,607,2.263,608,2.369,609,1.962,610,2.214,611,2.369,612,2.369,613,2.167,614,2.263,615,2.369,616,2.263,617,2.369,618,2.263,619,2.369,620,2.214,621,2.214,622,2.263,623,2.369,624,2.263,625,2.369,626,2.263,627,2.369,628,2.263,629,2.369,630,1.824,631,2.263,632,2.214,633,2.263,634,2.214,635,2.214,636,2.214,637,1.926,638,1.962,639,1.962,640,2.214,641,2.369,642,2.123,643,2.369,644,2.263,645,2.369,646,2.08,647,2.214,648,2.369,649,2.214,650,2.369,651,2.263,652,2.369,653,2.369]],["title/components/MockTourStepComponent.html",[109,0.735,550,2.377]],["body/components/MockTourStepComponent.html",[3,0.034,4,0.03,5,0.034,10,0.158,11,0.139,12,0.5,16,0.158,17,0.005,19,0.146,27,0.034,28,1.681,32,1.089,47,1.731,49,0.812,55,1.387,72,3.041,88,0.003,89,0.003,90,0.804,106,1.017,109,1.303,137,0.922,152,0.719,171,1.325,179,1.017,180,1.619,182,1.921,183,1.003,184,1.572,187,1.211,194,1.694,196,1.194,203,2.164,205,0.279,229,0.965,247,1.637,251,2.422,253,1.743,278,0.895,303,1.767,323,0.555,324,1.781,325,0.907,329,3.075,331,1.694,335,1.747,336,3.146,345,2.761,347,1.194,349,2.189,350,2.125,387,4.084,391,1.781,397,2.58,399,1.382,508,1.822,509,2.204,510,1.387,511,1.462,512,3.367,514,3.88,515,3.887,518,4.084,529,2.758,537,3.88,539,1.217,541,6.086,542,2.921,544,1.865,545,2.526,546,1.977,547,3.634,548,1.865,549,1.865,550,3.551,551,4.289,552,1.865,553,1.822,554,3.088,555,1.865,556,1.822,557,1.865,558,2.761,559,1.865,560,2.698,561,2.761,562,1.822,563,1.822,564,3.191,565,1.865,566,3.634,567,1.822,568,1.781,569,1.822,570,1.706,571,1.865,572,1.781,573,1.781,574,1.865,575,1.822,576,1.706,577,1.865,578,1.822,579,1.545,580,1.865,581,1.822,582,1.865,583,1.822,584,2.761,585,1.822,586,1.822,587,1.865,588,1.822,589,1.865,590,1.822,591,1.545,592,1.865,593,1.865,594,1.865,595,1.671,596,1.256,597,1.743,598,1.743,599,1.865,600,1.781,601,1.865,602,1.865,603,1.865,604,1.781,605,1.865,606,1.743,607,1.781,608,1.865,609,1.545,610,1.743,611,1.865,612,1.865,613,1.706,614,1.781,615,1.865,616,1.781,617,1.865,618,1.781,619,1.865,620,1.743,621,1.743,622,1.781,623,1.865,624,1.781,625,1.865,626,1.781,627,1.865,628,1.781,629,1.865,630,1.436,631,1.781,632,1.743,633,1.781,634,1.743,635,1.743,636,1.743,637,1.516,638,1.545,639,1.545,640,1.743,641,1.865,642,1.671,643,1.865,644,1.781,645,1.865,646,4.387,647,1.743,648,1.865,649,1.743,650,1.865,651,1.781,652,1.865,653,1.865,654,3.761,655,6.561,656,6.561,657,5.124,658,4.985,659,2.723,660,4.985,661,5.375,662,4.985,663,4.985,664,3.859,665,4.27,666,5.136,667,4.313,668,5.136,669,5.638,670,5.569,671,4.985,672,2.58,673,4.985,674,5.569,675,5.569,676,5.569,677,5.569,678,3.146,679,5.569,680,2.761,681,5.569,682,5.569,683,5.569,684,2.204,685,4.313,686,3.761,687,3.761,688,2.913,689,3.761,690,2.065,691,3.367,692,1.91,693,3.761,694,3.107,695,3.367,696,3.761,697,3.367,698,2.629,699,1.91,700,3.761,701,1.822,702,2.065,703,3.761]],["title/directives/NgxAbstractTableCellDirective.html",[323,0.724,595,2.18]],["body/directives/NgxAbstractTableCellDirective.html",[3,0.038,4,0.034,5,0.038,10,0.101,11,0.152,12,0.637,16,0.189,17,0.006,19,0.186,27,0.038,32,1.187,34,1.21,38,3.214,47,1.446,48,3.609,49,1.67,54,1.915,72,1.641,81,2.889,88,0.003,89,0.003,90,0.672,96,0.529,106,1.638,137,1.557,152,0.782,179,1.142,180,1.263,182,2.09,183,1.091,184,1.612,187,1.193,193,1.033,196,1.276,205,0.314,229,1.128,252,3.148,264,2.828,267,2.319,270,3.024,323,0.894,325,1.019,329,1.789,331,1.641,335,1.901,337,3.902,341,2.293,347,1.537,349,4.124,350,4.002,363,3.891,371,1.844,375,3.526,376,4.235,379,2.385,409,1.414,542,2.526,554,1.961,564,3.826,595,2.692,596,2.024,690,3.327,692,2.145,704,4.223,705,5.84,706,5.196,707,5.196,708,6.468,709,6.012,710,5.79,711,5.196,712,4.953,713,5.495,714,6.968,715,6.012,716,5.996,717,5.996,718,4.693,719,6.059,720,4.953,721,6.059,722,4.002,723,4.402,724,4.953,725,5.488,726,5.488,727,5.488,728,5.488,729,6.059,730,1.893,731,6.059,732,4.223,733,3.764,734,5.66,735,4.223,736,4.443,737,4.41,738,3.639,739,4.693,740,5.495,741,4.223,742,3.004,743,2.705,744,4.223,745,4.357,746,4.223,747,4.223,748,4.235,749,4.223,750,4.223,751,4.223,752,1.789,753,3.78,754,3.78,755,3.271,756,3.097,757,1.305,758,6.059,759,6.343,760,2.623,761,4.223,762,4.223,763,8.197,764,4.223,765,4.223,766,4.223,767,4.223]],["title/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[323,0.724,597,2.274]],["body/directives/NgxAccessibleAbstractDragAndDropItemDirective.html",[3,0.05,4,0.044,5,0.05,10,0.132,11,0.182,12,0.811,15,2.268,16,0.187,17,0.005,19,0.191,27,0.05,29,0.827,32,1.014,81,1.815,88,0.004,89,0.004,90,0.773,96,0.912,122,2.861,137,1.206,171,1.734,180,0.901,183,1.313,184,1.57,187,1.206,193,1.351,196,1.702,205,0.41,229,0.898,272,6.525,303,1.942,323,1.076,325,1.332,331,1.259,336,4.117,345,3.614,347,1.748,355,4.049,360,4.092,397,3.377,409,1.008,415,6.021,506,2.396,531,1.45,546,1.758,596,3.241,597,3.377,621,4.632,669,5.534,699,4.144,730,1.225,752,1.63,768,6.741,769,6.32,770,6.32,771,4.943,772,6.021,773,7.289,774,7.289,775,7.289,776,8.159,777,3.563,778,6.205,779,7.768,780,5.345,781,7.304,782,7.304,783,6.32,784,5.464,785,5.345,786,7.289,787,6.721,788,7.289,789,5.522,790,2.945,791,5.811,792,4.528,793,5.522,794,4.049,795,5.522,796,5.522,797,5.522,798,4.049,799,4.049,800,5.522,801,5.646,802,7.289,803,5.522,804,5.522,805,5.522]],["title/classes/NgxAccessibleDragAndDropAbstractService.html",[90,0.465,806,4.055]],["body/classes/NgxAccessibleDragAndDropAbstractService.html",[3,0.035,4,0.031,5,0.035,10,0.092,11,0.142,12,0.667,16,0.196,17,0.006,19,0.224,26,2.013,27,0.035,28,1.097,32,0.538,34,1.931,41,2.691,42,2.268,44,1.914,48,2.333,49,2.035,68,1.898,73,1.992,88,0.003,89,0.003,90,0.366,92,2.322,96,1.227,99,3.307,106,2.237,137,1.31,152,1.205,162,2.333,174,1.653,177,3.413,180,0.927,183,1.023,184,1.4,187,1.004,193,1.39,196,1.49,205,0.287,229,0.975,271,1.425,281,5.192,300,2.767,303,2.205,304,0.946,331,1.163,341,1.251,364,2.994,375,3.307,380,2.378,399,1.843,407,3.53,409,1.445,456,4.078,483,4.512,497,4.345,509,2.248,531,1.015,546,1.909,596,2.481,680,4.102,701,1.872,742,2.817,752,2.193,757,1.194,768,7.066,769,6.625,770,7.234,790,2.287,792,2.401,806,6.537,807,3.865,808,2.648,809,4.614,810,7.716,811,4.078,812,5.682,813,5.682,814,6.737,815,6.737,816,5.682,817,5.682,818,5.218,819,6.737,820,2.63,821,3.865,822,5.753,823,3.972,824,3.036,825,6.737,826,5.682,827,3.865,828,3.748,829,7.084,830,5.682,831,3.122,832,3.865,833,3.972,834,5.682,835,4.401,836,2.401,837,4.694,838,5.682,839,5.753,840,3.865,841,4.644,842,2.994,843,3.865,844,5.682,845,5.541,846,3.865,847,3.865,848,3.865,849,2.322,850,3.699,851,3.508,852,1.683,853,2.589,854,4.185,855,5.682,856,2.835,857,3.865,858,3.056,859,3.056,860,7.084,861,3.806,862,4.339,863,3.12,864,5.682,865,2.702,866,2.994,867,3.865,868,5.508,869,3.865,870,2.489,871,3.865,872,2.994,873,2.994,874,3.865,875,6.737,876,6.737,877,6.737,878,2.994,879,3.865,880,5.682,881,5.682,882,3.865,883,5.682,884,2.994,885,3.865,886,3.865,887,3.865,888,3.865,889,3.865,890,3.865,891,2.648,892,3.865,893,2.322,894,3.865,895,3.865,896,2.835,897,3.865,898,3.865,899,2.122,900,3.193,901,3.865,902,3.865]],["title/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.077,903,3.801]],["body/interfaces/NgxAccessibleDragAndDropBaseMessage.html",[0,0.143,2,1.044,3,0.063,4,0.056,5,0.063,10,0.166,11,0.211,16,0.218,17,0.005,18,6.668,27,0.086,28,1.825,88,0.004,89,0.004,96,0.873,152,1.174,190,3.208,240,2.809,790,2.367,792,4.332,839,5.402,856,5.115,872,5.402,873,5.402,878,6.545,884,6.545,893,4.189,903,7.32,904,5.762,905,5.762,906,7.511,907,5.762,908,5.762,909,5.762,910,5.762,911,5.762,912,5.762,913,7.511,914,5.762,915,5.402,916,5.762,917,5.762,918,5.762,919,5.762]],["title/directives/NgxAccessibleDragAndDropContainerDirective.html",[323,0.724,598,2.274]],["body/directives/NgxAccessibleDragAndDropContainerDirective.html",[3,0.06,4,0.052,5,0.06,10,0.231,11,0.203,12,0.73,17,0.005,19,0.171,27,0.06,32,1.13,47,1.658,57,3.467,88,0.004,89,0.004,90,0.62,96,0.819,106,2.196,179,1.768,182,2.802,184,1.515,187,0.986,205,0.486,229,1.001,323,1.429,325,1.578,329,2.398,331,1.673,341,2.629,371,1.99,598,3.764,692,4.126,769,6.844,770,7.608,810,7.635,811,4.46,822,6.292,893,4.879,920,7.91,921,6.539,922,7.272,923,7.272,924,6.711,925,7.272,926,9.243,927,7.272,928,4.604,929,7.635,930,8.123,931,6.539,932,6.292,933,8.123,934,6.539]],["title/directives/NgxAccessibleDragAndDropHostDirective.html",[323,0.724,600,2.324]],["body/directives/NgxAccessibleDragAndDropHostDirective.html",[3,0.043,4,0.038,5,0.043,10,0.221,11,0.164,12,0.769,16,0.175,17,0.006,19,0.198,27,0.043,32,1.19,34,1.881,44,1.094,47,1.662,49,1.02,50,5.137,57,2.801,75,4.395,88,0.003,89,0.003,90,0.448,96,1.176,135,1.507,152,0.973,179,1.279,180,1.23,182,2.264,183,1.182,184,1.581,187,1.14,190,2.558,193,1.844,196,1.594,205,0.351,206,1.909,229,1.054,278,1.125,303,2.17,323,1.306,325,1.141,329,1.938,331,1.674,347,1.594,364,2.645,371,1.439,399,1.87,409,1.199,438,3.693,531,1.242,543,2.191,597,3.772,598,3.492,600,3.108,664,4.738,722,2.671,743,2.506,769,7.369,770,7.902,777,3.343,779,5.875,790,3.004,806,3.907,810,8.166,811,3.604,820,1.967,893,4.89,920,8.517,922,5.875,923,5.875,924,5.422,925,5.875,927,5.875,929,5.422,932,5.083,935,4.729,936,4.527,937,8.142,938,8.553,939,7.537,940,6.563,941,6.563,942,6.563,943,4.729,944,6.563,945,4.729,946,3.604,947,3.417,948,4.729,949,6.563,950,4.729,951,6.563,952,6.563,953,4.729,954,6.563,955,4.729,956,6.563,957,5.422,958,6.563,959,4.729,960,5.422,961,4.729,962,4.729,963,4.233,964,4.729,965,4.729,966,4.729,967,4.729,968,4.729,969,4.729,970,4.729,971,4.729]],["title/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.077,856,3.599]],["body/interfaces/NgxAccessibleDragAndDropMessageRecord.html",[0,0.139,2,0.965,3,0.059,4,0.052,5,0.059,10,0.154,11,0.202,16,0.222,17,0.005,18,4.729,27,0.084,28,1.245,88,0.004,89,0.004,96,1.151,144,5.159,152,1.289,190,3.121,240,1.992,539,3.124,790,3.121,792,5.713,839,4.994,856,5.905,872,7.123,873,7.123,878,7.331,884,7.331,893,5.524,903,6.801,904,5.327,905,5.327,906,8.09,907,5.327,908,5.327,909,5.327,910,5.327,911,5.327,912,5.327,913,7.254,914,5.327,915,4.994,916,5.327,917,5.327,918,5.327,919,5.327]],["title/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.077,915,3.801]],["body/interfaces/NgxAccessibleDragAndDropMoveEvent.html",[0,0.142,2,1.023,3,0.062,4,0.055,5,0.062,10,0.163,11,0.209,16,0.215,17,0.005,18,5.009,27,0.085,28,1.319,88,0.004,89,0.004,96,0.855,152,1.163,190,3.473,240,2.11,790,2.318,792,4.243,839,5.29,856,5.009,872,5.29,873,5.29,878,6.462,884,6.462,893,4.102,903,6.978,904,5.642,905,5.642,906,7.443,907,5.642,908,5.642,909,5.642,910,5.642,911,5.642,912,5.642,913,7.443,914,5.642,915,6.462,916,7.752,917,7.752,918,7.752,919,7.752]],["title/components/NgxAccordionComponent.html",[109,0.735,553,2.377]],["body/components/NgxAccordionComponent.html",[3,0.03,4,0.027,5,0.03,10,0.209,11,0.127,12,0.554,16,0.181,17,0.006,19,0.181,27,0.03,28,0.982,32,0.858,34,1.977,42,1.977,44,1.177,49,1.811,50,5.271,57,2.171,61,2.068,66,2.26,74,1.114,75,4.621,88,0.003,89,0.003,90,0.482,96,0.864,109,0.923,152,0.796,179,0.901,180,1.612,183,0.916,184,1.492,187,1.065,193,1.509,196,1.243,203,1.296,205,0.248,206,1.48,229,0.76,247,1.452,253,1.545,269,2.445,303,2.17,304,0.816,323,0.492,324,1.579,325,0.804,329,3.058,335,1.596,341,2.233,347,1.467,360,2.307,364,2.05,371,1.548,391,1.579,396,2.684,398,3.268,399,1.943,403,3.003,422,1.621,438,2.307,442,3.436,456,1.831,506,1.096,508,1.615,509,2.013,510,1.23,511,1.296,514,2.522,515,2.129,537,3.708,539,1.646,544,1.653,545,2.307,546,1.227,547,3.421,548,1.653,549,1.653,550,1.615,551,1.452,552,1.653,553,3.342,554,3.047,555,1.653,556,4.251,557,4.829,558,2.522,559,1.653,560,2.464,561,2.522,562,1.615,563,1.615,564,3.003,565,1.653,566,3.421,567,1.615,568,1.579,569,1.615,570,1.512,571,1.653,572,1.579,573,1.579,574,1.653,575,1.615,576,1.512,577,1.653,578,1.615,579,1.369,580,1.653,581,1.615,582,1.653,583,1.615,584,2.522,585,1.615,586,1.615,587,1.653,588,1.615,589,1.653,590,1.615,591,1.369,592,1.653,593,1.653,594,1.653,595,1.481,596,1.114,597,1.545,598,1.545,599,1.653,600,1.579,601,1.653,602,1.653,603,1.653,604,1.579,605,1.653,606,1.545,607,1.579,608,1.653,609,1.369,610,1.545,611,1.653,612,1.653,613,1.512,614,1.579,615,1.653,616,1.579,617,1.653,618,1.579,619,1.653,620,1.545,621,1.545,622,1.579,623,1.653,624,1.579,625,1.653,626,1.579,627,1.653,628,1.579,629,1.653,630,1.273,631,1.579,632,1.545,633,1.579,634,1.545,635,1.545,636,1.545,637,1.344,638,1.369,639,1.369,640,1.545,641,1.653,642,1.481,643,1.653,644,1.579,645,1.653,646,1.452,647,1.545,648,1.653,649,1.545,650,1.653,651,1.579,652,1.653,653,1.653,737,3.808,752,1.502,757,1.03,790,3.219,829,2.985,851,1.736,852,2.214,858,1.512,859,1.512,866,2.583,893,4.144,972,3.334,973,4.202,974,3.73,975,2.793,976,3.94,977,4.553,978,3.16,979,3.73,980,5.52,981,6.167,982,5.802,983,5.087,984,5.087,985,3.407,986,2.397,987,6.167,988,3.342,989,5.087,990,3.972,991,5.7,992,4.739,993,5.754,994,3.334,995,3.94,996,5.52,997,3.334,998,5.087,999,3.334,1000,2.96,1001,5.087,1002,3.334,1003,3.276,1004,3.334,1005,4.144,1006,3.334,1007,3.94,1008,3.334,1009,2.445,1010,3.276,1011,3.334,1012,3.334,1013,3.334,1014,1.782,1015,3.334,1016,3.334,1017,3.94,1018,1.884,1019,2.233,1020,3.334,1021,3.334,1022,3.334,1023,3.334,1024,3.334,1025,3.334,1026,3.334,1027,3.334,1028,3.334,1029,3.334,1030,4.202,1031,1.079,1032,3.334,1033,3.334,1034,3.334,1035,2.649,1036,2.331,1037,3.73,1038,5.087,1039,3.334,1040,3.334,1041,1.941,1042,3.334,1043,2.985,1044,3.334,1045,3.334]],["title/components/NgxAccordionItemComponent.html",[109,0.735,556,2.377]],["body/components/NgxAccordionItemComponent.html",[3,0.023,4,0.02,5,0.023,7,3.138,10,0.061,11,0.103,12,0.587,15,1.047,16,0.179,17,0.006,19,0.156,27,0.023,28,0.795,29,1.046,32,1.177,34,1.181,36,1.545,39,2.77,42,0.731,44,1.199,49,1.586,81,1.354,88,0.002,89,0.002,90,0.39,96,0.649,109,0.776,122,2.684,137,0.985,152,0.532,162,1.047,179,0.689,180,1.57,183,0.742,184,1.549,187,1.163,193,1.598,196,1.495,205,0.189,206,1.198,229,1.075,235,2.092,247,1.11,253,1.181,264,1.707,303,1.741,323,0.376,324,1.207,325,0.615,329,3.012,331,1.655,332,5.803,335,1.292,336,2.327,337,1.642,340,3.021,341,2.968,345,2.951,347,1.624,360,4.31,364,1.66,370,1.531,371,0.776,375,2.397,376,1.782,384,2.282,391,1.207,396,2.256,398,1.951,399,2.192,403,2.591,409,0.752,422,2.438,432,3.22,456,1.4,479,2.759,483,5.126,506,1.354,508,1.235,509,1.63,510,0.94,511,0.991,514,2.042,515,1.724,531,0.67,537,3.309,539,2.114,542,1.469,544,1.264,545,2.699,546,1.686,547,2.951,548,1.264,549,1.264,550,1.235,551,1.11,552,1.264,553,2.883,554,2.89,555,1.264,556,2.883,557,4.891,558,2.042,559,1.264,560,1.995,561,2.042,562,1.235,563,1.235,564,2.591,565,1.264,566,2.951,567,1.235,568,1.207,569,1.235,570,1.156,571,1.264,572,1.207,573,1.207,574,1.264,575,1.235,576,1.156,577,1.264,578,1.235,579,1.047,580,1.264,581,1.235,582,1.264,583,1.235,584,2.042,585,1.235,586,1.235,587,1.264,588,1.235,589,1.264,590,1.235,591,1.047,592,1.264,593,1.264,594,1.264,595,1.133,596,0.851,597,1.181,598,1.181,599,1.264,600,1.207,601,1.264,602,1.264,603,1.264,604,1.207,605,1.264,606,1.181,607,1.207,608,1.264,609,1.047,610,1.181,611,1.264,612,1.264,613,1.156,614,1.207,615,1.264,616,1.207,617,1.264,618,1.207,619,1.264,620,1.181,621,1.181,622,1.207,623,1.264,624,1.207,625,1.264,626,1.207,627,1.264,628,1.207,629,1.264,630,0.973,631,1.207,632,1.181,633,1.207,634,1.181,635,1.181,636,1.181,637,1.028,638,1.047,639,1.047,640,1.181,641,1.264,642,1.133,643,1.264,644,1.207,645,1.264,646,1.11,647,1.181,648,1.264,649,1.181,650,1.264,651,1.207,652,1.264,653,1.264,664,3.464,665,3.833,698,4.567,699,1.295,712,3.623,730,1.754,742,1.264,745,1.264,752,2.26,777,1.047,778,4.375,780,3.021,784,2.759,790,3.38,791,2.759,794,3.021,853,1.707,854,3.697,858,1.156,859,1.156,936,3.113,973,3.403,974,3.021,975,2.262,976,3.19,977,3.687,978,2.559,979,3.021,982,4.058,990,1.642,991,2.106,992,3.464,993,4.61,995,6.553,1000,2.397,1009,1.87,1046,9.619,1047,2.282,1048,3.471,1049,2.327,1050,4.282,1051,3.687,1052,3.403,1053,4.119,1054,2.928,1055,4.64,1056,5.951,1057,5.328,1058,4.014,1059,5.183,1060,4.119,1061,4.119,1062,4.16,1063,5.951,1064,4.119,1065,3.687,1066,3.687,1067,4.64,1068,4.64,1069,4.119,1070,2.549,1071,4.119,1072,2.549,1073,4.119,1074,2.699,1075,4.119,1076,4.119,1077,4.119,1078,3.687,1079,4.119,1080,3.687,1081,3.687,1082,2.549,1083,5.951,1084,2.549,1085,4.282,1086,3.687,1087,2.549,1088,2.928,1089,5.397,1090,2.549,1091,2.549,1092,3.403,1093,2.549,1094,4.119,1095,2.549,1096,4.119,1097,3.687,1098,2.928,1099,2.327,1100,2.549,1101,3.687,1102,2.549,1103,4.119,1104,2.549,1105,4.61,1106,2.549,1107,4.119,1108,2.549,1109,2.549,1110,2.549,1111,4.119,1112,2.549,1113,4.014,1114,3.19,1115,2.549,1116,4.119,1117,2.549,1118,1.362,1119,1.782,1120,1.782,1121,2.549,1122,5.328,1123,5.183,1124,5.183,1125,5.951,1126,2.549,1127,2.549,1128,1.975,1129,1.362,1130,1.584,1131,2.549,1132,2.549,1133,2.549,1134,2.282,1135,2.549,1136,2.549,1137,1.44,1138,1.642,1139,1.4,1140,4.119,1141,2.282,1142,2.549,1143,2.549,1144,2.549,1145,1.642,1146,1.975]],["title/pipes/NgxAriaSortPipe.html",[174,1.428,1147,4.055]],["body/pipes/NgxAriaSortPipe.html",[3,0.063,4,0.056,5,0.063,12,0.625,16,0.195,17,0.006,19,0.238,27,0.063,32,1.174,42,1.993,44,1.951,47,1.722,88,0.004,89,0.004,90,0.659,144,4.508,174,2.454,176,3.532,179,1.88,180,1.482,182,2.91,183,1.252,185,3.716,186,5.649,187,0.844,193,1.701,196,1.252,204,4.508,205,0.516,206,2.023,509,2.752,595,3.747,705,5.454,756,6.186,757,2.148,1147,6.968,1148,8.435,1149,8.435,1150,6.953,1151,8.435,1152,6.953,1153,5.641,1154,8.128,1155,8.128,1156,6.224,1157,6.953,1158,6.953]],["title/injectables/NgxAuthenticatedHttpClient.html",[291,1.428,1159,3.801]],["body/injectables/NgxAuthenticatedHttpClient.html",[3,0.027,4,0.023,5,0.027,10,0.07,11,0.115,12,0.887,16,0.191,17,0.006,19,0.194,22,6.222,23,2.259,27,0.027,29,1.397,32,1.079,34,2.804,40,7.391,42,0.836,44,1.858,47,1.969,49,0.629,54,1.323,88,0.002,89,0.002,90,0.276,96,1.006,101,2.745,118,1.812,137,1.451,152,1.255,161,4.677,174,0.848,180,1.266,183,0.826,184,1.459,187,1.026,193,2.145,194,2.84,196,1.397,205,0.217,229,1.158,240,2.158,291,1.334,293,1.245,300,2.747,304,0.714,331,0.978,354,3.469,399,2.051,409,1.601,531,0.766,730,1.945,757,0.901,809,2.849,833,3.206,836,5.523,850,1.602,986,2.202,1159,3.552,1160,8.623,1161,9.558,1162,8.623,1163,2.917,1164,4.586,1165,2.518,1166,5.437,1167,2.518,1168,3.789,1169,4.586,1170,6.027,1171,4.586,1172,4.105,1173,4.681,1174,5.667,1175,4.586,1176,5.769,1177,6.251,1178,5.121,1179,4.586,1180,2.917,1181,9.842,1182,8.131,1183,9.868,1184,2.917,1185,8.766,1186,6.42,1187,7.729,1188,6.989,1189,8.354,1190,6.428,1191,6.789,1192,2.917,1193,2.917,1194,4.586,1195,4.586,1196,2.917,1197,2.917,1198,4.586,1199,2.917,1200,2.917,1201,7.855,1202,2.917,1203,2.917,1204,2.917,1205,2.917,1206,2.917,1207,4.105,1208,2.917,1209,4.586,1210,2.917,1211,1.296,1212,2.259,1213,1.519,1214,1.058,1215,5.667,1216,2.917,1217,2.917,1218,2.917,1219,7.414,1220,2.917,1221,7.414,1222,5.667,1223,2.917,1224,2.917,1225,5.667,1226,2.917,1227,2.611,1228,2.41,1229,2.917,1230,2.917,1231,2.917,1232,2.917,1233,2.917,1234,2.917,1235,5.667,1236,2.917,1237,2.917]],["title/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.077,1212,3.801]],["body/interfaces/NgxAuthenticatedHttpClientConfiguration.html",[0,0.126,2,0.956,3,0.058,4,0.051,5,0.058,10,0.152,11,0.2,12,0.907,15,3.955,16,0.203,17,0.006,19,0.229,27,0.073,37,2.102,88,0.004,89,0.004,101,3.877,106,2.363,118,3.967,137,1.057,148,4.521,152,0.824,205,0.474,278,1.519,287,2.725,368,4.658,409,1.596,438,3.63,461,4.277,808,2.276,975,3.506,1159,7.31,1166,5.869,1170,5.36,1173,7.571,1186,6.598,1187,6.199,1188,5.595,1191,7.098,1212,6.771,1238,5.716,1239,5.716,1240,8.204,1241,8.621,1242,4.394,1243,4.394,1244,4.521,1245,8.204,1246,7.222,1247,4.807,1248,4.683,1249,5.716,1250,5.275,1251,4.112,1252,5.716]],["title/interfaces/NgxAuthenticatedRoute.html",[0,0.077,1253,4.394]],["body/interfaces/NgxAuthenticatedRoute.html",[0,0.14,2,0.995,3,0.06,4,0.053,5,0.06,7,2.835,10,0.158,11,0.223,12,0.737,16,0.2,17,0.006,19,0.174,27,0.075,28,1.794,29,1.332,47,1.674,76,2.45,88,0.004,89,0.004,96,0.832,106,2.218,144,4.384,152,1.059,171,1.951,173,4.278,229,1.011,354,2.629,388,4.126,409,1.498,730,1.974,1170,4.449,1247,4.927,1253,7.966,1254,6.643,1255,6.643,1256,8.203,1257,3.72,1258,6.776,1259,5.96,1260,4.278,1261,6.776,1262,8.203,1263,4.644,1264,6.776,1265,5.488,1266,6.776,1267,8.203,1268,4.872,1269,6.776,1270,5.488,1271,6.643,1272,5.946,1273,6.643,1274,7.343,1275,5.946,1276,3.99,1277,5.946,1278,5.946,1279,4.872,1280,6.643]],["title/classes/NgxAuthenticationAbstractService.html",[90,0.465,1247,2.948]],["body/classes/NgxAuthenticationAbstractService.html",[3,0.025,4,0.022,5,0.025,10,0.065,11,0.109,12,0.775,16,0.197,17,0.006,19,0.142,27,0.025,28,1.635,29,1.079,32,1.052,34,2.378,42,1.249,44,2.097,47,1.603,49,1.86,55,2.896,61,2.353,64,3.262,72,3.584,88,0.002,89,0.002,90,0.259,92,1.642,96,1.013,99,2.535,106,1.675,137,1.025,179,2.045,180,1.281,183,0.978,184,1.494,187,1.119,193,1.921,195,2.005,196,1.695,203,1.693,229,1.044,266,2.268,300,2.988,304,0.669,305,3.504,325,1.051,331,1.549,347,1.298,354,3.96,397,3.994,399,2.139,409,0.796,422,2.747,438,1.976,442,2.705,462,4.436,506,0.899,509,1.724,532,4.013,539,2.005,596,2.703,730,2.011,742,2.16,757,0.845,808,1.553,809,1.698,836,2.706,849,1.642,850,3.959,852,1.896,865,4.331,975,2.392,1003,2.806,1031,0.885,1085,3.599,1097,5.546,1170,6.126,1190,5.287,1191,3.374,1227,8.256,1228,2.258,1247,2.617,1248,6.764,1261,7.619,1265,5.59,1266,6.686,1270,5.59,1275,3.9,1281,2.734,1282,2.063,1283,4.356,1284,5.431,1285,5.431,1286,5.431,1287,5.431,1288,5.546,1289,6.195,1290,6.766,1291,5.118,1292,5.118,1293,5.431,1294,4.356,1295,5.431,1296,4.356,1297,5.431,1298,4.356,1299,5.94,1300,3.374,1301,2.734,1302,4.356,1303,2.734,1304,3.9,1305,2.734,1306,3.226,1307,2.063,1308,3.9,1309,6.195,1310,5.259,1311,6.195,1312,4.798,1313,3.599,1314,2.734,1315,3.9,1316,6.195,1317,2.734,1318,2.734,1319,2.734,1320,3.195,1321,2.734,1322,7.563,1323,2.734,1324,5.431,1325,2.734,1326,2.734,1327,5.431,1328,2.734,1329,2.734,1330,3.262,1331,3.374,1332,4.356,1333,7.852,1334,2.734,1335,6.195,1336,6.195,1337,6.766,1338,9.065,1339,2.734,1340,2.734,1341,4.356,1342,8.753,1343,2.734,1344,4.24,1345,5.431,1346,2.734,1347,2.734,1348,4.356,1349,7.563,1350,2.734,1351,2.734,1352,2.734,1353,2.734,1354,2.734,1355,2.734,1356,4.356,1357,2.447,1358,1.698,1359,2.117,1360,2.734,1361,4.356,1362,2.734,1363,2.734,1364,2.734,1365,5.431,1366,2.734,1367,2.734,1368,2.734,1369,4.356,1370,2.734,1371,2.734,1372,2.734,1373,2.734,1374,2.734,1375,4.356,1376,2.734,1377,2.734,1378,2.734,1379,2.447,1380,2.005,1381,2.258,1382,2.005,1383,2.734,1384,4.356,1385,2.734,1386,2.734,1387,2.734,1388,2.734,1389,2.734,1390,2.734,1391,2.734,1392,4.356,1393,2.734,1394,2.734,1395,2.734,1396,1.591,1397,2.258,1398,2.734]],["title/interfaces/NgxAuthenticationConfiguration.html",[0,0.077,1250,4.055]],["body/interfaces/NgxAuthenticationConfiguration.html",[0,0.129,2,0.985,3,0.06,4,0.053,5,0.06,10,0.157,11,0.204,12,0.872,15,2.701,16,0.209,17,0.006,19,0.232,27,0.074,37,2.433,88,0.004,89,0.004,96,0.823,101,3.186,106,2.395,118,4.085,137,1.349,148,3.715,152,0.849,205,0.488,278,1.564,287,3.479,368,3.827,409,1.618,438,2.983,461,3.515,808,3.302,975,4.476,1159,7.173,1166,4.823,1170,4.404,1173,5.433,1186,6.193,1187,5.094,1188,4.597,1191,6.314,1212,7.173,1238,5.887,1239,5.887,1240,5.887,1241,7.297,1242,3.611,1243,3.611,1244,3.715,1245,7.297,1246,7.319,1247,5.321,1248,5.978,1249,7.297,1250,6.734,1251,5.25,1252,8.29]],["title/injectables/NgxBroadcastChannelService.html",[291,1.428,1399,4.394]],["body/injectables/NgxBroadcastChannelService.html",[3,0.036,4,0.032,5,0.036,10,0.095,11,0.145,12,0.719,16,0.194,17,0.006,19,0.179,27,0.036,32,0.806,34,2.394,41,2.745,42,1.138,44,1.995,49,0.857,61,2.051,64,4.111,86,2.913,88,0.003,89,0.003,90,0.376,96,1.046,98,3.274,102,2.874,138,3.481,152,1.212,161,2.66,180,1.59,183,1.044,184,1.505,187,1.047,193,2.163,196,1.553,205,0.295,209,4.519,229,0.714,279,5.188,291,1.686,293,1.695,300,2.975,304,0.972,331,1.182,340,4.251,341,2.861,347,1.505,365,2.575,380,3.835,399,2.073,484,6.735,531,1.043,743,2.213,792,5.768,808,2.066,820,2.255,822,5.301,824,3.097,841,4.631,861,4.25,975,3.182,986,2.253,1167,4.131,1177,3.555,1187,4.489,1189,5.188,1213,2.068,1214,1.44,1242,2.181,1282,1.881,1315,6.735,1399,5.188,1400,8.842,1401,8.842,1402,3.972,1403,5.796,1404,9.795,1405,8.162,1406,5.188,1407,5.796,1408,3.983,1409,8.354,1410,8.354,1411,8.354,1412,8.626,1413,8.626,1414,5.796,1415,3.972,1416,5.188,1417,4.34,1418,9.39,1419,9.163,1420,5.796,1421,6.844,1422,3.972,1423,5.188,1424,5.796,1425,8.354,1426,3.972,1427,5.796,1428,4.251,1429,3.972,1430,3.972,1431,8.001,1432,5.796,1433,7.524,1434,3.972,1435,3.972,1436,5.796,1437,3.972,1438,4.489,1439,5.796,1440,3.481,1441,3.972,1442,2.181,1443,2.068,1444,5.188,1445,3.972,1446,1.84,1447,2.913,1448,6.735,1449,3.972,1450,8.842,1451,3.972,1452,7.524,1453,3.972,1454,3.972,1455,4.784,1456,3.076,1457,3.972,1458,5.796,1459,3.972]],["title/interfaces/NgxButtonConfiguration.html",[0,0.077,1460,4.055]],["body/interfaces/NgxButtonConfiguration.html",[0,0.093,2,0.884,3,0.054,4,0.047,5,0.054,10,0.141,11,0.191,12,0.917,16,0.22,17,0.006,19,0.2,27,0.086,37,2,88,0.004,89,0.004,96,0.739,106,2.551,109,1.333,114,3.468,152,1.088,205,0.438,229,1.222,241,3.275,242,2.471,263,5.584,278,1.404,369,6.515,422,2.426,545,3.453,546,1.837,609,2.424,659,3.461,730,1.31,891,3.005,928,3.688,1251,3.802,1460,6.29,1461,5.903,1462,7.428,1463,7.309,1464,8.447,1465,5.897,1466,7.97,1467,4.127,1468,5.284,1469,4.572,1470,4.572,1471,4.572,1472,4.572,1473,5.284,1474,4.877,1475,5.284,1476,5.284,1477,4.877,1478,5.284,1479,5.284,1480,4.329,1481,2.86,1482,5.284,1483,2.998]],["title/directives/NgxButtonDirective.html",[323,0.724,604,2.324]],["body/directives/NgxButtonDirective.html",[3,0.026,4,0.023,5,0.026,10,0.107,11,0.113,12,0.755,16,0.201,17,0.006,19,0.166,27,0.026,28,1.224,32,1.23,37,2.154,42,0.816,44,1.041,47,0.919,49,2.019,55,1.66,61,1.349,66,1.265,73,1.578,74,0.951,81,1.48,83,2.76,88,0.002,89,0.002,90,0.427,92,2.704,96,0.357,101,1.38,109,1.369,114,3.441,135,2.449,137,0.924,179,0.77,183,0.811,184,1.503,187,1.161,194,1.698,196,1.005,205,0.211,206,1.309,229,1.18,241,2.852,242,1.192,263,2.089,266,2.344,267,2.471,270,1.216,271,2.338,278,0.678,286,3.486,323,0.936,325,0.687,329,1.329,331,1.563,335,1.412,347,1.243,364,1.148,369,6.704,371,2.101,376,1.991,397,4.506,399,1.821,409,1.019,410,1.908,422,0.908,497,1.564,506,2.084,531,1.466,546,1.771,554,2.984,604,2.132,609,1.17,659,1.848,665,4.083,699,2.834,730,1.863,752,0.841,757,0.88,777,3.449,831,2.085,833,5.131,891,2.841,928,1.38,988,4.562,1003,4.083,1031,1.806,1048,3.737,1058,5.348,1113,4.322,1114,3.486,1211,1.265,1320,2.089,1331,2.206,1417,3.774,1460,4.61,1462,7.328,1463,4.322,1465,3.486,1466,2.55,1467,5.373,1468,2.55,1469,4.911,1470,3.486,1471,3.486,1472,3.486,1473,2.55,1474,5.704,1475,4.029,1476,4.029,1477,3.718,1478,2.55,1479,4.029,1480,4.649,1482,2.55,1483,3.728,1484,2.849,1485,4.029,1486,4.501,1487,4.501,1488,6.34,1489,5.58,1490,5.58,1491,4.146,1492,4.995,1493,4.995,1494,5.58,1495,6.18,1496,6.18,1497,4.147,1498,5.675,1499,6.34,1500,4.501,1501,3.247,1502,4.501,1503,2.643,1504,4.501,1505,2.849,1506,2.849,1507,2.849,1508,3.901,1509,5.675,1510,4.029,1511,4.501,1512,4.501,1513,4.029,1514,4.501,1515,6.34,1516,6.34,1517,6.18,1518,4.995,1519,2.849,1520,3.301,1521,4.501,1522,2.849,1523,4.501,1524,2.849,1525,4.501,1526,2.849,1527,4.501,1528,2.849,1529,1.999,1530,2.849,1531,5.063,1532,2.849,1533,5.238,1534,2.849,1535,4.501,1536,2.849,1537,2.704,1538,3.718,1539,2.849,1540,3.486,1541,2.849,1542,4.029,1543,2.849,1544,2.849,1545,2.531,1546,2.704,1547,2.849,1548,2.849,1549,2.55,1550,4.029,1551,2.55,1552,2.55,1553,2.55,1554,2.353,1555,2.353,1556,4.029,1557,4.029,1558,2.55,1559,4.029,1560,2.55,1561,2.55,1562,2.206,1563,2.55,1564,2.849,1565,5.58,1566,2.849,1567,2.849,1568,2.849,1569,4.029,1570,4.995,1571,2.849,1572,2.849,1573,2.849,1574,6.88,1575,5.675,1576,4.029,1577,2.55,1578,2.55,1579,2.206,1580,2.55,1581,2.55,1582,2.353,1583,4.995,1584,2.353,1585,2.55,1586,2.55,1587,2.55,1588,2.55]],["title/components/NgxConfigurableLayoutItemComponent.html",[109,0.735,562,2.377]],["body/components/NgxConfigurableLayoutItemComponent.html",[3,0.04,4,0.035,5,0.04,10,0.105,11,0.156,12,0.652,17,0.005,19,0.115,27,0.04,28,1.205,32,0.613,47,1.48,50,3.75,51,4.021,72,1.712,74,2.085,76,3.457,84,5.589,88,0.003,89,0.003,90,0.417,96,0.551,97,3.822,106,1.961,109,1.332,179,1.191,180,1.647,182,2.154,184,1.446,187,1.011,205,0.327,229,0.543,247,4.431,253,2.041,323,0.65,324,2.086,325,1.062,329,3.095,331,1.597,335,1.959,371,2.401,391,2.086,409,1.58,413,4.181,479,4.181,508,2.133,509,2.471,510,1.624,511,1.712,514,3.095,515,2.613,537,4.098,539,2.8,544,2.184,545,2.832,546,1.506,547,3.912,548,2.184,549,2.184,550,2.133,551,1.917,552,2.184,553,2.133,554,3.166,555,2.184,556,2.133,557,2.184,558,3.095,559,2.184,560,4.191,561,3.095,562,3.822,563,2.133,564,3.435,565,2.184,566,3.912,567,2.133,568,2.086,569,2.133,570,1.998,571,2.184,572,2.086,573,2.086,574,2.184,575,2.133,576,1.998,577,2.184,578,2.133,579,1.809,580,2.184,581,2.133,582,2.184,583,2.133,584,3.095,585,2.133,586,2.133,587,2.184,588,2.133,589,2.184,590,2.133,591,1.809,592,2.184,593,2.184,594,2.184,595,1.956,596,1.471,597,2.041,598,2.041,599,2.184,600,2.086,601,2.184,602,2.184,603,2.184,604,2.086,605,2.184,606,2.041,607,2.086,608,2.184,609,1.809,610,2.041,611,2.184,612,2.184,613,1.998,614,2.086,615,2.184,616,2.086,617,2.184,618,2.086,619,2.184,620,2.041,621,2.041,622,2.086,623,2.184,624,2.086,625,2.184,626,2.086,627,2.184,628,2.086,629,2.184,630,1.681,631,2.086,632,2.041,633,2.086,634,2.041,635,2.041,636,2.041,637,1.775,638,1.809,639,1.809,640,2.041,641,2.184,642,1.956,643,2.184,644,2.086,645,2.184,646,1.917,647,2.041,648,2.184,649,2.041,650,2.184,651,2.086,652,2.184,653,2.184,692,2.237,745,2.184,790,3.182,801,5.618,893,4.74,928,4.403,1047,3.942,1051,5.589,1119,3.079,1589,8.652,1590,8.652,1591,6.243,1592,3.656,1593,4.836,1594,4.836,1595,6.243,1596,6.243,1597,5.992,1598,7.253,1599,6.243,1600,4.404,1601,3.428]],["title/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.077,1602,4.055]],["body/interfaces/NgxConfigurableLayoutItemDropEvent.html",[0,0.133,2,1.039,3,0.063,4,0.056,5,0.063,10,0.166,11,0.211,16,0.216,17,0.005,27,0.088,29,1.447,76,2.56,88,0.004,89,0.004,152,0.896,190,3.08,332,4.854,542,2.475,546,2.276,710,4.471,734,5.844,1480,5.092,1602,6.962,1603,6.215,1604,6.215,1605,8.447,1606,8.447,1607,7.796,1608,8.447,1609,8.447,1610,7.488,1611,8.123,1612,5.736,1613,5.736,1614,5.736,1615,6.215,1616,4.854,1617,5.736]],["title/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.077,1610,3.801]],["body/interfaces/NgxConfigurableLayoutItemEntity.html",[0,0.135,2,1.065,3,0.065,4,0.057,5,0.065,10,0.17,11,0.214,12,0.769,16,0.213,17,0.005,27,0.089,29,1.497,76,3.509,88,0.004,89,0.004,152,1.184,190,2.415,332,6.651,542,2.536,546,1.716,710,4.582,734,4.582,1480,5.217,1602,5.877,1603,6.368,1604,6.368,1605,6.368,1606,6.368,1607,5.877,1608,6.368,1609,7.656,1610,7.369,1611,6.368,1612,5.877,1613,5.877,1614,5.877,1615,6.368,1616,4.973,1617,7.86]],["title/pipes/NgxConfigurableLayoutItemSizePipe.html",[174,1.428,1618,4.394]],["body/pipes/NgxConfigurableLayoutItemSizePipe.html",[3,0.053,4,0.06,5,0.053,12,0.519,16,0.179,17,0.006,19,0.197,27,0.053,28,1.114,29,0.864,32,0.803,34,2.389,42,1.654,44,2.169,47,1.868,48,3.081,49,1.799,50,5.007,51,6.15,55,2.767,74,1.927,88,0.004,89,0.004,90,0.547,96,0.722,106,2.254,109,1.123,144,4.009,174,2.182,176,2.931,179,1.56,180,1.36,182,2.588,183,1.039,185,4.009,187,0.7,193,1.412,196,1.501,203,2.243,204,4.009,205,0.428,206,1.679,218,4.469,229,0.925,247,3.842,270,2.463,409,1.054,504,5.165,539,2.428,542,3.147,554,2.428,560,3.634,672,3.476,730,1.28,743,2.203,757,1.783,820,2.249,868,3.716,990,3.716,1307,2.733,1480,5.502,1529,2.563,1594,4.469,1607,7.748,1610,5.811,1612,7.292,1613,6.198,1614,6.198,1618,6.716,1619,7.502,1620,7.502,1621,5.77,1622,7.502,1623,5.77,1624,9.944,1625,5.77,1626,7.502,1627,7.748,1628,4.767,1629,4.034,1630,6.198,1631,5.77,1632,7.902,1633,5.165,1634,3.466,1635,5.77,1636,3.584,1637,5.77,1638,5.77,1639,5.77,1640,5.77,1641,5.77,1642,5.77,1643,5.77,1644,5.77,1645,5.77]],["title/interfaces/NgxCookie.html",[0,0.077,1646,3.431]],["body/interfaces/NgxCookie.html",[0,0.147,2,0.908,3,0.055,4,0.049,5,0.055,10,0.145,11,0.194,12,0.905,16,0.208,17,0.006,19,0.159,27,0.086,29,1.465,76,2.237,88,0.004,89,0.004,152,1.33,171,1.443,180,1.468,190,3.154,229,0.748,820,1.818,1153,5.303,1214,2.199,1344,2.939,1446,2.811,1646,5.968,1647,4.449,1648,4.241,1649,6.596,1650,6.596,1651,6.024,1652,6.596,1653,6.596,1654,6.261,1655,6.261,1656,3.907,1657,5.682,1658,6.261,1659,4.687,1660,4.063,1661,3.907,1662,4.241,1663,4.063,1664,4.449,1665,4.063,1666,4.449,1667,3.53,1668,4.449,1669,4.449,1670,4.449,1671,4.063,1672,3.331,1673,5.682,1674,4.449,1675,4.449,1676,4.449,1677,4.449,1678,4.449,1679,4.449,1680,4.99,1681,5.189,1682,4.063,1683,4.449,1684,4.449]],["title/interfaces/NgxCookieChangedEvent.html",[0,0.077,1682,3.287]],["body/interfaces/NgxCookieChangedEvent.html",[0,0.149,2,0.967,3,0.059,4,0.052,5,0.059,10,0.154,11,0.202,16,0.204,17,0.006,19,0.169,27,0.088,29,1.446,76,2.381,88,0.004,89,0.004,144,4.307,152,1.325,171,1.917,180,1.054,190,2.982,229,0.796,820,1.935,1153,4.011,1214,2.341,1344,3.128,1446,2.992,1646,5.634,1647,4.735,1648,4.514,1649,4.735,1650,4.735,1651,4.324,1652,4.735,1653,4.735,1654,4.735,1655,4.735,1656,4.158,1657,5.91,1658,6.443,1659,4.824,1660,4.324,1661,4.158,1662,4.514,1663,4.324,1664,4.735,1665,4.324,1666,4.735,1667,3.758,1668,4.735,1669,4.735,1670,4.735,1671,4.324,1672,3.545,1673,5.91,1674,4.735,1675,4.735,1676,4.735,1677,4.735,1678,4.735,1679,4.735,1680,5.19,1681,5.884,1682,5.397,1683,6.748,1684,6.748]],["title/interfaces/NgxCookieConfiguration.html",[0,0.077,1671,3.287]],["body/interfaces/NgxCookieConfiguration.html",[0,0.145,2,0.872,3,0.053,4,0.047,5,0.053,10,0.139,11,0.189,12,0.924,16,0.214,17,0.006,19,0.153,27,0.086,29,1.525,76,2.147,88,0.004,89,0.004,152,1.31,171,1.385,180,0.95,190,3.114,229,0.718,820,1.745,1153,3.616,1214,3.211,1344,4.055,1446,2.697,1646,6.191,1647,4.269,1648,4.07,1649,4.269,1650,4.269,1651,3.899,1652,4.269,1653,4.269,1654,4.269,1655,4.269,1656,3.749,1657,5.533,1658,7.113,1659,4.597,1660,3.899,1661,3.749,1662,4.07,1663,3.899,1664,4.269,1665,3.899,1666,4.269,1667,3.388,1668,4.269,1669,4.269,1670,4.269,1671,5.053,1672,4.863,1673,6.894,1674,6.495,1675,6.495,1676,6.495,1677,6.495,1678,6.495,1679,6.495,1680,5.909,1681,5.053,1682,3.899,1683,4.269,1684,4.269]],["title/interfaces/NgxCookieEvent.html",[0,0.077,1681,3.287]],["body/interfaces/NgxCookieEvent.html",[0,0.15,2,0.982,3,0.06,4,0.053,5,0.06,10,0.156,11,0.204,16,0.175,17,0.006,19,0.172,27,0.088,29,1.451,76,2.418,88,0.004,89,0.004,152,1.319,171,1.56,180,1.07,190,3.003,229,0.808,820,1.966,1153,4.074,1214,2.378,1344,3.177,1446,3.039,1646,5.689,1647,4.809,1648,4.584,1649,4.809,1650,4.809,1651,4.392,1652,4.809,1653,4.809,1654,4.809,1655,4.809,1656,4.223,1657,6.785,1658,6.489,1659,4.858,1660,4.392,1661,4.223,1662,4.584,1663,4.392,1664,4.809,1665,4.392,1666,4.809,1667,3.817,1668,4.809,1669,4.809,1670,4.809,1671,4.392,1672,3.601,1673,5.968,1674,4.809,1675,4.809,1676,4.809,1677,4.809,1678,4.809,1679,4.809,1680,6.126,1681,5.926,1682,4.392,1683,4.809,1684,4.809]],["title/interfaces/NgxCookieLanguageConfiguration.html",[0,0.077,1663,3.287]],["body/interfaces/NgxCookieLanguageConfiguration.html",[0,0.148,2,0.935,3,0.057,4,0.05,5,0.057,10,0.149,11,0.198,12,0.817,16,0.209,17,0.006,19,0.164,27,0.087,29,1.434,76,2.304,88,0.004,89,0.004,144,4.219,152,1.333,171,1.486,180,1.019,190,2.937,229,1.121,820,1.872,1153,3.881,1214,2.265,1344,3.026,1446,4.01,1646,5.518,1647,4.581,1648,4.367,1649,4.581,1650,4.581,1651,4.184,1652,4.581,1653,4.581,1654,4.581,1655,4.581,1656,4.023,1657,5.789,1658,6.347,1659,4.752,1660,4.184,1661,4.023,1662,4.367,1663,5.287,1664,6.668,1665,5.796,1666,6.668,1667,5.292,1668,4.581,1669,4.581,1670,4.581,1671,4.184,1672,3.43,1673,5.789,1674,4.581,1675,4.581,1676,4.581,1677,4.581,1678,4.581,1679,4.581,1680,5.084,1681,5.287,1682,4.184,1683,4.581,1684,4.581]],["title/injectables/NgxCookieService.html",[291,1.428,1685,4.055]],["body/injectables/NgxCookieService.html",[3,0.023,4,0.02,5,0.023,7,1.066,10,0.06,11,0.101,12,0.741,16,0.201,17,0.006,19,0.169,27,0.023,32,1.237,34,2.452,37,2.062,41,1.919,42,2.25,44,2.057,49,2.023,54,3.307,57,1.729,61,2.417,66,1.11,68,0.834,72,0.971,73,2.267,81,1.332,88,0.002,89,0.002,90,0.237,96,1.01,137,1.416,152,1.233,162,2.099,174,1.179,180,1.606,183,0.73,184,1.562,187,1.125,193,2.019,194,1.79,196,1.453,205,0.185,206,1.179,209,1.501,229,1.017,240,1.817,266,2.11,281,2.833,291,1.179,293,1.066,300,2.823,304,0.611,331,1.683,341,2.979,347,1.515,354,2.327,365,1.8,368,2.358,399,2.249,407,1.552,409,1.181,442,3.612,506,2.276,516,2.236,531,0.656,532,3.205,690,2.807,730,1.536,742,2.009,752,0.738,757,0.772,808,2.942,824,2.166,836,1.552,837,2.064,845,4.883,850,3.229,858,1.838,859,1.838,861,1.411,990,2.61,992,2.358,1005,4.845,1031,1.311,1213,1.301,1214,0.906,1242,1.372,1244,4.29,1282,1.183,1310,2.714,1358,3.176,1408,2.975,1417,1.919,1440,2.434,1442,2.807,1443,1.301,1446,1.158,1481,1.21,1503,2.421,1529,1.8,1656,6.04,1660,1.673,1661,4.696,1662,4.111,1663,3.939,1671,3.939,1672,2.225,1680,6.366,1681,1.673,1682,1.673,1685,3.348,1686,2.498,1687,4.052,1688,3.348,1689,6.923,1690,5.112,1691,5.112,1692,5.112,1693,5.112,1694,5.112,1695,5.112,1696,5.112,1697,6.465,1698,5.112,1699,4.052,1700,4.052,1701,4.052,1702,4.052,1703,4.052,1704,4.052,1705,4.052,1706,4.052,1707,5.112,1708,5.881,1709,4.052,1710,2.498,1711,5.881,1712,7.077,1713,8.251,1714,4.052,1715,2.498,1716,4.052,1717,2.498,1718,4.052,1719,2.498,1720,4.052,1721,2.498,1722,4.859,1723,5.719,1724,4.052,1725,2.498,1726,2.807,1727,4.052,1728,2.498,1729,4.052,1730,4.859,1731,2.498,1732,2.498,1733,2.498,1734,3.348,1735,4.052,1736,4.052,1737,4.859,1738,2.498,1739,3.143,1740,4.052,1741,2.498,1742,5.077,1743,2.498,1744,4.052,1745,2.498,1746,4.859,1747,4.052,1748,4.052,1749,7.595,1750,2.498,1751,4.052,1752,4.052,1753,2.498,1754,3.627,1755,5.881,1756,3.348,1757,2.972,1758,2.498,1759,6.465,1760,4.052,1761,2.498,1762,3.627,1763,4.052,1764,2.498,1765,6.465,1766,4.052,1767,2.498,1768,2.517,1769,2.498,1770,2.498,1771,3.139,1772,2.064,1773,1.335,1774,2.064,1775,2.236,1776,2.236,1777,2.064,1778,1.673,1779,2.498,1780,2.498,1781,2.498,1782,4.741,1783,2.498,1784,2.498,1785,2.498,1786,2.498,1787,4.576,1788,2.498,1789,2.498,1790,5.112,1791,2.498,1792,2.498,1793,5.112,1794,2.498,1795,2.498,1796,2.498,1797,4.052,1798,4.052,1799,2.498,1800,2.498,1801,2.498,1802,2.498,1803,2.498,1804,4.052,1805,2.498,1806,2.498,1807,2.498,1808,2.498,1809,2.498,1810,5.881,1811,4.052,1812,2.498,1813,2.498,1814,3.627,1815,3.139,1816,4.052,1817,4.052,1818,2.498]],["title/interfaces/NgxCookieValue.html",[0,0.077,1730,4.055]],["body/interfaces/NgxCookieValue.html",[0,0.122,2,1.154,3,0.07,4,0.062,5,0.07,10,0.184,11,0.224,16,0.193,17,0.005,27,0.07,32,1.359,88,0.005,89,0.005,152,1.224,180,1.594,240,2.93,1730,7.409,1819,7.709,1820,7.709]],["title/directives/NgxCookiesFallBackComponent.html",[323,0.724,606,2.274]],["body/directives/NgxCookiesFallBackComponent.html",[3,0.065,4,0.057,5,0.065,10,0.171,11,0.215,17,0.005,19,0.225,27,0.065,32,0.996,72,3.336,88,0.004,89,0.004,90,0.679,96,0.896,106,2.321,109,1.285,187,0.869,205,0.532,211,6.295,229,0.882,323,1.267,325,1.727,331,1.588,371,2.798,542,3.399,596,3.071,606,3.977,757,2.211,1529,3.813,1712,7.752,1723,7.092,1821,8.584,1822,8.584,1823,7.158,1824,7.092,1825,5.332,1826,7.684,1827,7.158,1828,5.544]],["title/components/NgxCurrencyTableCellComponent.html",[109,0.735,563,2.377]],["body/components/NgxCurrencyTableCellComponent.html",[3,0.031,4,0.027,5,0.031,10,0.081,11,0.13,12,0.307,16,0.177,17,0.005,19,0.164,27,0.031,28,1,32,1.249,38,2.349,47,1.277,48,2.569,72,1.327,81,2.903,88,0.003,89,0.003,90,0.593,96,0.427,109,0.937,137,1.156,152,0.668,171,1.232,179,0.923,180,1.616,183,0.933,184,1.574,187,1.163,192,3.797,193,0.835,196,1.127,205,0.253,229,1.156,235,2.63,246,2.696,247,1.486,252,2.3,253,1.582,270,2.21,282,3.468,287,2.21,288,3.797,323,0.504,324,1.617,325,0.823,329,3.061,331,1.549,335,1.624,337,2.198,341,1.105,345,3.102,347,1.127,349,1.987,350,1.928,363,2.843,371,1.039,375,1.987,391,1.617,409,1.275,508,1.653,509,2.049,510,1.259,511,1.327,514,2.567,515,2.167,537,3.742,539,2.737,542,1.846,544,1.692,545,2.349,546,1.249,547,3.462,548,1.692,549,1.692,550,1.653,551,1.486,552,1.692,553,1.653,554,3.081,555,1.692,556,1.653,557,1.692,558,2.567,559,1.692,560,2.508,561,2.567,562,1.653,563,3.827,564,3.844,565,4.688,566,3.462,567,1.653,568,1.617,569,1.653,570,1.548,571,1.692,572,1.617,573,1.617,574,1.692,575,1.653,576,1.548,577,1.692,578,1.653,579,1.402,580,1.692,581,1.653,582,1.692,583,1.653,584,2.567,585,1.653,586,1.653,587,1.692,588,1.653,589,1.692,590,1.653,591,3.083,592,1.692,593,1.692,594,1.692,595,4.357,596,1.14,597,1.582,598,1.582,599,1.692,600,1.617,601,1.692,602,1.692,603,1.692,604,1.617,605,1.692,606,1.582,607,1.617,608,1.692,609,1.402,610,1.582,611,1.692,612,1.692,613,1.548,614,1.617,615,1.692,616,1.617,617,1.692,618,1.617,619,1.692,620,1.582,621,1.582,622,1.617,623,1.692,624,1.617,625,1.692,626,1.617,627,1.692,628,1.617,629,1.692,630,1.303,631,1.617,632,1.582,633,1.617,634,1.582,635,1.582,636,1.582,637,1.376,638,1.402,639,1.402,640,1.582,641,1.692,642,1.516,643,1.692,644,1.617,645,1.692,646,1.486,647,1.582,648,1.692,649,1.582,650,1.692,651,1.617,652,1.692,653,1.692,669,5.378,672,2.399,690,1.874,705,5.787,706,4.588,707,4.588,708,5.8,709,5.121,710,5.088,711,4.588,712,4.373,713,4.029,714,6.202,715,4.588,716,4.846,717,4.846,718,4.011,720,3.62,722,2.925,723,3.217,724,3.62,725,4.011,726,4.011,727,4.011,728,4.011,730,1.549,733,2.12,734,3.335,736,2.503,737,3.405,738,2.05,739,2.644,740,4.029,742,1.692,743,1.303,745,4.07,752,1.008,790,2.123,1031,2.557,1049,2.925,1118,1.824,1119,4.373,1120,2.386,1616,5.523,1829,5.178,1830,3.056,1831,6.256,1832,4.278,1833,4.278,1834,4.278,1835,4.278,1836,2.82,1837,2.82,1838,2.82,1839,3.413,1840,4.635,1841,4.278,1842,4.635,1843,3.413,1844,4.278,1845,5.178,1846,3.413,1847,5.178,1848,3.413,1849,5.178,1850,4.278,1851,3.413,1852,4.278,1853,3.413,1854,2.82,1855,2.82,1856,2.82,1857,3.413]],["title/directives/NgxCypressTagDirective.html",[323,0.724,607,2.324]],["body/directives/NgxCypressTagDirective.html",[3,0.061,4,0.054,5,0.061,10,0.161,11,0.207,16,0.193,17,0.005,19,0.217,27,0.061,32,0.939,44,1.916,47,1.829,72,2.623,88,0.004,89,0.004,90,0.64,179,1.825,182,2.857,184,1.526,187,1.088,205,0.501,229,0.832,323,1.222,325,1.628,329,2.446,335,2.599,364,2.721,371,2.054,607,3.923,692,3.428,699,4.552,722,5.586,724,6.266,742,4.444,988,4.527,1508,6.266,1858,9.346,1859,9.346,1860,6.75,1861,9.889,1862,8.284,1863,8.284,1864,6.75,1865,4.52,1866,6.75,1867,6.75]],["title/components/NgxDateTableCellComponent.html",[109,0.735,567,2.377]],["body/components/NgxDateTableCellComponent.html",[3,0.026,4,0.023,5,0.026,10,0.069,11,0.115,12,0.261,16,0.167,17,0.006,19,0.168,27,0.026,28,0.884,32,1.219,36,2.123,38,2.076,47,1.155,48,2.323,64,2.749,72,1.131,76,2.731,81,2.778,83,3.224,88,0.002,89,0.002,90,0.536,96,0.364,109,0.847,137,1.062,152,0.591,171,1.089,179,0.787,180,1.586,183,0.824,184,1.575,187,1.165,192,6.319,193,0.712,196,1.019,205,0.216,229,1.132,235,2.325,246,2.383,247,1.267,252,2.033,253,1.348,270,1.953,282,3.065,287,3.425,288,3.356,323,0.429,324,1.378,325,0.702,329,3.036,331,1.632,335,1.436,337,1.874,341,0.942,345,2.805,347,1.019,349,1.693,350,1.644,363,2.513,371,1.721,375,1.693,391,1.378,409,1.172,508,1.409,509,1.811,510,1.073,511,1.131,514,2.269,515,1.916,537,3.508,539,2.597,542,1.632,544,1.443,545,2.076,546,1.104,547,3.181,548,1.443,549,1.443,550,1.409,551,1.267,552,1.443,553,1.409,554,2.996,555,1.443,556,1.409,557,1.443,558,2.269,559,1.443,560,2.217,561,2.269,562,1.409,563,1.409,564,3.679,565,1.443,566,3.181,567,3.588,568,4.585,569,1.409,570,1.32,571,1.443,572,1.378,573,1.378,574,1.443,575,1.409,576,1.32,577,1.443,578,1.409,579,1.195,580,1.443,581,1.409,582,1.443,583,1.409,584,2.269,585,1.409,586,1.409,587,1.443,588,1.409,589,1.443,590,1.409,591,2.864,592,1.443,593,1.443,594,1.443,595,4.264,596,0.972,597,1.348,598,1.348,599,1.443,600,1.378,601,1.443,602,1.443,603,1.443,604,1.378,605,1.443,606,1.348,607,1.378,608,1.443,609,1.195,610,1.348,611,1.443,612,1.443,613,1.32,614,1.378,615,1.443,616,1.378,617,1.443,618,1.378,619,1.443,620,1.348,621,1.348,622,1.378,623,1.443,624,1.378,625,1.443,626,1.378,627,1.443,628,1.378,629,1.443,630,1.111,631,1.378,632,1.348,633,1.378,634,1.348,635,1.348,636,1.348,637,1.173,638,1.195,639,1.195,640,1.348,641,1.443,642,1.293,643,1.443,644,1.378,645,1.443,646,1.267,647,1.348,648,1.443,649,1.348,650,1.443,651,1.378,652,1.443,653,1.443,669,5.23,690,1.598,705,5.642,706,4.149,707,4.149,708,5.53,709,4.704,710,4.77,711,4.149,712,3.955,713,3.644,714,5.886,715,4.149,716,4.382,717,4.382,718,3.545,720,3.2,722,2.585,723,2.843,724,3.2,725,3.545,726,3.545,727,3.545,728,3.545,730,1.423,733,1.807,734,2.948,736,2.134,737,3.164,738,1.748,739,2.254,740,3.644,742,1.443,743,1.111,745,3.842,752,0.859,790,2.514,862,4.77,928,2.217,1031,2.397,1049,2.585,1118,1.555,1119,3.955,1120,2.034,1491,2.585,1616,5.178,1636,4.601,1830,2.605,1832,3.781,1833,3.781,1834,3.781,1835,3.781,1836,2.404,1837,2.404,1838,2.404,1840,4.097,1841,3.781,1842,4.097,1844,3.781,1850,3.781,1852,3.781,1854,2.404,1855,2.404,1856,2.404,1868,7.748,1869,5.658,1870,4.674,1871,8.617,1872,5.064,1873,7.406,1874,8.257,1875,8.027,1876,5.658,1877,4.577,1878,6.118,1879,4.577,1880,2.91,1881,2.91,1882,4.577,1883,2.91,1884,4.097,1885,2.91,1886,4.577,1887,2.91,1888,4.577,1889,2.91,1890,2.91,1891,2.91]],["title/directives/NgxDisplayContentComponent.html",[323,0.724,609,2.016]],["body/directives/NgxDisplayContentComponent.html",[3,0.062,4,0.054,5,0.062,10,0.162,11,0.208,12,0.808,16,0.146,17,0.005,19,0.178,27,0.062,28,1.966,32,0.945,88,0.004,89,0.004,90,0.852,96,0.85,136,3.622,164,6.018,184,1.405,187,1.091,203,3.231,205,0.504,229,0.837,287,3.835,323,1.227,325,1.638,331,1.552,335,2.608,371,2.923,509,3.556,531,1.783,596,3.001,609,3.414,610,3.852,680,4.122,777,4.015,1825,5.582,1892,9.365,1893,8.383,1894,6.79,1895,7.442,1896,8.314,1897,8.314,1898,4.994,1899,6.79]],["title/interfaces/NgxDisplayContentConfiguration.html",[0,0.077,1900,4.055]],["body/interfaces/NgxDisplayContentConfiguration.html",[0,0.11,2,1.044,3,0.063,4,0.056,5,0.063,10,0.166,11,0.211,12,0.849,16,0.219,17,0.005,19,0.222,27,0.09,28,1.347,29,1.473,68,2.329,88,0.004,89,0.004,114,2.486,169,5.762,205,0.518,278,1.659,509,3.74,609,2.864,745,3.458,1900,6.981,1901,6.974,1902,6.974,1903,9.451,1904,9.451,1905,9.451,1906,6.243,1907,4.332,1908,6.243,1909,6.243,1910,6.243,1911,9.451,1912,4.492,1913,6.243]],["title/directives/NgxDisplayContentDirective.html",[323,0.724,610,2.274]],["body/directives/NgxDisplayContentDirective.html",[3,0.024,4,0.021,5,0.024,10,0.062,11,0.105,12,0.635,16,0.193,17,0.006,19,0.185,27,0.024,28,0.812,29,0.79,32,1.314,34,1.897,37,2.238,42,1.512,44,1.845,47,1.076,49,2.103,57,1.795,61,1.984,68,2.018,72,1.017,73,0.917,74,2.211,83,1.139,88,0.002,89,0.002,90,0.248,96,0.829,102,2.085,109,1.369,114,2.52,135,0.833,137,1.355,139,1.074,162,3.173,174,1.223,179,0.707,180,0.986,182,1.451,183,0.757,184,1.332,187,1.147,191,1.362,193,1.478,194,1.838,196,1.338,203,2.05,205,0.194,206,1.223,229,1.127,236,3.948,267,1.436,269,1.918,270,2.251,278,0.622,286,3.257,287,1.795,304,0.64,323,0.621,325,0.631,329,1.242,331,1.66,335,1.319,347,1.581,358,2.612,362,1.436,371,1.28,388,1.625,396,2.296,398,1.992,399,2.489,403,2.63,409,1.556,422,1.34,432,2.612,442,3.248,456,2.896,461,1.398,483,4.433,509,1.664,522,2.161,531,1.385,536,1.186,539,2.875,542,1.88,543,1.949,546,1.457,591,3.361,609,1.074,610,3.067,664,3.516,680,2.615,692,1.329,701,3.965,722,3.993,730,0.933,733,2.612,742,2.995,743,2.527,745,2.995,752,1.954,757,0.808,760,3.276,777,2.481,790,2.707,828,3.961,831,1.212,852,2.63,858,3.002,859,3.002,861,1.478,862,1.685,893,1.571,900,3.474,928,2.926,936,3.168,957,2.161,986,2.05,988,3.6,990,1.685,1010,3.396,1054,2.979,1088,2.376,1098,1.478,1099,2.376,1129,1.398,1130,1.625,1153,1.625,1211,1.162,1242,2.309,1251,3.396,1257,1.186,1276,5.536,1304,2.342,1310,2.816,1312,6.177,1330,1.571,1380,1.918,1406,3.765,1467,1.829,1481,2.037,1497,3.168,1531,1.918,1545,1.186,1546,2.526,1773,3.778,1782,1.918,1814,4.721,1825,3.276,1878,2.161,1893,8.499,1898,2.526,1900,2.161,1906,5.408,1907,4.112,1908,2.342,1909,5.925,1910,6.652,1912,4.553,1913,4.721,1914,6.358,1915,2.616,1916,3.474,1917,7.431,1918,5.274,1919,6.619,1920,4.357,1921,5.274,1922,5.274,1923,5.274,1924,6.041,1925,5.274,1926,4.206,1927,4.206,1928,4.206,1929,4.206,1930,4.206,1931,6.652,1932,4.206,1933,2.616,1934,2.616,1935,2.616,1936,3.976,1937,2.616,1938,2.616,1939,4.206,1940,4.206,1941,2.616,1942,6.619,1943,4.357,1944,4.206,1945,2.616,1946,4.206,1947,2.616,1948,3.868,1949,2.616,1950,2.616,1951,4.679,1952,5.274,1953,2.616,1954,4.206,1955,4.206,1956,2.616,1957,2.616,1958,2.816,1959,4.206,1960,2.616,1961,2.616,1962,2.94,1963,2.616,1964,2.616,1965,2.816,1966,3.519,1967,2.616,1968,1.297,1969,2.161,1970,4.721,1971,2.616,1972,2.616,1973,2.616,1974,2.616,1975,2.746,1976,6.041,1977,2.616,1978,2.616,1979,2.616,1980,2.616,1981,2.616,1982,1.752,1983,2.616,1984,1.752,1985,2.616,1986,1.685,1987,2.616,1988,2.616,1989,2.616,1990,2.616,1991,2.616,1992,2.616,1993,2.616,1994,2.161,1995,2.616,1996,2.616,1997,2.616,1998,4.206,1999,2.616,2000,2.616,2001,2.616,2002,2.342,2003,1.685,2004,2.342,2005,2.161,2006,2.161,2007,2.161,2008,2.616,2009,2.616,2010,2.616,2011,2.616,2012,2.616,2013,2.616,2014,2.616,2015,2.616,2016,2.616,2017,4.206,2018,4.206,2019,2.616,2020,2.616,2021,2.616,2022,5.274,2023,2.026,2024,6.041,2025,2.616,2026,1.685,2027,1.571,2028,2.616]],["title/directives/NgxFormsErrorAbstractComponent.html",[323,0.724,613,2.226]],["body/directives/NgxFormsErrorAbstractComponent.html",[3,0.061,4,0.054,5,0.061,10,0.161,11,0.207,17,0.005,19,0.217,21,4.048,27,0.061,28,1.851,32,1.152,36,3.36,47,1.376,51,5.33,68,3.302,70,5.998,72,2.619,86,6.569,88,0.004,89,0.004,90,0.639,184,1.573,187,1.134,205,0.5,229,1.02,323,1.221,325,1.626,331,1.737,335,2.596,371,2.051,409,1.636,462,5.276,613,3.754,692,4.869,822,6.41,1592,4.328,2029,6.74,2030,8.018,2031,8.276,2032,6.74,2033,6.74,2034,5.568]],["title/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.077,2035,4.055]],["body/interfaces/NgxFormsErrorConfigurationOptions.html",[0,0.098,2,0.93,3,0.057,4,0.05,5,0.057,7,3.357,10,0.148,11,0.197,12,0.859,16,0.215,17,0.005,19,0.206,27,0.079,37,2.066,68,3.338,76,2.901,86,7.33,88,0.004,89,0.004,90,0.746,96,0.778,106,2.127,109,1.472,190,2.109,194,2.761,205,0.461,229,0.97,236,4.205,278,1.478,287,3.357,323,1.161,409,1.437,417,6.686,425,6.686,434,6.093,554,2.937,613,2.818,672,3.645,722,4.444,820,2.806,841,3.811,870,5.066,1244,4.444,1481,4.396,1529,4.44,1965,5.269,2035,6.499,2036,6.213,2037,9.564,2038,6.093,2039,7.042,2040,4.725,2041,9.074,2042,9.074]],["title/directives/NgxFormsErrorsDirective.html",[323,0.724,614,2.324]],["body/directives/NgxFormsErrorsDirective.html",[2,0.399,3,0.024,4,0.021,5,0.024,10,0.064,11,0.107,12,0.802,16,0.199,17,0.006,19,0.204,20,3.133,21,1.602,26,1.389,27,0.024,28,1.741,29,1.068,32,1.192,34,1.531,36,1.001,37,1.122,42,1.531,44,1.732,47,1.589,48,2.194,49,2.044,51,1.718,55,1.575,61,1.601,68,3.13,70,6.277,73,1.874,83,1.86,86,6.732,88,0.002,89,0.002,90,0.506,96,0.669,106,1.155,107,4.48,109,1.394,135,2.13,137,1.106,144,1.425,151,1.657,152,0.92,162,1.095,174,0.776,179,0.721,180,0.872,182,1.474,183,0.769,184,1.115,187,1.137,193,1.307,194,2.17,196,1.284,203,2.077,205,0.198,206,1.243,229,1.056,236,1.236,266,2.224,271,0.984,278,0.634,304,0.653,323,1.184,325,0.643,329,1.261,331,1.682,347,1.1,358,2.654,363,2.345,371,2.442,397,4.467,399,2.392,409,1.662,412,2.751,419,6.429,425,4.732,429,2.751,434,4.138,456,1.465,483,1.786,506,0.877,509,1.056,510,1.575,531,1.403,539,2.424,543,1.236,546,1.612,554,1.729,613,2.423,614,2.023,664,3.555,680,3.029,698,3.735,699,2.17,722,2.413,730,1.726,743,2.723,745,4.083,752,1.261,777,3.196,852,1.86,858,2.771,859,2.771,863,1.465,929,3.529,932,3.309,936,3.209,957,2.204,986,2.374,1031,1.977,1035,1.389,1037,1.956,1054,3.018,1058,4.138,1088,3.018,1098,3.776,1099,2.413,1105,3.309,1113,5.177,1114,3.309,1129,3.265,1130,1.657,1145,2.751,1211,1.185,1244,1.507,1306,2.224,1312,2.066,1330,3.209,1358,2.654,1382,1.956,1417,4.271,1481,3.238,1497,3.209,1508,1.865,1529,2.714,1531,5.23,1545,3.032,1546,2.566,1562,2.066,1579,2.066,1582,2.204,1584,2.204,1601,3.354,1737,3.529,1768,1.657,1772,2.204,1878,2.204,1884,3.824,1898,2.566,1931,5.469,1966,1.263,1986,1.718,2003,1.718,2004,2.388,2030,6.384,2034,5.522,2035,4.414,2039,5.469,2043,2.667,2044,6.109,2045,3.481,2046,7.783,2047,5.343,2048,5.343,2049,7.132,2050,5.343,2051,5.343,2052,4.272,2053,4.272,2054,4.272,2055,2.667,2056,4.272,2057,2.667,2058,4.272,2059,2.667,2060,6.684,2061,7.132,2062,4.272,2063,2.667,2064,2.667,2065,2.667,2066,2.667,2067,2.667,2068,3.578,2069,5.343,2070,2.667,2071,4.272,2072,2.667,2073,4.272,2074,2.667,2075,2.667,2076,2.667,2077,2.667,2078,4.272,2079,2.667,2080,6.684,2081,4.272,2082,2.667,2083,2.667,2084,2.667,2085,2.667,2086,3.824,2087,2.667,2088,2.667,2089,2.204,2090,1.956,2091,1.956,2092,2.667,2093,2.388,2094,2.388,2095,1.865,2096,2.667,2097,2.066,2098,2.667,2099,3.824,2100,2.667,2101,4.272,2102,4.272,2103,5.343,2104,2.667,2105,2.667,2106,2.667,2107,2.667,2108,2.667,2109,2.667,2110,2.667,2111,2.667,2112,2.667,2113,2.667,2114,2.667,2115,5.343,2116,2.667,2117,4.272,2118,2.667,2119,2.667,2120,2.667,2121,5.343,2122,3.824,2123,5.469,2124,1.956,2125,2.667,2126,2.667,2127,2.667,2128,2.667,2129,2.667,2130,7.132,2131,2.667,2132,4.272,2133,2.667,2134,2.667,2135,2.667,2136,2.667,2137,2.667,2138,2.667,2139,5.343,2140,2.667,2141,4.272,2142,3.824,2143,6.684,2144,1.786,2145,2.667,2146,2.667,2147,2.667]],["title/interfaces/NgxHasCookieConfiguration.html",[0,0.077,1828,3.801]],["body/interfaces/NgxHasCookieConfiguration.html",[0,0.121,2,1.148,3,0.07,4,0.061,5,0.07,10,0.183,11,0.224,12,0.804,16,0.192,17,0.005,27,0.07,88,0.005,89,0.005,152,1.298,536,4.423,1648,5.362,1656,6.28,1680,4.94,1828,6.926,2148,7.67]],["title/directives/NgxHasCookieDirective.html",[323,0.724,616,2.324]],["body/directives/NgxHasCookieDirective.html",[3,0.031,4,0.027,5,0.031,10,0.081,11,0.129,12,0.463,16,0.203,17,0.006,19,0.215,27,0.031,32,1.264,42,0.971,44,1.731,47,1.527,48,3.465,49,2.037,55,2.565,61,1.543,72,1.317,73,2.624,74,1.72,75,3.448,83,2.241,88,0.003,89,0.003,90,0.321,96,0.424,109,1.294,133,1.972,137,1.238,139,1.391,162,1.391,174,0.986,179,0.916,182,1.776,183,0.927,184,1.351,187,1.168,191,2.681,194,1.567,196,1.347,205,0.252,206,1.498,229,1.065,236,4.302,252,2.287,266,1.764,271,1.25,278,0.806,304,0.829,323,1.245,325,0.817,329,1.52,331,1.568,335,1.615,347,1.587,354,2.038,362,1.86,365,2.287,368,1.972,371,1.895,396,2.711,398,3.543,399,2.53,403,3.028,409,1.439,422,1.984,429,2.182,432,3.199,438,3.394,442,2.61,454,1.914,461,2.752,497,1.86,531,1.636,536,2.825,539,2.797,543,1.57,606,1.57,616,2.439,680,1.68,692,1.721,730,1.142,743,2.378,745,4.37,748,2.369,752,2.054,757,1.047,790,2.114,808,1.208,850,1.86,852,1.475,858,1.537,859,1.537,986,2.42,988,3.816,1010,4.011,1031,1.096,1054,3.518,1098,3.518,1099,2.909,1129,1.811,1130,2.105,1211,1.505,1358,3.869,1497,3.741,1531,5.778,1545,2.825,1546,3.093,1579,2.624,1656,3.316,1680,5.074,1685,6.509,1712,6.694,1723,6.181,1825,3.869,1828,4.824,1865,2.269,1958,2.269,1966,3.295,1968,1.68,1975,1.764,1986,2.182,2003,2.182,2040,2.035,2068,4.171,2086,4.609,2097,2.624,2122,3.033,2123,5.575,2124,2.485,2149,9.673,2150,9.673,2151,3.388,2152,5.149,2153,3.6,2154,5.149,2155,5.149,2156,8.642,2157,4.354,2158,6.228,2159,4.863,2160,5.087,2161,6.957,2162,6.957,2163,4.863,2164,5.149,2165,5.149,2166,3.388,2167,3.42,2168,3.388,2169,3.388,2170,5.149,2171,5.149,2172,3.388,2173,3.388,2174,3.988,2175,3.388,2176,6.228,2177,3.388,2178,3.388,2179,3.388,2180,3.388,2181,3.388,2182,5.149,2183,3.388,2184,3.388,2185,3.388,2186,3.6,2187,3.388,2188,3.388,2189,3.388,2190,2.624,2191,2.799,2192,3.6,2193,3.388,2194,5.149,2195,2.624,2196,3.6,2197,5.149,2198,3.199,2199,2.369,2200,3.199,2201,1.86,2202,3.388,2203,3.388,2204,3.388,2205,1.811,2206,3.388,2207,3.388,2208,3.388,2209,3.388,2210,3.388,2211,3.388,2212,3.388,2213,1.972,2214,2.035,2215,3.388,2216,3.388,2217,5.149,2218,3.388]],["title/directives/NgxHasFeatureDirective.html",[323,0.724,618,2.324]],["body/directives/NgxHasFeatureDirective.html",[3,0.03,4,0.027,5,0.03,10,0.08,11,0.128,16,0.203,17,0.006,19,0.195,26,1.744,27,0.03,29,1.114,32,1.243,38,2.315,42,1.463,47,1.793,48,3.945,49,1.814,55,2.55,61,1.53,72,1.983,73,2.168,74,1.705,83,2.692,88,0.003,89,0.003,90,0.317,96,0.419,133,1.949,139,1.375,174,0.974,179,0.905,183,0.919,184,1.461,187,1.192,191,2.658,196,1.114,205,0.249,206,1.485,229,1.17,236,3.449,238,2.97,271,1.235,278,0.797,304,0.819,323,1.157,325,0.808,329,1.507,331,1.354,335,1.601,347,1.412,362,1.839,368,1.949,371,2.265,396,2.692,398,3.525,399,2.518,403,3.01,409,1.605,422,1.97,432,3.17,438,3.376,442,2.594,454,1.892,531,1.624,539,2.787,543,1.552,618,2.417,730,2.009,743,2.842,745,4.356,748,2.341,752,2.042,790,2.099,852,1.458,975,2.802,986,2.403,988,4.441,1010,3.982,1054,3.493,1098,3.493,1099,2.883,1129,1.79,1130,2.08,1211,1.488,1247,2.012,1261,6.945,1263,6.476,1264,5.713,1265,5.108,1291,4.216,1497,3.714,1545,2.805,1546,3.065,1777,7.574,1962,3.568,1966,3.525,1968,1.66,1975,1.744,1986,3.982,2003,2.157,2068,3.418,2095,3.568,2097,2.594,2157,4.323,2159,4.323,2160,5.066,2163,4.834,2167,3.395,2174,3.953,2186,3.568,2192,4.323,2196,2.341,2198,3.17,2199,2.341,2200,3.17,2201,1.839,2213,1.949,2214,2.012,2219,8.82,2220,8.82,2221,3.349,2222,6.19,2223,2.53,2224,3.743,2225,7.301,2226,5.459,2227,4.535,2228,7.443,2229,7.443,2230,7.443,2231,6.183,2232,4.535,2233,6.183,2234,5.104,2235,5.104,2236,5.104,2237,3.349,2238,3.349,2239,3.349,2240,4.535,2241,3.349,2242,3.349,2243,3.349,2244,3.349,2245,5.459,2246,3.349,2247,3.349,2248,3.349,2249,3.349,2250,3.349,2251,3.349,2252,3.349,2253,3.349,2254,2.594,2255,2.998,2256,2.998,2257,2.767,2258,5.104,2259,3.349,2260,5.104,2261,3.349,2262,3.349,2263,3.349,2264,4.535,2265,3.349,2266,5.071,2267,2.998,2268,3.349,2269,3.349,2270,4.216,2271,3.743,2272,3.743]],["title/pipes/NgxHasFeaturePipe.html",[174,1.428,2273,4.394]],["body/pipes/NgxHasFeaturePipe.html",[3,0.041,4,0.036,5,0.041,11,0.113,12,0.571,16,0.181,17,0.006,19,0.22,26,2.349,27,0.041,29,1.194,32,1.294,34,1.82,38,2.88,42,1.293,44,1.044,48,3.018,49,1.973,55,1.664,57,1.925,61,2.203,73,1.582,81,1.483,83,1.964,88,0.003,89,0.003,90,0.428,96,0.92,109,0.951,139,1.853,162,1.853,174,2.705,176,2.291,179,1.22,180,1.302,183,0.813,184,1.247,185,2.411,187,1.128,193,1.554,196,1.647,203,1.753,204,3.394,205,0.335,206,1.312,229,0.783,241,1.753,271,1.664,278,1.073,300,3.088,304,1.104,331,1.377,347,1.57,396,2.765,398,4.243,399,2.422,403,3.199,409,1.698,422,2.023,429,2.906,438,2.88,442,3.361,454,2.549,531,1.185,543,2.943,723,3.945,730,1.934,733,3.945,752,2.17,760,3.945,852,1.964,946,2.477,975,4.379,978,3.945,986,1.753,1005,3.815,1054,4.926,1098,4.749,1099,3.587,1137,3.587,1145,2.906,1190,3.309,1211,2.004,1247,2.71,1263,6.587,1264,7.204,1291,7.204,1417,3.778,1968,2.237,2068,4.253,2160,5.776,2167,3.487,2198,3.945,2200,3.945,2213,2.626,2214,2.71,2220,8.435,2222,5.685,2225,5.685,2226,4.657,2240,3.309,2254,3.495,2273,5.685,2274,8.435,2275,4.512,2276,4.512,2277,4.512,2278,5.246,2279,4.512,2280,6.165,2281,6.351,2282,4.512,2283,5.685,2284,5.685,2285,4.512,2286,4.512,2287,4.512,2288,3.394,2289,4.919,2290,4.919,2291,6.589,2292,5.246,2293,4.512,2294,4.512,2295,3.727,2296,3.727,2297,5.246,2298,5.246,2299,3.487,2300,5.246,2301,3.495,2302,3.495,2303,4.512,2304,6.351,2305,3.727,2306,3.309,2307,3.727,2308,3.727,2309,3.022]],["title/directives/NgxHasFocusDirective.html",[323,0.724,620,2.274]],["body/directives/NgxHasFocusDirective.html",[3,0.052,4,0.045,5,0.052,10,0.135,11,0.186,12,0.51,15,2.329,16,0.16,17,0.006,19,0.149,27,0.052,29,1.313,32,0.789,34,1.625,44,1.312,47,1.514,57,3.166,81,2.718,88,0.004,89,0.004,90,0.538,96,0.929,101,4.247,106,2.005,122,3.335,128,3.295,137,1.368,180,0.925,182,1.956,183,1.336,184,1.459,187,1.154,193,1.387,196,1.681,205,0.421,229,0.699,323,1.294,325,1.368,336,4.19,345,3.678,347,1.681,355,5.44,360,4.465,370,3.406,397,3.83,409,1.355,506,2.718,546,2.115,596,2.761,620,3.437,730,1.646,752,2.19,778,6.533,780,5.44,783,6.791,784,5.872,785,5.44,787,7.23,790,2.518,791,6.46,794,5.44,798,5.44,799,5.44,1146,6.791,2310,9.646,2311,9.646,2312,5.077,2313,7.849,2314,7.418,2315,7.418,2316,5.671,2317,5.671,2318,5.671]],["title/directives/NgxHasFocusDragAndDropAbstractDirective.html",[323,0.724,621,2.274]],["body/directives/NgxHasFocusDragAndDropAbstractDirective.html",[3,0.048,4,0.042,5,0.048,10,0.125,11,0.176,12,0.796,15,2.144,16,0.171,17,0.006,19,0.137,27,0.048,29,1.051,32,0.977,34,1.497,47,1.433,49,1.127,57,3.386,81,2.608,88,0.004,89,0.004,90,0.495,96,0.879,101,4.111,106,1.899,122,3.267,128,3.12,133,3.039,137,1.313,180,0.852,182,1.801,183,1.265,184,1.596,187,1.177,193,1.278,196,1.642,205,0.388,229,0.866,323,1.252,325,1.26,331,1.37,336,3.967,345,3.482,347,1.786,355,5.15,360,4.136,370,3.136,397,3.677,409,1.282,506,2.608,531,2.084,546,2.047,596,2.65,621,3.254,730,1.558,752,2.073,768,8.082,777,3.89,778,6.427,780,5.15,781,7.596,782,7.596,783,6.573,784,5.683,785,5.15,787,7.063,791,6.107,794,5.15,798,5.15,799,5.15,996,4.674,1146,6.146,1344,2.529,2040,3.136,2190,4.044,2191,4.314,2312,4.674,2319,9.783,2320,7.023,2321,7.023,2322,5.222,2323,5.222,2324,5.222,2325,5.222,2326,5.222,2327,5.222,2328,4.044,2329,4.674,2330,7.023,2331,7.023,2332,4.674]],["title/directives/NgxHasPermissionDirective.html",[323,0.724,622,2.324]],["body/directives/NgxHasPermissionDirective.html",[3,0.031,4,0.028,5,0.031,10,0.082,11,0.131,16,0.204,17,0.006,19,0.198,26,1.8,27,0.031,29,1.13,32,1.233,38,2.371,42,1.498,47,1.808,48,3.964,49,1.832,55,2.592,61,1.567,72,2.032,73,2.211,74,1.746,83,2.744,88,0.003,89,0.003,90,0.328,96,0.433,133,2.012,139,1.42,174,1.006,179,0.935,183,0.941,184,1.47,187,1.192,191,2.722,196,1.135,205,0.257,206,1.521,229,1.168,236,3.497,238,3.043,271,1.275,278,0.822,304,0.846,323,1.172,325,0.834,329,1.544,331,1.371,335,1.64,347,1.43,362,1.898,368,2.012,371,2.297,396,2.744,398,3.575,399,2.524,403,3.059,409,0.955,422,2.009,432,3.247,438,3.424,442,2.637,454,1.953,531,1.656,539,2.668,543,1.602,622,2.476,730,2.024,743,2.882,745,4.088,748,2.417,752,2.075,790,2.14,852,1.505,986,2.45,988,4.47,1010,4.06,1054,3.561,1098,1.953,1099,2.953,1129,1.847,1130,2.147,1211,1.536,1247,2.076,1266,7.014,1268,6.836,1269,5.806,1270,5.208,1292,5.208,1497,3.787,1545,1.568,1546,3.14,1777,7.624,1962,2.417,1966,3.575,1968,1.714,1975,1.8,1986,4.06,2003,2.226,2095,3.655,2157,4.407,2159,4.407,2160,5.122,2163,4.913,2167,3.462,2174,4.049,2186,3.655,2192,4.407,2196,2.417,2198,3.247,2199,2.417,2200,3.247,2201,1.898,2213,2.012,2214,2.076,2219,8.824,2223,2.592,2224,3.834,2226,4.623,2227,4.623,2232,4.623,2240,4.623,2245,5.535,2254,2.677,2255,3.094,2256,3.094,2257,2.856,2264,4.623,2266,5.154,2267,3.094,2270,4.319,2271,3.834,2272,3.834,2333,8.824,2334,3.457,2335,5.228,2336,7.381,2337,7.548,2338,7.548,2339,7.548,2340,6.305,2341,6.305,2342,5.228,2343,5.228,2344,5.228,2345,3.457,2346,3.457,2347,3.457,2348,3.457,2349,3.457,2350,3.457,2351,3.457,2352,3.457,2353,3.457,2354,4.68,2355,3.457,2356,3.457,2357,3.457,2358,3.457,2359,3.457,2360,5.228,2361,3.457,2362,5.228,2363,3.457,2364,3.457,2365,3.457,2366,3.457,2367,3.457,2368,3.457]],["title/pipes/NgxHasPermissionPipe.html",[174,1.428,2369,4.394]],["body/pipes/NgxHasPermissionPipe.html",[3,0.041,4,0.036,5,0.041,11,0.113,12,0.57,16,0.181,17,0.006,19,0.22,26,2.345,27,0.041,29,1.193,32,1.293,34,1.818,38,2.876,42,1.291,44,1.042,48,3.015,49,1.972,55,1.661,57,1.922,61,2.2,73,1.579,81,1.48,83,1.96,88,0.003,89,0.003,90,0.427,96,0.919,109,0.949,139,1.849,162,1.849,174,2.704,176,2.287,179,1.217,180,1.3,183,0.811,184,1.246,185,2.406,187,1.128,193,1.552,196,1.646,203,1.75,204,3.389,205,0.334,206,1.31,229,0.782,241,1.75,271,1.661,278,1.071,300,3.087,304,1.102,331,1.376,347,1.569,396,2.761,398,4.241,399,2.421,403,3.196,409,1.697,422,2.021,429,2.9,438,2.876,442,3.359,454,2.544,531,1.183,543,2.938,723,3.94,730,1.933,733,3.94,752,2.168,760,3.94,852,1.96,946,2.472,975,4.376,978,3.94,986,1.75,1005,3.809,1054,4.923,1098,4.745,1099,3.582,1137,3.582,1145,2.9,1190,3.302,1211,2,1247,2.705,1268,6.908,1269,7.199,1292,7.199,1417,3.774,1968,2.233,2068,4.247,2160,5.773,2167,3.482,2198,3.94,2200,3.94,2213,2.621,2214,2.705,2226,4.651,2240,3.302,2254,3.488,2274,8.432,2278,5.239,2280,6.16,2283,5.677,2284,5.677,2288,3.389,2289,4.912,2290,4.912,2291,6.583,2292,5.239,2295,3.72,2296,3.72,2297,5.239,2298,5.239,2299,3.482,2300,5.239,2301,3.488,2302,3.488,2305,3.72,2306,3.302,2307,3.72,2308,3.72,2309,3.016,2333,8.432,2336,5.677,2354,5.677,2369,5.677,2370,4.503,2371,4.503,2372,4.503,2373,4.503,2374,6.342,2375,4.503,2376,4.503,2377,4.503,2378,4.503,2379,4.503,2380,4.503,2381,4.503,2382,4.503,2383,6.342]],["title/classes/NgxI18nAbstractService.html",[90,0.465,2384,4.055]],["body/classes/NgxI18nAbstractService.html",[3,0.069,4,0.06,5,0.069,10,0.18,17,0.005,27,0.069,44,2.047,88,0.005,89,0.005,90,0.714,92,4.524,96,0.943,99,5.149,106,2.036,184,1.178,187,0.914,196,1.357,380,3.703,596,3.138,752,2.774,808,2.685,818,7.276,842,5.834,845,6.619,862,4.851,2384,7.309,2385,8.848,2386,7.532,2387,7.532]],["title/interfaces/NgxI18nConfiguration.html",[0,0.077,2388,3.801]],["body/interfaces/NgxI18nConfiguration.html",[0,0.093,2,0.883,3,0.054,4,0.047,5,0.077,10,0.141,11,0.19,12,0.848,16,0.198,17,0.006,27,0.054,32,1.058,34,2.18,37,1.549,88,0.004,89,0.004,96,0.738,102,2.923,152,1.312,180,1.241,200,4.569,203,2.957,229,1.163,269,5.579,270,3.798,287,3.247,363,4.177,409,1.389,438,4.036,680,3.772,845,6.318,862,4.899,1035,3.961,1186,5.318,1257,4.036,1396,4.427,1446,3.525,1554,6.285,1659,5.27,1667,4.427,1757,5.579,2280,5.579,2388,5.892,2389,5.896,2390,5.896,2391,7.352,2392,9.909,2393,8.899,2394,7.352,2395,7.966,2396,6.285,2397,6.81,2398,6.81,2399,8.444,2400,6.285,2401,4.726,2402,7.607,2403,6.526,2404,7.607,2405,6.81,2406,5.731,2407,7.607,2408,7.607,2409,6.81,2410,7.607,2411,7.607,2412,6.285]],["title/components/NgxI18nEmptyComponent.html",[109,0.735,569,2.377]],["body/components/NgxI18nEmptyComponent.html",[3,0.048,4,0.043,5,0.048,17,0.005,19,0.14,27,0.048,28,1.374,47,1.452,55,2.624,64,5.137,88,0.004,89,0.004,90,0.505,96,0.666,106,1.923,109,1.334,179,1.439,180,1.675,182,2.454,205,0.395,247,2.318,253,2.467,323,0.786,324,2.522,325,1.284,329,3.115,391,2.522,508,2.579,509,2.815,510,1.963,511,2.069,514,3.528,515,2.978,537,4.343,539,1.723,544,2.64,545,3.227,546,1.716,547,4.241,548,2.64,549,2.64,550,2.579,551,2.318,552,2.64,553,2.579,554,3.249,555,2.64,556,2.579,557,2.64,558,3.528,559,2.64,560,3.446,561,3.528,562,2.579,563,2.579,564,3.723,565,2.64,566,4.241,567,2.579,568,2.522,569,4.143,570,3.634,571,2.64,572,2.522,573,2.522,574,2.64,575,2.579,576,2.415,577,2.64,578,2.579,579,2.186,580,2.64,581,2.579,582,2.64,583,2.579,584,3.528,585,2.579,586,2.579,587,2.64,588,2.579,589,2.64,590,2.579,591,2.186,592,2.64,593,2.64,594,2.64,595,2.365,596,1.778,597,2.467,598,2.467,599,2.64,600,2.522,601,2.64,602,2.64,603,2.64,604,2.522,605,2.64,606,2.467,607,2.522,608,2.64,609,2.186,610,2.467,611,2.64,612,2.64,613,2.415,614,2.522,615,2.64,616,2.522,617,2.64,618,2.522,619,2.64,620,2.467,621,2.467,622,2.522,623,2.64,624,2.522,625,2.64,626,2.522,627,2.64,628,2.522,629,2.64,630,2.033,631,2.522,632,2.467,633,2.522,634,2.467,635,2.467,636,2.467,637,2.146,638,2.186,639,2.186,640,2.467,641,2.64,642,2.365,643,2.64,644,2.522,645,2.64,646,2.318,647,2.467,648,2.64,649,2.467,650,2.64,651,2.522,652,2.64,653,2.64,2413,5.324,2414,5.324,2415,7.115,2416,5.878,2417,7.115]],["title/injectables/NgxI18nLoadingService.html",[291,1.428,2418,3.801]],["body/injectables/NgxI18nLoadingService.html",[3,0.036,4,0.032,5,0.036,10,0.095,11,0.145,12,0.614,16,0.172,17,0.006,19,0.197,27,0.036,32,1.162,34,2.155,41,2.742,44,2.044,47,1.182,49,1.945,61,2.502,66,2.572,73,1.39,88,0.003,89,0.003,90,0.376,96,0.941,114,3.522,122,2.928,128,3.926,135,2.547,137,1.323,152,1.032,180,1.116,183,1.043,184,1.55,187,1.127,193,1.673,196,1.44,205,0.294,229,1.029,291,1.684,293,1.692,300,2.993,304,0.97,305,3.168,331,1.662,347,1.231,363,2.177,377,1.921,399,2.329,422,2.66,438,2.626,442,3.132,461,2.119,462,3.862,502,5.182,506,1.903,532,3.39,543,2.682,570,2.626,730,1.284,808,2.064,820,2.745,850,2.177,861,2.24,868,2.553,946,3.178,1005,3.477,1138,3.728,1213,2.065,1214,1.437,1257,2.626,1282,1.878,1397,4.782,1503,3.954,1659,4.39,1667,5.825,1773,3.094,1951,4.484,2144,4.579,2167,2.177,2400,4.782,2403,5.513,2418,5.296,2419,7.755,2420,7.755,2421,3.965,2422,6.562,2423,6.837,2424,6.837,2425,6.837,2426,6.837,2427,6.837,2428,6.837,2429,5.789,2430,5.789,2431,7.518,2432,5.789,2433,7.518,2434,5.789,2435,3.965,2436,4.484,2437,5.789,2438,6.897,2439,3.965,2440,5.182,2441,3.965,2442,5.182,2443,5.789,2444,3.965,2445,5.789,2446,7.474,2447,3.965,2448,5.789,2449,3.965,2450,5.789,2451,3.965,2452,4.782,2453,3.965,2454,5.789,2455,5.789,2456,5.789,2457,5.789,2458,5.789,2459,5.789,2460,5.789,2461,5.789,2462,5.789,2463,5.789,2464,3.965,2465,3.965,2466,3.965,2467,3.965,2468,5.789,2469,2.772,2470,3.965,2471,2.908,2472,3.549,2473,3.965,2474,3.965,2475,5.789,2476,6.837,2477,2.065,2478,3.965,2479,3.276,2480,3.549,2481,3.549,2482,3.276,2483,3.965,2484,3.965]],["title/classes/NgxI18nMultiTranslationHttpLoader.html",[90,0.465,2485,4.394]],["body/classes/NgxI18nMultiTranslationHttpLoader.html",[3,0.04,4,0.035,5,0.056,10,0.104,11,0.155,12,0.391,16,0.178,17,0.006,19,0.242,27,0.04,32,1.091,34,1.773,36,2.701,37,1.625,38,1.971,42,2.248,44,2.05,49,2.041,61,1.303,68,2.066,83,1.892,88,0.004,89,0.003,90,0.412,92,2.61,96,0.774,106,1.672,114,2.567,118,2.7,134,2.7,135,1.97,152,1.07,180,0.709,183,1.114,184,1.126,187,1.006,193,1.063,195,3.187,196,0.783,205,0.323,206,1.799,229,0.967,266,2.263,300,2.224,304,1.063,305,3.991,331,1.649,353,4.142,388,2.7,399,2.37,409,1.315,414,3.366,456,2.386,461,2.323,531,1.142,536,1.971,554,1.406,570,1.971,760,2.7,808,2.955,845,4.142,849,2.61,850,3.396,852,1.892,861,2.455,862,3.983,946,2.386,1041,2.529,1166,3.187,1172,3.89,1186,3.038,1211,1.931,1228,3.59,1244,3.493,1274,3.89,1282,2.058,1307,2.058,1344,2.105,1417,3.715,1446,2.014,1455,3.038,1503,3.41,1651,5.253,1659,5.362,1667,5.606,1756,3.59,1757,4.536,1774,5.948,1948,4.536,2027,3.715,2045,3.749,2099,3.89,2144,2.911,2388,5.577,2397,5.536,2398,3.89,2400,3.59,2403,5.752,2405,3.89,2412,5.109,2416,3.59,2418,5.577,2422,5.033,2436,3.366,2442,5.536,2446,6.445,2469,3.038,2479,3.59,2480,3.89,2481,3.89,2485,5.536,2486,8.614,2487,8.614,2488,4.346,2489,4.323,2490,6.185,2491,7.2,2492,9.059,2493,7.2,2494,7.2,2495,5.536,2496,5.536,2497,4.346,2498,6.185,2499,6.185,2500,4.346,2501,5.536,2502,4.346,2503,6.185,2504,4.346,2505,6.185,2506,4.346,2507,5.536,2508,6.185,2509,3.59,2510,5.536,2511,3.89,2512,4.346,2513,4.346,2514,3.89,2515,3.89,2516,4.346,2517,4.346,2518,4.346,2519,4.346,2520,4.346,2521,8.289,2522,4.346,2523,4.346,2524,4.346,2525,4.346,2526,3.89,2527,3.89,2528,6.185,2529,4.346,2530,6.185,2531,4.346,2532,3.038,2533,3.89,2534,4.346,2535,4.346,2536,4.346,2537,3.366,2538,4.346,2539,4.346,2540,4.346,2541,4.346,2542,4.346,2543,4.346,2544,4.346,2545,3.89,2546,4.346,2547,4.346,2548,4.346,2549,4.346,2550,3.89,2551,4.346,2552,4.346,2553,4.346,2554,3.89,2555,2.911,2556,4.346,2557,4.346,2558,4.346,2559,4.346]],["title/injectables/NgxI18nRootService.html",[291,1.428,2560,4.055]],["body/injectables/NgxI18nRootService.html",[3,0.031,4,0.041,5,0.031,7,2.185,10,0.08,11,0.128,12,0.557,16,0.192,17,0.006,19,0.195,27,0.031,31,3.755,32,1.093,34,2.137,37,1.959,42,0.964,44,1.889,47,1.045,49,1.98,61,2.448,66,2.275,73,1.796,88,0.003,89,0.003,90,0.319,96,0.868,99,2.98,106,1.874,133,1.958,137,1.582,152,1.234,162,1.381,180,1.012,183,0.922,184,1.524,187,1.125,193,1.517,196,1.471,203,2.694,205,0.25,229,1.162,238,3.608,266,2.666,267,3.404,291,1.489,293,1.435,300,2.523,304,0.823,331,1.65,347,1.415,353,3.429,362,2.812,399,2.322,409,0.935,438,3.563,442,2.798,455,2.166,458,2.166,497,1.847,522,4.23,531,0.884,532,4.276,536,1.526,570,2.322,690,2.812,742,3.436,752,2.762,808,1.826,818,6.085,842,2.605,845,6.949,849,2.02,858,2.322,859,2.322,860,5.55,870,2.166,986,2.41,1005,4.163,1031,1.657,1138,2.166,1211,1.494,1213,1.751,1214,2.248,1257,3.99,1259,3.429,1278,3.011,1282,2.936,1307,4.346,1417,3.721,1438,3.966,1440,3.076,1442,4.095,1443,3.228,1446,2.373,1455,2.351,1503,1.593,1659,2.812,1742,3.755,1773,1.798,1936,3.724,2026,2.166,2040,3.724,2045,1.751,2144,3.429,2190,2.605,2191,2.779,2388,4.802,2391,5.122,2394,5.122,2395,5.55,2396,7.729,2436,5.368,2471,2.467,2496,4.584,2507,4.584,2514,3.011,2515,3.011,2545,3.011,2555,3.429,2560,4.23,2561,9.356,2562,8.375,2563,3.364,2564,4.23,2565,6.2,2566,6.2,2567,6.2,2568,5.121,2569,6.931,2570,5.121,2571,5.121,2572,5.121,2573,5.121,2574,3.364,2575,6.931,2576,3.364,2577,3.698,2578,5.261,2579,5.121,2580,3.364,2581,5.121,2582,3.364,2583,6.2,2584,5.121,2585,5.121,2586,3.364,2587,4.23,2588,3.364,2589,3.364,2590,5.121,2591,3.364,2592,3.364,2593,3.364,2594,3.364,2595,3.364,2596,3.364,2597,3.011,2598,3.364,2599,3.011,2600,6.931,2601,3.364,2602,3.364,2603,3.364,2604,3.364,2605,3.364,2606,7.458,2607,3.364,2608,3.58,2609,3.011,2610,5.121,2611,3.364,2612,3.364,2613,3.364,2614,3.364,2615,3.364,2616,3.364,2617,3.364,2618,3.364,2619,3.364,2620,3.011]],["title/injectables/NgxI18nService.html",[291,1.428,2621,4.055]],["body/injectables/NgxI18nService.html",[3,0.041,4,0.036,5,0.041,10,0.106,11,0.158,12,0.802,16,0.187,17,0.006,19,0.219,27,0.041,32,1.016,34,2.49,40,7.293,44,2.009,49,0.962,76,3.568,88,0.003,89,0.003,90,0.423,96,1.048,99,3.666,137,1.509,152,1.293,180,1.295,183,1.134,184,1.555,187,1.125,193,2.048,196,1.775,205,0.331,206,1.297,207,3.684,229,1.071,278,1.061,291,1.832,293,1.903,300,2.759,304,1.091,331,1.5,347,0.803,373,2.211,399,1.812,409,1.736,531,1.171,554,2.363,743,3.482,752,2.343,808,2.984,818,5.656,836,3.913,842,3.454,845,6.685,1214,2.284,1257,4.264,1263,4.403,1307,2.983,1417,3.758,1423,5.638,1455,4.403,1659,5.007,1667,4.618,1951,4.879,2205,3.366,2384,5.203,2391,6.033,2394,6.033,2396,5.203,2489,4.403,2495,5.638,2509,3.684,2560,6.033,2562,3.992,2621,5.203,2622,4.459,2623,6.299,2624,6.299,2625,7.303,2626,7.303,2627,9.12,2628,7.303,2629,6.299,2630,6.299,2631,4.459,2632,6.299,2633,4.459,2634,4.459,2635,4.459,2636,6.299,2637,4.459,2638,6.299,2639,4.459,2640,6.299,2641,4.459,2642,6.299,2643,4.459,2644,6.299,2645,4.459,2646,4.459,2647,4.459,2648,4.459,2649,4.459,2650,4.459,2651,4.459,2652,4.459,2653,4.459,2654,6.299,2655,6.299,2656,4.459,2657,4.459,2658,4.459,2659,4.459]],["title/injectables/NgxI18nTranslationLoaderResolver.html",[291,1.428,2660,4.394]],["body/injectables/NgxI18nTranslationLoaderResolver.html",[3,0.053,4,0.047,5,0.053,10,0.139,11,0.189,16,0.163,17,0.006,19,0.232,27,0.053,32,1.052,42,1.675,44,1.352,47,1.544,49,1.982,55,2.155,88,0.004,89,0.004,90,0.554,96,0.732,114,2.083,137,0.967,183,1.362,184,1.311,187,1.018,196,1.052,205,0.434,229,0.932,285,4.285,291,2.2,293,2.494,300,2.591,303,2.363,304,1.43,331,1.625,399,2.335,422,2.41,531,1.535,536,2.65,730,1.678,808,2.697,809,4.699,850,4.605,853,3.913,854,5.21,862,3.763,986,2.94,1178,5.547,1214,2.742,1259,5.066,1417,4.201,1428,5.547,1667,5.574,1757,5.547,1773,4.042,2412,6.249,2418,7.115,2422,6.696,2436,4.526,2440,6.771,2501,6.771,2621,7.589,2660,7.94,2661,5.843,2662,5.858,2663,7.564,2664,6.249,2665,7.564,2666,7.564,2667,8.869,2668,6.249,2669,7.508,2670,7.508,2671,6.771,2672,8.387,2673,8.387,2674,8.869,2675,5.843,2676,5.843,2677,7.564,2678,5.843,2679,7.564,2680,7.564,2681,5.843,2682,5.843]],["title/interfaces/NgxImageMarkerBase.html",[0,0.077,2683,3.431]],["body/interfaces/NgxImageMarkerBase.html",[0,0.145,2,0.877,3,0.053,4,0.047,5,0.053,10,0.14,11,0.19,12,0.681,15,3.111,16,0.198,17,0.006,19,0.22,27,0.087,29,1.134,37,1.539,81,2.491,88,0.004,89,0.004,137,1.254,171,1.802,190,2.571,194,1.783,229,1.094,300,2.594,304,1.433,331,1.012,347,1.055,422,2.414,684,3.513,730,1.863,752,2.237,757,2.594,820,2.271,828,2.775,863,4.16,1035,3.051,1165,3.217,1483,2.975,1529,2.602,1672,5.333,1966,4.749,2201,3.217,2299,3.217,2683,6.206,2684,4.296,2685,4.296,2686,6.418,2687,6.511,2688,5.556,2689,4.879,2690,5.296,2691,3.923,2692,6.504,2693,5.296,2694,3.923,2695,5.074,2696,3.923,2697,3.309,2698,4.095,2699,4.296,2700,5.515,2701,4.095,2702,4.296,2703,4.296,2704,4.095,2705,5.296,2706,4.296,2707,5.296,2708,5.074,2709,5.074,2710,5.074,2711,3.923]],["title/components/NgxImageMarkerComponent.html",[109,0.735,572,2.324]],["body/components/NgxImageMarkerComponent.html",[3,0.024,4,0.021,5,0.024,10,0.064,11,0.107,12,0.723,16,0.181,17,0.006,19,0.176,27,0.024,28,1.294,32,1.085,37,1.76,42,1.537,44,0.62,47,1.592,49,1.817,55,0.989,61,1.607,72,1.667,73,0.94,88,0.002,89,0.002,90,0.407,96,0.767,109,1.003,133,1.56,174,1.248,179,0.725,180,1.555,183,0.773,184,1.524,187,1.171,193,0.656,194,2.447,196,1.103,205,0.199,206,1.248,229,1.038,236,3.726,247,1.167,253,1.242,267,1.472,271,1.977,304,0.656,323,0.396,324,1.27,325,0.647,329,3.021,331,1.719,335,1.346,347,1.352,349,4.368,350,3.029,364,1.729,371,2.175,391,1.27,396,2.334,399,2.28,403,2.667,409,1.119,422,2.277,429,3.453,441,2.4,442,2.926,508,1.299,509,1.697,510,0.989,511,1.042,514,2.127,515,1.795,531,0.704,536,1.216,537,3.385,539,1.388,543,1.988,544,1.329,545,1.946,546,1.478,547,3.038,548,1.329,549,1.329,550,1.299,551,1.167,552,1.329,553,1.299,554,2.922,555,1.329,556,1.299,557,1.329,558,2.127,559,1.329,560,2.078,561,2.127,562,1.299,563,1.299,564,2.667,565,1.329,566,3.038,567,1.299,568,1.27,569,1.299,570,1.216,571,1.329,572,2.902,573,4.443,574,1.329,575,1.299,576,1.216,577,1.329,578,1.299,579,1.101,580,1.329,581,1.299,582,1.329,583,1.299,584,2.127,585,1.299,586,1.299,587,1.329,588,1.299,589,1.329,590,1.299,591,1.101,592,1.329,593,1.329,594,1.329,595,1.191,596,0.896,597,1.242,598,1.242,599,1.329,600,1.27,601,1.329,602,1.329,603,1.329,604,1.27,605,1.329,606,1.242,607,1.27,608,1.329,609,1.101,610,1.242,611,1.329,612,1.329,613,1.216,614,1.27,615,1.329,616,1.27,617,1.329,618,1.27,619,1.329,620,1.242,621,1.242,622,1.27,623,1.329,624,1.27,625,1.329,626,1.27,627,1.329,628,1.27,629,1.329,630,1.024,631,1.27,632,1.242,633,1.27,634,1.242,635,1.242,636,1.242,637,1.081,638,1.101,639,1.101,640,1.242,641,1.329,642,1.191,643,1.329,644,1.27,645,1.329,646,1.167,647,1.242,648,1.329,649,1.242,650,1.329,651,1.27,652,1.329,653,1.329,664,3.566,672,1.988,684,1.697,690,3.925,692,2.179,701,2.597,730,1.189,743,2.339,752,1.809,757,1.893,760,1.666,777,2.935,809,1.666,820,1.607,852,1.167,858,1.216,859,1.216,936,3.22,974,3.932,978,2.665,979,3.146,1009,1.966,1031,1.735,1052,3.544,1088,1.515,1119,1.874,1129,2.292,1165,2.355,1188,3.748,1282,1.27,1344,2.597,1408,3.12,1438,3.322,1440,2.577,1442,2.944,1443,1.396,1446,1.242,1447,1.966,1503,2.032,1540,2.077,1592,2.484,1672,3.364,1773,1.433,1898,2.577,1936,1.61,1966,3.906,1968,1.329,1975,2.792,1982,1.796,2040,1.61,2201,2.355,2306,3.146,2329,2.4,2686,4.488,2689,4.834,2692,6.103,2693,1.874,2694,1.796,2695,1.796,2697,3.029,2698,1.874,2701,1.874,2704,4.997,2705,1.874,2707,4.997,2709,1.796,2711,3.591,2712,9.683,2713,8.668,2714,2.681,2715,3.84,2716,4.429,2717,4.29,2718,6.702,2719,5.362,2720,7.798,2721,6.702,2722,5.362,2723,5.362,2724,6.702,2725,5.362,2726,6.702,2727,6.702,2728,7.148,2729,6.127,2730,3.84,2731,4.29,2732,4.29,2733,4.29,2734,4.429,2735,4.29,2736,4.29,2737,5.362,2738,4.29,2739,4.8,2740,4.29,2741,4.29,2742,4.429,2743,4.29,2744,2.681,2745,3.322,2746,2.681,2747,4.29,2748,2.681,2749,2.681,2750,2.681,2751,3.322,2752,2.681,2753,4.29,2754,2.681,2755,4.429,2756,4.29,2757,2.681,2758,2.681,2759,2.681,2760,2.681,2761,4.29,2762,2.681,2763,2.215,2764,2.4,2765,2.4,2766,2.4,2767,2.215,2768,4.29,2769,6.702,2770,2.681,2771,4.29,2772,2.681,2773,2.681,2774,2.681,2775,2.681,2776,2.681,2777,2.681,2778,2.681,2779,4.29,2780,2.077,2781,4.29,2782,2.681,2783,2.681,2784,2.681,2785,2.681,2786,2.681,2787,2.681,2788,2.681,2789,2.681,2790,2.681,2791,4.29,2792,2.681,2793,4.29,2794,2.681]],["title/interfaces/NgxImageMarkerConfiguration.html",[0,0.077,2696,3.287]],["body/interfaces/NgxImageMarkerConfiguration.html",[0,0.141,2,0.799,3,0.049,4,0.043,5,0.049,10,0.127,11,0.178,12,0.889,16,0.211,17,0.006,19,0.21,27,0.085,29,1.374,37,1.872,81,2.814,88,0.004,89,0.004,96,0.668,137,1.417,144,3.808,171,1.695,190,2.418,194,1.624,229,1.173,300,2.478,304,1.306,331,1.23,347,0.961,422,2.556,684,2.112,730,2.036,752,2.369,757,2.756,820,2.404,828,2.527,863,3.912,1035,3.71,1165,2.93,1483,2.71,1529,2.371,1672,5.227,1966,4.757,2201,2.93,2299,2.93,2683,5.608,2684,3.914,2685,3.914,2686,6.275,2687,6.278,2688,5.226,2689,4.589,2690,4.981,2691,3.574,2692,6.622,2693,5.985,2694,3.574,2695,5.733,2696,4.772,2697,4.025,2698,5.985,2699,5.226,2700,5.913,2701,5.985,2702,5.226,2703,6.278,2704,5.985,2705,5.608,2706,5.226,2707,6.415,2708,4.772,2709,4.772,2710,4.772,2711,3.574]],["title/interfaces/NgxImageMarkerEdit.html",[0,0.077,2710,3.287]],["body/interfaces/NgxImageMarkerEdit.html",[0,0.145,2,0.884,3,0.054,4,0.047,5,0.054,10,0.141,11,0.191,12,0.684,16,0.191,17,0.006,19,0.221,27,0.087,29,1.14,37,1.551,81,2.503,88,0.004,89,0.004,137,1.26,171,2.005,190,2.584,194,1.796,229,1.098,300,2.847,304,1.444,331,1.019,347,1.063,422,2.426,684,2.336,730,1.87,752,2.248,757,2.604,820,2.282,828,2.796,863,4.18,1035,3.074,1165,3.241,1483,2.998,1529,2.622,1672,5.341,1966,4.694,2201,3.241,2299,3.241,2683,6.224,2684,4.329,2685,4.329,2686,6.172,2687,6.53,2688,5.584,2689,4.903,2690,5.323,2691,3.953,2692,6.515,2693,5.323,2694,3.953,2695,5.099,2696,3.953,2697,3.335,2698,4.127,2699,4.329,2700,5.531,2701,4.127,2702,4.329,2703,4.329,2704,4.127,2705,5.323,2706,4.329,2707,5.323,2708,5.099,2709,6.172,2710,5.644,2711,3.953]],["title/injectables/NgxImageMarkerService.html",[291,1.428,2755,4.055]],["body/injectables/NgxImageMarkerService.html",[3,0.027,4,0.024,5,0.027,10,0.07,11,0.115,12,0.63,16,0.16,17,0.006,19,0.204,27,0.027,32,0.898,34,2.476,37,2.501,42,2.229,44,1.999,49,2.141,50,1.765,54,2.093,55,1.701,61,2.331,74,0.982,88,0.002,89,0.002,90,0.437,96,0.931,102,3.688,133,1.711,135,1.47,137,1.371,152,0.96,162,1.895,180,1.144,183,0.831,184,0.89,187,0.978,193,1.715,194,2.672,196,1.34,205,0.218,206,0.855,223,2.428,229,0.569,236,3.446,271,3.055,273,2.055,291,1.342,293,1.254,300,2.559,303,1.982,304,0.719,331,1.464,341,1.843,347,0.831,362,2.533,363,1.614,369,4.32,396,2.008,399,2.319,403,2.808,409,0.843,422,0.936,442,2.63,506,2.121,531,0.772,537,1.392,546,2.219,554,2.517,572,2.185,573,4.762,680,1.457,684,2.774,710,4.514,743,1.122,757,1.993,760,1.826,772,2.428,790,1.566,808,1.645,820,2.414,828,2.697,831,4.33,853,1.968,854,3.538,865,2.055,868,4.79,947,2.402,1031,2.088,1035,2.402,1088,3.644,1129,3.447,1165,2.533,1213,1.531,1214,2.065,1282,1.392,1307,2.185,1320,2.156,1380,3.383,1396,1.711,1408,3.314,1428,2.156,1440,2.771,1442,1.614,1443,1.531,1446,1.362,1503,1.392,1529,2.049,1592,2.138,1629,2.055,1672,3.127,1737,4.705,1773,1.571,1778,1.968,1782,4.176,1815,2.277,1966,4.532,1968,2.287,1982,3.09,1984,1.968,2027,2.771,2040,2.771,2257,2.428,2299,3.542,2686,3.814,2689,3.668,2690,2.055,2691,3.814,2692,6.753,2694,1.968,2696,5.676,2708,4.32,2709,4.981,2710,4.32,2711,3.814,2713,7.415,2715,4.13,2739,8.474,2742,4.705,2745,4.996,2755,3.811,2795,8.283,2796,2.939,2797,4.614,2798,5.695,2799,5.695,2800,4.614,2801,4.614,2802,5.695,2803,2.939,2804,8.283,2805,9.198,2806,2.939,2807,7.438,2808,2.939,2809,2.939,2810,4.614,2811,6.451,2812,2.939,2813,4.614,2814,4.614,2815,7.438,2816,2.939,2817,2.939,2818,2.939,2819,2.939,2820,2.939,2821,2.939,2822,2.939,2823,2.939,2824,2.939,2825,2.939,2826,2.939,2827,2.939,2828,2.939,2829,2.939,2830,4.614,2831,4.614,2832,2.939,2833,5.695,2834,6.451,2835,4.614,2836,4.614,2837,2.939,2838,4.614,2839,2.939,2840,2.939,2841,2.939,2842,2.939,2843,2.939,2844,2.156,2845,2.939,2846,2.939,2847,4.614,2848,2.939,2849,2.939,2850,2.939,2851,2.939,2852,2.631,2853,2.939,2854,2.939,2855,2.939,2856,2.939,2857,2.939,2858,2.939,2859,2.631,2860,2.939,2861,2.939,2862,2.939,2863,2.939,2864,5.695,2865,2.939,2866,5.695,2867,2.939,2868,2.939,2869,2.939,2870,2.939,2871,2.939,2872,1.968,2873,2.939,2874,2.939,2875,2.939,2876,2.939,2877,2.465,2878,4.614,2879,4.13,2880,4.614,2881,2.939,2882,2.428,2883,2.939,2884,2.939,2885,2.939,2886,2.939]],["title/interfaces/NgxImageMarkerTypes.html",[0,0.077,2695,3.287]],["body/interfaces/NgxImageMarkerTypes.html",[0,0.145,2,0.87,3,0.053,4,0.047,5,0.053,10,0.139,11,0.189,12,0.677,16,0.197,17,0.006,19,0.219,27,0.087,29,1.129,37,1.527,81,2.478,88,0.004,89,0.004,96,0.728,137,1.248,171,1.793,190,2.559,194,2.294,229,1.091,300,2.585,304,1.422,331,1.004,347,1.047,422,2.402,684,2.301,730,1.856,752,2.226,757,2.735,820,2.508,828,2.754,863,4.14,1035,3.027,1165,3.192,1483,3.829,1529,3.349,1672,5.16,1966,4.788,2201,3.192,2299,3.192,2683,5.849,2684,4.264,2685,4.264,2686,6.564,2687,6.492,2688,5.529,2689,4.855,2690,5.27,2691,3.894,2692,6.564,2693,5.27,2694,3.894,2695,5.603,2696,3.894,2697,3.284,2698,4.064,2699,4.264,2700,5.499,2701,4.064,2702,4.264,2703,4.264,2704,4.064,2705,5.27,2706,4.264,2707,5.27,2708,5.049,2709,5.049,2710,5.049,2711,3.894]],["title/interfaces/NgxImageMarkerView.html",[0,0.077,2708,3.287]],["body/interfaces/NgxImageMarkerView.html",[0,0.145,2,0.884,3,0.054,4,0.047,5,0.054,10,0.141,11,0.191,12,0.684,16,0.191,17,0.006,19,0.221,27,0.087,29,1.14,37,1.551,81,2.503,88,0.004,89,0.004,137,1.26,171,2.005,190,2.584,194,1.796,229,1.098,300,2.847,304,1.444,331,1.019,347,1.063,422,2.426,684,2.336,730,1.87,752,2.248,757,2.604,820,2.282,828,2.796,863,4.18,1035,3.074,1165,3.241,1483,2.998,1529,2.622,1672,5.341,1966,4.694,2201,3.241,2299,3.241,2683,6.224,2684,4.329,2685,4.329,2686,6.172,2687,6.53,2688,5.584,2689,4.903,2690,5.323,2691,3.953,2692,6.515,2693,5.323,2694,3.953,2695,5.099,2696,3.953,2697,3.335,2698,4.127,2699,4.329,2700,5.531,2701,4.127,2702,4.329,2703,4.329,2704,4.127,2705,5.323,2706,4.329,2707,5.323,2708,5.644,2709,6.172,2710,5.099,2711,3.953]],["title/directives/NgxIsAuthenticatedDirective.html",[323,0.724,624,2.324]],["body/directives/NgxIsAuthenticatedDirective.html",[3,0.038,4,0.033,5,0.038,10,0.099,11,0.149,16,0.199,17,0.006,19,0.213,27,0.038,29,0.894,32,1.215,38,2.707,42,1.185,47,1.218,48,4.062,49,1.654,55,2.201,61,1.789,73,1.45,82,4.896,83,3.049,88,0.003,89,0.003,90,0.392,96,0.518,174,1.203,179,1.118,183,1.075,184,1.424,187,1.183,191,2.153,196,1.261,205,0.307,206,1.736,229,1.077,236,3.553,238,3.474,271,1.525,278,0.984,304,1.012,323,1.25,325,0.998,329,1.762,331,1.209,335,1.872,347,1.526,354,3.456,368,2.407,371,2.131,396,3.049,398,3.851,399,2.526,403,3.338,422,2.231,442,2.877,454,2.336,531,1.84,539,2.631,543,1.916,624,2.827,730,1.937,743,3.104,745,4.33,752,2.068,852,1.8,986,2.722,988,4.231,1010,4.51,1170,5.849,1211,1.837,1247,2.484,1272,6.269,1288,5.343,1497,4.206,1545,1.876,1546,3.585,1916,5.785,1962,2.891,1966,1.959,1968,2.05,1986,3.844,2095,4.172,2157,4.896,2159,4.896,2160,5.425,2163,5.36,2167,3.845,2186,4.172,2192,4.896,2196,4.172,2198,3.708,2199,2.891,2200,3.708,2201,2.271,2213,2.407,2214,2.484,2223,2.959,2224,4.377,2226,5.136,2227,5.136,2232,5.136,2240,5.136,2245,5.963,2264,5.136,2266,5.623,2271,5.136,2272,4.377,2469,2.891,2887,9.802,2888,9.802,2889,4.136,2890,8.733,2891,8.131,2892,5.969,2893,5.969,2894,5.969,2895,4.136,2896,4.136,2897,4.136,2898,4.136,2899,4.136,2900,4.136,2901,4.136,2902,4.136,2903,4.136,2904,4.136,2905,7.003,2906,4.136,2907,4.136,2908,4.136,2909,4.136]],["title/interfaces/NgxLinkConfiguration.html",[0,0.077,2910,4.055]],["body/interfaces/NgxLinkConfiguration.html",[0,0.093,2,0.882,3,0.054,4,0.047,5,0.054,10,0.14,11,0.19,12,0.916,16,0.22,17,0.006,19,0.199,27,0.086,37,1.997,88,0.004,89,0.004,96,0.737,106,2.549,109,1.332,114,3.466,152,1.086,205,0.437,229,1.221,241,3.271,242,2.465,245,2.919,246,3.066,263,5.574,264,5.091,278,1.401,369,5.957,412,3.792,422,2.422,545,3.448,546,1.834,609,2.418,659,3.457,730,1.306,891,2.099,1182,4.864,1462,7.358,1463,7.304,1464,8.442,1465,5.887,1467,4.116,1469,4.561,1470,4.561,1471,4.561,1472,4.561,2910,6.279,2911,5.888,2912,7.265,2913,7.963,2914,5.271,2915,5.271,2916,5.271,2917,5.271,2918,4.864,2919,6.279,2920,5.271]],["title/directives/NgxLinkDirective.html",[323,0.724,626,2.324]],["body/directives/NgxLinkDirective.html",[3,0.028,4,0.024,5,0.028,10,0.113,11,0.119,12,0.709,16,0.202,17,0.006,19,0.173,27,0.028,32,1.215,35,4.229,37,2.073,42,0.876,44,1.1,47,0.971,49,1.939,61,1.426,66,1.358,73,1.668,74,1.021,83,2.868,88,0.002,89,0.002,90,0.451,92,4.541,96,0.383,101,1.48,106,1.579,109,1.222,135,2.275,137,1.091,179,0.826,183,0.857,184,1.471,187,1.149,194,1.777,196,0.857,205,0.227,206,1.384,229,1.186,241,2.938,242,2.444,245,2.895,246,3.04,263,2.241,264,5.063,266,2.477,267,2.612,270,1.304,271,2.153,278,0.727,286,3.684,323,0.972,325,0.737,329,1.404,331,1.739,335,1.492,347,1.187,364,1.232,369,3.185,371,1.777,397,4.545,399,1.449,409,0.869,410,2.047,412,3.76,497,1.678,506,1.919,531,1.534,546,1.824,554,2.972,609,1.255,626,2.253,659,1.953,665,4.243,699,3.626,730,0.678,743,1.816,752,0.902,757,1.804,777,3.52,831,2.204,833,4.606,891,2.545,928,1.48,988,4.449,1003,3.063,1031,2.31,1048,3.91,1058,5.53,1113,4.523,1114,3.684,1128,3.684,1182,7.08,1211,1.358,1320,2.241,1417,3.865,1462,7.375,1463,4.523,1465,3.684,1467,5.517,1469,5.103,1470,3.684,1471,3.684,1472,3.684,1474,2.525,1485,4.258,1492,5.227,1493,5.227,1496,6.391,1497,4.288,1498,5.898,1508,4.991,1509,4.258,1510,4.258,1513,4.258,1517,6.391,1518,2.736,1529,2.594,1531,4.282,1533,5.443,1537,2.857,1538,3.929,1540,3.684,1542,4.258,1545,2.648,1546,2.857,1549,2.736,1550,4.258,1551,2.736,1552,2.736,1553,2.736,1554,2.525,1555,2.525,1556,4.258,1557,4.258,1558,2.736,1559,4.258,1560,2.736,1561,2.736,1562,2.367,1563,2.736,1569,2.736,1570,4.258,1574,7.065,1575,5.898,1576,4.258,1577,2.736,1578,2.736,1579,2.367,1580,2.736,1581,2.736,1582,2.525,1583,5.227,1584,2.525,1585,2.736,1586,2.736,1587,2.736,1588,2.736,2910,4.824,2912,7.236,2913,2.736,2914,2.736,2915,2.736,2916,2.736,2917,5.227,2918,4.824,2919,3.929,2920,2.736,2921,3.056,2922,8.384,2923,4.756,2924,5.839,2925,6.768,2926,4.756,2927,4.756,2928,3.056,2929,3.056,2930,4.756,2931,6.589,2932,6.589,2933,3.056,2934,4.756,2935,3.056,2936,4.756,2937,3.056,2938,3.056,2939,3.056,2940,3.056,2941,4.756,2942,3.056,2943,4.756,2944,3.056,2945,3.056,2946,3.056,2947,3.056,2948,4.756,2949,4.756,2950,3.056,2951,4.756,2952,3.056,2953,3.056,2954,3.056]],["title/pipes/NgxMatchesQueryPipe.html",[174,1.428,2955,4.394]],["body/pipes/NgxMatchesQueryPipe.html",[3,0.041,4,0.036,5,0.041,11,0.114,12,0.574,16,0.188,17,0.006,19,0.193,27,0.041,29,1.198,32,1.296,34,1.83,38,2.896,42,1.303,44,1.052,48,3.031,49,1.977,55,1.677,57,1.941,61,2.212,73,1.595,81,1.495,82,6.111,83,1.98,88,0.003,89,0.003,90,0.431,96,0.924,109,0.956,139,1.867,152,1.128,162,1.867,174,2.71,176,2.31,179,1.229,180,1.306,183,0.819,184,1.251,185,2.43,187,1.131,193,1.562,196,1.65,203,1.767,204,3.413,205,0.338,206,1.323,229,0.787,241,1.767,271,1.677,300,3.091,304,1.113,331,1.382,347,1.574,396,2.78,398,4.252,399,2.425,403,3.213,409,1.348,422,2.035,429,2.929,438,2.896,442,3.369,454,2.569,531,1.194,536,2.063,543,2.959,723,3.967,730,1.939,733,3.967,752,2.179,760,3.967,852,1.98,946,2.497,975,4.395,978,3.967,986,1.767,1005,3.836,1054,4.938,1098,4.762,1099,3.607,1137,3.607,1145,2.929,1190,3.335,1417,3.791,1968,2.255,2068,4.277,2160,5.786,2167,3.506,2198,3.967,2200,3.967,2213,2.646,2214,2.731,2278,5.275,2280,6.183,2288,3.413,2289,4.946,2290,4.946,2291,6.612,2292,5.275,2295,3.757,2296,3.757,2297,5.275,2298,5.275,2299,3.506,2300,5.275,2301,3.522,2302,3.522,2305,3.757,2306,3.335,2307,3.757,2308,3.757,2309,3.045,2406,5.902,2955,5.716,2956,9.439,2957,9.439,2958,4.547,2959,6.386,2960,6.386,2961,4.547,2962,7.571,2963,4.547,2964,4.547,2965,6.386,2966,4.547,2967,4.547,2968,4.547,2969,4.547,2970,4.547,2971,5.716,2972,4.943,2973,5.275,2974,4.547,2975,4.547,2976,6.386]],["title/interfaces/NgxMediaQuery.html",[0,0.077,2977,3.801]],["body/interfaces/NgxMediaQuery.html",[0,0.122,2,1.154,3,0.07,4,0.062,5,0.07,10,0.184,11,0.224,16,0.193,17,0.005,27,0.07,88,0.005,89,0.005,152,1.299,303,2.602,2406,6.289,2977,6.946,2978,7.709,2979,7.709]],["title/directives/NgxMediaQueryDirective.html",[323,0.724,628,2.324]],["body/directives/NgxMediaQueryDirective.html",[3,0.034,4,0.03,5,0.034,10,0.088,11,0.138,16,0.199,17,0.006,19,0.191,27,0.034,29,0.554,32,1.288,38,2.494,42,1.576,47,1.586,48,3.982,49,1.869,55,2.681,57,1.578,61,1.648,73,1.297,82,5.692,83,2.858,88,0.003,89,0.003,90,0.351,96,0.463,139,1.519,174,1.6,179,1,183,0.99,184,1.447,187,1.183,191,2.863,196,1.182,205,0.275,206,1.6,229,1.173,236,3.6,238,3.2,271,1.364,304,0.905,323,1.202,325,0.892,329,1.624,331,1.598,335,1.725,347,1.466,362,2.03,368,2.152,371,1.673,388,4.078,396,2.858,397,4.641,398,3.68,399,2.021,403,3.164,409,1.582,422,2.092,432,3.416,442,2.727,454,2.089,501,5.085,531,0.971,536,1.677,539,2.865,543,2.548,628,2.604,730,1.723,743,2.966,745,4.467,748,2.585,752,2.404,852,2.394,932,2.864,986,2.551,988,4.364,1031,1.779,1054,3.708,1088,2.089,1098,3.708,1099,3.106,1129,2.939,1130,2.297,1358,3.416,1497,3.943,1545,2.978,1546,3.303,1630,4.543,1962,3.844,1966,3.68,1968,1.833,1975,1.926,1984,2.477,1986,4.228,2003,2.382,2068,3.683,2089,4.543,2090,2.712,2091,2.712,2095,3.844,2097,2.864,2157,4.589,2159,4.589,2160,5.238,2163,5.082,2167,3.604,2174,4.259,2186,3.844,2192,4.589,2196,2.585,2198,3.416,2199,2.585,2200,3.416,2201,2.03,2213,2.152,2214,2.221,2223,2.726,2224,4.033,2227,4.814,2232,4.814,2245,5.698,2264,4.033,2266,4.814,2270,4.543,2271,4.033,2272,4.033,2406,5.887,2767,3.055,2962,4.543,2972,4.396,2973,4.543,2977,6.531,2980,9.79,2981,8.088,2982,3.698,2983,4.923,2984,4.543,2985,6.565,2986,7.769,2987,7.769,2988,6.565,2989,5.499,2990,5.499,2991,3.698,2992,3.698,2993,3.698,2994,3.698,2995,3.698,2996,3.698,2997,3.698,2998,3.698,2999,3.698,3000,3.698,3001,3.698,3002,3.698,3003,3.698,3004,3.698,3005,3.698,3006,3.698,3007,3.698,3008,3.698,3009,3.698,3010,3.698]],["title/injectables/NgxMediaQueryService.html",[291,1.428,2972,3.287]],["body/injectables/NgxMediaQueryService.html",[3,0.036,4,0.032,5,0.036,7,3.224,10,0.096,11,0.146,12,0.753,16,0.186,17,0.006,19,0.21,27,0.036,32,1.233,34,1.672,38,1.817,42,2.301,44,1.747,47,1.19,49,2.066,54,1.817,61,2.264,68,1.948,73,2.412,82,2.801,88,0.003,89,0.004,90,0.38,96,0.861,106,1.577,137,0.663,152,1.082,180,0.952,183,1.05,184,1.413,187,1.097,193,1.427,194,1.775,196,1.239,205,0.297,206,1.165,229,1.066,247,2.539,266,3.037,267,3.203,270,2.489,271,1.477,291,1.697,293,1.71,300,2.48,303,2.479,304,0.98,331,1.624,347,1.361,379,2.263,396,2.539,399,2.334,403,3.289,407,2.489,409,1.256,438,2.646,458,2.58,501,6.219,506,1.917,531,1.052,532,3.981,730,0.889,752,2.371,757,1.238,790,1.36,808,2.079,820,2.264,849,2.406,850,2.2,858,1.817,859,1.817,865,2.801,986,2.673,1000,4.877,1007,4.518,1031,1.888,1085,3.31,1088,3.295,1129,3.676,1211,1.78,1213,2.086,1214,1.452,1242,2.2,1244,3.295,1282,3.257,1310,3.906,1408,4.003,1417,2.762,1440,3.503,1442,4.408,1443,2.086,1446,2.703,1447,2.938,1455,2.801,1630,5.682,1742,2.938,1773,2.141,1782,6.627,1815,6.49,1824,3.31,1936,2.406,2195,3.103,2406,6.21,2477,2.086,2489,5.281,2532,4.808,2608,2.801,2697,3.295,2844,2.938,2962,4.818,2972,5.059,2977,7,2981,7.585,2983,6.157,2984,6.241,3011,9.181,3012,4.006,3013,4.818,3014,7.934,3015,8.38,3016,8.029,3017,5.833,3018,5.833,3019,5.833,3020,4.006,3021,4.006,3022,5.833,3023,4.006,3024,5.221,3025,4.006,3026,5.833,3027,4.006,3028,5.833,3029,4.006,3030,4.006,3031,4.818,3032,4.006,3033,4.006,3034,4.006,3035,4.006,3036,6.157,3037,4.006,3038,3.31,3039,3.103,3040,4.006,3041,5.833,3042,3.586,3043,4.006,3044,5.833,3045,3.586,3046,3.586,3047,4.006,3048,4.006,3049,3.395,3050,4.006,3051,4.006,3052,4.006,3053,4.006,3054,4.006,3055,4.006,3056,4.006,3057,4.006]],["title/injectables/NgxMediaQueryService-1.html",[291,1.187,1035,2.126,2972,2.734]],["body/injectables/NgxMediaQueryService-1.html",[3,0.034,4,0.03,5,0.034,10,0.089,11,0.139,12,0.498,16,0.176,17,0.006,19,0.173,27,0.034,29,0.83,32,1.275,34,1.589,36,1.403,42,2.237,44,1.283,61,2.708,68,2.441,74,2.441,88,0.003,89,0.003,90,0.355,96,0.827,102,2.749,106,1.499,134,5.922,139,1.536,152,1.008,180,0.905,183,0.999,184,1.388,187,1.096,193,1.357,196,1.316,205,0.278,206,1.088,229,0.962,266,3.806,267,3.045,271,2.045,291,1.613,293,1.596,300,2.412,303,2.684,304,0.915,331,1.646,347,1.406,358,2.323,379,4.129,380,3.267,396,2.414,398,2.626,399,2.366,403,3.182,407,4.541,413,3.714,438,3.315,442,2.08,455,2.409,458,2.409,461,1.999,462,3.132,506,2.172,531,0.982,690,4.013,808,3.399,809,2.323,823,2.614,849,3.331,850,5.359,992,2.177,1000,4.759,1007,7.099,1129,4.37,1137,2.113,1213,1.947,1214,1.356,1282,1.771,1408,3.846,1440,3.331,1442,2.053,1443,1.947,1447,4.067,1742,6.207,1746,3.09,1782,6.207,1815,2.897,1982,3.714,2094,3.348,2302,5.661,2406,6.572,2532,3.877,2550,4.964,2608,4.62,2662,2.897,2780,2.897,2882,3.09,2972,5.228,3013,8.283,3014,8.534,3036,4.964,3038,3.09,3042,3.348,3045,3.348,3046,3.348,3058,8.879,3059,3.74,3060,4.964,3061,3.227,3062,5.545,3063,5.545,3064,7.309,3065,6.609,3066,6.609,3067,6.609,3068,6.609,3069,6.609,3070,5.545,3071,3.74,3072,5.545,3073,5.545,3074,4.964,3075,3.74,3076,4.067,3077,5.545,3078,3.74,3079,5.545,3080,3.74,3081,7.806,3082,3.74,3083,3.74,3084,3.74,3085,3.74,3086,3.74,3087,3.74,3088,3.74,3089,3.74,3090,3.74,3091,3.74,3092,3.74,3093,3.74,3094,3.74,3095,3.74,3096,5.545,3097,5.545,3098,5.545,3099,3.74,3100,3.74,3101,3.74,3102,3.74,3103,3.74,3104,3.74,3105,3.74,3106,3.74,3107,3.74,3108,3.74,3109,3.74,3110,3.74,3111,3.74,3112,3.74,3113,3.74,3114,3.74,3115,3.74,3116,3.74,3117,3.74]],["title/interfaces/NgxMobileLayoutBase.html",[0,0.077,234,4.055]],["body/interfaces/NgxMobileLayoutBase.html",[0,0.12,2,0.879,3,0.053,4,0.047,5,0.053,10,0.14,11,0.19,12,0.916,16,0.218,17,0.006,19,0.154,27,0.086,37,1.543,48,2.412,76,2.166,88,0.004,89,0.004,144,4.055,152,0.758,194,3.067,205,0.436,226,6.269,227,5.258,228,5.258,229,0.724,231,6.883,233,4.852,234,7.341,235,4.987,236,4.67,237,3.933,238,4.893,239,4.549,240,3.139,241,2.949,242,3.176,243,7.299,244,7.299,245,4.672,246,4.907,247,3.66,248,5.565,249,4.549,250,4.852,251,3.782,252,2.609,253,2.721,254,4.852,255,3.648,256,3.318,257,5.258,258,5.258]],["title/components/NgxMobileLayoutComponent.html",[109,0.735,575,2.377]],["body/components/NgxMobileLayoutComponent.html",[3,0.036,4,0.032,5,0.036,7,1.691,10,0.094,11,0.145,12,0.52,16,0.162,17,0.006,19,0.219,27,0.036,28,1.117,32,1.112,49,0.855,88,0.003,89,0.003,90,0.376,96,0.496,102,2.868,106,1.564,109,1.197,179,1.071,180,1.628,183,1.042,184,1.068,187,1.013,196,0.713,205,0.294,206,1.683,229,1.062,236,2.681,243,4.481,244,4.481,247,4.04,248,5.862,249,3.068,253,3.994,323,0.585,324,1.876,325,0.956,329,3.082,331,1.621,347,1.042,391,1.876,397,4.349,409,0.723,479,3.874,497,3.176,508,1.919,509,2.289,510,1.461,511,1.54,514,2.868,515,2.421,531,1.041,536,1.797,537,3.953,539,2.211,544,1.964,545,2.624,546,1.396,547,3.726,548,1.964,549,1.964,550,1.919,551,1.725,552,1.964,553,1.919,554,3.115,555,1.964,556,1.919,557,1.964,558,2.868,559,1.964,560,2.802,561,2.868,562,1.919,563,1.919,564,3.271,565,1.964,566,3.726,567,1.919,568,1.876,569,1.919,570,1.797,571,1.964,572,1.876,573,1.876,574,1.964,575,3.64,576,1.797,577,1.964,578,1.919,579,1.627,580,1.964,581,1.919,582,1.964,583,1.919,584,2.868,585,1.919,586,1.919,587,1.964,588,1.919,589,1.964,590,1.919,591,1.627,592,1.964,593,1.964,594,1.964,595,1.76,596,1.323,597,1.836,598,1.836,599,1.964,600,1.876,601,1.964,602,1.964,603,1.964,604,1.876,605,1.964,606,1.836,607,1.876,608,1.964,609,1.627,610,1.836,611,1.964,612,1.964,613,1.797,614,1.876,615,1.964,616,1.876,617,1.964,618,1.876,619,1.964,620,1.836,621,1.836,622,1.876,623,1.964,624,1.876,625,1.964,626,1.876,627,1.964,628,1.876,629,1.964,630,1.513,631,1.876,632,1.836,633,1.876,634,1.836,635,1.836,636,1.836,637,1.597,638,1.627,639,1.627,640,1.836,641,1.964,642,1.76,643,1.964,644,1.876,645,1.964,646,1.725,647,1.836,648,1.964,649,1.836,650,1.964,651,1.876,652,1.964,653,1.964,665,4.84,699,4.378,730,1.667,742,1.964,745,1.964,757,1.224,990,2.551,992,3.367,1048,4.577,1049,3.268,1050,5.645,1055,6.117,1101,5.179,1118,2.117,1120,2.769,1251,4.84,1260,2.551,1417,2.74,1481,3.64,1503,2.74,1936,2.38,2090,2.905,2091,2.905,3118,8.619,3119,7.716,3120,3.962,3121,5.645,3122,6.834,3123,5.785,3124,7.155,3125,7.155,3126,6.834,3127,3.962,3128,5.785,3129,3.962,3130,3.962,3131,5.785,3132,5.785,3133,3.962,3134,5.785,3135,3.962,3136,3.874,3137,5.785,3138,3.962,3139,3.546,3140,3.962,3141,5.785,3142,5.785,3143,5.785,3144,5.785,3145,5.785,3146,5.785,3147,5.785,3148,5.785,3149,5.785]],["title/injectables/NgxMobileLayoutService.html",[248,3.599,291,1.428]],["body/injectables/NgxMobileLayoutService.html",[3,0.025,4,0.022,5,0.025,7,2.302,10,0.064,11,0.108,12,0.795,16,0.195,17,0.006,19,0.197,22,5.213,23,2.095,27,0.025,29,0.807,32,1.175,34,2.159,44,2.046,47,1.374,48,2.215,49,1.931,61,1.846,73,1.515,74,0.903,81,1.42,88,0.002,89,0.003,90,0.256,96,0.898,109,1.435,135,0.862,136,1.09,137,1.423,152,0.696,174,1.257,180,1.171,183,0.778,184,1.525,187,1.147,193,1.756,194,2.183,196,1.572,203,1.679,205,0.201,211,1.984,229,1.143,231,5.833,233,7.102,235,2.739,236,2.002,238,1.574,239,4.177,241,2.096,242,2.257,243,7.231,244,6.541,245,2.674,246,2.808,247,4.329,248,4.516,249,4.177,250,6.831,252,1.202,253,2.002,254,5.087,267,1.485,270,1.154,291,1.257,293,1.154,300,2.609,304,0.662,331,1.589,347,1.489,353,4.124,365,1.919,397,4.353,399,1.781,409,1.57,442,2.31,497,1.485,506,0.889,531,1.417,532,3.734,545,1.959,546,1.817,684,2.437,698,4.705,699,3.645,730,1.963,738,1.625,742,2.142,743,2.351,752,1.987,757,0.836,809,2.683,820,1.616,836,2.683,849,1.625,850,1.485,851,1.408,852,1.88,858,1.227,859,1.227,865,4.305,866,2.095,946,1.485,982,4.859,992,2.514,1018,1.528,1031,1.745,1105,4.77,1137,1.528,1211,1.202,1213,1.408,1214,0.981,1257,2.793,1300,3.346,1310,2.893,1358,3.35,1417,2.046,1438,4.77,1481,2.983,1503,2.916,1533,3.569,1768,4.181,1825,5.246,1865,1.811,1936,4.844,1965,1.811,2406,6.116,2971,4.828,2972,4.508,2973,3.569,2981,2.235,3013,2.235,3119,8.358,3124,4.828,3125,4.828,3150,9.337,3151,2.705,3152,3.569,3153,4.32,3154,4.32,3155,4.32,3156,5.393,3157,5.393,3158,5.393,3159,5.393,3160,5.393,3161,5.393,3162,6.158,3163,6.158,3164,4.32,3165,5.393,3166,4.32,3167,6.158,3168,4.32,3169,4.32,3170,4.32,3171,2.705,3172,2.705,3173,4.32,3174,2.705,3175,3.569,3176,2.705,3177,2.705,3178,4.32,3179,2.705,3180,2.705,3181,4.32,3182,2.705,3183,4.32,3184,2.705,3185,4.32,3186,2.705,3187,4.32,3188,4.32,3189,2.705,3190,5.393,3191,2.705,3192,4.32,3193,2.705,3194,4.32,3195,2.705,3196,2.705,3197,4.32,3198,4.32,3199,4.32,3200,4.32,3201,4.32,3202,4.32,3203,4.32,3204,4.32,3205,4.32,3206,4.32,3207,2.705,3208,2.705,3209,2.705,3210,2.705,3211,2.705,3212,2.705,3213,2.705,3214,2.095,3215,2.705,3216,2.705,3217,4.32,3218,2.705,3219,5.393,3220,2.705,3221,2.705,3222,6.158,3223,2.705,3224,2.705,3225,2.705,3226,2.705,3227,2.705,3228,2.705,3229,2.705,3230,2.705,3231,4.32,3232,2.705,3233,2.705,3234,2.705,3235,2.705,3236,2.705,3237,2.705,3238,2.705,3239,2.705,3240,2.705,3241,2.705,3242,2.705,3243,2.705,3244,2.705,3245,2.705,3246,2.705,3247,2.705,3248,2.705,3249,2.705,3250,2.705,3251,2.705,3252,4.32,3253,2.705,3254,2.705]],["title/directives/NgxModalAbstractComponent.html",[323,0.724,630,1.874]],["body/directives/NgxModalAbstractComponent.html",[3,0.044,4,0.038,5,0.044,10,0.114,11,0.166,12,0.847,16,0.142,17,0.006,19,0.199,27,0.044,28,1.793,32,1.196,42,2.347,49,1.638,68,1.601,73,1.681,88,0.003,89,0.003,90,0.454,96,0.6,122,3.014,135,1.527,136,3.672,137,1.096,183,1.193,184,1.583,187,1.188,196,1.193,205,0.356,206,1.927,229,1.009,238,2.789,281,3.351,303,2.023,323,0.977,325,1.156,331,1.71,335,2.078,336,3.742,345,2.376,347,1.367,349,5.002,350,5.021,370,2.879,371,2.492,377,3.967,379,4.625,387,5.567,388,2.977,399,2.205,407,2.977,456,3.637,483,4.436,506,2.495,531,1.259,546,2.144,596,2.212,630,2.898,664,4.766,666,6.342,668,5.131,684,3.004,685,5.879,688,5.131,701,4.498,702,4.496,757,1.481,777,3.363,823,3.351,861,2.707,870,3.087,899,4.496,936,4.56,960,5.472,1037,3.515,1041,2.789,1282,3.137,1408,4.418,1440,3.979,1442,2.632,1443,2.496,1446,2.221,1540,3.712,1739,5.15,1778,3.21,2299,2.632,2844,4.858,2877,3.54,3255,4.793,3256,5.472,3257,8.437,3258,8.437,3259,6.624,3260,6.624,3261,6.624,3262,6.624,3263,4.793,3264,4.793,3265,8.189,3266,5.93,3267,4.793,3268,4.793,3269,4.793,3270,2.707,3271,4.793,3272,3.712,3273,3.21,3274,3.712,3275,3.712,3276,4.291,3277,3.96,3278,5.131,3279,2.789,3280,4.793,3281,4.793,3282,4.793,3283,4.793,3284,3.712,3285,3.96]],["title/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.077,3286,2.856]],["body/interfaces/NgxModalAriaLabelBaseOptions.html",[0,0.145,2,0.595,3,0.036,4,0.032,5,0.036,10,0.095,11,0.145,12,0.676,16,0.211,17,0.006,19,0.197,27,0.073,28,1.666,29,1.198,32,0.807,35,1.926,36,2.569,37,1.799,41,1.883,74,1.328,88,0.003,89,0.003,90,0.377,97,1.926,106,1.075,109,1.459,122,1.394,136,2.338,137,1.246,152,1.243,171,1.791,180,1.117,187,0.482,205,0.295,240,1.792,245,1.971,252,1.766,278,0.946,303,1.825,341,1.286,347,0.716,354,3.167,360,2.631,364,1.602,365,2.576,373,1.971,377,3.646,380,1.664,381,2.245,409,1.462,510,1.466,511,1.545,542,1.417,546,2.016,630,1.518,678,3.868,684,2.295,701,1.926,702,2.183,730,1.776,737,3.414,808,1.417,811,4.133,820,1.191,824,2.124,828,1.883,831,1.842,841,2.809,851,3.02,891,2.068,899,2.183,928,4.44,1014,4.82,1031,2.59,1139,2.183,1167,2.183,1214,2.103,1243,3.184,1257,1.803,1306,3.566,1307,1.883,1501,2.313,1545,3.414,1592,3.173,1601,3.184,1739,5.319,2045,3.566,2223,1.971,2288,2.124,2477,3.02,2577,1.971,2877,2.124,3049,2.313,3061,2.313,3270,2.245,3279,3.375,3286,4.381,3287,2.388,3288,5.019,3289,4.113,3290,3.558,3291,3.484,3292,3.484,3293,2.388,3294,3.484,3295,2.313,3296,4.658,3297,4.113,3298,5.305,3299,3.985,3300,2.313,3301,3.484,3302,2.388,3303,3.484,3304,3.484,3305,3.375,3306,3.375,3307,4.113,3308,2.388,3309,4.658,3310,2.313,3311,2.183,3312,2.313,3313,3.985,3314,2.313,3315,2.388,3316,1.883,3317,3.985,3318,2.388,3319,3.375,3320,4.113,3321,2.388,3322,2.313,3323,2.388,3324,2.388,3325,2.388,3326,2.388,3327,2.388,3328,2.388,3329,2.388,3330,2.388,3331,2.388,3332,2.313,3333,2.313,3334,2.313,3335,2.313,3336,3.484,3337,3.484,3338,4.521,3339,3.276,3340,4.133,3341,4.521,3342,4.521,3343,3.484,3344,3.484,3345,3.484,3346,3.484,3347,3.375,3348,3.276,3349,2.183,3350,2.313,3351,3.985,3352,2.313,3353,2.313,3354,2.388,3355,2.388,3356,2.313,3357,3.375,3358,3.375,3359,2.313]],["title/interfaces/NgxModalAriaLabelOptions.html",[0,0.077,3305,2.856]],["body/interfaces/NgxModalAriaLabelOptions.html",[0,0.145,2,0.606,3,0.037,4,0.032,5,0.037,10,0.097,11,0.147,12,0.528,16,0.211,17,0.006,19,0.199,27,0.073,28,1.675,29,1.207,32,0.818,35,1.961,36,2.205,37,1.817,41,1.917,74,1.352,88,0.003,89,0.003,90,0.384,97,1.961,106,1.094,109,1.463,122,1.42,136,2.369,137,1.257,152,1.228,171,1.918,180,0.959,187,0.491,205,0.301,240,1.816,245,2.007,252,1.798,278,0.963,303,1.566,341,1.31,347,0.729,354,3.191,360,2.666,364,1.632,365,1.798,373,2.007,377,3.352,380,1.694,381,2.287,409,1.472,510,1.493,511,1.573,542,1.443,546,1.832,630,1.546,678,3.32,684,2.326,701,1.961,702,2.223,730,1.789,737,3.444,808,1.443,811,3.799,820,1.213,824,2.164,828,1.917,831,1.876,841,2.847,851,3.06,891,1.443,899,2.223,928,4.306,1014,4.842,1031,2.808,1139,2.223,1167,2.223,1214,2.131,1243,3.227,1257,1.836,1306,3.603,1307,1.917,1501,2.356,1545,3.444,1592,3.206,1601,2.223,1739,5.293,2045,3.603,2223,2.007,2288,2.164,2477,3.06,2577,2.007,2877,2.164,3049,2.356,3061,2.356,3270,2.287,3279,2.356,3286,4.418,3287,2.432,3288,5.051,3289,3.53,3291,2.432,3292,2.432,3293,2.432,3294,3.53,3295,2.356,3296,4.692,3297,4.156,3298,5.324,3299,4.027,3300,2.356,3301,3.53,3302,2.432,3303,3.53,3304,3.53,3305,4.027,3306,3.42,3307,4.156,3308,2.432,3309,4.692,3310,2.356,3311,2.223,3312,2.356,3313,4.027,3314,2.356,3315,2.432,3316,1.917,3317,4.027,3318,2.432,3319,3.42,3320,4.156,3321,2.432,3322,2.356,3323,2.432,3324,2.432,3325,2.432,3326,2.432,3327,2.432,3328,2.432,3329,2.432,3330,2.432,3331,2.432,3332,2.356,3333,2.356,3334,2.356,3335,2.356,3336,3.53,3337,3.53,3338,4.56,3339,3.32,3340,4.169,3341,4.56,3342,4.56,3343,3.53,3344,3.53,3345,3.53,3346,3.53,3347,3.42,3348,3.32,3349,2.223,3350,2.356,3351,4.027,3352,2.356,3353,2.356,3354,2.432,3355,2.432,3356,2.356,3357,3.42,3358,3.42,3359,2.356]],["title/interfaces/NgxModalAriaLabelledOptions.html",[0,0.077,3306,2.856]],["body/interfaces/NgxModalAriaLabelledOptions.html",[0,0.145,2,0.606,3,0.037,4,0.032,5,0.037,10,0.097,11,0.147,12,0.528,16,0.211,17,0.006,19,0.199,27,0.073,28,1.675,29,1.207,32,0.818,35,1.961,36,2.205,37,1.817,41,1.917,74,1.352,88,0.003,89,0.003,90,0.384,97,1.961,106,1.094,109,1.463,122,1.42,136,2.369,137,1.257,152,1.228,171,1.918,180,0.959,187,0.491,205,0.301,240,1.816,245,2.007,252,1.798,278,0.963,303,1.566,341,1.31,347,0.729,354,3.191,360,2.666,364,1.632,365,1.798,373,2.007,377,3.352,380,1.694,381,2.287,409,1.472,510,1.493,511,1.573,542,1.443,546,1.832,630,1.546,678,3.32,684,2.326,701,1.961,702,2.223,730,1.789,737,3.444,808,1.443,811,3.799,820,1.213,824,2.164,828,1.917,831,1.876,841,2.847,851,3.06,891,1.443,899,2.223,928,4.306,1014,4.842,1031,2.808,1139,2.223,1167,2.223,1214,2.131,1243,3.227,1257,1.836,1306,3.603,1307,1.917,1501,2.356,1545,3.444,1592,3.206,1601,2.223,1739,5.293,2045,3.603,2223,2.007,2288,2.164,2477,3.06,2577,2.007,2877,2.164,3049,2.356,3061,2.356,3270,2.287,3279,2.356,3286,4.418,3287,2.432,3288,5.051,3289,3.53,3291,2.432,3292,2.432,3293,2.432,3294,3.53,3295,2.356,3296,4.692,3297,4.156,3298,5.324,3299,4.027,3300,2.356,3301,3.53,3302,2.432,3303,3.53,3304,3.53,3305,3.42,3306,4.027,3307,4.156,3308,2.432,3309,4.692,3310,2.356,3311,2.223,3312,2.356,3313,4.027,3314,2.356,3315,2.432,3316,1.917,3317,4.027,3318,2.432,3319,3.42,3320,4.156,3321,2.432,3322,2.356,3323,2.432,3324,2.432,3325,2.432,3326,2.432,3327,2.432,3328,2.432,3329,2.432,3330,2.432,3331,2.432,3332,2.356,3333,2.356,3334,2.356,3335,2.356,3336,3.53,3337,3.53,3338,4.56,3339,3.32,3340,4.169,3341,4.56,3342,4.56,3343,3.53,3344,3.53,3345,3.53,3346,3.53,3347,3.42,3348,3.32,3349,2.223,3350,2.356,3351,4.027,3352,2.356,3353,2.356,3354,2.432,3355,2.432,3356,2.356,3357,3.42,3358,3.42,3359,2.356]],["title/interfaces/NgxModalBaseConfiguration.html",[0,0.077,3347,2.856]],["body/interfaces/NgxModalBaseConfiguration.html",[0,0.145,2,0.608,3,0.037,4,0.033,5,0.037,10,0.097,11,0.147,12,0.53,16,0.21,17,0.006,19,0.199,27,0.073,28,1.677,29,1.209,32,0.82,35,1.968,36,2.211,37,1.821,41,1.924,74,1.357,88,0.003,89,0.003,90,0.385,97,1.968,106,1.098,109,1.464,122,1.425,136,2.375,137,1.259,152,1.204,171,1.809,180,0.962,187,0.493,205,0.302,240,1.82,245,2.014,252,1.805,278,0.966,303,1.57,341,1.315,347,0.732,354,3.195,360,2.673,364,1.638,365,1.805,373,2.014,377,3.358,380,1.7,381,2.295,409,1.474,510,1.498,511,1.579,542,1.448,546,1.835,630,1.551,678,3.328,684,2.332,701,1.968,702,2.231,730,1.791,737,3.449,808,1.448,811,3.807,820,2.078,824,2.171,828,1.924,831,1.882,841,2.854,851,3.068,891,1.448,899,2.231,928,3.911,1014,4.846,1031,2.613,1139,2.231,1167,2.231,1214,2.514,1243,3.235,1257,2.673,1306,3.96,1307,1.924,1501,2.364,1545,3.449,1592,3.212,1601,2.231,1739,5.295,2045,3.61,2223,2.014,2288,2.171,2477,3.068,2577,2.014,2877,2.171,3049,2.364,3061,2.364,3270,2.295,3279,2.364,3286,4.035,3287,2.44,3288,4.164,3289,3.539,3291,2.44,3292,2.44,3293,2.44,3294,3.539,3295,2.364,3296,4.699,3297,4.164,3298,5.328,3299,4.035,3300,2.364,3301,3.539,3302,2.44,3303,3.539,3304,3.539,3305,3.429,3306,3.429,3307,4.164,3308,2.44,3309,4.699,3310,2.364,3311,2.231,3312,2.364,3313,4.035,3314,2.364,3315,2.44,3316,1.924,3317,4.035,3318,2.44,3319,3.429,3320,4.164,3321,2.44,3322,2.364,3323,2.44,3324,2.44,3325,2.44,3326,2.44,3327,2.44,3328,2.44,3329,2.44,3330,2.44,3331,2.44,3332,2.364,3333,2.364,3334,2.364,3335,2.364,3336,3.539,3337,3.539,3338,4.568,3339,3.328,3340,4.175,3341,4.568,3342,4.568,3343,3.539,3344,3.539,3345,3.539,3346,3.539,3347,4.035,3348,4.756,3349,3.235,3350,2.364,3351,4.035,3352,2.364,3353,2.364,3354,2.44,3355,2.44,3356,2.364,3357,3.429,3358,3.429,3359,2.364]],["title/interfaces/NgxModalBaseOptions.html",[0,0.077,3351,2.856]],["body/interfaces/NgxModalBaseOptions.html",[0,0.143,2,0.564,3,0.034,4,0.03,5,0.034,10,0.09,11,0.14,12,0.813,15,2.29,16,0.216,17,0.006,19,0.192,27,0.071,28,1.794,29,1.172,32,1.021,35,1.825,36,2.49,37,1.743,41,2.641,74,1.862,88,0.003,89,0.003,90,0.357,97,1.825,106,1.019,109,1.495,122,1.321,136,2.957,137,1.214,152,1.232,171,1.745,180,1.083,187,0.677,205,0.28,240,2.266,245,1.868,252,2.477,278,0.896,303,1.769,341,1.219,347,0.678,354,3.244,360,2.529,364,1.518,365,1.674,373,1.868,377,3.553,380,2.334,381,3.149,409,1.549,510,1.389,511,1.464,542,1.343,546,1.889,630,2.129,678,3.749,684,2.206,701,1.825,702,2.069,730,1.737,737,3.327,808,1.343,811,4.028,820,1.129,824,2.98,828,1.784,831,1.746,841,2.701,851,3.82,891,1.343,899,2.069,928,3.793,1014,4.754,1031,2.534,1139,2.069,1167,3.061,1214,2.406,1243,3.061,1257,1.709,1306,3.82,1307,1.784,1501,3.245,1545,3.327,1592,3.399,1601,2.069,1739,5.303,2045,4.269,2223,1.868,2288,2.013,2477,3.456,2577,2.764,2877,2.98,3049,3.245,3061,2.193,3270,2.128,3279,2.193,3286,3.863,3287,2.263,3288,3.987,3289,3.987,3290,3.372,3291,2.263,3292,2.263,3293,2.263,3294,3.349,3295,2.193,3296,4.557,3297,3.987,3298,5.303,3299,3.863,3300,2.193,3301,3.349,3302,2.263,3303,3.349,3304,3.349,3305,3.245,3306,3.245,3307,3.987,3308,2.263,3309,4.557,3310,2.193,3311,2.069,3312,2.193,3313,3.863,3314,2.193,3315,2.263,3316,1.784,3317,3.863,3318,2.263,3319,3.245,3320,4.703,3321,2.263,3322,2.193,3323,2.263,3324,2.263,3325,2.263,3326,2.263,3327,2.263,3328,2.263,3329,2.263,3330,2.263,3331,2.263,3332,2.193,3333,2.193,3334,2.193,3335,2.193,3336,3.987,3337,3.349,3338,4.406,3339,3.149,3340,4.028,3341,4.406,3342,4.406,3343,3.349,3344,3.349,3345,3.349,3346,3.349,3347,3.245,3348,3.149,3349,2.069,3350,2.193,3351,4.269,3352,3.245,3353,4.269,3354,3.349,3355,3.349,3356,4.269,3357,3.245,3358,3.245,3359,2.193]],["title/interfaces/NgxModalCDKModalConfiguration.html",[0,0.077,3317,2.856]],["body/interfaces/NgxModalCDKModalConfiguration.html",[0,0.143,2,0.563,3,0.034,4,0.03,5,0.034,10,0.09,11,0.139,12,0.782,16,0.211,17,0.006,19,0.192,27,0.071,28,1.637,29,1.331,32,0.775,35,1.822,36,2.089,37,1.742,41,1.781,74,1.256,88,0.003,89,0.003,90,0.357,97,2.698,106,1.505,109,1.48,122,1.319,136,2.244,137,1.213,152,1.232,171,1.744,180,0.909,187,0.456,205,0.279,240,1.72,245,1.865,252,1.671,278,0.895,303,1.484,341,1.217,347,0.677,354,3.096,360,3.325,364,2.244,365,1.671,373,2.761,377,3.212,380,1.574,381,2.125,409,1.548,510,2.054,511,2.164,542,1.985,546,1.888,630,1.436,678,3.146,684,2.204,701,1.822,702,2.065,730,1.881,737,3.325,808,1.985,811,3.641,820,1.127,824,2.01,828,2.637,831,3.072,841,2.698,851,2.9,891,1.341,899,2.065,928,3.79,1014,4.752,1031,2.532,1139,3.058,1167,2.065,1214,2.019,1243,4.025,1257,1.706,1306,3.453,1307,2.637,1501,2.189,1545,4.103,1592,3.396,1601,2.065,1739,5.244,2045,3.453,2223,2.761,2288,2.976,2477,3.453,2577,1.865,2877,2.01,3049,2.189,3061,3.241,3270,2.125,3279,2.189,3286,3.859,3287,2.259,3288,3.983,3289,3.345,3291,2.259,3292,2.259,3293,2.259,3294,4.403,3295,2.189,3296,5.405,3297,3.983,3298,5.428,3299,3.859,3300,2.189,3301,3.345,3302,2.259,3303,3.345,3304,3.345,3305,3.241,3306,3.241,3307,3.983,3308,2.259,3309,4.554,3310,2.189,3311,2.065,3312,2.189,3313,3.859,3314,2.189,3315,2.259,3316,1.781,3317,4.266,3318,3.345,3319,4.266,3320,4.403,3321,3.345,3322,3.241,3323,3.345,3324,3.345,3325,3.345,3326,3.345,3327,3.345,3328,3.345,3329,3.345,3330,3.345,3331,3.345,3332,3.241,3333,4.266,3334,4.266,3335,2.189,3336,3.345,3337,3.345,3338,4.403,3339,3.146,3340,4.025,3341,4.403,3342,4.403,3343,3.345,3344,3.345,3345,3.345,3346,3.345,3347,3.241,3348,3.146,3349,2.065,3350,2.189,3351,3.859,3352,2.189,3353,2.189,3354,2.259,3355,2.259,3356,2.189,3357,3.241,3358,3.241,3359,2.189]],["title/interfaces/NgxModalComponentConfiguration.html",[0,0.077,3335,2.856]],["body/interfaces/NgxModalComponentConfiguration.html",[0,0.144,2,0.582,3,0.035,4,0.031,5,0.035,10,0.093,11,0.143,12,0.512,16,0.213,17,0.006,19,0.195,27,0.072,28,1.805,29,1.187,32,0.793,35,1.882,36,2.14,37,1.775,41,1.84,74,1.298,88,0.003,89,0.003,90,0.368,97,1.882,106,1.05,109,1.491,122,1.362,136,2.299,137,1.372,152,1.193,171,1.771,180,0.931,187,0.471,205,0.288,240,2.3,245,1.926,252,1.726,278,0.924,303,1.52,341,1.257,347,0.7,354,3.39,360,2.587,364,1.566,365,1.726,373,1.926,377,3.606,380,1.626,381,2.194,409,1.514,510,1.433,511,1.51,542,1.385,546,1.796,630,2.177,678,3.221,684,2.257,701,1.882,702,2.133,730,1.759,737,3.377,808,1.385,811,4.088,820,1.164,824,2.076,828,1.84,831,1.8,841,3.273,851,2.97,891,1.385,899,2.133,928,3.841,1014,5.127,1031,2.566,1139,2.133,1167,2.133,1214,2.068,1243,3.131,1257,1.762,1306,3.519,1307,1.84,1501,2.261,1545,3.377,1592,3.45,1601,2.133,1739,5.352,2045,3.519,2223,1.926,2288,2.076,2477,2.97,2577,1.926,2877,2.076,3049,2.261,3061,2.261,3270,2.194,3279,2.261,3286,3.932,3287,2.333,3288,4.059,3289,3.425,3291,2.333,3292,2.333,3293,2.333,3294,3.425,3295,2.261,3296,4.615,3297,4.763,3298,5.42,3299,4.333,3300,2.261,3301,3.425,3302,2.333,3303,3.425,3304,3.425,3305,3.319,3306,3.319,3307,4.059,3308,2.333,3309,4.615,3310,2.261,3311,2.133,3312,2.261,3313,4.333,3314,2.261,3315,2.333,3316,1.84,3317,3.932,3318,2.333,3319,3.319,3320,4.059,3321,2.333,3322,2.261,3323,2.333,3324,2.333,3325,2.333,3326,2.333,3327,2.333,3328,2.333,3329,2.333,3330,2.333,3331,2.333,3332,2.261,3333,2.261,3334,2.261,3335,3.319,3336,4.059,3337,3.425,3338,4.979,3339,3.817,3340,4.551,3341,4.979,3342,4.979,3343,4.059,3344,4.059,3345,4.059,3346,4.059,3347,3.319,3348,3.221,3349,2.133,3350,2.261,3351,3.932,3352,2.261,3353,2.261,3354,2.333,3355,2.333,3356,2.261,3357,3.319,3358,3.319,3359,2.261]],["title/interfaces/NgxModalComponentOptions.html",[0,0.077,3358,2.856]],["body/interfaces/NgxModalComponentOptions.html",[0,0.144,2,0.587,3,0.036,4,0.031,5,0.036,10,0.094,11,0.144,12,0.516,16,0.215,17,0.006,19,0.196,27,0.072,28,1.659,29,1.192,32,0.799,35,1.899,36,2.154,37,1.784,41,1.857,74,1.31,88,0.003,89,0.003,90,0.372,97,1.899,106,1.06,109,1.477,122,1.375,136,2.314,137,1.376,152,1.195,171,1.893,180,0.937,187,0.476,205,0.291,240,1.774,245,1.944,252,1.742,278,0.933,303,1.53,341,1.269,347,0.706,354,3.4,360,2.604,364,1.58,365,1.742,373,1.944,377,3.291,380,1.641,381,2.215,409,1.454,510,1.446,511,1.524,542,1.398,546,1.804,630,1.497,678,3.243,684,2.272,701,1.899,702,2.153,730,1.766,737,3.392,808,1.398,811,3.73,820,1.175,824,2.095,828,1.857,831,1.817,841,3.291,851,2.99,891,1.398,899,2.153,928,3.856,1014,5.135,1031,2.78,1139,2.153,1167,2.153,1214,2.082,1243,3.153,1257,1.779,1306,3.538,1307,1.857,1501,2.282,1545,3.392,1592,3.148,1601,2.153,1739,5.327,2045,3.538,2223,1.944,2288,2.095,2477,2.99,2577,1.944,2877,2.095,3049,2.282,3061,2.282,3270,2.215,3279,2.282,3286,3.954,3287,2.355,3288,4.081,3289,3.449,3291,2.355,3292,2.355,3293,2.355,3294,3.449,3295,2.282,3296,4.632,3297,4.781,3298,5.428,3299,4.352,3300,2.282,3301,3.449,3302,2.355,3303,3.449,3304,3.449,3305,3.342,3306,3.342,3307,4.081,3308,2.355,3309,4.632,3310,2.282,3311,2.153,3312,2.282,3313,4.352,3314,2.282,3315,2.355,3316,1.857,3317,3.954,3318,2.355,3319,3.342,3320,4.081,3321,2.355,3322,2.282,3323,2.355,3324,2.355,3325,2.355,3326,2.355,3327,2.355,3328,2.355,3329,2.355,3330,2.355,3331,2.355,3332,2.282,3333,2.282,3334,2.282,3335,2.282,3336,3.449,3337,3.449,3338,4.995,3339,3.837,3340,4.566,3341,4.995,3342,4.995,3343,4.081,3344,4.081,3345,4.081,3346,4.081,3347,3.342,3348,3.243,3349,2.153,3350,2.282,3351,4.352,3352,2.282,3353,2.282,3354,2.355,3355,2.355,3356,2.282,3357,3.342,3358,3.954,3359,2.282]],["title/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.077,3309,2.856]],["body/interfaces/NgxModalGlobalCDKConfiguration.html",[0,0.144,2,0.582,3,0.035,4,0.031,5,0.035,10,0.093,11,0.143,12,0.819,16,0.213,17,0.006,19,0.195,27,0.072,28,1.654,29,1.384,32,0.793,35,1.882,36,2.14,37,1.775,41,1.84,74,1.298,88,0.003,89,0.003,90,0.541,97,1.882,106,1.05,109,1.454,122,1.362,136,2.299,137,1.232,152,1.238,171,1.771,180,0.931,187,0.471,205,0.288,240,1.762,245,2.828,252,1.726,278,0.924,303,1.52,341,1.846,347,0.7,354,3.138,360,2.587,364,1.566,365,1.726,373,1.926,377,3.273,380,1.626,381,2.194,409,1.448,510,1.433,511,1.51,542,1.385,546,1.796,630,1.483,678,3.221,684,2.946,701,1.882,702,2.133,730,1.949,737,4.135,808,1.385,811,3.71,820,1.164,824,2.076,828,1.84,831,1.8,841,2.763,851,2.97,891,1.385,899,2.133,928,3.841,1014,4.792,1031,2.566,1139,2.133,1167,2.133,1214,2.068,1243,3.131,1257,1.762,1306,3.519,1307,1.84,1501,2.261,1545,3.377,1592,3.131,1601,2.133,1739,5.352,2045,3.519,2223,1.926,2288,2.076,2477,2.97,2577,1.926,2877,2.076,3049,2.261,3061,2.261,3270,2.194,3279,2.261,3286,3.932,3287,2.333,3288,4.059,3289,3.425,3291,2.333,3292,2.333,3293,2.333,3294,3.425,3295,2.261,3296,4.615,3297,4.059,3298,5.281,3299,3.932,3300,2.261,3301,3.425,3302,2.333,3303,3.425,3304,3.425,3305,3.319,3306,3.319,3307,4.059,3308,2.333,3309,4.824,3310,4.333,3311,3.131,3312,4.333,3313,4.333,3314,4.333,3315,3.425,3316,3.526,3317,3.932,3318,2.333,3319,3.319,3320,4.059,3321,2.333,3322,2.261,3323,2.333,3324,2.333,3325,2.333,3326,2.333,3327,2.333,3328,2.333,3329,2.333,3330,2.333,3331,2.333,3332,2.261,3333,2.261,3334,2.261,3335,2.261,3336,3.425,3337,3.425,3338,4.472,3339,3.221,3340,4.088,3341,4.472,3342,4.472,3343,3.425,3344,3.425,3345,3.425,3346,3.425,3347,3.319,3348,3.221,3349,2.133,3350,2.261,3351,3.932,3352,2.261,3353,2.261,3354,2.333,3355,2.333,3356,2.261,3357,3.319,3358,3.319,3359,2.261]],["title/injectables/NgxModalService.html",[291,1.428,3256,4.055]],["body/injectables/NgxModalService.html",[3,0.026,4,0.023,5,0.026,7,2.708,10,0.068,11,0.113,12,0.783,15,2.838,16,0.206,17,0.006,19,0.202,27,0.041,28,0.87,29,0.95,31,4.654,32,1.193,34,2.457,35,4.695,37,2.207,42,2.204,44,2.179,47,1.715,48,1.172,49,2.055,55,1.052,61,1.674,68,1.506,72,1.109,73,1.959,81,2.272,88,0.002,89,0.002,90,0.427,96,1.052,105,4.563,109,1.419,122,2.576,128,2.482,134,2.8,137,1.273,174,0.83,180,1.199,183,0.812,184,1.283,187,1.087,191,1.486,193,2.097,194,2.103,196,1.436,205,0.212,229,0.948,236,3.564,240,1.393,268,4.035,271,1.052,278,0.679,281,3.151,291,1.311,293,1.218,300,2.376,304,0.698,331,1.417,341,0.923,347,1.244,362,1.567,365,2.002,379,4.149,380,1.194,399,2.364,407,2.8,409,1.456,442,1.691,456,2.475,458,1.838,531,0.75,532,2.77,630,2.133,684,2.907,730,1.629,737,1.294,738,1.714,743,2.804,757,0.882,808,1.607,836,1.773,837,6.068,849,2.707,850,3.485,852,1.242,858,2.044,859,2.044,861,2.546,862,1.838,946,1.567,947,4.376,973,3.724,974,3.306,975,2.475,982,4.293,991,2.358,1014,3.925,1017,3.491,1031,2.656,1041,1.661,1062,1.995,1165,2.475,1211,1.268,1213,1.486,1214,1.035,1242,1.567,1277,4.035,1282,2.135,1358,2.8,1382,2.093,1416,4.035,1483,2.289,1503,3.643,1529,1.268,1537,1.714,1545,1.294,1629,1.995,1739,5.299,1746,2.358,1772,2.358,1773,1.525,1968,1.415,2040,2.707,2090,2.093,2091,2.093,2093,2.555,2124,2.093,2167,1.567,2299,2.475,2301,2.21,2452,3.724,2471,2.093,2532,4.437,2555,1.911,2620,4.035,2697,2.546,2734,5.243,2745,3.491,2844,2.093,2872,3.019,2877,3.392,3136,1.911,3256,5.709,3257,2.555,3258,2.555,3270,1.612,3272,2.21,3273,1.911,3274,3.491,3275,2.21,3277,2.358,3284,3.491,3295,1.661,3298,3.156,3299,3.251,3310,1.661,3312,1.661,3314,1.661,3316,1.352,3333,1.661,3334,1.661,3340,2.475,3348,2.546,3350,1.661,3353,4.776,3356,1.661,3359,5.212,3360,2.854,3361,5.587,3362,5.587,3363,5.587,3364,5.587,3365,5.587,3366,5.587,3367,4.508,3368,2.854,3369,2.854,3370,2.854,3371,7.523,3372,4.508,3373,7.691,3374,6.91,3375,2.854,3376,4.508,3377,6.347,3378,2.854,3379,2.854,3380,2.854,3381,2.854,3382,4.508,3383,2.854,3384,2.854,3385,4.508,3386,4.508,3387,2.854,3388,4.508,3389,2.854,3390,4.508,3391,2.854,3392,5.681,3393,2.854,3394,2.854,3395,2.854,3396,2.358,3397,2.555,3398,2.358,3399,2.854,3400,2.854,3401,2.854,3402,2.854,3403,2.854,3404,4.508,3405,2.854,3406,2.854,3407,2.854,3408,2.854,3409,2.854,3410,2.854,3411,2.854,3412,7.691,3413,2.854,3414,2.854,3415,2.854,3416,2.854,3417,2.854,3418,2.854,3419,2.854,3420,4.508,3421,2.854,3422,2.854,3423,2.854,3424,2.854,3425,2.854,3426,2.854,3427,2.854,3428,2.854,3429,2.093,3430,2.854,3431,2.854,3432,2.854,3433,2.854,3434,2.854,3435,2.854,3436,4.508,3437,2.854,3438,2.854,3439,4.508,3440,6.347,3441,2.854,3442,4.508,3443,2.854,3444,2.854,3445,2.854,3446,2.854,3447,2.854,3448,2.854,3449,2.854,3450,2.854,3451,2.854,3452,2.854,3453,2.854,3454,2.854,3455,2.854,3456,2.854,3457,2.854,3458,2.854,3459,2.854,3460,2.854,3461,2.854,3462,2.854,3463,2.854,3464,2.854,3465,2.854]],["title/interfaces/NgxModalTypeOptions.html",[0,0.077,3357,2.856]],["body/interfaces/NgxModalTypeOptions.html",[0,0.145,2,0.601,3,0.037,4,0.032,5,0.037,10,0.096,11,0.146,12,0.68,16,0.214,17,0.006,19,0.198,27,0.073,28,1.671,29,1.203,32,0.813,35,1.946,36,2.192,37,1.809,41,1.902,74,1.342,88,0.003,89,0.003,90,0.381,97,1.946,106,1.086,109,1.481,122,1.408,136,2.355,137,1.252,152,1.226,171,1.912,180,0.954,187,0.487,205,0.298,240,1.805,245,1.992,252,1.784,278,0.955,303,1.557,341,1.3,347,0.723,354,3.181,360,2.651,364,1.619,365,1.784,373,1.992,377,3.337,380,1.681,381,2.269,409,1.468,510,1.481,511,1.561,542,1.432,546,1.825,630,1.534,678,3.301,684,2.313,701,1.946,702,2.205,730,1.783,737,3.431,808,1.432,811,3.782,820,1.204,824,2.147,828,1.902,831,1.861,841,2.831,851,3.043,891,1.432,899,2.205,928,3.893,1014,5.029,1031,2.926,1139,2.205,1167,2.205,1214,2.119,1243,3.209,1257,1.822,1306,3.587,1307,1.902,1501,2.338,1545,3.431,1592,3.192,1601,2.205,1739,5.288,2045,3.587,2223,1.992,2288,2.147,2477,3.043,2577,1.992,2877,2.147,3049,2.338,3061,2.338,3270,2.269,3279,2.338,3286,4.009,3287,2.413,3288,4.137,3289,3.51,3291,2.413,3292,2.413,3293,2.413,3294,3.51,3295,2.338,3296,4.678,3297,4.137,3298,5.316,3299,4.009,3300,2.338,3301,3.51,3302,2.413,3303,3.51,3304,3.51,3305,3.401,3306,3.401,3307,4.137,3308,2.413,3309,4.678,3310,2.338,3311,2.205,3312,2.338,3313,4.009,3314,2.338,3315,2.413,3316,1.902,3317,4.009,3318,2.413,3319,3.401,3320,4.137,3321,2.413,3322,2.338,3323,2.413,3324,2.413,3325,2.413,3326,2.413,3327,2.413,3328,2.413,3329,2.413,3330,2.413,3331,2.413,3332,2.338,3333,2.338,3334,2.338,3335,2.338,3336,3.51,3337,3.51,3338,4.543,3339,3.301,3340,4.153,3341,4.543,3342,4.543,3343,3.51,3344,3.51,3345,3.51,3346,3.51,3347,3.401,3348,3.301,3349,2.205,3350,2.338,3351,4.402,3352,2.338,3353,2.338,3354,2.413,3355,2.413,3356,2.338,3357,4.009,3358,3.401,3359,2.338]],["title/injectables/NgxOnlineService.html",[291,1.428,1969,4.055]],["body/injectables/NgxOnlineService.html",[3,0.051,4,0.045,5,0.051,10,0.134,11,0.185,16,0.177,17,0.006,19,0.216,27,0.051,32,1.217,49,1.777,57,3.515,61,2.621,88,0.004,89,0.004,90,0.534,96,0.705,174,2.147,183,1.329,184,1.288,187,1.131,196,1.014,205,0.418,206,1.638,229,1.078,291,2.147,293,2.402,300,2.805,304,1.377,331,1.721,347,1.329,365,3.279,396,3.214,398,3.901,399,2.417,403,3.806,442,3.778,531,1.479,543,3.42,690,4.801,808,2.632,852,3.586,986,3.201,1088,3.18,1213,2.931,1214,2.041,1257,4.368,1282,2.666,1312,6.772,1408,4.794,1440,4.434,1442,3.091,1443,2.931,1444,5.039,1446,2.608,1503,3.496,1773,3.008,1778,3.77,1907,5.897,1920,6.805,1958,4.944,1968,2.791,1969,6.099,1970,8.498,1982,5.855,2005,6.099,2006,4.651,2007,4.651,2780,4.36,3466,9.494,3467,5.63,3468,8.237,3469,7.382,3470,5.63,3471,5.63,3472,7.382,3473,5.63,3474,5.63,3475,7.382,3476,5.63,3477,5.63]],["title/directives/NgxQueryParamFormSyncComponent.html",[323,0.724,631,2.324]],["body/directives/NgxQueryParamFormSyncComponent.html",[0,0.07,3,0.026,4,0.022,5,0.026,7,1.9,10,0.067,11,0.157,12,0.839,15,1.153,16,0.171,17,0.006,19,0.18,20,3.264,21,1.687,27,0.05,28,1.916,32,1.136,34,2.831,36,1.054,40,6.545,42,1.276,44,1.834,49,1.925,50,2.674,54,1.274,55,2.32,57,2.926,61,2.055,64,1.687,66,1.977,76,1.036,83,2.985,88,0.002,89,0.002,90,0.422,96,0.787,97,2.156,104,2.514,106,1.701,107,2.06,109,1.027,135,0.895,137,1.135,139,1.153,152,0.714,162,1.828,171,0.668,174,1.295,177,1.687,180,1.026,183,1.314,184,1.357,187,1.069,193,1.94,194,2.484,195,2.06,196,1.428,200,2.674,203,1.73,205,0.209,206,1.295,209,1.687,218,2.175,229,0.775,255,1.745,266,1.462,270,1.199,273,1.963,287,2.926,300,2.449,304,0.687,305,2.915,323,0.657,325,0.678,329,0.829,331,1.499,347,1.506,353,1.881,354,1.111,362,3.454,363,3.454,365,1.248,380,3.956,388,1.745,396,2.407,397,4.464,398,2.618,399,1.372,403,2.738,409,1.648,412,6.549,413,1.881,419,2.32,422,1.418,442,2.573,454,1.586,455,1.809,479,1.881,531,0.738,543,3.177,554,0.909,564,1.223,596,2.553,631,3.62,665,4.051,734,4.416,742,2.207,752,2.341,792,3.434,823,1.963,849,1.687,851,1.462,852,1.223,858,1.274,859,1.274,861,1.586,865,1.963,866,2.175,975,3.036,986,1.092,992,2.59,1031,0.909,1048,3.703,1088,3.123,1128,2.175,1129,3.362,1138,2.867,1176,3.677,1178,2.06,1188,5.1,1259,6.104,1260,1.809,1306,2.318,1313,2.32,1382,2.06,1397,2.32,1448,2.514,1483,1.426,1503,2.108,1593,4.872,1722,2.32,1726,2.444,1762,2.514,1824,2.32,1895,3.984,1936,1.687,1948,2.06,1958,1.881,1966,3.247,1968,1.393,1975,2.318,1984,1.881,2023,2.175,2124,2.06,2142,3.984,2153,1.963,2167,1.542,2190,6.141,2201,1.542,2213,2.59,2214,1.687,2399,2.514,2401,3.434,2406,3.561,2471,2.06,2554,2.514,2555,3.703,2608,4.397,2764,2.514,2872,1.881,2912,2.06,3152,2.32,3277,2.32,3340,1.542,3398,2.32,3478,8.924,3479,8.924,3480,2.809,3481,8.924,3482,7.644,3483,6.857,3484,5.529,3485,7.295,3486,6.857,3487,4.451,3488,6.857,3489,2.809,3490,3.984,3491,2.809,3492,9.336,3493,2.809,3494,4.451,3495,2.809,3496,6.29,3497,2.809,3498,2.809,3499,2.809,3500,2.809,3501,6.29,3502,6.29,3503,4.451,3504,2.809,3505,6.138,3506,2.809,3507,2.809,3508,5.529,3509,2.809,3510,2.809,3511,4.451,3512,6.29,3513,2.809,3514,4.451,3515,2.809,3516,4.451,3517,2.809,3518,4.451,3519,2.809,3520,7.295,3521,2.809,3522,2.809,3523,2.809,3524,2.809,3525,2.809,3526,2.809,3527,3.984,3528,2.809,3529,2.809,3530,2.809,3531,2.809,3532,2.809,3533,5.529,3534,2.809,3535,2.809,3536,2.809,3537,4.451,3538,2.809,3539,1.963,3540,2.809,3541,2.809,3542,2.809,3543,2.809,3544,2.809,3545,2.809,3546,2.809,3547,2.809,3548,6.29,3549,5.529,3550,2.809,3551,2.809,3552,2.809,3553,2.809,3554,2.809,3555,2.809,3556,4.451,3557,2.809,3558,2.809,3559,2.809,3560,2.514,3561,2.809,3562,2.809,3563,2.809,3564,2.809,3565,2.809,3566,2.809,3567,2.809,3568,2.809,3569,2.809,3570,2.809,3571,4.451,3572,4.451,3573,2.809,3574,2.809,3575,2.809,3576,2.809,3577,2.809,3578,2.809,3579,2.809,3580,2.809,3581,2.809]],["title/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.077,3582,4.055]],["body/interfaces/NgxReplaceElementsConfigurationElement.html",[0,0.137,2,1.094,3,0.066,4,0.058,5,0.066,10,0.174,11,0.217,12,0.781,16,0.211,17,0.005,27,0.087,28,1.411,29,1.389,88,0.005,89,0.005,152,1.284,303,1.947,329,2.834,546,2.316,657,5.107,820,2.604,3582,7.178,3583,6.54,3584,6.54,3585,7.929,3586,8.592,3587,6.54,3588,6.035,3589,5.659]],["title/interfaces/NgxReplaceElementsItem.html",[0,0.077,3589,3.801]],["body/interfaces/NgxReplaceElementsItem.html",[0,0.137,2,1.087,3,0.066,4,0.058,5,0.066,10,0.173,11,0.217,12,0.778,16,0.21,17,0.005,27,0.087,28,1.849,29,1.087,88,0.005,89,0.005,152,1.321,303,2.552,329,2.143,546,1.751,657,6.696,820,2.871,3582,5.997,3583,6.499,3584,6.499,3585,5.997,3586,7.749,3587,6.499,3588,5.997,3589,6.705]],["title/pipes/NgxReplaceElementsPipe.html",[174,1.428,3590,4.394]],["body/pipes/NgxReplaceElementsPipe.html",[3,0.035,4,0.045,5,0.035,7,1.644,11,0.142,12,0.346,16,0.083,17,0.006,19,0.194,27,0.061,28,1.094,32,1.323,34,1.624,37,1.766,41,1.825,42,2.369,44,1.912,47,1.513,49,2.014,50,5.374,51,2.481,55,1.421,61,2.368,66,1.711,74,2.246,75,3.796,88,0.003,89,0.003,90,0.637,96,0.71,97,1.866,98,3.202,106,2.005,109,1.312,136,2.71,137,1.414,152,1.205,174,2.603,176,1.957,177,2.314,179,1.041,180,1.21,182,1.955,183,0.694,184,0.602,185,3.593,186,3.796,187,0.816,193,0.943,194,2.256,195,2.825,196,0.694,200,4.747,203,2.203,204,3.029,205,0.286,206,1.121,211,4.931,229,0.699,238,2.242,252,2.987,270,2.87,271,2.48,274,3.183,282,2.58,287,2.419,303,1.976,329,2.724,331,1.427,335,1.209,352,5.074,353,3.796,354,1.524,358,4.606,371,2.256,388,2.393,399,2.051,409,1.56,455,2.481,456,2.115,458,2.481,461,3.029,462,2.176,497,5.065,509,1.524,531,1.012,539,2.176,542,1.373,545,1.747,546,2.294,554,2.176,573,2.684,657,2.693,680,1.91,743,1.471,757,1.19,772,3.183,790,1.924,801,2.984,809,3.521,831,2.626,858,2.571,859,2.571,863,2.115,891,2.644,946,2.115,986,1.497,988,1.866,990,5.089,992,3.299,1000,3.299,1030,3.183,1037,2.825,1138,2.481,1201,3.183,1211,1.711,1214,1.397,1306,2.006,1330,2.314,1379,3.449,1382,4.157,1408,2.242,1417,1.825,1442,3.112,1443,2.006,1446,1.785,1456,2.984,1562,4.39,1594,2.984,1601,2.115,1629,2.693,1659,3.112,1665,5.292,1726,4.071,1778,2.58,2038,2.984,2040,2.314,2045,2.006,2153,2.693,2299,3.692,2328,2.984,2401,2.393,2416,3.183,2471,4.157,2477,2.006,2482,4.682,2587,3.183,2662,2.984,2697,2.176,2844,2.825,2872,3.796,2879,3.449,2912,6.429,2918,3.183,2919,3.183,2925,7.847,2984,4.682,3039,2.984,3214,2.984,3276,3.449,3285,4.682,3296,3.913,3322,2.242,3340,2.115,3349,2.115,3585,6.126,3588,3.183,3589,5.743,3590,6.019,3591,7.415,3592,7.415,3593,3.852,3594,7.415,3595,7.902,3596,3.852,3597,6.724,3598,6.724,3599,5.668,3600,3.852,3601,5.668,3602,5.668,3603,3.852,3604,3.852,3605,3.852,3606,3.852,3607,7.415,3608,3.852,3609,3.852,3610,3.852,3611,3.852,3612,3.852,3613,6.724,3614,5.668,3615,3.852,3616,3.852,3617,3.852,3618,3.852,3619,3.852,3620,3.852,3621,3.852,3622,3.183,3623,3.852,3624,3.852,3625,3.852,3626,3.852,3627,3.852,3628,3.852,3629,5.668,3630,3.852,3631,3.449,3632,3.852,3633,3.852,3634,3.852,3635,3.852,3636,3.852,3637,3.852,3638,3.852,3639,3.852,3640,5.668,3641,3.449,3642,3.852,3643,3.449,3644,3.852,3645,5.668,3646,3.852,3647,3.449,3648,3.852,3649,3.852,3650,6.724,3651,3.449,3652,5.668,3653,3.852,3654,3.852,3655,3.852,3656,3.852,3657,3.852,3658,3.852,3659,3.852,3660,3.852,3661,3.852,3662,3.852,3663,3.852,3664,3.852,3665,3.852,3666,3.852,3667,3.852,3668,3.852,3669,3.852,3670,3.852,3671,3.852]],["title/classes/NgxSaveOnExitAbstractService.html",[90,0.465,3672,4.394]],["body/classes/NgxSaveOnExitAbstractService.html",[3,0.063,4,0.055,5,0.063,10,0.164,11,0.21,12,0.845,15,3.442,16,0.18,17,0.005,19,0.237,27,0.063,29,1.03,88,0.004,89,0.004,90,0.652,92,4.133,109,1.353,122,2.939,184,1.533,187,1.017,300,2.589,304,1.683,365,3.723,380,3.508,417,6.492,596,3.142,632,3.884,851,4.364,1260,4.431,2290,6.492,2608,4.81,2670,7.503,3672,7.503,3673,8.091,3674,8.091,3675,6.881,3676,9.039,3677,9.039,3678,6.881,3679,8.382,3680,8.382,3681,6.881,3682,8.382,3683,8.382,3684,6.881,3685,6.881,3686,6.881]],["title/directives/NgxSaveOnExitComponent.html",[323,0.724,632,2.274]],["body/directives/NgxSaveOnExitComponent.html",[3,0.046,4,0.04,5,0.046,10,0.12,11,0.172,12,0.617,16,0.148,17,0.006,19,0.18,27,0.046,29,1.352,32,1.085,34,1.447,44,1.936,47,1.592,49,1.481,57,2.93,61,2.058,81,2.752,88,0.004,89,0.004,90,0.479,96,0.859,109,1.352,137,1.385,180,1.12,183,1.236,184,1.533,187,1.141,193,1.68,196,1.507,205,0.375,206,1.997,229,1.079,300,2.121,304,1.236,323,1.013,325,1.218,331,1.646,336,3.878,340,3.704,341,3.242,345,2.504,347,1.236,354,3.573,362,2.773,370,3.033,379,2.853,396,4.021,398,3.964,399,1.936,403,3.644,417,6.042,442,3.284,455,5.024,596,3.086,632,3.181,690,3.77,730,2.003,733,4.846,841,3.326,980,6.983,1137,2.853,1257,3.538,1446,4.542,1771,3.912,1958,4.598,3136,4.598,3332,5.255,3673,8.532,3674,8.532,3687,5.05,3688,7.801,3689,6.866,3690,8.371,3691,8.371,3692,6.866,3693,6.866,3694,9.03,3695,7.801,3696,6.866,3697,7.801,3698,6.866,3699,5.05,3700,5.05,3701,6.146,3702,5.05,3703,5.05,3704,6.866,3705,6.866,3706,5.672,3707,6.983,3708,6.866,3709,6.866,3710,5.05,3711,5.05,3712,5.05,3713,5.05,3714,5.05,3715,5.05,3716,5.05]],["title/injectables/NgxSignalStoreService.html",[291,1.428,3717,4.394]],["body/injectables/NgxSignalStoreService.html",[3,0.061,4,0.053,5,0.061,10,0.159,11,0.206,16,0.144,17,0.005,19,0.216,27,0.061,44,2.064,49,1.776,57,3.513,88,0.004,89,0.004,90,0.633,96,0.836,99,4.791,106,2.225,184,1.045,187,0.999,196,1.607,205,0.496,291,2.395,293,2.851,305,4.708,377,3.237,397,4.134,409,1.22,422,3.175,596,3.253,757,2.064,808,3.181,858,3.03,859,3.03,861,3.774,986,2.597,1031,2.162,1282,3.164,1396,4.791,1520,4.9,1936,4.013,2751,6.376,3717,7.987,3718,6.681,3719,7.407,3720,6.681,3721,8.232,3722,5.981,3723,6.681,3724,8.232,3725,6.911,3726,5.175,3727,6.376]],["title/interfaces/NgxSignalStoreSlice.html",[0,0.077,3728,3.801]],["body/interfaces/NgxSignalStoreSlice.html",[0,0.121,2,0.731,3,0.044,4,0.039,5,0.044,10,0.116,11,0.168,16,0.214,17,0.006,19,0.216,27,0.086,28,1.917,29,1.433,36,1.831,37,1.762,54,2.213,68,3.058,76,3.043,88,0.004,89,0.004,96,0.611,105,4.166,114,3.264,135,1.555,137,0.808,139,2.754,148,4.328,151,5.125,152,0.866,156,3.031,162,2.004,171,2.218,173,4.935,183,1.558,190,2.276,205,0.362,229,0.601,240,3.081,255,5.373,256,2.756,303,1.3,305,4.141,331,0.843,347,1.704,380,2.042,422,1.555,462,2.756,506,1.604,539,1.579,699,4.736,820,2.01,1019,3.268,1031,1.579,1307,3.908,1344,2.364,1396,3.903,1726,3.682,2205,3.584,2309,4.491,3719,7.222,3725,3.779,3726,3.779,3728,6.39,3729,4.031,3730,4.031,3731,5.54,3732,3.779,3733,5.54,3734,4.031,3735,4.031,3736,7.145,3737,5.54,3738,6.33,3739,5.54,3740,4.031,3741,4.031,3742,6.816,3743,5.54,3744,6.33,3745,4.031,3746,4.031,3747,6.33,3748,5.194,3749,5.935,3750,5.619,3751,5.54,3752,5.54,3753,4.031,3754,4.031,3755,4.031,3756,4.031,3757,4.031,3758,4.031]],["title/interfaces/NgxSignalStoreSliceArrayMethods.html",[0,0.077,3748,3.801]],["body/interfaces/NgxSignalStoreSliceArrayMethods.html",[0,0.12,2,0.723,3,0.044,4,0.039,5,0.044,10,0.115,11,0.167,15,3.82,16,0.214,17,0.006,19,0.215,27,0.086,28,1.863,29,1.334,36,1.811,37,1.749,54,2.19,68,2.743,76,3.029,88,0.003,89,0.003,96,0.604,105,4.136,114,2.928,135,2.617,137,0.799,139,2.734,148,4.304,151,4.734,152,0.859,156,2.999,162,3.373,171,2.246,173,4.908,183,1.604,190,2.26,205,0.358,229,0.595,240,3.046,255,5.353,256,2.727,303,1.287,305,4.23,331,0.834,347,1.7,380,2.021,422,1.538,462,3.761,506,2.7,539,1.562,699,4.724,820,1.995,1019,4.459,1031,1.562,1307,4.081,1344,2.339,1396,3.875,1726,2.651,2205,2.58,2309,4.459,3719,7.07,3725,3.74,3726,3.74,3728,5.902,3729,3.989,3730,3.989,3731,5.5,3732,3.74,3733,5.5,3734,3.989,3735,3.989,3736,7.118,3737,5.5,3738,6.295,3739,5.5,3740,3.989,3741,3.989,3742,6.786,3743,5.5,3744,6.295,3745,3.989,3746,3.989,3747,6.295,3748,5.902,3749,6.362,3750,6.024,3751,5.5,3752,5.5,3753,6.786,3754,3.989,3755,3.989,3756,3.989,3757,3.989,3758,3.989]],["title/interfaces/NgxSignalStoreSliceBaseMethods.html",[0,0.077,3749,3.801]],["body/interfaces/NgxSignalStoreSliceBaseMethods.html",[0,0.12,2,0.719,3,0.044,4,0.038,5,0.044,10,0.115,11,0.166,15,3.919,16,0.215,17,0.006,19,0.215,27,0.086,28,1.861,29,1.332,36,1.802,37,1.743,54,2.178,68,2.737,76,3.022,88,0.003,89,0.003,96,0.601,105,4.121,114,2.922,135,1.53,137,1.356,139,3.532,148,4.293,151,4.721,152,0.856,156,2.984,162,1.972,171,2.243,173,4.894,183,1.602,190,2.252,205,0.357,229,0.592,240,3.044,255,5.343,256,2.713,303,1.28,305,4.224,331,0.829,347,1.698,380,2.01,422,1.53,462,2.713,506,1.579,539,1.554,699,4.718,820,1.988,1019,3.217,1031,1.554,1307,4.073,1344,2.327,1396,3.861,1726,2.637,2205,2.567,2309,5.76,3719,7.06,3725,3.72,3726,3.72,3728,5.886,3729,3.968,3730,3.968,3731,5.48,3732,3.72,3733,6.278,3734,3.968,3735,3.968,3736,7.105,3737,5.48,3738,6.278,3739,5.48,3740,3.968,3741,3.968,3742,6.771,3743,5.48,3744,6.278,3745,3.968,3746,3.968,3747,6.278,3748,5.138,3749,6.348,3750,6.01,3751,7.105,3752,7.105,3753,3.968,3754,3.968,3755,3.968,3756,3.968,3757,3.968,3758,3.968]],["title/interfaces/NgxStorage.html",[0,0.077,3759,3.287]],["body/interfaces/NgxStorage.html",[0,0.149,2,0.964,3,0.059,4,0.052,5,0.059,10,0.154,11,0.201,15,4.128,16,0.218,17,0.006,19,0.169,27,0.089,76,3.559,88,0.004,89,0.004,137,1.332,139,3.963,152,1.246,171,2.087,240,2.923,300,2.486,304,1.575,506,2.645,532,3.192,790,2.185,820,1.93,985,6.156,1299,4.312,2577,3.192,2578,4.312,3759,5.388,3760,4.722,3761,6.426,3762,6.426,3763,6.426,3764,4.501,3765,5.624,3766,6.426,3767,5.877,3768,5.624,3769,4.501,3770,5.877,3771,5.877,3772,4.501]],["title/interfaces/NgxStorageBaseEvent.html",[0,0.077,3766,3.431]],["body/interfaces/NgxStorageBaseEvent.html",[0,0.15,2,0.982,3,0.06,4,0.053,5,0.06,10,0.156,11,0.204,16,0.219,17,0.006,19,0.172,27,0.089,76,3.575,88,0.004,89,0.004,137,1.531,139,3.906,152,1.251,171,2.105,240,2.939,300,2.514,304,1.604,506,3.041,532,3.251,790,2.226,820,1.966,985,4.392,1299,4.392,2577,3.251,2578,6.196,3759,4.392,3760,4.809,3761,4.584,3762,4.584,3763,4.584,3764,4.584,3765,6.468,3766,6.65,3767,5.926,3768,5.689,3769,4.584,3770,5.926,3771,5.926,3772,4.584]],["title/interfaces/NgxStorageClearEvent.html",[0,0.077,3770,3.287]],["body/interfaces/NgxStorageClearEvent.html",[0,0.151,2,1.006,3,0.061,4,0.054,5,0.061,10,0.16,11,0.207,16,0.218,17,0.006,19,0.176,27,0.09,76,3.596,88,0.004,89,0.004,137,1.367,139,3.673,152,1.259,171,2.22,240,2.96,300,2.552,304,1.644,506,2.716,532,3.332,790,2.281,820,2.014,985,4.501,1299,4.501,2577,3.332,2578,4.501,3759,4.501,3760,4.928,3761,4.698,3762,4.698,3763,4.698,3764,4.698,3765,5.775,3766,6.697,3767,5.991,3768,5.775,3769,4.698,3770,6.249,3771,5.991,3772,4.698]],["title/interfaces/NgxStorageRemoveEvent.html",[0,0.077,3771,3.287]],["body/interfaces/NgxStorageRemoveEvent.html",[0,0.15,2,0.986,3,0.06,4,0.053,5,0.06,10,0.157,11,0.204,16,0.219,17,0.006,19,0.173,27,0.09,76,3.695,88,0.004,89,0.004,137,1.35,139,3.64,152,1.283,171,2.204,240,3.039,300,2.521,304,1.611,506,2.682,532,3.265,790,2.235,820,1.974,985,4.411,1299,4.411,2577,3.265,2578,4.411,3759,4.411,3760,4.83,3761,4.604,3762,4.604,3763,4.604,3764,4.604,3765,5.704,3766,6.658,3767,5.937,3768,6.658,3769,4.604,3770,5.937,3771,6.205,3772,4.604]],["title/injectables/NgxStorageService.html",[291,1.428,3773,4.394]],["body/injectables/NgxStorageService.html",[3,0.021,4,0.019,5,0.021,7,1.637,10,0.056,11,0.185,12,0.637,16,0.21,17,0.006,19,0.176,26,1.998,27,0.044,28,0.741,29,0.35,32,1.349,34,2.51,36,1.831,42,1.923,44,2.198,47,1.446,49,2.042,61,2.124,73,0.819,75,1.565,76,3.489,81,1.261,88,0.002,89,0.002,90,0.463,96,0.887,97,1.132,99,2.233,105,3.032,107,2.814,128,1.038,136,0.942,137,1.033,139,3.24,152,1.236,162,2.005,177,1.403,180,1.156,183,0.879,184,0.976,187,1.05,190,1.302,193,1.93,194,1.719,196,1.456,200,2.304,203,0.908,205,0.173,219,2.091,229,0.769,240,2.437,266,1.998,267,2.107,270,2.411,271,2.301,287,1.637,291,1.116,293,0.997,300,2.847,304,0.572,305,1.083,331,1.494,341,2.864,347,0.421,353,1.565,358,4.402,365,2.51,375,2.841,379,4.18,382,1.93,399,2.406,409,0.701,422,1.222,432,2.383,442,3.41,506,2.593,524,2.091,527,5.058,531,0.614,532,1.158,680,1.158,690,3.103,738,1.403,742,1.902,743,2.383,752,1.441,757,0.722,760,2.383,790,3.261,808,1.74,820,2.929,858,2.214,859,2.214,863,1.283,870,3.144,975,3.103,985,4.492,986,1.897,1005,4.029,1031,2.616,1137,1.32,1145,1.505,1213,1.217,1214,0.847,1244,1.32,1282,2.312,1299,5.714,1300,2.972,1396,2.841,1408,3.289,1440,2.304,1442,1.283,1443,1.217,1446,2.892,1455,1.633,1483,1.949,1688,5.542,1771,2.972,1773,2.609,1778,3.784,1936,1.403,1975,2.542,1982,3.269,2023,1.81,2026,1.505,2288,1.249,2472,2.091,2527,2.091,2577,3.094,2578,6.878,2597,2.091,2608,2.682,2609,8.25,2671,2.091,2780,1.81,3152,3.169,3300,1.36,3490,3.434,3622,4.668,3651,2.091,3759,4.18,3761,4.689,3762,5.173,3763,4.689,3764,6.4,3765,5.515,3767,3.784,3768,4.363,3769,2.682,3770,3.784,3771,3.784,3772,2.682,3773,7.062,3774,8.756,3775,2.336,3776,5.651,3777,6.344,3778,4.881,3779,4.881,3780,7.087,3781,4.881,3782,4.881,3783,3.837,3784,3.837,3785,8.401,3786,2.336,3787,2.336,3788,2.336,3789,3.837,3790,6.241,3791,3.837,3792,2.336,3793,2.336,3794,2.336,3795,3.837,3796,2.336,3797,3.837,3798,2.336,3799,2.336,3800,2.336,3801,2.336,3802,3.837,3803,2.336,3804,3.837,3805,2.336,3806,2.336,3807,3.837,3808,2.336,3809,2.336,3810,2.336,3811,2.336,3812,2.336,3813,2.336,3814,2.336,3815,2.336,3816,2.336,3817,2.336,3818,2.336,3819,1.217,3820,2.336,3821,4.881,3822,2.336,3823,2.336,3824,1.93,3825,2.336,3826,2.336,3827,3.434,3828,2.336,3829,3.837,3830,3.434,3831,3.434,3832,3.837,3833,3.837,3834,2.336,3835,2.336,3836,2.336,3837,2.336,3838,2.336,3839,2.336,3840,6.241,3841,2.336,3842,6.241,3843,3.837,3844,4.881,3845,3.837,3846,3.837,3847,2.336,3848,2.336,3849,3.837,3850,6.241,3851,2.336,3852,2.336,3853,2.336,3854,2.336,3855,2.336,3856,2.336,3857,2.336,3858,4.881,3859,2.336,3860,2.336,3861,2.336,3862,2.336,3863,2.336,3864,2.336,3865,2.336,3866,2.336,3867,2.336,3868,2.336,3869,2.336,3870,2.336,3871,2.336,3872,2.336]],["title/interfaces/NgxStorageSetEvent.html",[0,0.077,3767,3.287]],["body/interfaces/NgxStorageSetEvent.html",[0,0.15,2,0.976,3,0.059,4,0.052,5,0.059,10,0.155,11,0.203,16,0.22,17,0.006,19,0.171,27,0.089,76,3.689,88,0.004,89,0.004,137,1.342,139,3.624,152,1.281,171,2.196,240,3.091,300,2.505,304,1.595,506,2.666,532,3.233,790,2.213,820,1.954,985,4.367,1299,4.367,2577,3.233,2578,4.367,3759,4.367,3760,4.782,3761,4.559,3762,4.559,3763,4.559,3764,4.559,3765,5.669,3766,6.639,3767,6.184,3768,6.639,3769,6.455,3770,5.91,3771,5.91,3772,4.559]],["title/interfaces/NgxStore.html",[0,0.077,3873,3.801]],["body/interfaces/NgxStore.html",[0,0.122,2,0.905,3,0.055,4,0.048,5,0.055,10,0.144,11,0.193,16,0.212,17,0.006,19,0.243,27,0.082,35,4.128,38,2.741,49,1.838,51,3.891,76,2.85,88,0.004,89,0.004,96,0.756,101,3.744,102,2.996,106,1.634,122,2.119,123,5.579,124,3.229,127,5.118,128,4.218,130,5.243,131,5.074,145,5.668,146,4.68,147,5.707,148,4.813,153,5.986,154,4.047,155,5.668,156,3.754,191,4.024,194,1.839,255,4.801,271,2.228,305,4.472,316,4.431,317,4.801,409,1.411,536,3.505,539,2.501,820,1.811,1381,7.669,1958,4.047,1965,5.176,2153,5.403,2763,4.992,3175,6.385,3750,6.249,3824,4.992,3873,5.986,3874,5.409,3875,6.918,3876,8.04,3877,7.42,3878,5.409,3879,6.918,3880,4.992,3881,4.431,3882,4.992,3883,4.224,3884,8.31,3885,5.409,3886,5.409,3887,5.409,3888,5.409,3889,5.409,3890,5.409]],["title/injectables/NgxStoreService.html",[291,1.428,3539,3.431]],["body/injectables/NgxStoreService.html",[0,0.073,2,0.692,3,0.042,4,0.037,5,0.042,10,0.11,11,0.162,12,0.81,16,0.201,17,0.006,19,0.211,27,0.042,28,1.247,32,0.643,34,2.31,36,3.732,44,2.128,49,1.606,68,2.935,74,2.157,76,2.381,88,0.003,89,0.003,90,0.438,96,1.009,97,3.128,98,5.281,99,3.758,113,2.87,114,2.302,124,2.469,131,5.201,151,5.945,180,1.384,183,1.163,184,1.521,187,1.117,193,2.207,196,1.527,205,0.343,209,2.775,229,0.57,271,2.381,291,1.878,293,1.972,300,2.888,304,1.13,305,4.628,329,2.924,331,1.285,354,1.828,397,3.449,399,1.847,407,2.87,409,1.647,422,3.139,461,2.469,531,1.696,539,1.495,792,2.87,808,2.302,836,2.87,841,3.128,861,2.61,868,2.975,986,3.296,1031,2.409,1165,3.546,1520,4.736,1951,5.001,2555,3.094,2751,3.579,3539,5.204,3722,4.136,3873,3.579,3877,6.658,3883,3.23,3891,4.62,3892,6.658,3893,5.335,3894,5.335,3895,5.335,3896,5.335,3897,4.62,3898,6.457,3899,5.335,3900,4.62,3901,5.335,3902,4.62,3903,5.335,3904,4.62,3905,5.335,3906,5.335,3907,4.62,3908,6.444,3909,4.62,3910,5.335,3911,4.62,3912,4.62,3913,7.444,3914,4.62,3915,4.62,3916,4.62,3917,4.62,3918,4.62,3919,4.62,3920,4.62,3921,4.62,3922,4.62,3923,4.62,3924,4.62,3925,4.62,3926,4.62,3927,4.62,3928,4.62,3929,4.62,3930,4.62,3931,4.62,3932,4.62]],["title/directives/NgxTableCellDirective.html",[323,0.724,633,2.324]],["body/directives/NgxTableCellDirective.html",[3,0.042,4,0.037,5,0.042,10,0.109,11,0.161,12,0.577,16,0.193,17,0.005,19,0.168,27,0.042,32,1.298,38,2.91,47,1.512,48,3.042,72,1.78,81,3.17,88,0.003,89,0.003,90,0.608,96,0.573,137,1.399,152,0.591,171,1.526,179,1.238,180,1.209,182,2.214,183,1.156,184,1.602,187,1.206,193,1.12,196,1.334,205,0.34,229,1.178,235,3.259,246,3.341,252,2.851,270,2.738,282,4.297,287,2.738,288,4.706,323,0.947,325,1.105,329,1.895,331,1.585,335,2.013,337,2.949,341,1.482,345,3.673,347,1.334,349,2.665,350,2.586,363,3.523,375,2.665,409,1.172,539,2.835,542,2.288,554,2.077,564,3.495,591,3.042,595,4.489,633,3.802,669,5.612,690,2.514,705,5.941,706,4.706,707,5.433,708,6.248,709,5.887,710,5.643,711,5.433,712,5.179,713,4.771,714,6.733,715,5.433,716,5.738,717,5.738,718,4.97,720,4.486,722,3.625,723,3.986,724,4.486,725,4.97,726,4.97,727,4.97,728,4.97,730,1.781,733,2.844,734,4.133,736,3.358,737,3.834,738,2.75,739,3.547,740,4.771,742,2.27,743,1.748,745,4.46,752,1.352,1031,2.835,1120,3.201,1201,5.301,1616,6.125,1832,5.301,1833,5.301,1834,5.301,1835,5.301,1836,3.783,1837,3.783,1838,3.783,1850,5.301,1852,5.301,1854,3.783,1855,3.783,1856,3.783,3933,4.579,3934,4.579,3935,6.417,3936,4.579,3937,4.579,3938,4.579,3939,4.579]],["title/interfaces/NgxTableConfiguration.html",[0,0.077,3940,4.055]],["body/interfaces/NgxTableConfiguration.html",[0,0.075,2,0.707,3,0.043,4,0.038,5,0.043,7,3.473,10,0.113,11,0.204,12,0.9,16,0.217,17,0.005,19,0.172,27,0.074,29,1.451,37,1.723,42,1.354,61,1.416,64,5.315,68,2.19,88,0.003,89,0.003,90,0.771,96,0.591,105,2.935,109,0.982,114,3.155,137,1.531,144,3.505,152,1.142,203,2.549,205,0.351,229,1.091,235,3.331,270,4.06,278,1.124,287,2.799,337,5.844,363,3.601,379,3.705,413,4.392,422,2.819,461,4.349,509,3.661,554,2.122,564,4.302,609,1.94,634,2.189,635,2.189,636,2.189,713,3.043,730,2.151,790,3.189,982,6.106,1139,3.601,1145,5.241,1330,5.451,1503,3.106,1529,3.931,1636,5.747,2040,3.939,2144,5.726,2489,4.585,2664,5.418,3706,5.418,3940,6.223,3941,4.724,3942,4.724,3943,6.558,3944,8.282,3945,8.12,3946,7.31,3947,8.848,3948,8.282,3949,7.285,3950,8.848,3951,7.921,3952,7.921,3953,5.871,3954,7.921,3955,5.871,3956,7.285,3957,6.723,3958,7.285,3959,6.558,3960,8.138,3961,4.229,3962,4.229,3963,4.724,3964,4.229]],["title/interfaces/NgxTableCypressDataTagsBase.html",[0,0.077,3965,4.055]],["body/interfaces/NgxTableCypressDataTagsBase.html",[0,0.137,2,1.09,3,0.066,4,0.058,5,0.066,10,0.174,11,0.217,12,0.893,16,0.206,17,0.005,19,0.191,27,0.079,29,1.299,88,0.005,89,0.005,152,1.315,235,4.975,246,4.993,264,4.877,705,5.759,755,5.641,1943,6.016,3965,7.165,3966,6.519,3967,6.519,3968,7.764,3969,6.519,3970,5.641,3971,6.016]],["title/pipes/NgxTableGetPipe.html",[174,1.428,1870,4.055]],["body/pipes/NgxTableGetPipe.html",[3,0.058,4,0.051,5,0.058,12,0.577,16,0.138,17,0.006,19,0.211,27,0.073,32,1.388,36,3.288,44,2.231,47,1.639,48,2.637,49,1.891,64,5.264,73,2.252,88,0.004,89,0.004,90,0.761,96,0.804,136,3.237,152,1.245,173,4.135,174,2.671,176,3.261,179,1.736,180,1.43,182,2.77,183,1.156,184,1.256,185,3.431,186,5.379,187,0.779,193,1.571,196,1.578,204,4.684,205,0.477,206,2.336,354,3.178,409,1.601,414,6.221,455,5.172,458,5.172,743,3.066,863,3.526,1651,6.682,1865,4.3,1870,7.81,1872,7.189,1994,5.304,2195,4.973,3972,8.031,3973,6.421,3974,6.421,3975,5.748,3976,5.748,3977,5.304,3978,8.031,3979,6.421,3980,6.421]],["title/pipes/NgxTableHasObserversPipe.html",[174,1.428,3981,4.055]],["body/pipes/NgxTableHasObserversPipe.html",[3,0.064,4,0.056,5,0.064,12,0.633,16,0.152,17,0.005,19,0.185,27,0.064,29,1.273,34,2.02,44,1.63,47,1.936,66,3.131,83,3.702,88,0.004,89,0.004,90,0.668,96,0.882,137,1.408,174,2.05,176,3.58,179,1.906,180,1.491,182,2.934,183,1.269,184,1.33,185,4.545,187,0.855,193,1.725,196,1.645,204,3.767,205,0.523,206,2.05,349,5.316,350,5.358,409,1.553,471,7.614,472,6.31,474,6.31,475,8.491,3981,7.026,3982,8.505,3983,8.505,3984,7.049,3985,8.505,3986,7.049,3987,7.049]],["title/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[323,0.724,634,2.274]],["body/directives/NgxTableOpenRowStateTemplateAbstractComponent.html",[3,0.057,4,0.05,5,0.057,10,0.237,11,0.197,16,0.206,17,0.005,19,0.163,27,0.057,28,1.668,88,0.004,89,0.004,90,0.59,96,0.779,109,1.402,137,1.303,184,1.551,187,1.161,205,0.462,229,0.971,323,1.162,325,1.501,335,2.47,354,3.116,371,2.762,409,1.438,422,3.221,539,2.548,576,3.571,596,2.885,634,3.648,752,2.55,982,5.818,988,4.843,1057,8.384,1636,6.427,3988,9.716,3989,5.14,3990,6.505,3991,6.505,3992,7.874,3993,7.874,3994,7.733,3995,7.874]],["title/directives/NgxTableSelectTemplateAbstractComponent.html",[323,0.724,635,2.274]],["body/directives/NgxTableSelectTemplateAbstractComponent.html",[3,0.058,4,0.051,5,0.058,10,0.238,11,0.2,16,0.207,17,0.005,19,0.209,21,3.82,27,0.058,70,6.612,88,0.004,89,0.004,90,0.603,96,0.796,98,4.509,102,4.326,109,1.195,137,1.321,184,1.557,187,1.168,194,2.655,205,0.472,229,0.984,323,1.178,325,1.534,335,2.504,354,3.159,371,2.971,409,1.458,539,2.583,576,3.621,596,2.914,635,3.699,988,4.86,1593,4.925,1636,6.268,3989,5.253,3990,6.595,3991,6.595,3996,9.763,3997,7.983,3998,7.983,3999,7.983,4000,8.725]],["title/pipes/NgxTableShowHeaderPipe.html",[174,1.428,4001,4.055]],["body/pipes/NgxTableShowHeaderPipe.html",[3,0.056,4,0.05,5,0.056,12,0.558,16,0.133,17,0.006,19,0.226,27,0.072,29,1.177,32,1.33,35,3.006,36,3.237,42,1.778,44,2.165,47,1.91,49,1.957,61,1.86,64,4.721,73,2.756,74,2.072,88,0.004,89,0.004,90,0.745,96,0.777,105,4.883,114,2.212,135,1.977,137,1.027,152,0.801,174,2.638,176,3.151,179,1.678,180,1.408,182,2.711,183,1.117,184,1.229,185,4.201,186,4.156,187,0.753,193,1.518,196,1.554,204,4.611,205,0.461,206,2.286,235,4.753,270,3.682,354,2.455,455,3.996,458,3.996,730,1.744,757,1.917,863,3.407,900,5.126,1211,2.757,1529,3.492,1636,3.854,1994,5.126,3957,7.493,3970,7.025,3975,5.555,3976,5.555,3977,5.126,4001,7.493,4002,7.86,4003,7.86,4004,6.205,4005,7.86,4006,9.07,4007,6.205,4008,6.205,4009,6.205,4010,6.205,4011,6.205,4012,5.126,4013,5.555,4014,6.205,4015,7.86,4016,6.205,4017,6.205]],["title/interfaces/NgxTableShowHeaderRequirements.html",[0,0.077,3970,3.801]],["body/interfaces/NgxTableShowHeaderRequirements.html",[0,0.138,2,1.113,3,0.068,4,0.06,5,0.068,10,0.177,11,0.22,16,0.201,17,0.005,19,0.195,27,0.08,29,1.495,88,0.005,89,0.005,152,1.206,235,4.459,246,3.872,264,4.979,705,4.466,755,5.759,1943,7.975,3965,6.142,3966,6.656,3967,6.656,3968,7.86,3969,6.656,3970,6.801,3971,7.975]],["title/interfaces/NgxTableSortEvent.html",[0,0.077,756,3.599]],["body/interfaces/NgxTableSortEvent.html",[0,0.12,2,1.143,3,0.069,4,0.061,5,0.069,10,0.182,11,0.223,16,0.192,17,0.005,19,0.2,27,0.069,88,0.005,89,0.005,708,6.52,737,4.416,740,6.27,753,6.832,754,6.832,756,6.539,4018,7.632,4019,7.632,4020,9.446]],["title/pipes/NgxTableSortIconPipe.html",[174,1.428,4021,4.055]],["body/pipes/NgxTableSortIconPipe.html",[3,0.062,4,0.055,5,0.062,12,0.616,16,0.148,17,0.006,19,0.219,27,0.062,34,1.966,44,1.935,47,1.708,48,3.707,88,0.004,89,0.004,90,0.65,96,0.859,152,1.08,174,2.434,176,3.484,179,1.855,180,1.473,182,2.886,183,1.235,184,1.308,185,3.666,187,0.833,193,1.678,196,1.626,204,4.471,205,0.509,206,1.996,409,1.716,713,6.052,737,4.543,740,6.052,743,3.194,759,6.141,1462,6.135,4021,6.912,4022,8.366,4023,8.366,4024,6.86,4025,8.366,4026,8.366,4027,6.86,4028,6.141,4029,6.86,4030,6.86,4031,6.86]],["title/directives/NgxTableSortTemplateAbstractComponent.html",[323,0.724,636,2.274]],["body/directives/NgxTableSortTemplateAbstractComponent.html",[3,0.063,4,0.056,5,0.063,10,0.166,11,0.211,16,0.181,17,0.005,19,0.221,27,0.063,88,0.004,89,0.004,90,0.659,96,0.87,109,1.448,137,1.396,184,1.42,187,1.024,205,0.516,229,1.04,323,1.245,325,1.677,335,2.646,354,3.338,371,2.567,409,1.54,539,2.73,576,3.826,596,3.033,636,3.908,713,6.229,737,4.554,740,4.478,752,2.681,988,4.573,3989,5.744,3990,6.968,3991,6.968,3994,8.128,4028,6.224,4032,9.08,4033,8.435]],["title/interfaces/NgxToast.html",[0,0.077,4034,2.856]],["body/interfaces/NgxToast.html",[0,0.155,2,0.85,3,0.052,4,0.045,5,0.052,10,0.135,11,0.186,12,0.788,16,0.215,17,0.006,19,0.195,27,0.087,28,1.694,29,1.111,37,2.586,54,3.979,55,2.094,74,1.896,88,0.004,89,0.004,96,0.711,101,3.596,109,1.238,135,1.809,152,1.205,171,1.968,190,2.52,194,1.728,205,0.422,240,2.555,241,2.885,242,3.107,256,4.193,271,2.094,278,1.351,303,2.426,341,1.837,374,4.612,506,1.867,579,4.043,591,2.332,637,2.289,638,2.332,659,3.049,672,4.218,891,3.127,1018,4.193,1481,2.75,1537,3.41,1634,5.269,1975,2.957,2205,3.034,3316,2.689,3819,3.866,4034,5.105,4035,3.803,4036,4.193,4037,5.65,4038,3.803,4039,4.972,4040,4.076,4041,5.327,4042,5.138,4043,4.781,4044,4.459,4045,4.781,4046,4.781,4047,4.972,4048,3.803,4049,3.41,4050,3.657,4051,3.657,4052,3.657,4053,3.803,4054,3.41,4055,3.657,4056,3.527]],["title/directives/NgxToastBundlerComponent.html",[323,0.724,637,1.978]],["body/directives/NgxToastBundlerComponent.html",[3,0.06,4,0.053,5,0.06,10,0.157,11,0.204,16,0.191,17,0.005,19,0.214,27,0.06,32,0.916,47,1.344,72,2.56,88,0.004,89,0.004,90,0.624,183,1.469,184,1.517,187,1.125,196,1.186,205,0.489,229,0.812,241,3.445,323,1.204,325,1.589,331,1.676,335,2.56,347,1.469,364,2.654,371,2.004,399,2.2,531,1.73,536,2.987,596,2.2,637,3.289,672,4.606,692,3.345,988,4.488,1481,4.294,1503,4.199,3339,3.72,4036,5.008,4044,4.901,4054,5.721,4057,9.524,4058,6.586,4059,7.324,4060,8.294,4061,8.159,4062,6.586,4063,7.304,4064,6.74,4065,6.586,4066,5.101,4067,6.586]],["title/directives/NgxToastComponent.html",[323,0.724,638,2.016]],["body/directives/NgxToastComponent.html",[3,0.057,4,0.05,5,0.057,10,0.15,11,0.198,16,0.187,17,0.006,19,0.227,27,0.057,32,0.874,47,1.282,49,1.355,72,2.441,74,2.098,88,0.004,89,0.004,90,0.595,183,1.426,184,1.554,187,1.14,194,2.64,196,1.426,205,0.466,206,2.304,229,0.774,323,1.169,325,1.515,331,1.498,335,2.485,347,1.641,364,2.532,371,1.911,399,2.153,413,4.206,506,2.065,510,2.921,531,1.65,536,2.849,579,4.175,596,2.098,638,3.253,664,5.302,684,3.605,692,3.19,757,1.94,808,2.824,936,5.211,946,3.449,988,4.413,1003,5.101,1417,3.751,1529,3.854,1592,2.91,1633,5.623,3339,3.548,4034,3.655,4036,4.901,4059,7.167,4064,6.544,4066,4.865,4068,6.281,4069,7.921,4070,6.281,4071,7.921,4072,7.921,4073,6.281,4074,6.281,4075,6.281,4076,6.281]],["title/interfaces/NgxToastConfiguration.html",[0,0.077,4037,3.161]],["body/interfaces/NgxToastConfiguration.html",[0,0.154,2,0.855,3,0.052,4,0.046,5,0.052,10,0.136,11,0.187,12,0.841,16,0.216,17,0.006,19,0.195,27,0.087,28,1.103,29,1.4,37,2.538,54,3.988,55,2.107,74,1.908,88,0.004,89,0.004,96,0.715,101,3.611,109,1.4,135,1.82,152,0.962,171,1.973,190,2.53,194,1.738,205,0.424,240,1.765,241,2.897,242,3.12,256,4.21,271,2.107,278,1.359,303,1.986,341,1.849,374,4.63,506,1.878,579,4.047,591,2.346,637,2.303,638,2.346,659,3.061,672,4.226,891,2.037,1018,4.21,1481,2.768,1537,3.432,1634,5.282,1975,2.975,2205,3.983,3316,4.165,3819,3.881,4034,4.828,4035,3.826,4036,3.227,4037,5.343,4038,5.889,4039,4.992,4040,4.093,4041,5.343,4042,5.154,4043,4.8,4044,4.477,4045,4.8,4046,4.8,4047,4.992,4048,3.826,4049,3.432,4050,3.679,4051,3.679,4052,3.679,4053,3.826,4054,3.432,4055,3.679,4056,3.549]],["title/components/NgxToastContainerComponent.html",[109,0.735,578,2.377]],["body/components/NgxToastContainerComponent.html",[3,0.037,4,0.032,5,0.037,10,0.097,11,0.147,12,0.364,16,0.195,17,0.005,19,0.221,27,0.037,28,1.136,29,1.036,32,1.122,34,1.161,37,2.28,72,2.286,88,0.003,89,0.003,90,0.557,109,1.208,137,0.973,179,1.095,180,1.637,183,1.059,184,1.51,187,1.021,193,0.991,196,0.73,205,0.301,229,1.117,247,1.764,253,1.877,278,0.964,323,0.598,324,1.919,325,0.978,329,3.084,331,1.453,347,1.059,360,2.667,364,2.37,391,1.919,399,1.718,409,1.074,438,2.667,479,3.939,508,1.963,509,2.327,510,1.494,511,1.575,514,2.916,515,2.462,531,1.818,536,1.838,537,3.984,539,1.311,544,2.009,545,2.667,546,1.832,547,3.766,548,2.009,549,2.009,550,1.963,551,1.764,552,2.009,553,1.963,554,3.145,555,2.009,556,1.963,557,2.009,558,2.916,559,2.009,560,2.849,561,2.916,562,1.963,563,1.963,564,3.306,565,2.009,566,3.766,567,1.963,568,1.919,569,1.963,570,1.838,571,2.009,572,1.919,573,1.919,574,2.009,575,1.963,576,1.838,577,2.009,578,3.679,579,3.939,580,2.009,581,1.963,582,2.009,583,1.963,584,2.916,585,1.963,586,1.963,587,2.009,588,1.963,589,2.009,590,1.963,591,1.664,592,2.009,593,2.009,594,2.009,595,1.8,596,1.353,597,1.877,598,1.877,599,2.009,600,1.919,601,2.009,602,2.009,603,2.009,604,1.919,605,2.009,606,1.877,607,1.919,608,2.009,609,1.664,610,1.877,611,2.009,612,2.009,613,1.838,614,1.919,615,2.009,616,1.919,617,2.009,618,1.919,619,2.009,620,1.877,621,1.877,622,1.919,623,2.009,624,1.919,625,2.009,626,1.919,627,2.009,628,1.919,629,2.009,630,1.547,631,1.919,632,1.877,633,1.919,634,1.877,635,1.877,636,1.877,637,2.37,638,1.664,639,1.664,640,1.877,641,2.009,642,1.8,643,2.009,644,1.919,645,2.009,646,1.764,647,1.877,648,2.009,649,1.877,650,2.009,651,1.919,652,2.009,653,2.009,672,2.725,699,4.096,730,1.685,757,1.252,778,3.939,784,3.939,893,4.158,978,3.653,979,4.313,1009,2.972,1049,3.322,1052,4.858,1092,4.858,1118,2.165,1211,1.8,1491,4.29,1503,2.785,1768,3.653,2526,5.265,2532,4.111,3121,5.719,4034,2.358,4036,3.91,4044,4.562,4049,4.158,4054,5.601,4059,5.719,4064,4.858,4077,8.679,4078,8.679,4079,4.052,4080,5.881,4081,5.881,4082,6.197,4083,6.197,4084,4.052,4085,5.881,4086,4.052,4087,6.197,4088,4.052,4089,5.881,4090,4.052,4091,5.881,4092,4.052,4093,4.052,4094,4.052,4095,5.265,4096,5.881]],["title/interfaces/NgxToastDefaultConfiguration.html",[0,0.077,4049,2.948]],["body/interfaces/NgxToastDefaultConfiguration.html",[0,0.154,2,0.845,3,0.051,4,0.045,5,0.051,10,0.135,11,0.185,12,0.786,16,0.217,17,0.006,19,0.194,27,0.086,28,1.09,29,1.107,37,2.531,54,3.969,55,2.081,74,1.885,88,0.004,89,0.004,96,0.706,101,3.582,109,1.396,135,1.798,152,0.954,171,2.082,190,2.97,194,2.25,205,0.419,240,1.743,241,2.874,242,3.095,256,4.658,271,2.081,278,1.342,303,1.97,341,1.826,374,4.593,506,1.855,579,4.039,591,3.036,637,2.275,638,2.317,659,3.731,672,4.21,891,2.012,1018,4.177,1481,2.734,1537,4.441,1634,5.257,1975,2.939,2205,3.016,3316,2.673,3819,3.85,4034,4.8,4035,3.779,4036,3.188,4037,4.762,4038,3.779,4039,5.861,4040,4.06,4041,5.311,4042,5.123,4043,4.762,4044,4.441,4045,4.762,4046,4.762,4047,5.861,4048,4.952,4049,4.441,4050,5.636,4051,5.636,4052,3.634,4053,3.779,4054,3.39,4055,3.634,4056,3.506]],["title/interfaces/NgxToastEvent.html",[0,0.077,4056,3.049]],["body/interfaces/NgxToastEvent.html",[0,0.154,2,0.863,3,0.052,4,0.046,5,0.052,10,0.137,11,0.188,16,0.216,17,0.006,19,0.196,27,0.087,28,1.113,29,1.122,37,2.508,54,4.002,55,2.125,74,1.925,88,0.004,89,0.004,96,0.721,101,3.631,109,1.247,135,2.654,152,0.968,171,1.982,190,2.544,194,1.754,205,0.428,240,1.78,241,2.913,242,3.138,256,4.234,271,2.125,278,1.371,303,1.998,341,2.426,374,4.657,506,2.739,579,4.108,591,2.367,637,2.323,638,2.367,659,3.078,672,4.238,891,2.055,1018,4.234,1481,3.631,1537,3.462,1634,5.299,1975,3.903,2205,3.08,3316,2.729,3819,3.903,4034,5.323,4035,3.86,4036,3.255,4037,4.828,4038,3.86,4039,5.02,4040,4.116,4041,5.365,4042,5.175,4043,4.828,4044,4.503,4045,4.828,4046,4.828,4047,5.02,4048,3.86,4049,3.462,4050,3.712,4051,3.712,4052,3.712,4053,3.86,4054,4.503,4055,4.828,4056,4.657]],["title/interfaces/NgxToastMaxAmountBaseConfiguration.html",[0,0.077,4041,3.161]],["body/interfaces/NgxToastMaxAmountBaseConfiguration.html",[0,0.154,2,0.857,3,0.052,4,0.046,5,0.052,10,0.137,11,0.187,16,0.212,17,0.006,19,0.196,27,0.087,28,1.106,29,1.118,37,2.539,54,4.14,55,2.112,74,1.913,88,0.004,89,0.004,96,0.717,101,4.024,109,1.244,135,1.825,152,0.964,171,1.976,190,2.987,194,1.743,205,0.425,240,1.769,241,2.902,242,3.125,256,4.217,271,2.112,278,1.362,303,1.989,341,1.853,374,5.468,506,1.883,579,4.049,591,2.352,637,2.308,638,2.352,659,3.066,672,4.528,891,2.042,1018,4.972,1481,2.774,1537,3.44,1634,5.483,1975,2.982,2205,3.061,3316,2.713,3819,3.888,4034,4.834,4035,3.836,4036,3.235,4037,4.808,4038,3.836,4039,5,4040,4.099,4041,5.668,4042,5.814,4043,5.668,4044,4.484,4045,4.808,4046,4.808,4047,5,4048,3.836,4049,3.44,4050,3.689,4051,3.689,4052,3.689,4053,3.836,4054,3.44,4055,3.689,4056,3.558]],["title/interfaces/NgxToastMaxAmountBundleConfiguration.html",[0,0.077,4045,3.161]],["body/interfaces/NgxToastMaxAmountBundleConfiguration.html",[0,0.154,2,0.867,3,0.053,4,0.046,5,0.053,10,0.138,11,0.188,16,0.214,17,0.006,19,0.197,27,0.087,28,1.118,29,1.126,37,2.545,54,4.155,55,2.136,74,2.512,88,0.004,89,0.004,96,0.725,101,3.643,109,1.406,135,1.845,152,0.971,171,2.103,190,2.553,194,1.762,205,0.43,240,1.789,241,2.923,242,3.148,256,4.248,271,2.136,278,1.378,303,2.004,341,1.874,374,4.672,506,1.904,579,4.057,591,2.379,637,2.335,638,2.379,659,3.088,672,4.35,891,2.065,1018,4.248,1481,2.806,1537,3.479,1634,5.503,1975,3.016,2205,3.095,3316,2.743,3819,3.916,4034,4.86,4035,3.879,4036,3.272,4037,4.843,4038,3.879,4039,5.037,4040,4.129,4041,5.693,4042,5.832,4043,4.843,4044,5.016,4045,5.378,4046,4.843,4047,5.037,4048,3.879,4049,3.479,4050,3.73,4051,3.73,4052,3.73,4053,3.879,4054,3.479,4055,3.73,4056,3.598]],["title/interfaces/NgxToastMaxAmountOtherConfiguration.html",[0,0.077,4046,3.161]],["body/interfaces/NgxToastMaxAmountOtherConfiguration.html",[0,0.154,2,0.866,3,0.053,4,0.046,5,0.053,10,0.138,11,0.188,16,0.211,17,0.006,19,0.197,27,0.087,28,1.117,29,1.125,37,2.544,54,4.153,55,2.133,74,1.932,88,0.004,89,0.004,96,0.724,101,4.043,109,1.25,135,1.843,152,0.97,171,2.102,190,2.55,194,1.76,205,0.43,240,1.787,241,2.92,242,3.145,256,4.245,271,2.133,278,1.376,303,2.002,341,1.872,374,5.488,506,1.902,579,4.056,591,2.376,637,2.332,638,2.376,659,3.086,672,4.349,891,2.062,1018,4.991,1481,2.802,1537,3.475,1634,5.5,1975,3.012,2205,3.091,3316,2.74,3819,3.913,4034,4.857,4035,3.874,4036,3.268,4037,4.839,4038,3.874,4039,5.032,4040,4.126,4041,5.69,4042,5.83,4043,4.839,4044,5.013,4045,4.839,4046,5.375,4047,5.032,4048,3.874,4049,3.475,4050,3.726,4051,3.726,4052,3.726,4053,3.874,4054,3.475,4055,3.726,4056,3.593]],["title/injectables/NgxToastService.html",[291,1.428,4036,2.772]],["body/injectables/NgxToastService.html",[3,0.026,4,0.045,5,0.026,7,1.937,10,0.152,11,0.114,12,0.573,16,0.203,17,0.006,19,0.21,27,0.026,28,1.544,29,1.039,32,1.113,34,1.828,37,1.823,42,2.212,44,2.195,47,0.926,49,2.058,50,1.729,55,2.846,57,2.398,61,2.21,66,2.016,72,1.764,73,1.009,74,1.877,81,1.492,83,1.976,88,0.002,89,0.002,90,0.273,96,0.869,106,1.227,109,0.68,135,2.211,137,0.476,152,0.823,162,1.182,174,1.32,180,1.041,183,0.817,184,1.505,187,1.089,193,1.698,194,1.94,196,1.39,205,0.214,218,2.23,229,1.039,240,0.889,270,1.937,278,0.685,285,2.111,291,1.32,293,1.229,303,2.362,304,0.704,331,0.97,341,1.469,347,1.39,354,2.223,360,2.059,368,2.641,374,1.788,375,2.641,380,1.205,388,3.49,399,2.251,409,1.165,410,1.928,432,2.819,438,3.897,442,2.604,506,2.77,510,1.062,531,1.476,532,3.826,543,2.603,579,4.121,637,1.16,672,3.576,684,1.139,699,3.524,720,3.173,730,1.774,736,2.111,742,2.25,743,2.145,778,3.763,784,3.04,790,1.907,791,5.356,808,1.618,849,1.729,850,1.581,852,2.446,854,3.49,858,2.892,859,2.892,863,1.581,868,4.107,891,1.026,946,2.492,986,2.184,1003,2.923,1017,3.515,1030,3.749,1031,1.469,1035,1.499,1062,2.012,1092,3.749,1137,2.564,1138,4.469,1211,1.279,1213,1.499,1214,1.044,1257,2.059,1310,3.04,1358,1.788,1396,1.675,1417,2.15,1467,2.012,1503,3.492,1508,3.928,1520,3.328,1529,2.016,1592,2.103,1634,3.83,1726,1.581,1768,3.49,1865,1.928,1984,1.928,2023,3.515,2089,4.642,2090,2.111,2091,2.111,2144,3.04,2223,2.25,2280,2.111,2452,3.749,2599,4.063,2745,3.515,3139,5.03,3316,3.02,3641,2.577,4034,4.789,4036,3.602,4042,1.788,4043,4.107,4044,4.803,4049,3.375,4050,1.854,4051,2.923,4052,4.107,4054,5.7,4055,1.854,4056,1.788,4060,7.159,4063,4.063,4082,5.03,4083,5.03,4087,5.03,4095,5.03,4097,2.879,4098,4.539,4099,5.619,4100,8.974,4101,6.377,4102,5.619,4103,4.539,4104,4.539,4105,5.619,4106,2.879,4107,4.539,4108,2.879,4109,4.539,4110,2.879,4111,2.879,4112,2.879,4113,2.879,4114,2.879,4115,4.539,4116,4.539,4117,2.879,4118,2.879,4119,6.939,4120,5.619,4121,5.619,4122,4.539,4123,2.879,4124,2.879,4125,4.063,4126,2.879,4127,2.879,4128,2.879,4129,4.539,4130,4.539,4131,4.539,4132,4.539,4133,4.539,4134,3.749,4135,4.539,4136,5.619,4137,2.879,4138,2.879,4139,4.539,4140,2.577,4141,2.879,4142,2.879,4143,2.879,4144,2.879,4145,2.879,4146,2.879,4147,2.879,4148,2.879,4149,2.879,4150,2.879,4151,2.879,4152,2.879,4153,2.879,4154,2.879,4155,2.879,4156,2.879,4157,2.879,4158,2.879,4159,4.539,4160,2.879,4161,2.879,4162,2.879,4163,2.879,4164,4.539,4165,4.539,4166,4.539,4167,4.539,4168,4.539,4169,2.879,4170,2.879,4171,2.879,4172,2.879,4173,2.879]],["title/directives/NgxTooltipAbstractComponent.html",[323,0.724,639,2.016]],["body/directives/NgxTooltipAbstractComponent.html",[3,0.049,4,0.065,5,0.049,10,0.129,11,0.18,17,0.006,19,0.212,27,0.049,32,0.756,47,1.76,72,3.145,81,1.785,88,0.004,89,0.004,90,0.874,96,0.68,137,1.526,183,1.298,184,1.55,187,1.21,196,1.298,205,0.403,229,0.669,303,2.657,323,1.064,325,1.31,331,1.738,335,2.262,336,4.072,345,3.574,347,1.298,364,2.189,370,3.262,371,2.194,399,2.008,531,1.427,536,2.463,596,2.703,639,2.96,640,3.34,659,4.072,692,4.11,752,2.389,757,1.678,891,3.407,947,4.672,1628,6.685,4066,4.206,4174,5.431,4175,6.677,4176,8.256,4177,7.717,4178,7.717,4179,6.453,4180,6.453,4181,7.209,4182,6.388,4183,7.209,4184,7.209,4185,7.209,4186,7.209,4187,7.209,4188,6.453,4189,6.453,4190,6.453,4191,5.431,4192,3.373,4193,3.637,4194,7.209,4195,7.209]],["title/interfaces/NgxTooltipActiveElementEvent.html",[0,0.077,4196,3.287]],["body/interfaces/NgxTooltipActiveElementEvent.html",[0,0.152,2,0.951,3,0.058,4,0.078,5,0.058,10,0.151,11,0.2,12,0.822,16,0.219,17,0.006,19,0.209,27,0.086,29,0.951,39,3.394,47,1.628,81,2.088,88,0.004,89,0.004,109,1.44,152,1.241,171,2.176,205,0.472,241,2.468,242,2.658,278,1.511,303,2.125,546,1.924,554,2.055,639,2.608,659,3.949,777,4.119,891,3.359,947,5.082,1074,3.307,4182,5.417,4192,6.063,4193,4.253,4196,5.84,4197,4.439,4198,6.311,4199,4.09,4200,4.439,4201,4.09,4202,5.341,4203,5.341,4204,4.253]],["title/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.077,4203,3.287]],["body/interfaces/NgxTooltipActiveTooltipEvent.html",[0,0.153,2,0.995,3,0.06,4,0.079,5,0.06,10,0.158,11,0.205,16,0.212,17,0.005,19,0.215,27,0.087,29,0.995,39,3.55,47,1.674,81,2.184,88,0.004,89,0.004,109,1.332,152,1.2,171,2.211,205,0.493,241,2.582,242,2.78,278,1.58,303,2.186,546,1.979,554,2.15,639,2.728,659,3.655,777,3.921,891,2.924,947,5.132,1074,3.459,4182,5.528,4192,5.931,4193,4.449,4196,5.493,4197,4.644,4198,6.394,4199,4.278,4200,4.644,4201,4.278,4202,5.493,4203,5.96,4204,4.449]],["title/interfaces/NgxTooltipBaseEvent.html",[0,0.077,4198,3.287]],["body/interfaces/NgxTooltipBaseEvent.html",[0,0.152,2,0.971,3,0.059,4,0.079,5,0.059,10,0.155,11,0.202,16,0.216,17,0.006,19,0.212,27,0.086,29,1.318,39,3.465,47,1.649,81,2.132,88,0.004,89,0.004,109,1.318,152,1.248,171,2.094,205,0.481,241,2.52,242,2.714,278,1.542,303,2.526,546,2.223,554,2.098,639,2.663,659,3.615,777,3.893,891,2.881,947,5.106,1074,3.376,4182,5.89,4192,5.89,4193,4.342,4196,5.412,4197,4.533,4198,6.35,4199,4.176,4200,4.533,4201,4.176,4202,5.412,4203,5.412,4204,4.342]],["title/interfaces/NgxTooltipConfiguration.html",[0,0.077,4199,3.161]],["body/interfaces/NgxTooltipConfiguration.html",[0,0.153,2,0.983,3,0.06,4,0.074,5,0.06,10,0.157,11,0.204,12,0.732,16,0.218,17,0.006,19,0.213,27,0.087,29,0.983,39,3.51,47,1.662,81,2.159,88,0.004,89,0.004,109,1.452,152,1.195,171,2.106,205,0.488,241,2.552,242,2.749,278,1.562,303,2.17,546,1.965,554,2.125,639,2.697,659,3.636,777,3.908,891,2.904,947,4.82,1074,3.42,4182,5.5,4192,6.107,4193,4.398,4196,5.455,4197,4.591,4198,6.199,4199,5.245,4200,6.471,4201,4.229,4202,5.455,4203,5.455,4204,4.398]],["title/directives/NgxTooltipDirective.html",[323,0.724,640,2.274]],["body/directives/NgxTooltipDirective.html",[3,0.036,4,0.055,5,0.036,10,0.095,11,0.145,12,0.72,16,0.086,17,0.006,19,0.21,27,0.053,32,1.163,44,1.343,47,1.538,49,1.728,66,1.769,72,2.928,81,2.749,88,0.003,89,0.003,90,0.55,96,0.498,102,3.971,109,1.293,137,0.659,179,1.077,182,2.003,183,1.046,184,1.506,187,1.208,196,1.555,205,0.296,229,1.208,278,0.947,303,2.134,323,1.112,325,0.961,329,1.715,331,1.713,332,4.06,335,1.822,336,3.28,341,1.289,345,3.971,347,1.625,360,3.633,361,3.565,364,1.605,370,2.392,371,2.292,376,2.784,379,2.249,387,5.026,399,2.331,497,3.188,506,3.089,510,2.528,531,1.046,536,1.806,546,1.401,639,1.635,640,3.176,659,3.094,666,5.835,668,4.498,685,5.309,688,4.498,692,2.022,701,2.813,757,1.23,777,3.289,785,5.874,798,4.259,799,4.259,801,5.309,833,4.06,853,2.667,854,4.975,858,2.634,859,2.634,891,2.686,899,2.186,947,3.024,974,4.259,1074,3.569,1137,3.872,1138,4.414,1481,3.32,1529,4.009,1768,3.607,1898,3.488,3278,5.309,3349,3.188,4125,7.485,4175,4.498,4177,6.743,4178,6.743,4179,5.198,4180,5.198,4182,6.36,4188,5.198,4189,5.198,4190,5.198,4192,5.194,4205,3.982,4206,8.633,4207,6.854,4208,8.009,4209,7.533,4210,6.854,4211,7.533,4212,6.743,4213,7.533,4214,6.743,4215,5.807,4216,5.807,4217,5.807,4218,5.807,4219,5.807,4220,5.807,4221,5.807,4222,5.807,4223,6.854,4224,3.982,4225,3.982,4226,3.982,4227,3.982,4228,5.807,4229,3.982,4230,6.854,4231,3.982,4232,3.565,4233,5.198,4234,5.198,4235,3.982,4236,5.807,4237,5.807,4238,3.982,4239,3.982,4240,3.982,4241,3.982,4242,5.807]],["title/interfaces/NgxTooltipInactiveEvent.html",[0,0.077,4202,3.287]],["body/interfaces/NgxTooltipInactiveEvent.html",[0,0.154,2,0.999,3,0.061,4,0.075,5,0.061,10,0.159,11,0.206,16,0.212,17,0.006,19,0.216,27,0.087,29,0.999,39,3.565,47,1.679,81,2.193,88,0.004,89,0.004,109,1.335,152,1.201,171,2.214,205,0.495,241,2.593,242,2.792,278,1.587,303,2.192,546,1.984,554,2.159,639,2.74,659,3.662,777,3.926,891,2.932,947,5.137,1074,3.474,4182,5.539,4192,5.938,4193,4.468,4196,5.508,4197,4.664,4198,6.402,4199,4.297,4200,4.664,4201,4.297,4202,5.971,4203,5.508,4204,4.468]],["title/interfaces/NgxTooltipItem.html",[0,0.077,4201,3.161]],["body/interfaces/NgxTooltipItem.html",[0,0.152,2,0.952,3,0.058,4,0.073,5,0.058,10,0.152,11,0.2,12,0.822,16,0.22,17,0.006,19,0.209,27,0.086,29,0.952,39,3.398,47,1.629,81,2.09,88,0.004,89,0.004,109,1.44,152,1.274,171,2.076,205,0.472,241,2.471,242,2.662,278,1.513,303,2.512,546,1.926,554,2.058,639,2.611,659,3.951,777,4.12,891,3.361,947,4.765,1074,3.311,4182,5.42,4192,6.065,4193,4.259,4196,5.346,4197,4.445,4198,6.128,4199,4.095,4200,4.445,4201,5.141,4202,5.346,4203,5.346,4204,4.259]],["title/injectables/NgxTooltipService.html",[291,1.428,4175,3.801]],["body/injectables/NgxTooltipService.html",[3,0.03,4,0.027,5,0.03,10,0.079,11,0.127,12,0.456,16,0.175,17,0.006,19,0.205,27,0.03,28,0.641,31,2.435,32,1.131,34,1.453,37,2.053,39,2.709,42,2.24,44,1.715,49,2.108,57,1.417,61,2.513,66,1.475,73,2.157,74,1.109,81,1.091,83,1.445,88,0.003,89,0.003,90,0.315,96,0.635,102,1.646,106,1.371,109,1.17,135,1.615,137,0.839,152,0.654,162,1.363,174,0.966,180,0.827,183,0.913,184,1.413,187,1.111,193,1.24,196,1.24,203,1.97,205,0.247,206,0.966,229,1.033,237,4.61,241,1.97,242,2.122,266,1.729,267,1.823,271,1.87,291,1.475,293,1.417,303,2.167,304,0.812,331,1.647,341,2.837,347,1.51,354,2.006,359,2.972,375,3.579,379,2.864,396,2.207,399,2.434,403,2.997,409,0.926,429,4.433,442,3.344,506,2.437,531,0.872,532,3.049,543,1.538,546,2.073,554,1.074,659,3.713,752,0.98,757,1.026,777,2.827,820,2.063,852,1.445,858,2.3,859,2.3,891,2.643,896,4.51,947,3.585,986,2.39,1003,3.265,1005,4.135,1017,2.571,1031,1.99,1041,2.951,1062,4.812,1074,3.585,1088,1.875,1153,2.062,1211,1.475,1213,1.729,1214,1.204,1300,3.927,1313,2.743,1380,2.435,1483,1.686,1529,2.732,1773,1.774,1920,5.081,1966,1.572,1968,1.646,1982,2.223,1984,2.223,2005,2.743,2006,2.743,2007,2.743,2027,1.994,2555,4.966,2697,5.107,3319,1.932,3349,2.784,3398,4.188,3429,2.435,3560,2.972,3819,3.585,4040,4.603,4042,2.062,4175,3.927,4182,6.308,4192,2.062,4199,2.138,4201,4.433,4204,4.61,4212,6.162,4214,4.538,4233,2.972,4234,5.506,4243,3.32,4244,6.15,4245,6.884,4246,8.914,4247,6.15,4248,6.15,4249,6.15,4250,5.07,4251,3.32,4252,3.32,4253,3.32,4254,5.07,4255,3.32,4256,5.07,4257,5.07,4258,3.32,4259,3.32,4260,5.07,4261,3.32,4262,3.32,4263,5.07,4264,3.32,4265,3.32,4266,5.07,4267,3.32,4268,8.384,4269,8.384,4270,8.384,4271,8.384,4272,3.32,4273,3.32,4274,3.32,4275,5.07,4276,3.32,4277,3.32,4278,3.32,4279,5.07,4280,3.32,4281,3.32,4282,3.32,4283,6.15,4284,5.07,4285,5.07,4286,6.884,4287,5.07,4288,3.32,4289,3.32,4290,3.32,4291,3.32,4292,3.32,4293,3.32,4294,5.07,4295,3.32,4296,3.32,4297,5.07,4298,3.32,4299,6.15,4300,3.32,4301,5.07,4302,3.32,4303,2.972,4304,3.32,4305,2.972,4306,3.32,4307,3.32,4308,3.32,4309,3.32,4310,3.32,4311,3.32,4312,3.32,4313,3.32,4314,3.32,4315,6.15,4316,3.32,4317,3.32,4318,3.32,4319,3.32,4320,3.32,4321,3.32,4322,3.32,4323,3.32,4324,3.32,4325,2.972,4326,3.32,4327,3.32,4328,2.571]],["title/interfaces/NgxTourBackdropClipEvent.html",[0,0.077,4329,3.801]],["body/interfaces/NgxTourBackdropClipEvent.html",[0,0.12,2,0.718,3,0.044,4,0.038,5,0.044,7,2.048,10,0.158,11,0.166,12,0.873,15,3.119,16,0.209,17,0.006,19,0.225,27,0.086,28,1.28,29,0.718,37,1.26,39,3.543,88,0.003,89,0.003,90,0.455,102,2.379,106,1.792,109,1.137,135,1.529,137,1.097,152,1.176,190,3.152,194,2.616,205,0.356,229,1.01,235,2.437,236,2.223,237,4.439,240,1.482,241,1.865,242,3.179,246,2.498,251,3.09,270,2.829,278,1.141,287,2.829,300,2.048,303,1.279,304,1.174,323,0.708,325,1.157,347,0.864,373,2.379,409,0.876,410,3.213,497,2.634,515,2.775,541,4.634,542,2.363,546,2.198,551,4.196,642,2.945,646,2.089,659,2.722,661,3.519,672,2.223,684,1.899,730,1.064,738,2.882,790,2.78,831,4.12,870,3.09,896,3.519,1000,2.792,1018,2.71,1019,3.213,1036,3.354,1041,3.858,1074,2.498,1242,4.17,1244,2.71,1259,3.213,1260,3.09,1279,4.861,1330,2.882,1344,2.324,1483,2.437,1491,3.745,1726,4.498,1768,4.718,2026,3.09,2027,3.982,2401,2.98,2700,2.98,2872,4.439,3076,3.519,3136,3.213,3273,3.213,3311,4.721,3429,3.519,3819,4.266,4040,4.498,4328,3.716,4329,5.134,4330,3.964,4331,6.886,4332,5.476,4333,5.476,4334,3.716,4335,5.134,4336,3.964,4337,5.883,4338,3.716,4339,3.964,4340,6.768,4341,5.134,4342,3.716,4343,3.964,4344,3.964,4345,5.476,4346,3.964,4347,3.964,4348,3.964,4349,3.964,4350,3.964,4351,6.886,4352,5.883,4353,3.964,4354,6.345,4355,6.52,4356,6.008,4357,3.716,4358,3.716,4359,3.519,4360,5.134,4361,3.716,4362,3.716,4363,3.716,4364,5.134,4365,5.134,4366,3.716,4367,3.716,4368,5.134,4369,3.716,4370,5.134]],["title/directives/NgxTourItemDirective.html",[323,0.724,642,2.18]],["body/directives/NgxTourItemDirective.html",[3,0.043,4,0.038,5,0.043,10,0.114,11,0.165,12,0.428,16,0.163,17,0.006,19,0.198,27,0.043,29,1.328,32,1.193,34,1.365,44,1.102,47,1.346,49,1.85,61,1.428,73,1.67,81,2.487,88,0.003,89,0.003,90,0.774,96,0.826,99,3.839,109,1.133,152,0.851,179,1.288,180,0.777,182,2.275,183,1.188,184,1.554,187,1.168,193,1.165,196,1.598,205,0.354,206,1.919,229,1.057,252,2.93,303,2.424,323,1.205,325,1.149,329,1.947,331,1.676,335,2.069,345,2.362,347,1.598,362,2.615,363,4.154,371,2.007,396,3.294,398,2.256,399,2.201,403,3.555,510,2.432,515,3.88,518,5.549,529,4.837,531,1.251,535,3.689,536,2.16,546,2.299,551,3.294,642,2.93,657,5.289,664,4.753,667,5.109,701,3.195,730,1.463,752,1.406,771,4.264,777,3.354,790,3.319,853,3.19,854,4.7,936,4.545,946,4.708,947,5.055,960,5.449,1000,2.772,1054,4.274,1089,5.449,1098,2.691,1099,3.726,1129,2.546,1130,2.959,1258,5.449,1503,3.583,1592,2.207,1617,7.328,1628,6.25,2003,3.068,2533,6.773,3076,3.493,3278,3.689,4337,7.044,4356,4.837,4371,8.69,4372,9.708,4373,6.596,4374,6.596,4375,5.904,4376,6.596,4377,6.596,4378,4.763,4379,4.763,4380,6.596,4381,4.763,4382,4.763,4383,4.763,4384,6.596,4385,4.763,4386,4.763,4387,4.763,4388,3.689,4389,4.763,4390,6.596,4391,4.763,4392,4.763,4393,4.763,4394,4.763]],["title/interfaces/NgxTourRouteOptions.html",[0,0.077,4338,3.801]],["body/interfaces/NgxTourRouteOptions.html",[0,0.12,2,0.725,3,0.044,4,0.039,5,0.044,7,2.067,10,0.159,11,0.167,12,0.859,15,3.134,16,0.208,17,0.006,19,0.226,27,0.086,28,1.288,29,0.725,37,1.272,39,3.566,88,0.003,89,0.003,90,0.459,102,2.401,106,1.804,109,1.143,135,1.543,137,1.104,152,1.219,190,3.026,194,2.625,205,0.36,229,1.014,235,2.46,236,2.244,237,4.468,240,1.496,241,1.882,242,3.195,246,2.522,251,3.119,270,2.847,278,1.152,287,2.847,300,2.061,303,1.291,304,1.185,323,0.715,325,1.168,347,0.872,373,2.401,409,0.885,410,3.244,497,2.659,515,2.793,541,4.664,542,2.379,546,2.204,551,4.203,642,2.964,646,2.108,659,2.74,661,3.552,672,2.244,684,1.917,730,1.074,738,2.909,790,1.644,831,3.091,870,3.119,896,3.552,1000,2.819,1018,2.736,1019,3.244,1036,3.386,1041,3.883,1074,2.522,1242,4.191,1244,2.736,1259,5.508,1260,3.119,1279,4.893,1330,2.909,1344,2.346,1483,2.46,1491,3.769,1726,4.516,1768,4.741,2026,3.119,2027,4.008,2401,3.009,2700,3.009,2872,4.468,3076,3.552,3136,3.244,3273,3.244,3311,3.663,3429,3.552,3819,4.283,4040,4.516,4328,3.751,4329,3.751,4330,4.001,4331,5.912,4332,6.795,4333,5.512,4334,3.751,4335,5.168,4336,4.001,4337,5.912,4338,5.168,4339,6.795,4340,6.795,4341,5.168,4342,3.751,4343,4.001,4344,4.001,4345,5.512,4346,4.001,4347,4.001,4348,4.001,4349,4.001,4350,4.001,4351,6.906,4352,5.912,4353,4.001,4354,6.371,4355,6.539,4356,6.032,4357,3.751,4358,3.751,4359,3.552,4360,5.168,4361,3.751,4362,3.751,4363,3.751,4364,5.168,4365,5.168,4366,3.751,4367,3.751,4368,5.168,4369,3.751,4370,5.168]],["title/directives/NgxTourShowWhenDirective.html",[323,0.724,644,2.324]],["body/directives/NgxTourShowWhenDirective.html",[3,0.036,4,0.032,5,0.036,10,0.164,11,0.146,16,0.194,17,0.006,19,0.198,27,0.036,32,1.165,38,2.641,42,1.145,48,4.044,49,1.628,55,2.147,61,1.745,73,1.401,82,4.801,83,2.99,88,0.003,89,0.003,90,0.379,96,0.5,174,1.162,179,1.08,183,1.048,184,1.412,187,1.17,191,2.081,196,1.237,205,0.297,206,1.693,229,1.032,236,3.496,238,3.388,271,1.474,304,0.978,323,1.235,325,0.964,329,1.719,331,1.186,335,1.826,347,1.508,368,2.326,371,2.09,396,2.99,398,3.799,399,2.504,403,3.285,422,2.188,442,2.831,454,2.257,515,3.504,518,5.036,529,4.269,531,1.05,535,3.095,536,1.812,539,2.595,543,1.851,644,2.757,743,3.062,745,4.285,752,2.028,790,2.331,852,1.739,947,4.176,986,2.669,988,4.186,1010,4.423,1031,1.884,1035,3.031,1310,3.899,1358,2.482,1481,3.327,1497,4.125,1503,2.757,1529,4.524,1545,1.812,1546,3.497,1916,7.317,1962,2.793,1966,1.892,1968,1.981,1986,3.749,2095,4.07,2157,4.801,2159,4.801,2160,5.368,2163,5.275,2167,3.771,2186,4.07,2192,4.801,2196,4.07,2198,3.616,2199,2.793,2200,3.616,2201,2.194,2213,2.326,2214,2.4,2223,2.886,2224,4.269,2227,5.036,2232,5.036,2245,5.882,2264,5.036,2266,5.534,2271,5.036,2272,4.269,2469,2.793,2482,5.673,4140,5.211,4359,5.036,4371,8.683,4395,9.7,4396,3.996,4397,8.642,4398,8.021,4399,5.822,4400,5.822,4401,5.822,4402,3.996,4403,3.996,4404,3.996,4405,3.996,4406,3.996,4407,3.996,4408,3.996,4409,3.996,4410,3.996,4411,8.021,4412,3.996,4413,3.996,4414,3.996,4415,3.996,4416,3.996,4417,3.996,4418,3.996,4419,5.822,4420,3.996]],["title/interfaces/NgxTourStep.html",[0,0.077,4341,3.801]],["body/interfaces/NgxTourStep.html",[0,0.105,2,0.563,3,0.034,4,0.03,5,0.034,7,2.376,10,0.133,11,0.139,12,0.924,15,3.365,16,0.215,17,0.006,19,0.205,27,0.081,28,1.582,29,0.993,37,1.463,39,3.544,88,0.003,89,0.003,90,0.528,102,2.761,106,1.982,109,1.303,135,1.774,137,1.213,152,1.24,190,3.07,194,2.753,205,0.279,229,1.073,235,2.828,236,2.58,237,4.909,240,2.049,241,1.462,242,3.275,246,2.9,251,3.586,270,3.128,278,0.895,287,3.128,300,1.72,303,1.484,304,0.92,323,0.822,325,0.907,347,0.677,373,2.761,409,1.017,410,3.729,497,3.058,515,3.068,541,5.728,542,2.921,546,2.264,551,4.289,642,2.474,646,1.637,659,3.365,661,5.375,672,2.58,684,1.488,730,1.235,738,2.259,790,1.277,831,2.58,870,3.586,896,4.084,1000,2.189,1018,3.146,1019,3.729,1036,3.893,1041,3.859,1074,1.959,1242,4.499,1244,3.146,1259,2.519,1260,2.422,1279,5.375,1330,3.345,1344,2.698,1483,2.828,1491,4.14,1726,4.78,1768,5.09,2026,3.586,2027,4.403,2401,3.459,2700,3.459,2872,4.909,3076,2.758,3136,3.729,3273,3.729,3311,3.641,3429,5.375,3819,4.415,4040,4.656,4328,4.313,4329,2.913,4330,3.107,4331,6.567,4332,4.6,4333,4.6,4334,2.913,4335,5.677,4336,3.107,4337,6.567,4338,2.913,4339,3.107,4340,7.473,4341,5.136,4342,4.313,4343,4.6,4344,4.6,4345,6.055,4346,6.055,4347,6.055,4348,6.055,4349,6.055,4350,4.6,4351,7.194,4352,6.346,4353,4.6,4354,6.743,4355,6.944,4356,6.385,4357,4.313,4358,4.313,4359,4.084,4360,5.677,4361,4.313,4362,4.313,4363,4.313,4364,5.677,4365,5.677,4366,4.313,4367,4.313,4368,5.677,4369,4.313,4370,5.677]],["title/directives/NgxTourStepComponent.html",[323,0.724,646,2.137]],["body/directives/NgxTourStepComponent.html",[3,0.032,4,0.028,5,0.032,7,1.511,10,0.17,11,0.178,12,0.575,16,0.153,17,0.006,19,0.186,27,0.032,28,1.651,32,1.061,42,1.834,44,0.819,47,1.636,49,1.646,55,1.963,68,1.183,72,2.965,88,0.003,89,0.003,90,0.869,96,0.443,109,1.2,135,1.128,137,1.263,152,0.826,162,1.454,183,0.959,184,1.599,187,1.203,191,1.844,194,1.947,196,1.152,203,2.765,205,0.263,206,1.549,229,0.94,251,3.429,281,2.476,285,2.597,303,2.444,323,0.786,325,0.854,331,1.734,335,1.67,336,3.008,345,2.64,347,1.374,349,3.723,350,3.614,364,2.146,370,2.127,371,1.947,387,4.692,397,2.964,399,1.588,407,2.2,456,1.945,515,3.953,518,4.692,529,3.905,531,0.93,535,4.124,536,1.606,541,6.651,542,3.049,546,2.237,551,4.411,554,2.468,596,2.137,646,2.318,655,6.828,656,6.828,657,5.602,658,5.727,659,3.593,660,5.727,661,5.594,662,6.828,663,6.369,664,4.141,665,4.582,666,5.511,667,4.124,668,4.124,671,5.727,672,2.964,673,5.727,678,4.019,680,3.172,684,2.532,685,4.955,688,4.124,690,2.923,691,4.766,692,4.222,694,4.399,695,4.766,697,4.766,698,4.472,699,3.614,701,3.099,702,3.513,722,3.008,757,1.094,777,1.454,823,2.476,853,2.372,854,3.974,861,2.001,936,3.843,978,2.2,1014,1.893,1048,4.285,1089,2.926,1119,2.476,1137,2.001,1282,1.677,1380,2.597,1592,2.964,1739,1.893,1742,2.597,1844,2.926,2716,2.926,3214,2.743,3278,2.743,3284,2.743,3285,2.926,3298,2.001,3945,4.399,4176,4.766,4232,5.727,4334,2.743,4335,2.743,4388,2.743,4421,9.945,4422,9.945,4423,3.542,4424,4.766,4425,5.324,4426,5.324,4427,5.324,4428,5.324,4429,5.324,4430,5.324,4431,5.324,4432,5.324,4433,5.324,4434,3.542,4435,3.542,4436,3.542,4437,3.542,4438,3.542,4439,3.542,4440,3.542,4441,3.542,4442,3.542,4443,3.542,4444,3.542,4445,3.542,4446,3.542,4447,3.542,4448,3.542,4449,5.324,4450,3.542,4451,3.542,4452,3.542,4453,3.542,4454,3.542]],["title/interfaces/NgxTourTokenConfiguration.html",[0,0.077,4455,4.394]],["body/interfaces/NgxTourTokenConfiguration.html",[0,0.091,2,0.867,3,0.053,4,0.046,5,0.053,7,3.21,10,0.138,11,0.188,16,0.211,17,0.005,19,0.219,27,0.068,36,2.822,37,1.975,88,0.004,89,0.004,96,0.725,106,2.538,109,1.406,205,0.43,235,3.82,237,5.92,246,3.916,251,4.843,274,6.899,278,1.378,287,3.21,373,3.729,377,3.643,515,3.834,546,2.265,551,3.274,646,2.521,1036,5.257,1279,5.515,1330,4.517,1344,3.643,1483,3.82,1726,4.854,2026,4.843,2027,4.517,2401,4.672,2700,4.672,3136,5.037,3819,4.889,4040,5.155,4331,5.825,4351,7.505,4352,5.825,4354,6.847,4355,7.341,4356,6.885,4357,5.825,4358,5.825,4359,5.515,4360,6.847,4361,5.825,4362,5.825,4363,5.825,4364,6.847,4365,6.847,4366,5.825,4367,5.825,4368,6.847,4369,5.825,4370,6.847,4455,7.476,4456,5.792,4457,7.476,4458,5.792,4459,5.792,4460,5.792,4461,5.792]],["title/directives/NgxTreeGridCellDirective.html",[323,0.724,647,2.274]],["body/directives/NgxTreeGridCellDirective.html",[3,0.025,4,0.022,5,0.025,10,0.18,11,0.109,12,0.608,15,1.122,16,0.155,17,0.006,19,0.177,27,0.025,29,0.652,32,0.755,34,1.248,38,2.462,39,3.31,42,1.775,44,1.007,47,1.543,48,1.122,49,1.694,57,1.858,66,1.214,72,1.692,73,1.527,76,1.008,81,0.898,88,0.002,89,0.002,90,0.259,96,0.68,122,2.172,137,1.626,171,1.036,179,0.739,180,0.886,182,1.502,183,0.784,184,1.417,187,1.208,193,1.328,194,1.325,196,1.673,205,0.203,206,1.267,229,0.669,241,2.11,242,2.272,245,2.159,252,1.934,323,0.914,325,0.659,329,1.286,331,1.488,335,1.366,336,2.46,340,2.004,341,2.541,345,4.274,347,1.759,355,2.004,360,4.572,364,1.101,370,1.641,371,0.831,372,2.446,397,2.018,399,2.249,409,1.235,415,2.257,461,1.46,483,4.827,506,1.431,511,1.692,531,0.718,546,2.111,620,3.843,647,2.018,649,2.515,651,2.933,664,3.604,669,4.271,692,2.212,705,6.102,708,4.827,723,2.705,730,0.606,742,2.159,752,2.233,757,0.844,777,2.543,778,4.827,780,3.193,783,4.205,784,3.636,785,3.193,787,4.797,790,1.843,791,4.148,794,2.004,798,2.004,799,2.004,831,2.515,868,3.988,936,3.261,947,1.423,976,3.373,982,1.697,992,5.161,993,6.559,995,3.373,1000,1.59,1031,1.409,1035,2.827,1041,3.604,1065,3.898,1066,3.898,1067,3.898,1068,3.898,1074,3.225,1078,3.898,1080,3.898,1081,3.898,1086,3.898,1122,3.898,1146,2.116,1178,3.193,1428,3.193,1555,2.257,1592,1.266,1597,3.597,1627,7.23,1629,1.91,1636,6.049,1726,1.5,1898,2.615,2027,4.542,2038,2.116,2313,4.86,2332,2.446,2477,1.423,2555,3.636,2734,2.257,3039,2.116,3272,2.116,3273,1.83,3274,2.116,3275,2.116,3396,2.257,3397,2.446,3707,2.446,3977,3.597,4462,8.793,4463,8.793,4464,2.732,4465,3.898,4466,3.898,4467,8.091,4468,7.208,4469,6.193,4470,6.193,4471,4.354,4472,6.193,4473,6.193,4474,6.193,4475,4.354,4476,6.193,4477,6.193,4478,6.193,4479,6.193,4480,6.193,4481,4.354,4482,4.354,4483,4.354,4484,4.354,4485,4.354,4486,4.354,4487,4.354,4488,4.354,4489,4.354,4490,4.354,4491,4.354,4492,4.354,4493,4.354,4494,4.354,4495,4.354,4496,4.354,4497,4.354,4498,4.354,4499,4.354,4500,4.354,4501,2.732,4502,4.354,4503,7.562,4504,2.732,4505,4.354,4506,4.354,4507,4.354,4508,4.354,4509,4.354,4510,6.193,4511,6.193,4512,2.732,4513,4.354,4514,4.354,4515,4.354,4516,2.732,4517,2.732,4518,2.732,4519,2.732,4520,4.354,4521,2.732,4522,2.732,4523,2.732,4524,2.446,4525,2.732,4526,2.732,4527,2.732,4528,2.732,4529,2.732,4530,2.732,4531,2.732,4532,2.732,4533,2.732,4534,6.764,4535,4.354,4536,4.354,4537,4.354,4538,2.732,4539,2.732,4540,2.732,4541,2.732,4542,2.732,4543,2.732,4544,2.732,4545,2.732,4546,2.732,4547,2.732,4548,2.732,4549,2.732,4550,2.732]],["title/directives/NgxTreeGridDirective.html",[323,0.724,649,2.274]],["body/directives/NgxTreeGridDirective.html",[3,0.036,4,0.032,5,0.036,10,0.218,11,0.144,12,0.717,16,0.19,17,0.006,19,0.179,27,0.036,32,0.949,34,2.288,38,2.617,44,1.846,47,1.531,48,1.621,49,1.471,57,2.463,66,1.754,72,2.243,88,0.003,89,0.003,90,0.374,96,1.044,137,0.653,179,1.067,180,1.302,182,1.991,183,1.039,184,1.576,187,1.167,190,3.056,193,1.953,196,1.72,205,0.293,206,1.679,229,0.841,245,2.861,270,2.463,323,1.107,325,0.952,329,1.704,331,1.439,335,1.81,345,1.957,347,1.551,360,2.617,371,1.201,399,1.692,409,1.522,456,2.168,462,4.238,511,2.651,564,3.748,647,3.476,649,2.674,651,4.442,667,4.47,692,2.931,705,5.302,723,3.585,730,1.958,737,2.617,743,1.507,752,2.014,790,2.315,858,1.791,859,1.791,976,4.47,992,3.358,993,4.47,995,4.47,1003,3.716,1007,4.47,1014,4.009,1035,3.005,1036,4.034,1043,3.534,1597,4.767,1627,7.998,1636,6.247,2716,5.634,2730,6.716,3024,6.716,3819,4.596,3946,7.113,4040,4.728,4066,4.47,4388,3.058,4462,8.667,4463,8.667,4465,8.549,4466,5.166,4524,3.534,4551,3.948,4552,5.771,4553,7.707,4554,7.982,4555,7.503,4556,7.503,4557,5.771,4558,5.771,4559,5.771,4560,5.771,4561,5.771,4562,5.771,4563,5.771,4564,6.82,4565,5.771,4566,3.948,4567,3.948,4568,5.771,4569,3.948,4570,5.771,4571,3.948,4572,3.948,4573,5.771,4574,3.948,4575,5.771,4576,3.948,4577,5.771,4578,3.948,4579,5.771,4580,3.948,4581,3.948,4582,3.948,4583,3.948,4584,3.948,4585,3.948,4586,5.771,4587,3.948,4588,3.948,4589,3.948,4590,3.948,4591,3.948,4592,3.948,4593,3.948]],["title/classes/NgxValidators.html",[90,0.465,4594,4.394]],["body/classes/NgxValidators.html",[1,5.855,3,0.058,4,0.028,5,0.032,7,3.025,8,3.146,10,0.084,12,0.865,13,3.146,14,8.068,15,2.911,16,0.184,17,0.006,18,6.258,19,0.217,20,6.969,21,2.111,27,0.032,28,1.022,29,0.526,30,8.089,31,3.882,32,1.215,33,7.964,34,2.68,35,3.683,36,1.986,37,1.391,38,2.401,39,2.829,40,3.882,41,2.507,43,3.146,44,1.918,45,8.089,46,4.739,47,0.717,48,2.174,67,4.373,68,3.214,70,6.445,72,3.393,73,2.992,76,2.614,83,2.304,88,0.003,89,0.003,90,0.604,92,2.111,96,1.038,106,1.431,152,1.227,167,4.373,180,1.304,183,0.953,187,0.97,190,2.58,191,2.757,192,6.857,193,2.088,196,1.733,229,0.985,347,0.633,409,1.747,412,5.819,413,3.545,438,1.594,462,4.004,568,4.279,672,2.453,730,1.572,836,3.288,1062,4.955,1153,3.288,1251,2.264,1616,6.728,1634,4.799,1726,3.892,2026,3.409,2034,5.261,2205,4.27,2401,3.288,2697,4.004,2852,4.739,3313,2.046,3527,4.739,3701,4.739,4325,4.739,4424,3.146,4594,4.739,4595,3.515,4596,5.294,4597,6.368,4598,6.368,4599,6.368,4600,5.294,4601,6.368,4602,5.294,4603,3.515,4604,5.294,4605,5.294,4606,5.294,4607,5.294,4608,3.515,4609,3.515,4610,9.036,4611,3.515,4612,7.603,4613,3.515,4614,5.294,4615,5.294,4616,5.294,4617,5.294,4618,6.368,4619,7.088,4620,8.533,4621,8.533,4622,8.533,4623,7.088,4624,6.368,4625,3.515,4626,7.088,4627,5.294,4628,5.294,4629,3.515,4630,5.294,4631,3.515,4632,5.294,4633,5.294,4634,7.603,4635,7.603,4636,7.088,4637,5.294,4638,3.515,4639,7.603,4640,7.603,4641,3.515,4642,5.701,4643,5.294,4644,5.294,4645,5.294,4646,3.515,4647,3.515,4648,6.368,4649,3.515,4650,3.515,4651,3.515,4652,3.515,4653,3.515,4654,3.515,4655,3.515,4656,3.515,4657,3.515,4658,3.515,4659,3.515,4660,3.515,4661,3.515,4662,3.515,4663,3.515,4664,3.515,4665,3.515,4666,3.515,4667,3.515,4668,3.515]],["title/injectables/NgxWindowService.html",[291,1.428,1442,2.695]],["body/injectables/NgxWindowService.html",[3,0.026,4,0.023,5,0.026,10,0.068,11,0.14,12,0.407,15,3.024,16,0.19,17,0.006,19,0.229,27,0.077,28,0.875,29,0.953,32,1.195,34,1.298,36,2.389,44,1.603,49,1.663,54,1.302,57,1.225,61,2.207,66,3.079,67,2.372,73,1.588,75,1.923,88,0.002,89,0.002,90,0.798,96,0.702,106,1.225,122,2.233,136,2.261,137,0.928,144,1.535,162,2.304,177,1.725,180,0.739,183,1.147,184,1.558,187,1.151,190,2.352,193,1.558,196,1.481,200,4.939,205,0.213,209,2.721,229,1.076,252,1.276,267,2.487,270,2.718,287,1.225,291,1.318,293,1.225,300,2.914,304,0.703,331,1.272,341,2.061,347,1.481,358,2.814,380,3.083,381,1.622,382,2.372,399,2.325,409,1.568,442,2.893,531,0.754,532,3.823,659,3.457,730,1.413,752,2.535,808,2.932,824,1.535,986,2.18,990,2.917,1005,4.424,1031,0.929,1088,2.559,1118,1.535,1213,1.495,1214,1.041,1242,4.044,1243,2.487,1257,2.055,1258,3.742,1282,3.894,1331,3.508,1408,4.785,1417,3.016,1442,5.208,1443,4.282,1446,3.901,1447,2.106,1477,7.213,1483,1.458,1592,2.099,1665,6.472,1754,2.571,1756,5.261,1771,7.746,1773,2.421,1774,3.742,1775,4.055,1778,1.923,1826,4.055,1936,1.725,1965,1.923,1966,1.36,2153,3.167,2289,3.508,2479,4.634,2532,3.167,2587,2.372,2912,3.322,3038,4.634,3060,6.204,3622,4.634,3819,2.921,3830,7.361,3831,7.361,3955,6.204,4303,8.491,4305,5.701,4355,5.86,4457,4.055,4642,2.571,4669,2.872,4670,5.701,4671,4.53,4672,8.419,4673,5.609,4674,5.609,4675,7.365,4676,5.609,4677,5.609,4678,6.931,4679,7.365,4680,7.365,4681,6.931,4682,6.368,4683,4.53,4684,2.872,4685,2.872,4686,2.872,4687,6.931,4688,2.872,4689,2.872,4690,6.931,4691,4.53,4692,2.872,4693,2.872,4694,7.71,4695,4.53,4696,2.872,4697,4.53,4698,2.872,4699,4.53,4700,2.872,4701,4.53,4702,2.872,4703,4.53,4704,2.872,4705,4.53,4706,2.872,4707,4.53,4708,2.872,4709,6.931,4710,4.53,4711,2.872,4712,4.53,4713,2.872,4714,2.571,4715,2.571,4716,2.872,4717,2.872,4718,2.872,4719,2.872,4720,2.872,4721,2.872,4722,2.872,4723,5.609,4724,2.872,4725,6.368,4726,2.872,4727,5.609,4728,2.872,4729,2.872,4730,2.872,4731,5.609,4732,2.872,4733,4.53,4734,4.53,4735,2.872,4736,4.53,4737,5.609,4738,4.53,4739,2.872,4740,2.872,4741,2.872,4742,2.872,4743,4.53,4744,2.872,4745,2.872,4746,2.872,4747,2.872,4748,2.872,4749,2.872,4750,2.872,4751,2.872,4752,4.53,4753,2.872,4754,2.872]],["title/interfaces/SpecStoreAssets.html",[0,0.077,4755,4.394]],["body/interfaces/SpecStoreAssets.html",[0,0.106,2,1.236,3,0.061,4,0.054,5,0.061,10,0.16,11,0.207,16,0.206,17,0.006,19,0.216,26,3.494,27,0.081,42,2.366,66,2.981,81,2.206,88,0.004,89,0.004,127,6.076,128,2.981,130,3.791,131,3.586,148,5.268,152,1.065,171,1.963,240,2.073,303,1.788,314,5.198,317,5.794,1188,4.691,1405,7.911,3881,6.84,3882,6.819,3883,6.249,4755,7.389,4756,5.198,4757,8.572,4758,8.572,4759,8.572,4760,7.705,4761,6.819,4762,5.544,4763,6.711,4764,6.711,4765,6.711]],["title/injectables/SpecStoreService.html",[291,1.428,4766,4.394]],["body/injectables/SpecStoreService.html",[3,0.035,4,0.031,5,0.035,10,0.092,11,0.142,12,0.712,16,0.212,17,0.006,19,0.23,26,2.016,27,0.035,28,0.748,32,1.313,36,2.971,44,1.316,68,1.9,81,1.273,88,0.003,89,0.003,90,0.367,96,0.93,98,4.199,113,2.405,114,1.38,118,2.405,124,2.069,128,1.72,131,3.04,135,2.149,137,1.311,138,3.417,147,2.593,151,4.617,171,1.353,180,1.292,183,1.025,184,1.625,187,1.208,193,2.094,196,1.64,205,0.287,229,1.163,240,1.196,278,0.921,291,1.655,293,1.652,295,6.141,296,6.141,300,3.121,304,0.947,305,4.22,329,2.592,331,1.762,347,1.491,397,2.636,399,1.965,422,2.368,531,1.017,537,1.834,669,4.677,841,1.876,1165,2.126,1166,6.072,1207,5.092,1359,2.999,1405,5.571,2469,2.707,3371,5.092,3539,6.263,3727,4.406,3892,4.7,3893,4.7,3894,4.7,3895,4.7,3896,4.7,3899,3.199,3901,3.199,3903,3.199,3905,3.199,3906,3.199,3908,2.839,3910,3.199,4756,7.56,4757,6.037,4758,6.037,4759,6.037,4766,5.092,4767,3.872,4768,6.744,4769,6.744,4770,6.744,4771,6.744,4772,6.744,4773,6.744,4774,7.433,4775,7.433,4776,7.433,4777,5.689,4778,3.872,4779,3.872,4780,3.872,4781,3.872,4782,3.872,4783,5.689,4784,3.872,4785,3.466,4786,3.466,4787,3.466,4788,3.466,4789,8.279,4790,8.779,4791,3.872,4792,5.689,4793,3.872,4794,7.433,4795,3.872,4796,7.433,4797,3.872,4798,5.689,4799,3.872,4800,3.872,4801,5.689,4802,3.872,4803,8.279,4804,3.872,4805,5.689,4806,3.872,4807,3.872,4808,3.872,4809,3.466,4810,3.466,4811,5.571,4812,3.466,4813,5.689,4814,4.7,4815,3.872,4816,3.872,4817,3.872,4818,3.872,4819,3.872,4820,3.872,4821,3.872]],["title/interfaces/StoreAssetsOptions.html",[0,0.077,3880,4.055]],["body/interfaces/StoreAssetsOptions.html",[0,0.121,2,0.893,3,0.054,4,0.048,5,0.054,10,0.142,11,0.192,12,0.803,16,0.214,17,0.006,19,0.242,27,0.081,35,4.102,38,2.705,49,1.827,51,3.841,76,2.826,88,0.004,89,0.004,96,0.747,101,3.713,102,2.957,106,2.072,122,2.091,123,4.761,124,3.187,127,5.087,128,3.762,130,4.329,131,4.526,145,5.621,146,4.62,147,5.672,148,5.345,153,6.923,154,3.994,155,5.621,156,5.552,191,3.991,194,1.815,255,4.761,271,2.199,305,4.459,316,4.374,317,4.761,409,1.4,536,3.476,539,2.48,820,1.788,1381,7.384,1958,3.994,1965,5.133,2153,5.358,2763,4.927,3175,6.332,3750,6.211,3824,6.332,3873,4.62,3874,5.339,3875,5.339,3876,6.861,3877,6.332,3878,6.861,3879,8.001,3880,6.332,3881,6.555,3882,7.384,3883,4.169,3884,8.276,3885,5.339,3886,5.339,3887,5.339,3888,5.339,3889,5.339,3890,5.339]],["title/injectables/StoreEffects.html",[291,1.428,4822,4.394]],["body/injectables/StoreEffects.html",[3,0.058,4,0.051,5,0.058,10,0.153,11,0.201,16,0.173,17,0.006,19,0.248,27,0.058,32,1.277,44,2.123,88,0.004,89,0.004,90,0.608,128,4.345,137,1.519,147,4.294,184,1.507,187,1.114,205,0.476,229,1.131,240,1.981,291,2.334,292,7.964,293,2.736,295,7.235,296,7.235,305,2.971,331,1.665,399,2.392,531,1.684,534,5.74,4812,7.183,4822,7.183,4823,6.412,4824,8.024,4825,6.412,4826,8.024,4827,6.412,4828,9.45,4829,9.178,4830,8.758,4831,8.024,4832,6.412,4833,8.024,4834,8.024,4835,6.412,4836,5.74,4837,6.412]],["title/interfaces/StoreState.html",[0,0.077,3908,3.599]],["body/interfaces/StoreState.html",[0,0.101,2,1.202,3,0.058,4,0.051,5,0.058,10,0.153,11,0.201,16,0.173,17,0.006,19,0.248,26,3.344,27,0.073,28,1.825,29,0.961,42,1.84,44,2.027,61,2.407,68,2.682,88,0.004,89,0.004,90,0.609,127,5.516,128,2.852,130,3.627,131,3.431,148,4.537,152,0.829,156,3.989,171,2.085,205,0.477,278,1.527,291,2.336,300,2.837,304,1.571,317,5.704,790,2.726,986,2.495,1359,6.788,3031,7.24,3539,5.614,3727,4.973,3881,5.89,3883,6.127,3908,5.89,4756,4.973,4760,6.635,4761,6.635,4762,5.304,4811,6.635,4814,5.304,4838,5.748,4839,8.463,4840,5.748,4841,5.304,4842,5.748,4843,5.748,4844,5.748,4845,7.189,4846,5.748,4847,5.748,4848,7.189,4849,7.189,4850,5.748,4851,5.748,4852,5.748,4853,5.748]],["title/injectables/StoreStateService.html",[291,1.428,4841,4.055]],["body/injectables/StoreStateService.html",[0,0.081,2,0.768,3,0.047,4,0.041,5,0.047,10,0.122,11,0.174,12,0.815,16,0.208,17,0.006,19,0.231,26,2.671,27,0.063,28,1.518,29,1.177,32,0.714,36,3.302,42,1.47,44,1.819,61,2.079,68,2.814,88,0.004,89,0.004,90,0.486,96,1.055,98,4.758,113,3.186,114,1.828,127,4.167,128,2.278,130,2.897,131,3.708,138,4.167,148,3.919,151,5.233,152,1.015,156,3.186,171,1.87,180,1.48,183,1.249,184,1.475,187,1.173,193,2.308,196,1.67,205,0.381,229,0.632,278,1.22,291,2.018,293,2.189,300,3.013,304,1.255,305,4.371,317,4.31,329,2.785,331,1.198,397,3.215,399,1.722,422,2.684,669,5.124,790,2.355,841,2.484,986,3.056,1165,2.816,1359,6.09,3031,6.495,3539,6.684,3727,3.972,3881,5.088,3883,4.85,3892,5.732,3893,5.732,3894,5.732,3895,5.732,3896,5.732,3899,4.237,3901,4.237,3903,4.237,3905,4.237,3906,4.237,3908,5.088,3910,4.237,4756,6.817,4760,5.732,4761,5.732,4762,4.237,4785,4.591,4786,4.591,4787,4.591,4788,4.591,4809,4.591,4810,4.591,4811,5.732,4814,4.237,4838,4.591,4839,6.211,4840,4.591,4841,5.732,4842,4.591,4843,7.541,4844,4.591,4845,6.211,4846,6.211,4847,4.591,4848,6.211,4849,6.211,4850,4.591,4851,6.211,4852,4.591,4853,4.591,4854,6.938,4855,6.938,4856,5.129,4857,5.129,4858,5.129,4859,5.129]],["title/interfaces/TableCellTemplate.html",[0,0.077,4860,4.394]],["body/interfaces/TableCellTemplate.html",[0,0.026,2,0.247,3,0.015,4,0.013,5,0.015,7,2.182,10,0.19,11,0.072,12,0.764,14,2.366,15,2.468,16,0.097,17,0.006,19,0.198,20,2.101,21,0.993,26,0.861,27,0.015,28,1.456,29,0.429,32,1.128,34,1.823,36,0.62,38,0.75,41,0.783,42,1.909,44,1.985,47,1.359,49,2.034,50,1.721,54,1.299,55,0.61,57,2.714,61,1.906,64,2.715,66,2.008,70,4.636,72,0.642,73,1.004,74,0.552,76,1.667,81,2.794,83,2.438,88,0.002,89,0.002,90,0.531,97,0.801,98,2.141,102,2.242,105,1.779,106,0.774,107,1.212,109,0.677,114,1.997,122,1.329,128,2.488,134,3.734,135,2.279,136,2.423,137,1.053,152,0.776,162,1.176,173,1.065,174,1.103,176,0.84,183,0.298,184,1.449,187,0.348,190,1.286,191,0.861,194,0.872,196,0.516,203,1.113,205,0.123,206,0.481,209,0.993,215,1.48,229,1.076,235,2.296,236,1.327,246,1.974,266,0.861,269,1.212,270,2.714,277,2.564,282,1.107,285,1.212,287,2.714,288,1.212,289,1.48,304,0.404,325,0.399,329,0.488,331,1.538,332,2.002,337,3.292,341,2.155,347,1.288,349,1.667,350,1.618,358,1.027,362,0.908,363,0.908,364,0.666,369,2.538,371,2.466,373,1.42,375,0.962,376,2.002,377,0.801,379,2.554,380,0.692,393,3.393,396,1.247,397,4.011,398,1.357,399,1.578,403,0.72,409,0.934,412,4.96,414,1.28,422,2.206,425,1.28,438,1.719,442,1.422,454,0.934,456,0.908,461,1.531,462,2.141,467,6.586,479,1.107,501,1.28,506,0.543,531,0.996,539,2.659,542,0.589,543,2.595,554,1.812,564,3.417,576,1.299,595,0.734,665,1.065,684,1.5,694,1.366,698,5.001,699,3.23,705,4.001,706,4.107,707,4.107,708,5.428,709,3.315,710,3.292,711,4.107,712,3.915,713,3.292,714,4.885,715,1.212,720,1.156,722,0.934,724,2.002,730,1.771,734,3.292,737,0.75,743,0.631,745,3.432,748,3.16,752,1.119,755,1.28,756,2.101,757,0.511,790,2.261,791,1.918,792,4.3,809,1.027,820,1.996,833,1.156,852,0.72,858,2.726,859,2.726,924,1.366,946,0.908,963,1.48,978,1.027,979,1.212,982,5.28,986,0.642,988,1.836,992,1.667,1000,1.667,1009,1.212,1010,2.441,1031,0.927,1035,2.354,1041,1.667,1048,1.918,1049,0.934,1050,2.366,1054,0.934,1062,1.156,1088,0.934,1098,1.618,1099,0.934,1105,1.28,1118,0.883,1120,1.156,1128,1.28,1129,2.416,1130,1.027,1134,1.48,1137,1.618,1138,1.065,1139,1.573,1141,3.393,1145,2.912,1147,2.366,1156,1.48,1168,1.366,1176,1.366,1178,1.212,1211,0.734,1242,0.908,1244,1.618,1251,1.065,1263,1.156,1306,1.492,1320,2.101,1330,1.721,1331,1.28,1428,1.212,1481,2.713,1495,1.48,1503,1.795,1508,2.65,1520,2.78,1529,0.734,1538,5.254,1593,3.502,1594,3.96,1632,6.586,1636,5.734,1688,1.366,1722,1.366,1757,1.212,1773,0.883,1776,1.48,1787,1.48,1865,1.107,1965,1.107,1966,1.795,1968,0.82,1984,2.538,2002,1.48,2003,1.065,2027,1.721,2038,1.28,2040,0.993,2045,1.492,2124,1.212,2144,3.751,2167,0.908,2195,1.28,2213,2.206,2223,0.82,2306,2.101,2309,4.025,2401,1.027,2469,1.156,2477,1.492,2489,2.65,2662,1.28,2664,5.503,2742,4.627,2766,2.564,2767,1.366,2859,1.48,2877,1.531,2882,2.366,3039,2.936,3074,1.48,3121,2.366,3266,1.48,3272,1.28,3273,1.107,3274,1.28,3275,1.28,3392,4.047,3396,1.366,3505,1.48,3643,2.564,3706,1.366,3940,5.909,3944,2.564,3945,1.366,3946,6.788,3948,1.48,3949,1.48,3951,1.48,3952,1.48,3953,1.48,3954,1.48,3956,1.48,3957,1.366,3958,1.48,3961,5.38,3962,4.576,3964,2.564,3971,2.366,3981,2.366,4001,2.366,4012,1.366,4013,1.48,4021,2.366,4342,3.502,4375,1.48,4388,1.28,4553,2.564,4670,1.48,4860,5.013,4861,1.653,4862,1.653,4863,2.865,4864,1.653,4865,2.865,4866,2.865,4867,5.6,4868,2.865,4869,2.865,4870,1.653,4871,1.653,4872,1.653,4873,2.865,4874,1.653,4875,1.653,4876,1.653,4877,1.653,4878,1.653,4879,1.653,4880,1.653,4881,2.865,4882,2.865,4883,1.653,4884,1.653,4885,1.653,4886,1.653,4887,1.653,4888,1.653,4889,1.653,4890,1.653,4891,3.79,4892,1.653,4893,1.653,4894,1.653,4895,1.653,4896,5.112,4897,1.653,4898,1.653,4899,1.653,4900,1.653,4901,1.653,4902,6.011,4903,4.521,4904,3.79,4905,3.79,4906,1.653,4907,4.521,4908,2.865,4909,1.653,4910,2.865,4911,3.79,4912,1.653,4913,1.653,4914,2.865,4915,3.79,4916,3.79,4917,2.865,4918,3.79,4919,2.865,4920,1.653,4921,1.653,4922,1.653,4923,1.653,4924,1.653,4925,1.653,4926,1.653,4927,1.653,4928,1.653,4929,1.653,4930,1.653,4931,1.653,4932,1.653,4933,1.653,4934,1.653,4935,1.653,4936,1.653,4937,1.653,4938,1.653,4939,1.653,4940,1.653,4941,1.653,4942,1.653,4943,1.653,4944,1.653,4945,1.653,4946,1.653,4947,1.653,4948,1.653,4949,2.865,4950,1.653,4951,1.653,4952,1.653,4953,1.653,4954,1.653,4955,1.653,4956,1.653,4957,1.653,4958,1.653,4959,2.865,4960,1.653,4961,1.653,4962,1.653,4963,1.653,4964,3.79,4965,1.653,4966,1.653,4967,1.653,4968,1.653,4969,1.653,4970,1.653,4971,1.653,4972,1.653,4973,1.653,4974,1.653,4975,1.653,4976,1.653,4977,1.653,4978,2.865,4979,1.653,4980,1.653,4981,2.865,4982,1.653,4983,1.653,4984,1.653,4985,1.653,4986,1.653,4987,1.653,4988,2.865,4989,1.653,4990,1.653,4991,3.79,4992,2.865,4993,1.653,4994,1.653,4995,1.653,4996,1.653,4997,1.653,4998,1.653,4999,1.653,5000,1.653,5001,1.653,5002,1.653,5003,1.653,5004,1.653,5005,2.865,5006,1.653,5007,1.653,5008,1.653,5009,1.653,5010,1.653,5011,1.653,5012,1.653,5013,2.865,5014,1.653,5015,1.653,5016,1.653,5017,1.653,5018,1.653,5019,1.653,5020,1.653,5021,1.653,5022,1.653,5023,1.653,5024,2.865,5025,2.865,5026,2.865,5027,2.865,5028,1.653,5029,1.653,5030,1.653,5031,1.653,5032,1.653,5033,1.653,5034,1.653,5035,1.653,5036,1.653,5037,1.653,5038,1.653,5039,1.653,5040,1.653,5041,1.653,5042,2.865,5043,1.653,5044,1.653,5045,1.653,5046,1.653,5047,1.653,5048,1.653,5049,1.653,5050,1.653,5051,1.653,5052,1.653,5053,1.653,5054,1.653,5055,1.653,5056,1.653,5057,1.653,5058,1.653,5059,1.653,5060,1.653,5061,1.653,5062,1.653,5063,1.653,5064,1.653,5065,1.653,5066,1.653,5067,1.653,5068,1.653,5069,1.653,5070,1.653,5071,1.653,5072,1.653,5073,1.653,5074,1.653,5075,1.653,5076,1.653,5077,1.653,5078,1.653,5079,1.653]],["title/components/TestDisplayContentComponent.html",[109,0.735,581,2.377]],["body/components/TestDisplayContentComponent.html",[3,0.042,4,0.037,5,0.042,10,0.111,11,0.163,17,0.005,19,0.223,27,0.08,28,1.746,47,1.652,68,2.704,88,0.003,89,0.003,90,0.836,109,1.381,114,2.668,171,1.926,179,1.262,180,1.656,182,2.792,187,0.789,205,0.347,247,2.032,253,2.162,278,1.11,323,0.689,324,2.21,325,1.126,329,3.106,331,1.47,335,2.04,371,2.463,391,2.21,508,2.261,509,2.573,510,1.721,511,1.814,514,3.224,515,2.722,537,4.616,539,2.927,542,3.224,544,2.314,545,2.949,546,1.569,547,4.014,548,2.314,549,2.314,550,2.261,551,2.032,552,2.314,553,2.261,554,3.154,555,2.314,556,2.261,557,2.314,558,3.224,559,2.314,560,3.15,561,3.224,562,2.261,563,2.261,564,3.524,565,2.314,566,4.014,567,2.261,568,2.21,569,2.261,570,2.117,571,2.314,572,2.21,573,2.21,574,2.314,575,2.261,576,2.117,577,2.314,578,2.261,579,1.917,580,2.314,581,3.921,582,2.314,583,3.15,584,3.224,585,3.15,586,3.15,587,2.314,588,3.15,589,2.314,590,3.15,591,2.67,592,2.314,593,2.314,594,2.314,595,2.073,596,1.559,597,2.162,598,2.162,599,2.314,600,2.21,601,2.314,602,2.314,603,2.314,604,2.21,605,2.314,606,2.162,607,2.21,608,2.314,609,3.62,610,3.944,611,2.314,612,2.314,613,2.117,614,2.21,615,2.314,616,2.21,617,2.314,618,2.21,619,2.314,620,2.162,621,2.162,622,2.21,623,2.314,624,2.21,625,2.314,626,2.21,627,2.314,628,2.21,629,2.314,630,1.782,631,2.21,632,2.162,633,2.21,634,2.162,635,2.162,636,2.162,637,1.881,638,1.917,639,1.917,640,2.162,641,2.314,642,2.073,643,2.314,644,2.21,645,2.314,646,2.032,647,2.162,648,2.314,649,2.162,650,2.314,651,2.21,652,2.314,653,2.314,680,2.314,757,1.442,1049,4.228,1118,2.494,1276,5.294,1491,2.636,1907,4.039,1912,3.006,1914,5.012,5080,5.232,5081,3.263,5082,6.503,5083,4.546,5084,3.263,5085,3.263]],["title/components/TestErrorComponent.html",[109,0.735,583,2.377]],["body/components/TestErrorComponent.html",[3,0.041,4,0.036,5,0.041,10,0.108,11,0.159,12,0.571,16,0.097,17,0.005,19,0.22,27,0.079,28,1.885,32,0.628,47,1.716,68,2.993,88,0.003,89,0.003,90,0.827,109,1.37,114,2.621,136,2.561,164,4.256,171,2,179,1.221,180,1.651,182,2.901,184,0.994,187,0.892,205,0.335,229,0.557,247,1.966,253,2.093,278,1.074,287,2.712,323,0.666,324,2.139,325,1.089,329,3.102,331,1.452,335,1.994,371,2.654,391,2.139,508,2.188,509,3.158,510,1.665,511,1.755,514,3.151,515,2.66,537,4.592,539,2.9,542,2.621,544,2.239,545,2.882,546,1.533,547,3.956,548,2.239,549,2.239,550,2.188,551,1.966,552,2.239,553,2.188,554,3.137,555,2.239,556,2.188,557,2.239,558,3.151,559,2.239,560,3.078,561,3.151,562,2.188,563,2.188,564,3.474,565,2.239,566,3.956,567,2.188,568,2.139,569,2.188,570,2.048,571,2.239,572,2.139,573,2.139,574,2.239,575,2.188,576,2.048,577,2.239,578,2.188,579,1.855,580,2.239,581,3.078,582,2.239,583,3.865,584,3.151,585,3.078,586,3.078,587,2.239,588,3.078,589,2.239,590,3.078,591,2.61,592,2.239,593,2.239,594,2.239,595,2.006,596,1.508,597,2.093,598,2.093,599,2.239,600,2.139,601,2.239,602,2.239,603,2.239,604,2.139,605,2.239,606,2.093,607,2.139,608,2.239,609,3.87,610,3.697,611,2.239,612,2.239,613,2.048,614,2.139,615,2.239,616,2.139,617,2.239,618,2.139,619,2.239,620,2.093,621,2.093,622,2.139,623,2.239,624,2.139,625,2.239,626,2.139,627,2.239,628,2.139,629,2.239,630,1.724,631,2.139,632,2.093,633,2.139,634,2.093,635,2.093,636,2.093,637,1.82,638,1.855,639,1.855,640,2.093,641,2.239,642,2.006,643,2.239,644,2.139,645,2.239,646,1.966,647,2.093,648,2.239,649,2.093,650,2.239,651,2.139,652,2.239,653,2.239,669,4.153,680,2.239,757,1.395,777,3.02,1049,3.59,1118,2.413,1276,3.817,1491,2.551,1825,3.948,1898,2.713,1907,3.948,1912,2.908,1914,3.025,5080,3.157,5081,3.157,5083,4.443,5084,3.157,5085,3.157,5086,4.922,5087,3.498]],["title/components/TestErrorDataComponent.html",[109,0.735,585,2.377]],["body/components/TestErrorDataComponent.html",[3,0.041,4,0.036,5,0.041,10,0.107,11,0.159,12,0.57,16,0.097,17,0.005,19,0.22,27,0.079,28,1.914,32,0.627,47,1.715,68,2.991,88,0.003,89,0.003,90,0.826,109,1.369,114,2.617,136,2.556,164,4.247,171,1.998,179,1.217,180,1.65,182,2.898,184,0.991,187,0.891,205,0.334,229,0.555,247,1.96,253,2.086,278,1.071,287,2.706,323,0.664,324,2.133,325,1.086,329,3.102,331,1.45,335,1.99,371,2.652,391,2.133,508,2.181,509,3.154,510,1.661,511,1.75,514,3.144,515,2.654,537,4.59,539,2.898,542,2.617,544,2.233,545,2.876,546,1.53,547,3.951,548,2.233,549,2.233,550,2.181,551,1.96,552,2.233,553,2.181,554,3.136,555,2.233,556,2.181,557,2.233,558,3.144,559,2.233,560,3.072,561,3.144,562,2.181,563,2.181,564,3.469,565,2.233,566,3.951,567,2.181,568,2.133,569,2.181,570,2.042,571,2.233,572,2.133,573,2.133,574,2.233,575,2.181,576,2.042,577,2.233,578,2.181,579,1.849,580,2.233,581,3.072,582,2.233,583,3.072,584,3.144,585,3.86,586,3.072,587,2.233,588,3.072,589,2.233,590,3.072,591,2.604,592,2.233,593,2.233,594,2.233,595,2,596,1.504,597,2.086,598,2.086,599,2.233,600,2.133,601,2.233,602,2.233,603,2.233,604,2.133,605,2.233,606,2.086,607,2.133,608,2.233,609,3.868,610,3.692,611,2.233,612,2.233,613,2.042,614,2.133,615,2.233,616,2.133,617,2.233,618,2.133,619,2.233,620,2.086,621,2.086,622,2.133,623,2.233,624,2.133,625,2.233,626,2.133,627,2.233,628,2.133,629,2.233,630,1.719,631,2.133,632,2.086,633,2.133,634,2.086,635,2.086,636,2.086,637,1.815,638,1.849,639,1.849,640,2.086,641,2.233,642,2,643,2.233,644,2.133,645,2.233,646,1.96,647,2.086,648,2.233,649,2.086,650,2.233,651,2.133,652,2.233,653,2.233,669,4.147,680,2.233,757,1.391,777,3.015,1049,3.582,1118,2.406,1276,3.809,1491,2.544,1825,3.94,1898,2.705,1907,3.94,1912,2.9,1914,3.016,5080,3.148,5081,3.148,5083,4.433,5084,3.148,5085,3.148,5086,4.912,5087,3.488]],["title/components/TestLoadingComponent.html",[109,0.735,586,2.377]],["body/components/TestLoadingComponent.html",[3,0.041,4,0.036,5,0.041,10,0.108,11,0.159,12,0.571,16,0.097,17,0.005,19,0.22,27,0.079,28,1.885,32,0.628,47,1.716,68,2.665,88,0.003,89,0.003,90,0.827,109,1.37,114,3.11,136,2.561,164,4.256,171,2,179,1.221,180,1.651,182,2.901,184,0.994,187,0.892,205,0.335,229,0.557,247,1.966,253,2.093,278,1.074,287,2.712,323,0.666,324,2.139,325,1.089,329,3.102,331,1.452,335,1.994,371,2.654,391,2.139,508,2.188,509,3.158,510,1.665,511,1.755,514,3.151,515,2.66,537,4.592,539,2.9,542,2.621,544,2.239,545,2.882,546,1.533,547,3.956,548,2.239,549,2.239,550,2.188,551,1.966,552,2.239,553,2.188,554,3.137,555,2.239,556,2.188,557,2.239,558,3.151,559,2.239,560,3.078,561,3.151,562,2.188,563,2.188,564,3.474,565,2.239,566,3.956,567,2.188,568,2.139,569,2.188,570,2.048,571,2.239,572,2.139,573,2.139,574,2.239,575,2.188,576,2.048,577,2.239,578,2.188,579,1.855,580,2.239,581,3.078,582,2.239,583,3.078,584,3.151,585,3.078,586,3.865,587,2.239,588,3.078,589,2.239,590,3.078,591,2.61,592,2.239,593,2.239,594,2.239,595,2.006,596,1.508,597,2.093,598,2.093,599,2.239,600,2.139,601,2.239,602,2.239,603,2.239,604,2.139,605,2.239,606,2.093,607,2.139,608,2.239,609,3.87,610,3.697,611,2.239,612,2.239,613,2.048,614,2.139,615,2.239,616,2.139,617,2.239,618,2.139,619,2.239,620,2.093,621,2.093,622,2.139,623,2.239,624,2.139,625,2.239,626,2.139,627,2.239,628,2.139,629,2.239,630,1.724,631,2.139,632,2.093,633,2.139,634,2.093,635,2.093,636,2.093,637,1.82,638,1.855,639,1.855,640,2.093,641,2.239,642,2.006,643,2.239,644,2.139,645,2.239,646,1.966,647,2.093,648,2.239,649,2.093,650,2.239,651,2.139,652,2.239,653,2.239,669,4.153,680,2.239,757,1.395,777,3.02,1049,3.59,1118,2.413,1276,3.817,1491,2.551,1825,3.948,1898,2.713,1907,3.948,1912,2.908,1914,3.025,5080,3.157,5081,3.157,5083,4.443,5084,3.157,5085,3.157,5086,4.922,5087,3.498]],["title/components/TestOfflineComponent.html",[109,0.735,588,2.377]],["body/components/TestOfflineComponent.html",[3,0.041,4,0.036,5,0.041,10,0.108,11,0.159,12,0.571,16,0.097,17,0.005,19,0.22,27,0.079,28,1.885,32,0.628,47,1.716,68,2.665,88,0.003,89,0.003,90,0.827,109,1.37,114,2.621,136,2.561,164,4.256,171,2,179,1.221,180,1.651,182,2.901,184,0.994,187,0.892,205,0.335,229,0.557,247,1.966,253,2.093,278,1.074,287,2.712,323,0.666,324,2.139,325,1.089,329,3.102,331,1.452,335,1.994,371,2.654,391,2.139,508,2.188,509,3.158,510,1.665,511,1.755,514,3.151,515,2.66,537,4.592,539,2.9,542,2.621,544,2.239,545,2.882,546,1.533,547,3.956,548,2.239,549,2.239,550,2.188,551,1.966,552,2.239,553,2.188,554,3.137,555,2.239,556,2.188,557,2.239,558,3.151,559,2.239,560,3.078,561,3.151,562,2.188,563,2.188,564,3.474,565,2.239,566,3.956,567,2.188,568,2.139,569,2.188,570,2.048,571,2.239,572,2.139,573,2.139,574,2.239,575,2.188,576,2.048,577,2.239,578,2.188,579,1.855,580,2.239,581,3.078,582,2.239,583,3.078,584,3.151,585,3.078,586,3.078,587,2.239,588,3.865,589,2.239,590,3.078,591,2.61,592,2.239,593,2.239,594,2.239,595,2.006,596,1.508,597,2.093,598,2.093,599,2.239,600,2.139,601,2.239,602,2.239,603,2.239,604,2.139,605,2.239,606,2.093,607,2.139,608,2.239,609,3.87,610,3.697,611,2.239,612,2.239,613,2.048,614,2.139,615,2.239,616,2.139,617,2.239,618,2.139,619,2.239,620,2.093,621,2.093,622,2.139,623,2.239,624,2.139,625,2.239,626,2.139,627,2.239,628,2.139,629,2.239,630,1.724,631,2.139,632,2.093,633,2.139,634,2.093,635,2.093,636,2.093,637,1.82,638,1.855,639,1.855,640,2.093,641,2.239,642,2.006,643,2.239,644,2.139,645,2.239,646,1.966,647,2.093,648,2.239,649,2.093,650,2.239,651,2.139,652,2.239,653,2.239,669,4.153,680,2.239,757,1.395,777,3.02,1049,3.59,1118,2.413,1276,3.817,1491,2.551,1825,3.948,1898,2.713,1907,5.224,1912,2.908,1914,3.025,5080,3.157,5081,3.157,5083,4.443,5084,3.157,5085,3.157,5086,4.922,5087,3.498]],["title/components/TestOverrideDisplayContentComponent.html",[109,0.735,590,2.377]],["body/components/TestOverrideDisplayContentComponent.html",[3,0.041,4,0.037,5,0.041,10,0.109,11,0.16,17,0.005,19,0.221,27,0.08,28,1.735,47,1.636,68,2.677,88,0.003,89,0.003,90,0.829,109,1.373,114,3.009,171,1.906,179,1.233,180,1.652,182,2.764,187,0.973,205,0.339,247,1.985,253,2.113,278,1.085,323,0.673,324,2.16,325,1.1,329,3.103,331,1.552,335,2.007,371,2.439,391,2.16,508,2.209,509,2.532,510,1.682,511,1.773,514,3.173,515,2.678,537,4.599,539,2.908,542,3.27,544,2.261,545,2.902,546,1.544,547,3.974,548,2.261,549,2.261,550,2.209,551,1.985,552,2.261,553,2.209,554,3.143,555,2.261,556,2.209,557,2.261,558,3.173,559,2.261,560,3.1,561,3.173,562,2.209,563,2.209,564,3.489,565,2.261,566,3.974,567,2.209,568,2.16,569,2.209,570,2.069,571,2.261,572,2.16,573,2.16,574,2.261,575,2.209,576,2.069,577,2.261,578,2.209,579,1.873,580,2.261,581,3.1,582,2.261,583,3.1,584,3.173,585,3.1,586,3.1,587,2.261,588,3.1,589,2.261,590,3.882,591,3.036,592,2.261,593,2.261,594,2.261,595,2.026,596,1.523,597,2.113,598,2.113,599,2.261,600,2.16,601,2.261,602,2.261,603,2.261,604,2.16,605,2.261,606,2.113,607,2.16,608,2.261,609,3.593,610,3.911,611,2.261,612,2.261,613,2.069,614,2.16,615,2.261,616,2.16,617,2.261,618,2.16,619,2.261,620,2.113,621,2.113,622,2.16,623,2.261,624,2.16,625,2.261,626,2.16,627,2.261,628,2.16,629,2.261,630,1.741,631,2.16,632,2.113,633,2.16,634,2.113,635,2.113,636,2.113,637,1.838,638,1.873,639,1.873,640,2.113,641,2.261,642,2.026,643,2.261,644,2.16,645,2.261,646,1.985,647,2.113,648,2.261,649,2.113,650,2.261,651,2.16,652,2.261,653,2.261,680,3.173,757,1.409,1049,4.176,1118,2.437,1276,5.256,1491,2.576,1907,3.975,1912,2.937,1914,5.652,5080,5.9,5081,3.188,5083,5.168,5084,3.188,5085,5.9,5088,6.399,5089,6.399,5090,4.561]],["title/pipes/TransformPipe.html",[174,1.428,5091,4.394]],["body/pipes/TransformPipe.html",[3,0.057,4,0.05,5,0.057,12,0.564,15,4.112,16,0.17,17,0.005,19,0.165,27,0.057,32,1.409,34,2.27,44,2.107,47,1.617,49,1.709,54,3.593,88,0.004,89,0.004,90,0.595,96,0.992,102,3.927,174,2.65,176,3.19,177,3.773,179,1.698,180,1.416,182,2.732,183,1.131,184,1.238,185,5.433,186,5.305,187,0.762,193,1.938,194,2.41,196,1.131,200,4.758,203,3.372,204,4.233,205,0.466,206,1.827,209,4.758,211,4.606,358,4.92,377,3.043,409,1.778,743,3.024,835,6.135,868,4.045,891,2.824,2537,4.865,3214,6.135,5091,8.155,5092,6.281,5093,9.85,5094,7.921,5095,7.921,5096,6.281,5097,8.676,5098,7.921,5099,7.921,5100,6.281,5101,6.281]],["title/interfaces/TranslationLoaderActionEntity.html",[0,0.077,2438,4.055]],["body/interfaces/TranslationLoaderActionEntity.html",[0,0.117,2,1.11,3,0.067,4,0.059,5,0.08,10,0.177,11,0.219,16,0.159,17,0.005,27,0.067,88,0.005,89,0.005,96,0.928,114,3.438,122,3.073,152,1.204,255,4.604,303,2.57,422,3.135,730,1.644,863,4.069,1659,4.812,1841,6.123,2419,6.123,2420,6.123,2422,6.523,2438,7.24,5102,6.634,5103,7.845,5104,7.411]],["title/dependencies.html",[273,2.854,5105,4.884]],["body/dependencies.html",[17,0.006,21,4.247,22,5.476,23,5.476,88,0.004,89,0.004,124,3.779,154,4.735,205,0.525,304,1.73,554,2.288,568,3.349,828,3.349,854,4.392,1118,3.779,1248,5.185,1260,4.554,1282,3.349,1357,6.329,1443,3.682,1446,3.948,1660,4.735,1661,4.554,1865,4.735,2409,6.329,2509,5.841,2510,6.329,2511,6.329,2689,4.554,2691,4.735,3647,7.628,3732,5.476,4836,6.329,5105,5.841,5106,7.071,5107,7.071,5108,9.984,5109,7.071,5110,7.071,5111,7.071,5112,9.495,5113,7.071,5114,7.071,5115,7.071,5116,7.071,5117,7.071,5118,7.071,5119,7.071,5120,7.071,5121,7.071,5122,7.071,5123,7.071,5124,7.071,5125,7.071]],["title/miscellaneous/enumerations.html",[5126,3.162,5127,5.293]],["body/miscellaneous/enumerations.html",[10,0.183,17,0.005,32,1.357,88,0.005,89,0.005,114,3.375,122,2.69,422,2.444,740,5.759,1154,8.005,1155,8.005,1659,4.211,2419,6.336,2420,6.336,2422,6.251,5102,8.005,5103,8.005,5126,5.941,5127,6.866,5128,7.67,5129,8.942,5130,7.67,5131,7.67]],["title/miscellaneous/functions.html",[835,4.579,5126,3.162]],["body/miscellaneous/functions.html",[10,0.179,12,0.676,16,0.162,17,0.005,57,3.209,88,0.005,89,0.005,96,0.941,152,1.141,180,1.227,193,1.84,196,1.691,300,2.323,409,1.373,835,5.825,1041,5.144,1170,5.036,1186,6.563,1246,7.302,1248,6.885,1251,4.843,1443,4.889,5126,5.825,5132,7.52,5133,7.52,5134,8.839,5135,7.52,5136,7.52,5137,7.52,5138,7.52,5139,7.52,5140,8.839,5141,7.52,5142,7.52]],["title/index.html",[10,0.097,5143,3.654,5144,3.654]],["body/index.html",[4,0.056,7,2.221,17,0.004,26,4.606,41,3.318,49,1.709,54,2.36,61,1.56,88,0.004,89,0.004,97,2.521,122,1.825,134,3.233,135,1.658,180,1.143,191,2.71,203,3.438,207,4.299,209,4.758,239,4.031,247,3.448,273,6.835,304,1.714,305,3.246,341,1.684,365,4.205,409,0.95,412,3.351,434,5.427,442,1.952,461,2.781,509,2.773,515,2.178,570,3.178,722,2.94,730,1.154,743,2.675,823,3.638,841,2.521,928,2.521,982,4.921,1037,5.138,1074,2.71,1165,2.857,1167,2.857,1168,4.299,1242,2.857,1263,4.898,1268,5.138,1276,3.126,1282,4.483,1308,4.658,1344,2.521,1396,3.029,1443,4.125,1456,4.031,1629,3.638,1661,3.351,1667,3.029,1712,5.427,1734,7.307,1948,3.816,2205,2.781,2299,5.369,2328,5.427,2403,3.816,2422,3.638,2489,3.638,2537,4.031,2564,4.299,2669,4.658,2697,3.958,2751,4.031,2765,7.586,3284,4.031,3348,2.94,3352,4.078,3631,4.658,3777,4.658,3827,4.658,4012,6.544,4134,4.299,4714,7.091,4715,4.658,5105,4.299,5145,7.007,5146,5.204,5147,7.007,5148,5.204,5149,7.091,5150,7.091,5151,7.091,5152,5.204,5153,5.204,5154,5.204,5155,5.204,5156,5.204,5157,5.204,5158,5.204,5159,5.204,5160,5.204,5161,5.204,5162,7.007,5163,5.204,5164,7.007,5165,5.204,5166,5.204,5167,5.204,5168,5.204,5169,5.204,5170,5.204,5171,5.204,5172,5.204,5173,5.204,5174,5.204,5175,5.204,5176,5.204,5177,5.204,5178,5.204,5179,5.204,5180,5.204,5181,5.204,5182,5.204,5183,5.204,5184,5.204,5185,5.204,5186,5.204,5187,5.204,5188,5.204,5189,5.204,5190,5.204,5191,5.204,5192,7.007,5193,5.204,5194,5.204,5195,5.204,5196,7.007,5197,5.204,5198,5.204,5199,7.007,5200,5.204,5201,5.204,5202,5.204,5203,5.204,5204,5.204,5205,5.204,5206,5.204,5207,5.204,5208,5.204,5209,5.204,5210,5.204,5211,5.204,5212,5.204,5213,5.204,5214,5.204,5215,5.204,5216,5.204,5217,5.204,5218,5.427,5219,4.299,5220,7.586,5221,6.272,5222,4.658,5223,4.658,5224,4.658,5225,4.658,5226,4.658,5227,4.658,5228,4.658,5229,4.658,5230,4.658,5231,8.585,5232,4.658,5233,4.658,5234,4.658,5235,6.272,5236,4.658,5237,4.658,5238,4.658,5239,4.658,5240,4.658,5241,4.658,5242,4.658,5243,4.658,5244,6.272,5245,4.658,5246,4.658,5247,4.658,5248,6.272,5249,6.272,5250,4.658,5251,4.658,5252,4.658,5253,4.658,5254,4.658,5255,4.658,5256,4.658,5257,4.658,5258,4.658,5259,4.658,5260,4.658,5261,4.658,5262,4.658,5263,4.658,5264,4.658,5265,4.658,5266,4.658,5267,4.658,5268,4.658,5269,4.658,5270,4.658,5271,4.658,5272,4.658,5273,4.658]],["title/license.html",[5143,3.654,5144,3.654,5218,3.162]],["body/license.html",[17,0.004,49,1.496,88,0.004,89,0.004,122,2.431,203,3.272,209,5.447,341,2.243,409,1.266,442,2.601,730,1.538,1074,3.61,1268,6.175,1276,4.164,1344,3.358,1456,5.369,1734,5.727,1948,5.084,2328,6.521,2403,5.084,2537,5.369,2564,5.727,4134,5.727,5149,6.206,5150,6.206,5151,6.206,5218,5.369,5219,5.727,5220,8.443,5221,7.537,5222,6.206,5223,6.206,5224,6.206,5225,6.206,5226,6.206,5227,6.206,5228,6.206,5229,6.206,5230,6.206,5231,9.047,5232,6.206,5233,6.206,5234,6.206,5235,7.537,5236,6.206,5237,6.206,5238,6.206,5239,6.206,5240,6.206,5241,6.206,5242,6.206,5243,6.206,5244,7.537,5245,6.206,5246,6.206,5247,6.206,5248,7.537,5249,7.537,5250,6.206,5251,6.206,5252,6.206,5253,6.206,5254,6.206,5255,6.206,5256,6.206,5257,6.206,5258,6.206,5259,6.206,5260,6.206,5261,6.206,5262,6.206,5263,6.206,5264,6.206,5265,6.206,5266,6.206,5267,6.206,5268,6.206,5269,6.206,5270,6.206,5271,6.206,5272,6.206,5273,6.206]],["title/modules.html",[2668,5.562]],["body/modules.html",[17,0.005,88,0.005,89,0.005,2668,6.728]],["title/overview.html",[5274,6.027]],["body/overview.html",[2,1.194,17,0.005,88,0.005,89,0.005,92,4.79,176,4.05,293,3.403,325,1.924,509,3.156,5274,7.139,5275,7.975,5276,7.975,5277,7.975,5278,7.975,5279,7.975,5280,7.975]],["title/properties.html",[11,0.148,273,2.854]],["body/properties.html",[11,0.202,17,0.005,88,0.005,89,0.005,1396,4.69,5218,6.242,5219,6.657,5281,8.059]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":66,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TableCellTemplate.html":{}}}],["0.0.0",{"_index":5281,"title":{},"body":{"properties.html":{}}}],["0.15.0",{"_index":5125,"title":{},"body":{"dependencies.html":{}}}],["0754",{"_index":493,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["1",{"_index":1035,"title":{"injectables/NgxMediaQueryService-1.html":{}},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["1,2,3,4",{"_index":2706,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["1.0.0",{"_index":2409,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"dependencies.html":{}}}],["1.2.1",{"_index":5118,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":4328,"title":{},"body":{"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["11.1.0",{"_index":5122,"title":{},"body":{"dependencies.html":{}}}],["1200",{"_index":4709,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["14",{"_index":5278,"title":{},"body":{"overview.html":{}}}],["17.0.0",{"_index":5113,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":5275,"title":{},"body":{"overview.html":{}}}],["1].focus",{"_index":1040,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["1]?.focus",{"_index":1043,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["1fr",{"_index":1645,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["2",{"_index":2851,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["2.32.4",{"_index":5119,"title":{},"body":{"dependencies.html":{}}}],["20.0.0",{"_index":5112,"title":{},"body":{"dependencies.html":{}}}],["20.1.0",{"_index":5111,"title":{},"body":{"dependencies.html":{}}}],["20.2.0",{"_index":5107,"title":{},"body":{"dependencies.html":{}}}],["20.2.1",{"_index":5108,"title":{},"body":{"dependencies.html":{}}}],["2023",{"_index":5222,"title":{},"body":{"index.html":{},"license.html":{}}}],["2025",{"_index":5225,"title":{},"body":{"index.html":{},"license.html":{}}}],["24",{"_index":5277,"title":{},"body":{"overview.html":{}}}],["3",{"_index":2852,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"classes/NgxValidators.html":{}}}],["3.0.1",{"_index":5120,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":5123,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":223,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"injectables/NgxImageMarkerService.html":{}}}],["4.1.0",{"_index":5115,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":5117,"title":{},"body":{"dependencies.html":{}}}],["401",{"_index":2542,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["42",{"_index":5276,"title":{},"body":{"overview.html":{}}}],["4217",{"_index":1848,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["4217](https://en.wikipedia.org/wiki/iso_4217",{"_index":1857,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["474.603.875",{"_index":202,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["474603875",{"_index":201,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["5",{"_index":4162,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["5000",{"_index":4168,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["5100",{"_index":492,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["5px",{"_index":4353,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["7",{"_index":5279,"title":{},"body":{"overview.html":{}}}],["7.1.5",{"_index":5116,"title":{},"body":{"dependencies.html":{}}}],["7.8.0",{"_index":5121,"title":{},"body":{"dependencies.html":{}}}],["7061",{"_index":494,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["8",{"_index":225,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["89",{"_index":5280,"title":{},"body":{"overview.html":{}}}],["9",{"_index":219,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxStorageService.html":{}}}],["9]*[,.]{0,1}[0",{"_index":3869,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["_",{"_index":2882,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/TableCellTemplate.html":{}}}],["_blank",{"_index":2949,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["_removedvalue",{"_index":1818,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["_self",{"_index":2948,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["a11y",{"_index":366,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["a[data",{"_index":3628,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["abdurrahman",{"_index":5212,"title":{},"body":{"index.html":{}}}],["ability",{"_index":3679,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["above",{"_index":1074,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{},"license.html":{}}}],["abstract",{"_index":596,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["abstractcontrol",{"_index":419,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstraction",{"_index":3521,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["abstractions",{"_index":5167,"title":{},"body":{"index.html":{}}}],["abstracts",{"_index":278,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accept",{"_index":1711,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory",{"_index":1699,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptcategory(name",{"_index":1709,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepted",{"_index":1723,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{}}}],["acceptservice",{"_index":1700,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["acceptservice(category",{"_index":1714,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["accepttype",{"_index":1670,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["access",{"_index":4670,"title":{},"body":{"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accessibility",{"_index":3278,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["accessible",{"_index":811,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["accessor",{"_index":393,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/TableCellTemplate.html":{}}}],["accessors",{"_index":99,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourItemDirective.html":{}}}],["accessors.length",{"_index":457,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["according",{"_index":723,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["accordingly",{"_index":1984,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["accordion",{"_index":557,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion'},{'name",{"_index":555,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["accordion.component",{"_index":1121,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["account",{"_index":4363,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["acoolmethod",{"_index":4731,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["act",{"_index":1983,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["action",{"_index":122,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["action.id",{"_index":2461,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action.state",{"_index":2457,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["action/has",{"_index":2311,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["actioncreator",{"_index":119,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["actionfromresult",{"_index":2460,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actionreducer",{"_index":123,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["actions",{"_index":128,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actions.channel",{"_index":4812,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["actions.concat(action.id",{"_index":2458,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.data",{"_index":4844,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["actions.filter((actionfromresult",{"_index":2459,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["actions.videos",{"_index":4817,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["actiontype",{"_index":3371,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/SpecStoreService.html":{}}}],["activatedroute",{"_index":3537,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["activatedroutesnapshot",{"_index":3682,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["active",{"_index":947,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["actives",{"_index":4296,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["activetooltip",{"_index":4244,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["acts",{"_index":4098,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["actual",{"_index":107,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["actual_component",{"_index":653,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["actually",{"_index":2093,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["adapter",{"_index":159,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["add",{"_index":135,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["addcharatindex",{"_index":210,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["addcharatindex(value",{"_index":222,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["added",{"_index":363,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["additional",{"_index":1279,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["addloadedtranslations",{"_index":2429,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["addloadedtranslations(translations",{"_index":2434,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["adds",{"_index":833,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["adjust",{"_index":4443,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["adjusted",{"_index":2778,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["advantage",{"_index":3606,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["advertisement",{"_index":3346,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affect",{"_index":3328,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["affects",{"_index":3324,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["aftercontentchecked",{"_index":4866,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["afterviewinit",{"_index":936,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aftervisible",{"_index":4348,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["afterwards",{"_index":4442,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["again",{"_index":3641,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["alert",{"_index":3339,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{}}}],["alertdialog",{"_index":3299,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["alias",{"_index":929,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["allornothingrequired",{"_index":4596,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequired(control",{"_index":4602,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequirederror",{"_index":4607,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator",{"_index":4646,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allornothingrequiredvalidator(control",{"_index":4660,"title":{},"body":{"classes/NgxValidators.html":{}}}],["allow",{"_index":373,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["allowbeforeunloadhandler",{"_index":3688,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["allowclear",{"_index":2703,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["allowed",{"_index":2700,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["allowing",{"_index":3990,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["allowmultipleopenrows",{"_index":4947,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["allowmultiplerowsopen",{"_index":3950,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["allows",{"_index":353,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["allowzoom",{"_index":2701,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["along",{"_index":2010,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["alongside",{"_index":1501,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["already",{"_index":266,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["always",{"_index":1330,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["amount",{"_index":672,"title":{},"body":{"components/MockTourStepComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{}}}],["amountofsteps",{"_index":655,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["anchor",{"_index":2918,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["anchors",{"_index":3635,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["and/or",{"_index":5242,"title":{},"body":{"index.html":{},"license.html":{}}}],["angular",{"_index":2299,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["angular's",{"_index":3322,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["angular/cdk",{"_index":5106,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/a11y",{"_index":848,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["angular/cdk/bidi",{"_index":3293,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/dialog",{"_index":3295,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["angular/cdk/overlay",{"_index":4276,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/portal",{"_index":4278,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["angular/cdk/table",{"_index":4864,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["angular/common",{"_index":1118,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":118,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["angular/compiler",{"_index":5109,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":205,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"dependencies.html":{}}}],["angular/core/rxjs",{"_index":2090,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["angular/forms",{"_index":21,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":3647,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"dependencies.html":{}}}],["angular/router",{"_index":1260,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"dependencies.html":{}}}],["animation",{"_index":4071,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["api",{"_index":1187,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["app",{"_index":3608,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["app.component.ts",{"_index":3619,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["appcomponent",{"_index":3620,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["append",{"_index":1554,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["appending",{"_index":2404,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["application",{"_index":1257,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["applications",{"_index":3155,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["applied",{"_index":3313,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"classes/NgxValidators.html":{}}}],["apply",{"_index":4048,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["approach",{"_index":3777,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["approaches",{"_index":2596,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["area",{"_index":2862,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["aren't",{"_index":2526,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxToastContainerComponent.html":{}}}],["args",{"_index":279,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["args{constructorparameters",{"_index":1445,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["arguments",{"_index":340,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["aria",{"_index":701,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ariadescribedby",{"_index":3257,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arialabel",{"_index":3437,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["arialabelledby",{"_index":3258,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["arising",{"_index":5271,"title":{},"body":{"index.html":{},"license.html":{}}}],["around",{"_index":4352,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["array",{"_index":462,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).foreach((tablecelltemplate",{"_index":5023,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.from(this.tablecelltemplates()).some((celltemplate",{"_index":5034,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["array.isarray(id",{"_index":3050,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["array.isarray(open",{"_index":1024,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["array.isarray(value",{"_index":2195,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["arrayelementtype",{"_index":3736,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["arrowdown",{"_index":1060,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowdown(event",{"_index":1077,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowleft",{"_index":4530,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["arrowup",{"_index":1061,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["arrowup(event",{"_index":1079,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["ascending",{"_index":1154,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["aside",{"_index":244,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["asideshown",{"_index":3124,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["asobservable",{"_index":522,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["assertion",{"_index":3397,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["assertive",{"_index":1910,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["assets",{"_index":147,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{}}}],["assets.ts",{"_index":314,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/SpecStoreAssets.html":{}}}],["assigns",{"_index":5016,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["assistive",{"_index":812,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["associated",{"_index":5232,"title":{},"body":{"index.html":{},"license.html":{}}}],["assume",{"_index":3250,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["async",{"_index":2291,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["atleastonerequired",{"_index":4597,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequired(options",{"_index":4608,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequirederror",{"_index":46,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator",{"_index":43,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidator(options",{"_index":4663,"title":{},"body":{"classes/NgxValidators.html":{}}}],["atleastonerequiredvalidatoroptions",{"_index":1,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["attach",{"_index":896,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["attached",{"_index":3319,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxTooltipService.html":{}}}],["attempt",{"_index":1315,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["attempted",{"_index":2619,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["attention",{"_index":3345,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["attr.aria",{"_index":4232,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["attr.class",{"_index":1549,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["attr.data",{"_index":1866,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["attr.role",{"_index":4066,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["attr.tabindex",{"_index":372,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["attr.target",{"_index":2954,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["attribute",{"_index":4945,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["attributes",{"_index":3285,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{}}}],["auth",{"_index":1283,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticated",{"_index":1170,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"miscellaneous/functions.html":{}}}],["authenticated.directive.ts",{"_index":2889,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:125",{"_index":2895,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:27",{"_index":2898,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:30",{"_index":2904,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:35",{"_index":2899,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:40",{"_index":2902,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:41",{"_index":2903,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:42",{"_index":2900,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:43",{"_index":2901,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:48",{"_index":2892,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:70",{"_index":2893,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:74",{"_index":2894,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:76",{"_index":2896,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated.directive.ts:80",{"_index":2897,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticated/is",{"_index":2888,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticatedcallhandler",{"_index":1240,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["authentication",{"_index":1248,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["authenticationresponse",{"_index":1356,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsesubject",{"_index":1284,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype",{"_index":1349,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationresponsetype['session']['permissions",{"_index":1387,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authenticationservice",{"_index":2226,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["authenticationstatussubject",{"_index":1285,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["authorized",{"_index":2539,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["authors",{"_index":5262,"title":{},"body":{"index.html":{},"license.html":{}}}],["auto",{"_index":1633,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxToastComponent.html":{}}}],["autoclearcookies",{"_index":1677,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autoclose",{"_index":3316,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["autodetect",{"_index":1664,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["autofocus",{"_index":3334,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autofocustarget",{"_index":3294,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["autogenerated",{"_index":4230,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["automatically",{"_index":2023,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{}}}],["autoshow",{"_index":1674,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["available",{"_index":1307,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["availablelanguages",{"_index":2391,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["availablelanguagessubject",{"_index":2565,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["availabletranslations",{"_index":2517,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["availabletranslations[path",{"_index":2525,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["avoid",{"_index":772,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["axis",{"_index":4358,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["back",{"_index":738,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["backdrop",{"_index":3311,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["base",{"_index":101,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxStore.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["based",{"_index":743,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["baseformaccessor",{"_index":91,"title":{"classes/BaseFormAccessor.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["basestore",{"_index":110,"title":{"interfaces/BaseStore.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreaction",{"_index":3888,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreactions",{"_index":129,"title":{"interfaces/BaseStoreActions.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreassets",{"_index":127,"title":{"interfaces/BaseStoreAssets.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["basestoreassetsgeneratoroptions",{"_index":145,"title":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreeffectsinterface",{"_index":125,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["basestoreselector",{"_index":3885,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["basestoreselectors",{"_index":132,"title":{"interfaces/BaseStoreSelectors.html":{}},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["baseurl",{"_index":1173,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["baseurlhandler",{"_index":1215,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["basicentityadapteractions",{"_index":168,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["basicentityadapterreduceractions",{"_index":157,"title":{"interfaces/BasicEntityAdapterReducerActions.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["basicentitystate",{"_index":170,"title":{"interfaces/BasicEntityState.html":{}},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["bc.onmessage",{"_index":1436,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["bc.onmessageerror",{"_index":1432,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["be62",{"_index":491,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["be62510007547061",{"_index":490,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["becomes",{"_index":4345,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["before",{"_index":2872,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["beforeunload",{"_index":3704,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforeunloadevent",{"_index":3697,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["beforevisible",{"_index":4346,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["behavior",{"_index":3706,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["behaviorsubject",{"_index":532,"title":{},"body":{"components/MockTourHolderComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["behaviorsubject('hello",{"_index":526,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["behaviorsubject('unset",{"_index":1302,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["behaviorsubject(0",{"_index":4697,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(1200",{"_index":4710,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(false",{"_index":2452,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["behaviorsubject(this.parsevalue(value",{"_index":3867,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["behaviorsubject(true",{"_index":4705,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["behaviorsubject(undefined",{"_index":1300,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["behaviour",{"_index":5074,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["being",{"_index":1138,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["belgian",{"_index":197,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["below",{"_index":39,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{}}}],["benoit",{"_index":5004,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["benoît",{"_index":5208,"title":{},"body":{"index.html":{}}}],["best",{"_index":725,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["better",{"_index":4009,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["between",{"_index":4325,"title":{},"body":{"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["bind(this",{"_index":2835,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["blob",{"_index":1225,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["blocked",{"_index":389,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["blueprint",{"_index":3878,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["blur",{"_index":785,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["body",{"_index":1201,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{}}}],["body.createelement(element",{"_index":3661,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["body.queryselector(selector.replace('{{id",{"_index":3658,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["boolean(action",{"_index":3415,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(availabletranslations[path",{"_index":2522,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["boolean(celltemplate.footertemplate",{"_index":5035,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["boolean(closed",{"_index":3416,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["boolean(get(layout",{"_index":3247,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["boolean(tour?.[index",{"_index":4419,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["both",{"_index":1483,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["bottom",{"_index":4040,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["branch",{"_index":5192,"title":{},"body":{"index.html":{}}}],["breadcrumb",{"_index":2917,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["break",{"_index":3977,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["breaking",{"_index":4717,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["brief",{"_index":3291,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["broadcast",{"_index":1419,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel",{"_index":1404,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel's",{"_index":1458,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broadcastchannel(...args",{"_index":1451,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["broken",{"_index":2544,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["browser",{"_index":1446,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{}}}],["browserdocument",{"_index":4737,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["browserwindow",{"_index":3038,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["browserwindow.matchmedia(query",{"_index":3042,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["btw",{"_index":181,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["btwpipe",{"_index":175,"title":{"pipes/BtwPipe.html":{}},"body":{"pipes/BtwPipe.html":{}}}],["bubbling",{"_index":4528,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["bug",{"_index":5205,"title":{},"body":{"index.html":{}}}],["build",{"_index":5176,"title":{},"body":{"index.html":{}}}],["bump",{"_index":5200,"title":{},"body":{"index.html":{}}}],["bundle",{"_index":4043,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["bundled",{"_index":4044,"title":{},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["bundledcomponent",{"_index":4082,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["bundler.component.ts",{"_index":4058,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:11",{"_index":4065,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:16",{"_index":4061,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["bundler.component.ts:21",{"_index":4062,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["busting",{"_index":2398,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["busy",{"_index":1942,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["button",{"_index":369,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["buttonclasses",{"_index":1488,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["buttons",{"_index":4975,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["buttontype",{"_index":1489,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["buttonwidth",{"_index":1490,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["bypass",{"_index":3680,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["bypasssaveonexit",{"_index":3676,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["c",{"_index":5221,"title":{},"body":{"index.html":{},"license.html":{}}}],["cache",{"_index":2397,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cachebust",{"_index":2392,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["calculated",{"_index":2951,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["call",{"_index":1190,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["callback",{"_index":4736,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["called",{"_index":381,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["calling",{"_index":2671,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxStorageService.html":{}}}],["calls",{"_index":1172,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["came",{"_index":2523,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["cancelled",{"_index":873,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["canedit",{"_index":2718,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["case",{"_index":83,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxButtonDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxTableHasObserversPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["cases",{"_index":4012,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["casing",{"_index":3617,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["cast",{"_index":1378,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["catcherror",{"_index":2513,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["catcherror((res",{"_index":2535,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["categories",{"_index":1713,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["category",{"_index":1656,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["causing",{"_index":5094,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["cdk",{"_index":268,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxModalService.html":{}}}],["cdkdialog",{"_index":3308,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["cdktablemodule",{"_index":4863,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cdref",{"_index":1054,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell",{"_index":705,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cell'},{'name",{"_index":566,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["cell.component.ts",{"_index":1830,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:25",{"_index":1846,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["cell.component.ts:37",{"_index":1887,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:42",{"_index":1883,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:47",{"_index":1877,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.component.ts:52",{"_index":1879,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["cell.directive",{"_index":1856,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["cell.directive.ts",{"_index":3934,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["cell.resetsortdirection",{"_index":5042,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cell.sortdirection",{"_index":1157,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cell.sortdirection.tolocalelowercase",{"_index":1158,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["cellclass",{"_index":706,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cellname",{"_index":5040,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cells",{"_index":4891,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["celltemplate",{"_index":707,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["center",{"_index":237,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["certain",{"_index":1722,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["change",{"_index":2288,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{}}}],["changed",{"_index":1742,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxTourStepComponent.html":{}}}],["changedcategories",{"_index":1683,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changedetection",{"_index":978,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"pipes/NgxMatchesQueryPipe.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy",{"_index":1009,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectionstrategy.onpush",{"_index":979,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedetectorref",{"_index":1098,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["changedservices",{"_index":1684,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["changer",{"_index":423,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["changes",{"_index":1129,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["channel",{"_index":1405,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["channel.service.ts",{"_index":1402,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:115",{"_index":1430,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:15",{"_index":1441,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:20",{"_index":1437,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:29",{"_index":1422,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:55",{"_index":1415,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:72",{"_index":1426,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel.service.ts:93",{"_index":1435,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channel/broadcast",{"_index":1401,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelerror",{"_index":4768,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelerrormessage",{"_index":4769,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelloading",{"_index":4770,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["channelname",{"_index":1418,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channelname{string",{"_index":1452,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["channels",{"_index":1439,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["char",{"_index":212,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["charge",{"_index":2564,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"index.html":{},"license.html":{}}}],["check",{"_index":73,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkbox",{"_index":3962,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["checkboxtemplate",{"_index":4937,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["checked",{"_index":3074,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/TableCellTemplate.html":{}}}],["checks",{"_index":31,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["child",{"_index":1555,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["children",{"_index":4541,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["choice",{"_index":1755,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["chronological",{"_index":4650,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates",{"_index":4598,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldates(startcontrolkey",{"_index":4611,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator",{"_index":4649,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologicaldatesvalidator(startcontrolkey",{"_index":4666,"title":{},"body":{"classes/NgxValidators.html":{}}}],["chronologically",{"_index":4614,"title":{},"body":{"classes/NgxValidators.html":{}}}],["circular",{"_index":773,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["claim",{"_index":5265,"title":{},"body":{"index.html":{},"license.html":{}}}],["class",{"_index":90,"title":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{}},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["class.ngx",{"_index":4375,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["classes",{"_index":92,"title":{},"body":{"classes/BaseFormAccessor.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"classes/NgxI18nAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxLinkDirective.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"classes/NgxValidators.html":{},"overview.html":{}}}],["classic",{"_index":1485,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["clean",{"_index":22,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxMobileLayoutService.html":{},"dependencies.html":{}}}],["clean(group.value",{"_index":59,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clean(this.defaultlayout",{"_index":3220,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["cleanedformvalue",{"_index":58,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys",{"_index":60,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.has(key",{"_index":80,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["cleanedkeys.size",{"_index":65,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clear",{"_index":139,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["clearchannel",{"_index":4774,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["cleardata",{"_index":3483,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["cleared",{"_index":3829,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearformerror",{"_index":24,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearformerror(control",{"_index":87,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["clearing",{"_index":2702,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["clears",{"_index":3490,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["clearstorage",{"_index":3782,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearstorage(storage",{"_index":3787,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["clearvideos",{"_index":4775,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["click",{"_index":337,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["click.directive.ts",{"_index":328,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:12",{"_index":339,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:24",{"_index":351,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:28",{"_index":342,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click.directive.ts:37",{"_index":343,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["click/focus",{"_index":327,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicked",{"_index":2742,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["clicking",{"_index":356,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["clicks",{"_index":2813,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["client.service.ts",{"_index":1163,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:120",{"_index":1204,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:14",{"_index":1208,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:143",{"_index":1206,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:16",{"_index":1179,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:166",{"_index":1202,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:29",{"_index":1199,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:41",{"_index":1197,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:61",{"_index":1193,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client.service.ts:99",{"_index":1184,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["client/authenticated",{"_index":1162,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["clone",{"_index":5153,"title":{},"body":{"index.html":{}}}],["close",{"_index":684,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["close(onclose",{"_index":3367,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closeaside",{"_index":3162,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["closechannel",{"_index":1409,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closechannel(channelname",{"_index":1414,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["closed",{"_index":2877,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["closeflyout",{"_index":3163,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["closeondestroy",{"_index":3455,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closeonnavigation",{"_index":3310,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["closeonoverlaydetachments",{"_index":3456,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["closer",{"_index":4365,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["closes",{"_index":1416,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxModalService.html":{}}}],["closing",{"_index":3332,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["code",{"_index":5197,"title":{},"body":{"index.html":{}}}],["collection",{"_index":5174,"title":{},"body":{"index.html":{}}}],["column",{"_index":708,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["columninput",{"_index":5024,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["columnkey",{"_index":4020,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["columns",{"_index":1632,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["combination",{"_index":2416,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["combinelatest",{"_index":1358,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["combinelatest([this.getsession",{"_index":1373,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["combinelatest([this.queue",{"_index":4129,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["comma",{"_index":4636,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma.validator",{"_index":4657,"title":{},"body":{"classes/NgxValidators.html":{}}}],["comma/decimals",{"_index":4656,"title":{},"body":{"classes/NgxValidators.html":{}}}],["commit",{"_index":5196,"title":{},"body":{"index.html":{}}}],["common",{"_index":5164,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":5083,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["complete",{"_index":2780,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["completed",{"_index":2472,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxStorageService.html":{}}}],["completes",{"_index":3789,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["complex",{"_index":5166,"title":{},"body":{"index.html":{}}}],["compliant",{"_index":974,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTooltipDirective.html":{}}}],["compodoc",{"_index":5160,"title":{},"body":{"index.html":{}}}],["component",{"_index":109,"title":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component'},{'name",{"_index":552,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["component.component.html",{"_index":480,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["component/empty.component.ts",{"_index":2414,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["component['default",{"_index":3252,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["component[(query",{"_index":3253,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["component_template",{"_index":548,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["componentclass",{"_index":4879,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["componentportal",{"_index":4277,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentportal(component",{"_index":4316,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["componentrecord",{"_index":226,"title":{"interfaces/ComponentRecord.html":{}},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{}}}],["componentref",{"_index":1531,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["componentref.setinput('data",{"_index":2012,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["components",{"_index":509,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"overview.html":{}}}],["componenttype",{"_index":231,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["componenttypewrapper",{"_index":259,"title":{"interfaces/ComponentTypeWrapper.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["computed",{"_index":1508,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["concatmap",{"_index":4139,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["concatmap((event",{"_index":4144,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["condition",{"_index":1916,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["conditionalfunction",{"_index":13,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["conditionalfunction(group.value",{"_index":69,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["conditions",{"_index":1276,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{},"license.html":{}}}],["config",{"_index":2045,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["config.token.ts",{"_index":3942,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["configurable",{"_index":560,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["configuration",{"_index":37,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentRecord.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayoutBase.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["configuration.allowclear",{"_index":2856,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.allowzoom",{"_index":2847,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.autoclose",{"_index":3422,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.component",{"_index":3406,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.defaultstate",{"_index":2873,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes.view",{"_index":2839,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.edit",{"_index":2857,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.markertypes?.view",{"_index":2837,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.mode",{"_index":2826,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.role",{"_index":3465,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration.ts",{"_index":1648,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxHasCookieConfiguration.html":{}}}],["configuration.types.ts",{"_index":1239,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["configuration.zoom?.current",{"_index":2854,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration.zoom?.levels",{"_index":2850,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["configuration?.autoclose",{"_index":3421,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.closeonnavigation",{"_index":3453,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.direction",{"_index":3446,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configuration?.role",{"_index":3435,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configurationvalue",{"_index":3377,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["configure",{"_index":1533,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["configured",{"_index":3349,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["connect",{"_index":4450,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["connectedposition",{"_index":4274,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["connection",{"_index":5272,"title":{},"body":{"index.html":{},"license.html":{}}}],["consent",{"_index":1749,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["consentchanged",{"_index":1751,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["console.error",{"_index":861,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["console.error('ngxforms",{"_index":2101,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["console.error(res.message",{"_index":2538,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["console.warn",{"_index":458,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["console.warn('browser",{"_index":4750,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["const",{"_index":42,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor",{"_index":986,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["constructor(private",{"_index":3831,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["constructor(selectors",{"_index":3897,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["constructorparameters",{"_index":1421,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["constructs",{"_index":1185,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["consult",{"_index":5159,"title":{},"body":{"index.html":{}}}],["container",{"_index":893,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxToastContainerComponent.html":{}}}],["container'},{'name",{"_index":580,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["container(s",{"_index":925,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.component.html",{"_index":4080,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.scss",{"_index":4081,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts",{"_index":4079,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:23",{"_index":4093,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:28",{"_index":4088,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:35",{"_index":4092,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:40",{"_index":4090,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:45",{"_index":4086,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.component.ts:52",{"_index":4084,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["container.directive",{"_index":964,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.directive.ts",{"_index":921,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:15",{"_index":931,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.directive.ts:20",{"_index":934,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["container.index",{"_index":967,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["container.ts",{"_index":395,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:18",{"_index":437,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:23",{"_index":443,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:33",{"_index":421,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:47",{"_index":427,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:59",{"_index":431,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:75",{"_index":428,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container.ts:85",{"_index":406,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container/form",{"_index":394,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["container/toast",{"_index":4078,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["containers",{"_index":938,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["containing",{"_index":4619,"title":{},"body":{"classes/NgxValidators.html":{}}}],["contains",{"_index":2587,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["content",{"_index":542,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content.component.ts",{"_index":1894,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.component.ts:13",{"_index":1897,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.component.ts:8",{"_index":1899,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["content.directive",{"_index":5084,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content.directive.ts",{"_index":1915,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:118",{"_index":1933,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:168",{"_index":1934,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:179",{"_index":1938,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:214",{"_index":1935,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:223",{"_index":1947,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:237",{"_index":1945,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:277",{"_index":1941,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:36",{"_index":1956,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:37",{"_index":1963,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:38",{"_index":1949,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:39",{"_index":1967,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:40",{"_index":1960,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:41",{"_index":1953,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:48",{"_index":1957,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:53",{"_index":1964,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:58",{"_index":1961,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:63",{"_index":1950,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:68",{"_index":1930,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:73",{"_index":1932,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.directive.ts:81",{"_index":1929,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["content.types.ts",{"_index":1902,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["content/components/display",{"_index":5080,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["content/display",{"_index":1893,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["contentchild",{"_index":1120,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchild('celltmpl",{"_index":3935,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["contentchild('footertmpl",{"_index":1850,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild('headertmpl",{"_index":1852,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["contentchild>('checkboxtmpl",{"_index":4938,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('contenttmpl",{"_index":1101,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{}}}],["contentchild>('detailrowtmpl",{"_index":4932,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('emptytmpl",{"_index":4934,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('headertmpl",{"_index":1107,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["contentchild>('loadingtmpl",{"_index":4936,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('openrowstatetmpl",{"_index":4944,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('radiotmpl",{"_index":4940,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchild>('sorttmpl",{"_index":4942,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren",{"_index":963,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxabstracttablecelldirective",{"_index":4930,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["contentchildren(ngxaccessibledraganddropcontainerdirective",{"_index":951,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["contentcustom",{"_index":5090,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["contenttemplate",{"_index":1055,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{}}}],["context",{"_index":1182,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["continue",{"_index":4288,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["contract",{"_index":5268,"title":{},"body":{"index.html":{},"license.html":{}}}],["contribute",{"_index":5190,"title":{},"body":{"index.html":{}}}],["contributions",{"_index":5189,"title":{},"body":{"index.html":{}}}],["contributors",{"_index":5207,"title":{},"body":{"index.html":{}}}],["control",{"_index":70,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["control?.value",{"_index":4983,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["controlnames",{"_index":4661,"title":{},"body":{"classes/NgxValidators.html":{}}}],["controls",{"_index":14,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["controlvalueaccessor",{"_index":2766,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["convenient",{"_index":4716,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["convert",{"_index":195,"title":{},"body":{"pipes/BtwPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["converts",{"_index":189,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["converttoarray",{"_index":2254,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["converttoarray(this.permission",{"_index":2367,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["cookie",{"_index":1680,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["cookie(s",{"_index":2155,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts",{"_index":2151,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:148",{"_index":2166,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:158",{"_index":2172,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:168",{"_index":2169,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:34",{"_index":2180,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:36",{"_index":2184,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:37",{"_index":2187,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:38",{"_index":2183,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:39",{"_index":2175,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:40",{"_index":2177,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:48",{"_index":2185,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:49",{"_index":2181,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:54",{"_index":2178,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:59",{"_index":2179,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:64",{"_index":2165,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:70",{"_index":2164,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:89",{"_index":2168,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.directive.ts:96",{"_index":2173,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.name",{"_index":1812,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie.services",{"_index":2203,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.services.map((service",{"_index":2206,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookie.ts",{"_index":1820,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["cookie.value",{"_index":1813,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookie/has",{"_index":2150,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["cookieconsent",{"_index":1661,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{},"index.html":{}}}],["cookieconsent.acceptcategory(name",{"_index":1800,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedcategory(name",{"_index":1799,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptedservice(name",{"_index":1801,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.acceptservice(name",{"_index":1802,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.getcookie('data",{"_index":1804,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.run",{"_index":1796,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.setcookiedata",{"_index":1811,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieconsent.show(true",{"_index":1803,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookies",{"_index":1712,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxHasCookieDirective.html":{},"index.html":{}}}],["cookieschanged",{"_index":1689,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookieschangedsubject",{"_index":1690,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchanged",{"_index":1691,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentchangedsubject",{"_index":1692,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsented",{"_index":1693,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookiesconsentedsubject",{"_index":1694,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["cookievalue",{"_index":1657,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["copies",{"_index":5244,"title":{},"body":{"index.html":{},"license.html":{}}}],["copy",{"_index":2328,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["copyright",{"_index":5220,"title":{},"body":{"index.html":{},"license.html":{}}}],["core",{"_index":1443,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["correct",{"_index":191,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["correctly",{"_index":2124,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["corresponding",{"_index":870,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["corresponds",{"_index":2533,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxTourItemDirective.html":{}}}],["couple",{"_index":3611,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["create",{"_index":271,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["createaccessorproviders",{"_index":284,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["createbasestoreassets",{"_index":4760,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createcustomelement(linkcomponent",{"_index":3623,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["created",{"_index":2751,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"index.html":{}}}],["createeffect",{"_index":4828,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["createentityadapterstoreassets",{"_index":4761,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createimagemakeredit",{"_index":2798,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemakeredit(id",{"_index":2803,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker",{"_index":2799,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createimagemarker(image",{"_index":2808,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarker",{"_index":2729,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["createmarkerclickedlistener",{"_index":2800,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkerclickedlistener(marker",{"_index":2810,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges",{"_index":2801,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmarkervaluechanges(marker",{"_index":2814,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createmodalcomponent",{"_index":3364,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createmodalcomponent(options",{"_index":3369,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["createreadonlyimagemarker",{"_index":2802,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["createreadonlyimagemarker(id",{"_index":2817,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["creates",{"_index":2745,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["createstoreassets",{"_index":4762,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets('state",{"_index":4840,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["createstoreassets(storeslice",{"_index":4765,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["currency",{"_index":565,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["currencypipe",{"_index":1831,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["current",{"_index":752,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentcookies",{"_index":1817,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["currentgrid",{"_index":1605,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["currentlanguage",{"_index":818,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["currentlanguagesubject",{"_index":2566,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["currently",{"_index":1503,"title":{},"body":{"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxToastBundlerComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentmarker",{"_index":2719,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["currentquerymatch",{"_index":3015,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["currentroute",{"_index":3685,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["currentscrollposition",{"_index":4672,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentscrollpositionsubject",{"_index":4673,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["currentsorting",{"_index":1156,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["currentsortingevent",{"_index":4886,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["currentstep",{"_index":656,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["currentvalue",{"_index":2024,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["currentzoomlevel",{"_index":2720,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["custom",{"_index":680,"title":{},"body":{"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTourStepComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["customelements.define('ngx",{"_index":3625,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["custommessages",{"_index":814,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["cutout",{"_index":4351,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cutoutmargin",{"_index":4331,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["cy",{"_index":1867,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypress",{"_index":724,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypress/playwright",{"_index":2256,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["cypress/playwrite",{"_index":2825,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["cypressdatatags",{"_index":709,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["cypressdatatagsinput",{"_index":5026,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["cypresstag",{"_index":1861,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["cypresstag]'},{'name",{"_index":608,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["damages",{"_index":5266,"title":{},"body":{"index.html":{},"license.html":{}}}],["danger",{"_index":1472,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["darkmode",{"_index":4757,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["darr",{"_index":4031,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["data",{"_index":28,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data'},{'name",{"_index":582,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["data)formaccessor",{"_index":283,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["data)formaccessors",{"_index":460,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["data.from",{"_index":881,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.fromlabel",{"_index":879,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.item",{"_index":877,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.itemlabel",{"_index":875,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.to",{"_index":883,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data.tolabel",{"_index":882,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["data[current",{"_index":3563,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dataformaccessor",{"_index":592,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["dataformaccessors",{"_index":439,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["datasourcesubject",{"_index":517,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["datatype",{"_index":240,"title":{},"body":{"interfaces/ComponentRecord.html":{},"injectables/EffectsService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxMobileLayoutBase.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["date",{"_index":568,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"classes/NgxValidators.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["datepipe",{"_index":1869,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["daterangevalidator",{"_index":4599,"title":{},"body":{"classes/NgxValidators.html":{}}}],["daterangevalidator(min",{"_index":4624,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates",{"_index":4623,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates.validator",{"_index":4652,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dates/chronological",{"_index":4651,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd",{"_index":4622,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dd/mm/yyyy",{"_index":1888,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["de",{"_index":5150,"title":{},"body":{"index.html":{},"license.html":{}}}],["deal",{"_index":5233,"title":{},"body":{"index.html":{},"license.html":{}}}],["dealing",{"_index":3251,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["dealings",{"_index":5273,"title":{},"body":{"index.html":{},"license.html":{}}}],["decimals",{"_index":4635,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma",{"_index":4600,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercomma(max",{"_index":4630,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator",{"_index":4655,"title":{},"body":{"classes/NgxValidators.html":{}}}],["decimalsaftercommavalidator(max",{"_index":4665,"title":{},"body":{"classes/NgxValidators.html":{}}}],["declare",{"_index":3402,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["decorators",{"_index":345,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["deepmerge",{"_index":2510,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["deepmerge(...response.map((item",{"_index":2558,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["default",{"_index":229,"title":{},"body":{"interfaces/ComponentRecord.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["default').tolowercase",{"_index":3254,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultassetpaths",{"_index":2393,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["defaultlanguage",{"_index":2394,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["defaultlayout",{"_index":3156,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["defaultposition",{"_index":4200,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["defaultprojectorfn",{"_index":120,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["defaultrowopen",{"_index":4961,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defaults",{"_index":3955,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["defaultstate",{"_index":2698,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["defaultvalue",{"_index":3374,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["define",{"_index":1594,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["defined",{"_index":187,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["definedcolumns",{"_index":4913,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["defines",{"_index":3945,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["delay",{"_index":3429,"title":{},"body":{"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["delete",{"_index":161,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["delete(url",{"_index":1180,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["denis",{"_index":207,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxI18nService.html":{},"index.html":{}}}],["depend",{"_index":4644,"title":{},"body":{"classes/NgxValidators.html":{}}}],["depended",{"_index":4642,"title":{},"body":{"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["dependedcontrol",{"_index":4645,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedcontrolkey",{"_index":4639,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired",{"_index":4601,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequired(controls",{"_index":4638,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator",{"_index":4658,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependedrequiredvalidator(controls",{"_index":4664,"title":{},"body":{"classes/NgxValidators.html":{}}}],["dependencies",{"_index":5105,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":272,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["depending",{"_index":1320,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["depends",{"_index":1826,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxWindowService.html":{}}}],["deprecated",{"_index":448,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["depth",{"_index":5157,"title":{},"body":{"index.html":{}}}],["descendants",{"_index":952,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["descending",{"_index":1155,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"miscellaneous/enumerations.html":{}}}],["describedby",{"_index":899,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTooltipDirective.html":{}}}],["describedbyid",{"_index":3356,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["describes",{"_index":678,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["describing",{"_index":956,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["description",{"_index":96,"title":{},"body":{"classes/BaseFormAccessor.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["descriptions",{"_index":3355,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["deselect",{"_index":4923,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["deselected",{"_index":872,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["destination",{"_index":2922,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["destroy",{"_index":429,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxTooltipService.html":{}}}],["destroyed",{"_index":398,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["destroyedsubject",{"_index":980,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["destroyref",{"_index":2046,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["destruction",{"_index":2305,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["detail",{"_index":2664,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["detailed",{"_index":5185,"title":{},"body":{"index.html":{}}}],["detailrowtemplate",{"_index":4931,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["details",{"_index":1089,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["detailselement",{"_index":1056,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detailselement?.nativeelement",{"_index":1136,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["detect",{"_index":2003,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["detectchanges",{"_index":2000,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["detected",{"_index":3550,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["detection",{"_index":3325,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["detector",{"_index":2289,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxWindowService.html":{}}}],["determine",{"_index":4952,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["developers",{"_index":5165,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":3298,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["dialogref",{"_index":3433,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentinstance",{"_index":3457,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput",{"_index":3458,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('ariadescribedby",{"_index":3461,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogref.componentref.setinput('arialabelledby",{"_index":3462,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["dialogservice",{"_index":3361,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["direction",{"_index":737,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["direction.enum",{"_index":754,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["direction.enum.ts",{"_index":5129,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directions",{"_index":5051,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["directive",{"_index":323,"title":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["directives",{"_index":325,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"overview.html":{}}}],["directly",{"_index":3817,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["dirty",{"_index":417,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["disable",{"_index":3273,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["disablebackdrop",{"_index":4349,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["disableclose",{"_index":3441,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["disabled",{"_index":332,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["dismiss",{"_index":3343,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["dispatch",{"_index":2440,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["dispatchdatatosignalstore",{"_index":3754,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["dispatchdatatostore",{"_index":4811,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.data",{"_index":4847,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatchdatatostore(actions.iscompleted",{"_index":4852,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["dispatches",{"_index":4256,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["dispatching",{"_index":3524,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["dispatchtranslationloaderaction",{"_index":2430,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["dispatchtranslationloaderaction(action",{"_index":2437,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["display",{"_index":1491,"title":{},"body":{"directives/NgxButtonDirective.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontent",{"_index":1917,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontent]'},{'name",{"_index":611,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["displaycontentarialive",{"_index":1918,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displaycontentconfiguration",{"_index":1919,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["displayed",{"_index":3136,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["displays",{"_index":4115,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["dispose",{"_index":2160,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["disposition').split('.')[1",{"_index":1231,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["distinctuntilchanged",{"_index":1310,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["distribute",{"_index":5240,"title":{},"body":{"index.html":{},"license.html":{}}}],["docs",{"_index":3290,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalBaseOptions.html":{}}}],["docs](https://developer.mozilla.org/en",{"_index":3303,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["document",{"_index":1665,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["document.createelement('p",{"_index":889,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["document.getelementbyid(arialabelledby",{"_index":3282,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["document:keydown.escape",{"_index":668,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["document?.activeelement",{"_index":4544,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["documentation",{"_index":1734,"title":{},"body":{"injectables/NgxCookieService.html":{},"index.html":{},"license.html":{}}}],["doesn't",{"_index":3976,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["dom",{"_index":510,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["domain",{"_index":1649,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["domparser",{"_index":3650,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["domsanitizer",{"_index":3646,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["don't",{"_index":269,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["done",{"_index":2094,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["dossoine",{"_index":5209,"title":{},"body":{"index.html":{}}}],["down",{"_index":991,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["download",{"_index":1174,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["download(url",{"_index":1192,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["downloading",{"_index":1195,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["drag",{"_index":810,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draganddropservice",{"_index":939,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["draggable",{"_index":802,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["draw",{"_index":2807,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["drop",{"_index":770,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop.service.ts",{"_index":807,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:119",{"_index":832,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:161",{"_index":847,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:20",{"_index":827,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:25",{"_index":843,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:32",{"_index":821,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.service.ts:39",{"_index":840,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["drop.types.ts",{"_index":905,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["drop/drag",{"_index":769,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["drop/has",{"_index":2319,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["due",{"_index":3643,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["dummy",{"_index":2415,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["duplicate",{"_index":3089,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery",{"_index":3091,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery[0",{"_index":3093,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicatequery[1",{"_index":3094,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["duplicates",{"_index":4132,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["during",{"_index":4373,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["dynamic",{"_index":5110,"title":{},"body":{"dependencies.html":{}}}],["dynamically",{"_index":5060,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["e.g",{"_index":3342,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["each",{"_index":461,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["earlier",{"_index":2002,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["early",{"_index":858,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["easier",{"_index":3154,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["easy",{"_index":1168,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["edit",{"_index":2686,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["editable",{"_index":710,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["editableinput",{"_index":5027,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["editabletablecellrecord",{"_index":4893,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["effect",{"_index":1010,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["effects",{"_index":126,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effects.service",{"_index":4837,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["effectsinterface['add",{"_index":320,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['delete",{"_index":322,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['set",{"_index":140,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsinterface['update",{"_index":321,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["effectsservice",{"_index":292,"title":{"injectables/EffectsService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/StoreEffects.html":{}}}],["ekinci",{"_index":5213,"title":{},"body":{"index.html":{}}}],["element",{"_index":546,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["element.focus",{"_index":4543,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["element.innertext",{"_index":894,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["element.setattribute('id",{"_index":895,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["elementid",{"_index":657,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["elementref",{"_index":777,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["elements",{"_index":252,"title":{},"body":{"interfaces/ComponentRecord.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["elements.pipe.ts",{"_index":3593,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:15",{"_index":3600,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:16",{"_index":3603,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.pipe.ts:24",{"_index":3596,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elements.types.ts",{"_index":3584,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["elements/replace",{"_index":3592,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["elsetemplateref",{"_index":2157,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["elseviewref",{"_index":2227,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["embeddedviewref",{"_index":2245,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["emit",{"_index":379,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["emitdatatype",{"_index":3302,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["emitevent",{"_index":467,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{},"interfaces/TableCellTemplate.html":{}}}],["emits",{"_index":690,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["emitted",{"_index":3300,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxStorageService.html":{}}}],["emitter",{"_index":3265,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["emitting",{"_index":5065,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emitvalueonsingleitem",{"_index":3952,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["empty",{"_index":64,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["empty'},{'name",{"_index":571,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["emptydata",{"_index":4963,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emptylabel",{"_index":1874,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["emptytemplate",{"_index":4933,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["emsens",{"_index":5215,"title":{},"body":{"index.html":{}}}],["en",{"_index":440,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["enabled",{"_index":1777,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["encountered",{"_index":1994,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["end",{"_index":1062,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["endcontrol",{"_index":4617,"title":{},"body":{"classes/NgxValidators.html":{}}}],["endcontrolkey",{"_index":4612,"title":{},"body":{"classes/NgxValidators.html":{}}}],["ended",{"_index":4694,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["enhancement",{"_index":5204,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":1397,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["enter",{"_index":359,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["entering",{"_index":4291,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["entire",{"_index":3152,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["entity",{"_index":316,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystate",{"_index":163,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystatus",{"_index":172,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["entitystoreaction",{"_index":3889,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreactions",{"_index":313,"title":{"interfaces/EntityStoreActions.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["entitystoreassets",{"_index":317,"title":{"interfaces/EntityStoreAssets.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["entitystoreassetsgeneratoroptions",{"_index":155,"title":{"interfaces/EntityStoreAssetsGeneratorOptions.html":{}},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreeffectsinterface",{"_index":315,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["entitystoreselector",{"_index":3886,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["entitystoreselectors",{"_index":318,"title":{"interfaces/EntityStoreSelectors.html":{}},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["enum",{"_index":5104,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{}}}],["enumerations",{"_index":5127,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":4028,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["enums/sort",{"_index":753,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{}}}],["environment",{"_index":2283,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["equal",{"_index":1614,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["equiv",{"_index":4029,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["error",{"_index":68,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["error'},{'name",{"_index":584,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["error('this",{"_index":4845,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["errorcomponent",{"_index":2047,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["errordata",{"_index":5085,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["errorinterface",{"_index":116,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["errorkeys",{"_index":2030,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errormessage",{"_index":113,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["errors",{"_index":86,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["errorselement",{"_index":2048,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["escape",{"_index":685,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["eslint",{"_index":3272,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["eslint/no",{"_index":3275,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["essence",{"_index":3292,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["essential",{"_index":2666,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["essentially",{"_index":2822,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["etc",{"_index":5181,"title":{},"body":{"index.html":{}}}],["eur",{"_index":1849,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["even",{"_index":4360,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["event",{"_index":341,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["event.active",{"_index":4327,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["event.direction",{"_index":5050,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["event.preventdefault",{"_index":1123,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.returnvalue",{"_index":3714,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["event.stopimmediatepropagation",{"_index":1124,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["event.stoppropagation",{"_index":4532,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["event.ts",{"_index":4019,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["eventemitter",{"_index":475,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["eventhandler",{"_index":383,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["eventlisteners",{"_index":3109,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["events",{"_index":375,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["eventtype",{"_index":1606,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["example",{"_index":200,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["exceeded",{"_index":4633,"title":{},"body":{"classes/NgxValidators.html":{}}}],["execute",{"_index":355,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["executed",{"_index":378,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["exist",{"_index":1455,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxStorageService.html":{}}}],["existing",{"_index":760,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxStorageService.html":{}}}],["exists",{"_index":267,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["exit",{"_index":859,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["exit.component.abstract",{"_index":3684,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.component.abstract.ts",{"_index":3687,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:12",{"_index":3693,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:22",{"_index":3711,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:27",{"_index":3710,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:33",{"_index":3703,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:38",{"_index":3699,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:43",{"_index":3700,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.component.abstract.ts:45",{"_index":3702,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["exit.service.abstract.ts",{"_index":3675,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:10",{"_index":3681,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit.service.abstract.ts:15",{"_index":3678,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["exit/save",{"_index":3674,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["exits",{"_index":3852,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["expandablerows",{"_index":4564,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["expanded",{"_index":5010,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["expiresafterdays",{"_index":1650,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["explaining",{"_index":834,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["explanations",{"_index":5186,"title":{},"body":{"index.html":{}}}],["explicitly",{"_index":3248,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["exportas",{"_index":927,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["exported",{"_index":167,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"classes/NgxValidators.html":{}}}],["exposes",{"_index":3060,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["express",{"_index":5254,"title":{},"body":{"index.html":{},"license.html":{}}}],["expresses",{"_index":1763,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["extend",{"_index":3336,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["extended",{"_index":2845,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["extender",{"_index":3932,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["extends",{"_index":171,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["external",{"_index":2919,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["extra",{"_index":1019,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["extract",{"_index":3175,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["extractcomponent",{"_index":3164,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["extractcomponent(component",{"_index":3173,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["extracts",{"_index":3745,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["extras",{"_index":4339,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["fab",{"_index":1475,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["facilitate",{"_index":5163,"title":{},"body":{"index.html":{}}}],["failed",{"_index":2448,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fall",{"_index":3249,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["fallback",{"_index":1825,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["fallback.component.ts",{"_index":1823,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback.component.ts:13",{"_index":1827,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallback/cookie",{"_index":1822,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["fallbackcomponent",{"_index":2171,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["fallbacks",{"_index":1896,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["fallbacktemplate",{"_index":2170,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["false",{"_index":81,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["falsy",{"_index":208,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["faulty",{"_index":4924,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["feat(package",{"_index":5202,"title":{},"body":{"index.html":{}}}],["feat/package/feature",{"_index":5195,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1263,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"injectables/NgxI18nService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["feature(s",{"_index":2222,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["feature.directive.ts",{"_index":2221,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:116",{"_index":2238,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:123",{"_index":2239,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:175",{"_index":2237,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:33",{"_index":2250,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:37",{"_index":2253,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:41",{"_index":2241,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:47",{"_index":2242,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:52",{"_index":2243,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:57",{"_index":2251,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:58",{"_index":2252,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:59",{"_index":2244,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:60",{"_index":2246,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:65",{"_index":2247,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:70",{"_index":2249,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:75",{"_index":2248,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:80",{"_index":2234,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:85",{"_index":2235,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:90",{"_index":2236,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.directive.ts:95",{"_index":2233,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["feature.pipe.ts",{"_index":2275,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:16",{"_index":2285,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:17",{"_index":2286,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:22",{"_index":2293,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:26",{"_index":2294,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:31",{"_index":2287,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:40",{"_index":2277,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:53",{"_index":2282,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:64",{"_index":2279,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature.pipe.ts:88",{"_index":2276,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["feature/has",{"_index":2220,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["features",{"_index":1261,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["featuretype",{"_index":1264,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["femke",{"_index":5216,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":862,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxModalService.html":{}}}],["fetchchannel",{"_index":295,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchchannel(ispublic",{"_index":297,"title":{},"body":{"injectables/EffectsService.html":{}}}],["fetched",{"_index":2527,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxStorageService.html":{}}}],["fetches",{"_index":2442,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetching",{"_index":2483,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["fetchpath",{"_index":2528,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["fetchvideos",{"_index":296,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{}}}],["fetchvideos(id",{"_index":301,"title":{},"body":{"injectables/EffectsService.html":{}}}],["field",{"_index":4605,"title":{},"body":{"classes/NgxValidators.html":{}}}],["fields",{"_index":4606,"title":{},"body":{"classes/NgxValidators.html":{}}}],["figured",{"_index":2329,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxImageMarkerComponent.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["files",{"_index":2403,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"index.html":{},"license.html":{}}}],["filetype",{"_index":1229,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["fill",{"_index":1613,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["filled",{"_index":33,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["filling",{"_index":1631,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["filter",{"_index":849,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{}}}],["filter(([action",{"_index":3414,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["filter((length",{"_index":4156,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["filter((queryid",{"_index":3106,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["filter((translation",{"_index":2552,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["filter(boolean",{"_index":865,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtered",{"_index":3505,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["filters",{"_index":3520,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["filtersform",{"_index":3534,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["finalize",{"_index":2679,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["find",{"_index":1037,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["find/replace",{"_index":3653,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["findfocusableelement",{"_index":4469,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["findindex",{"_index":4966,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fired",{"_index":3315,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["first",{"_index":992,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["firstcookiesconsented",{"_index":1695,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["firstcookiesconsentedsubject",{"_index":1696,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["fit",{"_index":1480,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["fitness",{"_index":5258,"title":{},"body":{"index.html":{},"license.html":{}}}],["fix",{"_index":5199,"title":{},"body":{"index.html":{}}}],["fix(package",{"_index":5201,"title":{},"body":{"index.html":{}}}],["fix/package/feature",{"_index":5194,"title":{},"body":{"index.html":{}}}],["flag",{"_index":787,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["flatten",{"_index":2188,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flatten(hascookies).every((hascookie",{"_index":2209,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["flexibleconnectedto(elementref",{"_index":4311,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["flip",{"_index":4014,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["flow",{"_index":1958,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["flows",{"_index":922,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["flyout",{"_index":243,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["flyoutshown",{"_index":3125,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["fn",{"_index":4988,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["fns",{"_index":5114,"title":{},"body":{"dependencies.html":{}}}],["focus",{"_index":360,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["focus.directive",{"_index":805,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["focus.directive.ts",{"_index":2312,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:13",{"_index":2318,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:15",{"_index":2327,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:18",{"_index":2315,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:20",{"_index":2321,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:25",{"_index":2314,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:31",{"_index":2320,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:34",{"_index":2316,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:39",{"_index":2326,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:41",{"_index":2322,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:43",{"_index":2317,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["focus.directive.ts:45",{"_index":2324,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:47",{"_index":2325,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focus.directive.ts:54",{"_index":2323,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["focusable",{"_index":4503,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusableelement",{"_index":4537,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["focusclick",{"_index":330,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["focusclick]'},{'name",{"_index":593,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focusclickdirective",{"_index":324,"title":{"directives/FocusClickDirective.html":{}},"body":{"directives/FocusClickDirective.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["focused",{"_index":3331,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["focussed",{"_index":791,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["focussedcell",{"_index":4927,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["focussedrow",{"_index":4926,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["following",{"_index":2537,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["footer",{"_index":246,"title":{},"body":{"interfaces/ComponentRecord.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["footertemplate",{"_index":711,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["force",{"_index":2402,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["foreach((marker",{"_index":2886,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["forkjoin",{"_index":2512,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["forkjoin(requestedtranslations).pipe",{"_index":2548,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["form",{"_index":412,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["form.accessor",{"_index":447,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["form.accessor.ts",{"_index":95,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["form/base",{"_index":94,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["formaccessor",{"_index":594,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessorcontainer",{"_index":391,"title":{"directives/FormAccessorContainer.html":{}},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["formaccessors",{"_index":441,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxImageMarkerComponent.html":{}}}],["format",{"_index":192,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"classes/NgxValidators.html":{}}}],["formcontainer",{"_index":100,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{}}}],["formcontrol",{"_index":1593,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgenerated",{"_index":4885,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["formgroup",{"_index":20,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["formgroupdirective",{"_index":2049,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formgroupname",{"_index":2080,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formnamedirective",{"_index":2050,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["formrecord",{"_index":4868,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["forms",{"_index":434,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"index.html":{}}}],["formstateoptionsentity",{"_index":420,"title":{"interfaces/FormStateOptionsEntity.html":{}},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{}}}],["formtype",{"_index":3496,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["forwardref",{"_index":275,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["found",{"_index":456,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["free",{"_index":5228,"title":{},"body":{"index.html":{},"license.html":{}}}],["friendly",{"_index":367,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["fromevent",{"_index":1444,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxOnlineService.html":{}}}],["fromevent(window",{"_index":3475,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["fromevent>(this.broadcastchannel[channelname",{"_index":1459,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["fromstore",{"_index":2521,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["frontend",{"_index":3975,"title":{},"body":{"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["full",{"_index":1479,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["function",{"_index":15,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxModalBaseOptions.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["functional",{"_index":108,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["functionalities",{"_index":5182,"title":{},"body":{"index.html":{}}}],["functions",{"_index":835,"title":{"miscellaneous/functions.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["furnished",{"_index":5247,"title":{},"body":{"index.html":{},"license.html":{}}}],["gdpr",{"_index":3528,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["generate",{"_index":285,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["generated",{"_index":1520,"title":{},"body":{"directives/NgxButtonDirective.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform",{"_index":4870,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generatengxtableform(this.rowsformgroup",{"_index":4906,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["generates",{"_index":280,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["generator",{"_index":148,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["generator.ts",{"_index":3874,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["generator.types",{"_index":3740,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["generic",{"_index":1840,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["get(selectablekey",{"_index":5044,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["get(url",{"_index":1196,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["get(value",{"_index":3980,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["getauthenticationresponse",{"_index":1289,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getavailablelanguages",{"_index":2646,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getchannel",{"_index":4776,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getcomponent",{"_index":3165,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["getcomponent(component",{"_index":3176,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["getcontainer",{"_index":940,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcontainer(index",{"_index":942,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["getcookie",{"_index":1701,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookie(cookie",{"_index":1716,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable",{"_index":1702,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcookieobservable(cookie",{"_index":1718,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["getcurrentlanguage",{"_index":842,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["getdefaultlanguage",{"_index":2648,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["getelementid",{"_index":4386,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["geterrors",{"_index":2052,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["geterrors(data",{"_index":2056,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["getfirstrow",{"_index":4555,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getitem",{"_index":3761,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitem(key",{"_index":3791,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getitemobservable",{"_index":3762,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["getitemobservable(key",{"_index":3793,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getlastrow",{"_index":4556,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getlocalstorage",{"_index":3811,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getmatchingquery",{"_index":3064,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["getmatchingquery$(id",{"_index":3070,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["getmessagerecord",{"_index":846,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["getmetadata",{"_index":1354,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getnewlanguage",{"_index":2568,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getnewlanguage(language",{"_index":2573,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["getprop",{"_index":1872,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["getrow",{"_index":4557,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["getrow(index",{"_index":4568,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["gets",{"_index":362,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["getsession",{"_index":1290,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getsessionstorage",{"_index":3813,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["getstate",{"_index":3722,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{}}}],["getting",{"_index":5143,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettranslation",{"_index":2495,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{}}}],["gettranslation(key",{"_index":2630,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslation(lang",{"_index":2505,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["gettranslationobservable",{"_index":2628,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslationobservable(key",{"_index":2633,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["gettranslations",{"_index":2431,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["getuser",{"_index":1351,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["getvalue",{"_index":2620,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{}}}],["getvalue(configurationvalue",{"_index":3372,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["getvideos",{"_index":4777,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["getvideos(actiontype",{"_index":4783,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["give",{"_index":4392,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["given",{"_index":5099,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["global",{"_index":1306,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["globalfeatures",{"_index":1375,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globalfeaturessubject",{"_index":1286,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["globally",{"_index":3943,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["go",{"_index":1036,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grab",{"_index":1635,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["grabs",{"_index":3804,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["granted",{"_index":5227,"title":{},"body":{"index.html":{},"license.html":{}}}],["grid",{"_index":1627,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive",{"_index":4581,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.cell.directive.ts",{"_index":4464,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:102",{"_index":4495,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:109",{"_index":4493,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:116",{"_index":4487,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:121",{"_index":4488,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:126",{"_index":4504,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:143",{"_index":4512,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:152",{"_index":4501,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:174",{"_index":4516,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:24",{"_index":4521,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:27",{"_index":4519,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:32",{"_index":4522,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:37",{"_index":4490,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:53",{"_index":4491,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:60",{"_index":4492,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:67",{"_index":4489,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:74",{"_index":4498,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:81",{"_index":4496,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:88",{"_index":4494,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.cell.directive.ts:95",{"_index":4497,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive",{"_index":4525,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["grid.directive.ts",{"_index":4551,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:19",{"_index":4580,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:21",{"_index":4565,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:26",{"_index":4562,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:31",{"_index":4563,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:38",{"_index":4576,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:47",{"_index":4578,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:56",{"_index":4569,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:69",{"_index":4566,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:76",{"_index":4567,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:85",{"_index":4571,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:94",{"_index":4574,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid.directive.ts:98",{"_index":4572,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["grid/tree",{"_index":4463,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["group",{"_index":45,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["groups",{"_index":502,"title":{},"body":{"pipes/IbanPipe.html":{},"injectables/NgxI18nLoadingService.html":{}}}],["guard",{"_index":2670,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["guards",{"_index":1275,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["guided",{"_index":5177,"title":{},"body":{"index.html":{}}}],["guioptions",{"_index":1658,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["handle",{"_index":57,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["handleaccessorsaction",{"_index":400,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleaccessorsaction(action",{"_index":405,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handlecomponentrender",{"_index":2053,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecomponentrender(shouldshow",{"_index":2058,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlecontentscroll",{"_index":4678,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["handlecurrentsort(event",{"_index":5047,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handledatachanges",{"_index":3484,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(data",{"_index":3491,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges(value",{"_index":3541,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledatachanges?(data",{"_index":3579,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["handledirtystate",{"_index":3677,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["handleeffect",{"_index":4830,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleeffect(actions.videos",{"_index":4833,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["handleformaccessormarkasdirty",{"_index":444,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkasdirty(form",{"_index":450,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched",{"_index":445,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessormarkastouched(form",{"_index":452,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleformaccessorupdatevalueandvalidity",{"_index":446,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["handleicon",{"_index":1498,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["handleinteraction",{"_index":658,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["handleloading",{"_index":1499,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["handlengxtableheadervaluechanges",{"_index":4871,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtableheadervaluechanges(this.rowsformgroup",{"_index":5078,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlengxtablevaluechanges",{"_index":4872,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlenocomponentflow",{"_index":2054,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handlenocomponentflow(shouldshow",{"_index":2062,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["handler",{"_index":368,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["handlerowclicked(row",{"_index":5000,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowcolumns",{"_index":5055,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlerowstate(index",{"_index":5011,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handlers",{"_index":1249,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["handles",{"_index":733,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort",{"_index":716,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["handlesort(column",{"_index":5037,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handletablecelltemplates",{"_index":5017,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["handleunloadevent",{"_index":3689,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleunloadevent(event",{"_index":3696,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["handleurl",{"_index":1175,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handleurl(url",{"_index":1198,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["handlewhenfocussed",{"_index":780,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handlewhenfocussed(action",{"_index":794,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["handling",{"_index":286,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["happens",{"_index":3494,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["hasacceptedcategory",{"_index":1703,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedcategory(name",{"_index":1720,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice",{"_index":1704,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasacceptedservice(category",{"_index":1724,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["hasactivemodal",{"_index":3362,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasauthenticated",{"_index":1287,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasbackdrop",{"_index":3312,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["hasbundledtoasts",{"_index":4083,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["haschanges",{"_index":2771,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["hascookie",{"_index":2156,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hascookie]'},{'name",{"_index":617,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["hascookieelse",{"_index":2158,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["hasdependedrequirederror",{"_index":4643,"title":{},"body":{"classes/NgxValidators.html":{}}}],["hasdocument",{"_index":4679,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["haselement",{"_index":3166,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["haselement(element",{"_index":3178,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["haserrors",{"_index":2051,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["hasfeature",{"_index":1291,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["hasfeature(converttoarray(this.feature",{"_index":2268,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["hasfeature(requiredfeatures",{"_index":1321,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasfocus",{"_index":778,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hasfootertemplates",{"_index":4921,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["hasform",{"_index":4901,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["hasmodal",{"_index":3428,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasmodalsubject",{"_index":3363,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasnext",{"_index":4420,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["hasobservers",{"_index":473,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["hasobserverspipe",{"_index":469,"title":{"pipes/HasObserversPipe.html":{}},"body":{"pipes/HasObserversPipe.html":{}}}],["hasone",{"_index":79,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["hasonekey",{"_index":77,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["haspermission",{"_index":1292,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["haspermission(requiredpermissions",{"_index":1325,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["hasprevious",{"_index":4418,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["haspriority",{"_index":4038,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["hasrequireddescription",{"_index":3365,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["hasrequireddescription(options",{"_index":3378,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["header",{"_index":235,"title":{},"body":{"interfaces/ComponentRecord.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["header.${keyof",{"_index":257,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{}}}],["header.pipe.ts",{"_index":4004,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header.pipe.ts:18",{"_index":4007,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["header/show",{"_index":4003,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["headercontrol",{"_index":4911,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["headertemplate",{"_index":712,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["heirstrate",{"_index":5211,"title":{},"body":{"index.html":{}}}],["hello",{"_index":524,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["helpers",{"_index":3969,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["here",{"_index":1380,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{}}}],["hereby",{"_index":5226,"title":{},"body":{"index.html":{},"license.html":{}}}],["hidden",{"_index":4013,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["hide",{"_index":900,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideelement",{"_index":857,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hideelement(element",{"_index":901,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["hidefrombots",{"_index":1678,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["hideheaderrowoption",{"_index":3957,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["hideheaderrowoptions",{"_index":3960,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["hideheaderrowwhen",{"_index":4006,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["hideheaderwhen",{"_index":3954,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hides/renders",{"_index":2174,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["hidewhennotemplateprovided",{"_index":1903,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["highest",{"_index":2021,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["highlight",{"_index":4342,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["highlighted",{"_index":4356,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["highlightkey",{"_index":3956,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["hold",{"_index":1005,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["holder",{"_index":516,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxCookieService.html":{}}}],["holder'},{'name",{"_index":549,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["holder.component.mock.ts",{"_index":513,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:14",{"_index":530,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:16",{"_index":528,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:18",{"_index":525,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holder.component.mock.ts:22",{"_index":520,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["holders",{"_index":5263,"title":{},"body":{"index.html":{},"license.html":{}}}],["holding",{"_index":1438,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["holds",{"_index":1951,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxStoreService.html":{}}}],["home",{"_index":1063,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["host",{"_index":364,"title":{},"body":{"directives/FocusClickDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["host.directive.ts",{"_index":935,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:19",{"_index":959,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:20",{"_index":961,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:25",{"_index":962,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:30",{"_index":953,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:35",{"_index":955,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:42",{"_index":945,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:51",{"_index":943,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:55",{"_index":948,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["host.directive.ts:62",{"_index":950,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["hostbinding",{"_index":4388,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('attr.role",{"_index":4579,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["hostbinding('class",{"_index":694,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["hostbinding('class.ngx",{"_index":4384,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["hostbindings",{"_index":667,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hostdirective",{"_index":775,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["hostlistener",{"_index":370,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('blur",{"_index":798,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('click",{"_index":346,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('document:keydown.escape",{"_index":688,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["hostlistener('focus",{"_index":799,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowdown",{"_index":1078,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowleft",{"_index":4506,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowright",{"_index":4507,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.arrowup",{"_index":1080,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.end",{"_index":4508,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.control.home",{"_index":4514,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.end",{"_index":1081,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.enter",{"_index":348,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["hostlistener('keydown.home",{"_index":1086,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pagedown",{"_index":4515,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('keydown.pageup",{"_index":4513,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["hostlistener('mouseenter",{"_index":4189,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('mouseleave",{"_index":4188,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["hostlistener('window:beforeunload",{"_index":3698,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["hostlisteners",{"_index":336,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["hover",{"_index":4125,"title":{},"body":{"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{}}}],["html",{"_index":545,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["htmlelement",{"_index":831,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["htmlimageelement",{"_index":2804,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["htmlparagraphelement",{"_index":888,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["htmlspanelement",{"_index":1551,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["http",{"_index":1161,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["httpbackend",{"_index":2492,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["httpclient",{"_index":1166,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/SpecStoreService.html":{}}}],["httpclient(this.httpbackend).get(fetchpath).pipe",{"_index":2531,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["httpclientconfiguration",{"_index":1252,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httpcontext",{"_index":1183,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["httperrorresponse",{"_index":117,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["httphandler",{"_index":5142,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httphandlerfn",{"_index":5140,"title":{},"body":{"miscellaneous/functions.html":{}}}],["httpinterceptorfn",{"_index":1245,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["httprequest",{"_index":1246,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"miscellaneous/functions.html":{}}}],["httpresponse",{"_index":1209,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["https://cookieconsent.orestbida.com",{"_index":1687,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://cookieconsent.orestbida.com/essential/getting",{"_index":1735,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["https://developer.mozilla.org/en",{"_index":1406,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["https://docs.cypress.io/guides/references/best",{"_index":727,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts",{"_index":2292,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts",{"_index":2224,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["https://markerjs.com",{"_index":2715,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/accordion",{"_index":977,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{}}}],["https://www.w3.org/wai/aria/apg/patterns/treegrid",{"_index":4466,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["hyperdrive",{"_index":5224,"title":{},"body":{"index.html":{},"license.html":{}}}],["i18n",{"_index":570,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["i18n.service",{"_index":2650,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["i18n.service.ts",{"_index":2563,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:120",{"_index":2580,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:129",{"_index":2574,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:17",{"_index":2589,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:22",{"_index":2594,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:27",{"_index":2592,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:34",{"_index":2588,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:41",{"_index":2586,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:48",{"_index":2593,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:53",{"_index":2572,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:65",{"_index":2591,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:71",{"_index":2595,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:80",{"_index":2582,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.service.ts:98",{"_index":2576,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["i18n.types",{"_index":2514,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["i18n/root",{"_index":2562,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["i18nloadingservice",{"_index":2672,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["i18nservice",{"_index":2673,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ian",{"_index":5214,"title":{},"body":{"index.html":{}}}],["iban",{"_index":488,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibannumber",{"_index":495,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["ibanpipe",{"_index":486,"title":{"pipes/IbanPipe.html":{}},"body":{"pipes/IbanPipe.html":{}}}],["iben",{"_index":49,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["ibenvandeveire",{"_index":5145,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/ngx",{"_index":1282,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"dependencies.html":{},"index.html":{}}}],["ibenvandeveire/rxjs",{"_index":5183,"title":{},"body":{"index.html":{}}}],["ibenvandeveire/types",{"_index":1357,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"dependencies.html":{}}}],["icon",{"_index":1462,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts",{"_index":4024,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon.pipe.ts:15",{"_index":4027,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["icon/sort",{"_index":4023,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["iconcomponent",{"_index":1492,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["iconelement",{"_index":1493,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["iconposition",{"_index":1463,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["id",{"_index":303,"title":{},"body":{"injectables/EffectsService.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxMediaQuery.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["id={{id",{"_index":3629,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ideal",{"_index":3519,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["identifier",{"_index":3638,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["identify",{"_index":3632,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ids",{"_index":3049,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ids.every((item",{"_index":3051,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["idselector",{"_index":153,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["if(contenttemplate",{"_index":3147,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(hasbundledtoasts",{"_index":4096,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["if(layout",{"_index":3141,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().aside",{"_index":3146,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().flyout",{"_index":3148,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().footer",{"_index":3149,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header",{"_index":3142,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header.left",{"_index":3143,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().header.right",{"_index":3144,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["if(layout().navigation",{"_index":3145,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["ignore",{"_index":374,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ignored",{"_index":464,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["image",{"_index":573,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["imagedescription",{"_index":2721,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imageelement",{"_index":2722,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["imagemarkerservice",{"_index":2723,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["img[data",{"_index":3630,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["implement",{"_index":2255,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["implementation",{"_index":975,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{}}}],["implementations",{"_index":2597,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["implemented",{"_index":2290,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["implementing",{"_index":1895,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["implements",{"_index":206,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["implied",{"_index":5255,"title":{},"body":{"index.html":{},"license.html":{}}}],["import",{"_index":19,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["important",{"_index":104,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["imports",{"_index":1049,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["improve",{"_index":5168,"title":{},"body":{"index.html":{}}}],["in/from",{"_index":3828,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["inactive",{"_index":1628,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["include",{"_index":3631,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"index.html":{}}}],["included",{"_index":1456,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"index.html":{},"license.html":{}}}],["includeinnerhtml",{"_index":3585,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["including",{"_index":5235,"title":{},"body":{"index.html":{},"license.html":{}}}],["incorrectchronologicaldate",{"_index":4616,"title":{},"body":{"classes/NgxValidators.html":{}}}],["incorrectchronologicaldates",{"_index":4615,"title":{},"body":{"classes/NgxValidators.html":{}}}],["independent",{"_index":5161,"title":{},"body":{"index.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["index).concat(this.rows.slice(index",{"_index":4585,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["indexable",{"_index":230,"title":{},"body":{"interfaces/ComponentRecord.html":{}}}],["indexes",{"_index":1023,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indexes.foreach((index",{"_index":1025,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["indicate",{"_index":1841,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["indicates",{"_index":3338,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["indicator",{"_index":3949,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["indices",{"_index":4895,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["indirectly",{"_index":3321,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["individual",{"_index":2205,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["infinite",{"_index":5066,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["inform",{"_index":3284,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourStepComponent.html":{},"index.html":{}}}],["information",{"_index":824,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["informing",{"_index":3931,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inheritdoc",{"_index":4460,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["inherited",{"_index":669,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["initchannel",{"_index":1410,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initchannel(...args",{"_index":1420,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initform",{"_index":3485,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["initi18n",{"_index":2629,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initi18n(language",{"_index":2636,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["initial",{"_index":1936,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["initialdata",{"_index":3744,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["initialize",{"_index":1449,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["initializelanguage",{"_index":2569,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["initializes",{"_index":1423,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nService.html":{}}}],["initiallayoutset",{"_index":3157,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["initiallayoutsetsubject",{"_index":3158,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["initially",{"_index":4546,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["initialstatevalue",{"_index":150,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["initialvalue",{"_index":3882,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["inject",{"_index":531,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject('selectors",{"_index":3912,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["inject(actions",{"_index":4824,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(activatedroute",{"_index":3514,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(changedetectorref",{"_index":1099,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inject(destroyref",{"_index":2073,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(dialog",{"_index":3388,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(document",{"_index":4699,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(domsanitizer",{"_index":3602,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(effectsservice",{"_index":4826,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["inject(elementref",{"_index":1898,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["inject(formgroupdirective",{"_index":2078,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(formgroupname",{"_index":2081,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inject(httpbackend",{"_index":2499,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["inject(httpclient",{"_index":1207,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/SpecStoreService.html":{}}}],["inject(liveannouncer",{"_index":826,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["inject(ngxaccessibledraganddropabstractservice",{"_index":958,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["inject(ngxaccordioncomponent",{"_index":1111,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["inject(ngxauthenticationservicetoken",{"_index":2284,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["inject(ngxauthenticationurlhandlertoken",{"_index":1216,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["inject(ngxbuttonconfigurationtoken",{"_index":1525,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["inject(ngxcookieservice",{"_index":2182,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["inject(ngxi18nconfigurationtoken",{"_index":2496,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["inject(ngxi18nloadingservice",{"_index":2501,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngxi18nrootservice",{"_index":2638,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(ngxi18nservice",{"_index":2677,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["inject(ngxi18ntranslationpathstoken",{"_index":2503,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["inject(ngximagemarkerservice",{"_index":2756,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["inject(ngxlinkconfigurationtoken",{"_index":2934,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["inject(ngxmediaqueriestoken",{"_index":3028,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["inject(ngxmediaqueryservice",{"_index":2973,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["inject(ngxmobilelayoutservice",{"_index":3137,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["inject(ngxmodalconfigurationtoken",{"_index":3386,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["inject(ngxonlineservice",{"_index":1959,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["inject(ngxreplaceelementsconfigurationtoken",{"_index":3599,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["inject(ngxtableconfigurationtoken",{"_index":4878,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["inject(ngxtoastservice",{"_index":4064,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["inject(ngxtooltipconfigurationtoken",{"_index":4260,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(ngxtooltipservice",{"_index":4190,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["inject(ngxtourservice",{"_index":529,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["inject(ngxtreegriddirective",{"_index":4520,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["inject(ngxwindowservice",{"_index":1440,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{}}}],["inject(overlay",{"_index":4266,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(overlaypositionbuilder",{"_index":4263,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["inject(platform_id",{"_index":4701,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["inject(renderer2",{"_index":1114,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["inject(router",{"_index":3516,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["inject(store",{"_index":3910,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["inject(templateref",{"_index":2086,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["inject(translateservice",{"_index":2642,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["inject(viewcontainerref",{"_index":1546,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["inject>(elementref",{"_index":960,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTourItemDirective.html":{}}}],["inject>(templateref",{"_index":1962,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["injectable",{"_index":291,"title":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{}},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["injectables",{"_index":293,"title":{},"body":{"injectables/EffectsService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"overview.html":{}}}],["injection",{"_index":1243,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxWindowService.html":{}}}],["injectiontoken",{"_index":3959,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["injector",{"_index":3296,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innerhtml",{"_index":1562,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["innertext",{"_index":3633,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["input",{"_index":371,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["input('both",{"_index":1527,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["input('checkbox",{"_index":4951,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["input('dd/mm/yyyy",{"_index":1886,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('empty",{"_index":1882,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["input('eur",{"_index":1845,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["input('fit",{"_index":1523,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["input('internal",{"_index":2936,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["input('left",{"_index":2941,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["input('polite",{"_index":1954,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["input('primary",{"_index":1542,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["input('regular",{"_index":1521,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["input('text",{"_index":2943,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["input(false",{"_index":376,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(true",{"_index":2767,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["input(undefined",{"_index":932,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["input(uuid",{"_index":4228,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["input.required",{"_index":692,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["inputs",{"_index":335,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["inputsignal",{"_index":988,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["inputted",{"_index":4632,"title":{},"body":{"classes/NgxValidators.html":{}}}],["insert",{"_index":2137,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["inserts",{"_index":1509,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["inside",{"_index":3327,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["install",{"_index":5155,"title":{},"body":{"index.html":{}}}],["installation",{"_index":5152,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1417,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["instances",{"_index":2623,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instant",{"_index":2632,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["instantiated",{"_index":3326,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instantiation",{"_index":3318,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["instead",{"_index":414,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["intentional",{"_index":463,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["interact",{"_index":3523,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["interaction",{"_index":3341,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["interactions",{"_index":691,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["intercepted",{"_index":3705,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["interceptor",{"_index":5141,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interceptors",{"_index":1241,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayoutBase.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayoutBase.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxCookieValue.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxMediaQuery.html":{},"interfaces/NgxMobileLayoutBase.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"overview.html":{}}}],["internal",{"_index":264,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["internally",{"_index":4735,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["interop",{"_index":2091,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["interrupted",{"_index":3708,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["invalid",{"_index":1884,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["invaliddecimalsaftercomma",{"_index":4637,"title":{},"body":{"classes/NgxValidators.html":{}}}],["invalidrange",{"_index":4628,"title":{},"body":{"classes/NgxValidators.html":{}}}],["invisible",{"_index":3239,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["irrelevant",{"_index":4171,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["isactive",{"_index":1617,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"directives/NgxTourItemDirective.html":{}}}],["isauthenticated",{"_index":1288,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["isbrowser",{"_index":4680,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isclicked",{"_index":333,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isclicked(event",{"_index":344,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["iscompleted",{"_index":4839,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["isdirty",{"_index":3690,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["isdisabled",{"_index":4992,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["isempty",{"_index":3971,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{}}}],["isentered",{"_index":334,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["isfocussed",{"_index":4099,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["isfocussedon",{"_index":2313,"title":{},"body":{"directives/NgxHasFocusDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["isloading",{"_index":1943,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["isn't",{"_index":388,"title":{},"body":{"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["iso",{"_index":1847,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["isopen",{"_index":1057,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["isplatformbrowser",{"_index":4733,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["isplatformbrowser(this.platformid",{"_index":4749,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ispublic",{"_index":299,"title":{},"body":{"injectables/EffectsService.html":{}}}],["isset",{"_index":1810,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["issues",{"_index":3214,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourStepComponent.html":{},"pipes/TransformPipe.html":{}}}],["isvalid",{"_index":3691,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["it's",{"_index":215,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["item",{"_index":790,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["item'},{'name",{"_index":558,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["item.component",{"_index":1013,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item.component.html",{"_index":1051,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.scss",{"_index":1053,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts",{"_index":1047,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:107",{"_index":1069,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:112",{"_index":1109,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:117",{"_index":1110,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:122",{"_index":1106,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:127",{"_index":1095,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:137",{"_index":1082,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:146",{"_index":1093,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:153",{"_index":1091,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:160",{"_index":1087,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:184",{"_index":1090,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:19",{"_index":1595,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:193",{"_index":1084,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:24",{"_index":1596,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:29",{"_index":1600,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item.component.ts:40",{"_index":1112,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:41",{"_index":1100,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:42",{"_index":1115,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:47",{"_index":1104,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:52",{"_index":1117,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:57",{"_index":1102,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:62",{"_index":1108,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:67",{"_index":1073,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:78",{"_index":1071,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:89",{"_index":1076,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.component.ts:98",{"_index":1075,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["item.data",{"_index":3662,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["item.directive.ts",{"_index":771,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:13",{"_index":800,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:14",{"_index":4383,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:15",{"_index":4385,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:16",{"_index":4382,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:18",{"_index":789,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["item.directive.ts:21",{"_index":4377,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:26",{"_index":4376,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:33",{"_index":4381,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:44",{"_index":4387,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:48",{"_index":4378,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.directive.ts:58",{"_index":4379,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item.filter((key",{"_index":1641,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["item.id",{"_index":1030,"title":{},"body":{"components/NgxAccordionComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{}}}],["item.translations",{"_index":2559,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["item.updateaccordionitemstate(true",{"_index":1022,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/accordion",{"_index":1012,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["item/configurable",{"_index":1590,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["item/items",{"_index":3922,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["item/tour",{"_index":4372,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["item[itemkey",{"_index":1876,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemdirective",{"_index":774,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemid",{"_index":776,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["itemkey",{"_index":1875,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["itemregisteredsubject",{"_index":981,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["items",{"_index":50,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["items.foreach((item",{"_index":3656,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["items.length",{"_index":3649,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["itemsize",{"_index":1624,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["itself",{"_index":413,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxToastComponent.html":{},"classes/NgxValidators.html":{}}}],["join",{"_index":2545,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["json",{"_index":2490,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["json.parse(data[current",{"_index":3564,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["json.parse(value",{"_index":3872,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(item",{"_index":3856,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["json.stringify(parseddata[current",{"_index":3577,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["keep",{"_index":2471,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["keeps",{"_index":3392,"title":{},"body":{"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{}}}],["key",{"_index":76,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentRecord.html":{},"directives/FocusClickDirective.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxMobileLayoutBase.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["key.isactive",{"_index":1642,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keydown",{"_index":386,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.arrowdown",{"_index":1065,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowdown(event",{"_index":1070,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.arrowleft",{"_index":4481,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowright",{"_index":4482,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup",{"_index":1066,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.arrowup(event",{"_index":1072,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["keydown.control.end",{"_index":4483,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.control.home",{"_index":4484,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.end",{"_index":1067,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.enter",{"_index":338,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["keydown.home",{"_index":1068,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pagedown",{"_index":4485,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keydown.pageup",{"_index":4486,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["keyof",{"_index":255,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["keys",{"_index":51,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["keys.reduce((hasone",{"_index":78,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["keys].map((item",{"_index":1640,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["keytype",{"_index":18,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"classes/NgxValidators.html":{}}}],["key}error",{"_index":3918,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}errormessage",{"_index":3920,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["key}loading",{"_index":3916,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["kind",{"_index":5253,"title":{},"body":{"index.html":{},"license.html":{}}}],["know",{"_index":1965,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["labbledby",{"_index":4451,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["label",{"_index":928,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["labelledby",{"_index":702,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["labelledbyid",{"_index":3288,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["labels",{"_index":3279,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["labelwrapper",{"_index":1464,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxLinkConfiguration.html":{}}}],["lang",{"_index":2508,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["language",{"_index":845,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languagerouteparam",{"_index":2395,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{}}}],["languages",{"_index":2396,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["languages?.length",{"_index":2585,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["largest",{"_index":1637,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["last",{"_index":993,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["lastly",{"_index":3626,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["later",{"_index":2844,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["latest",{"_index":2280,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxToastService.html":{}}}],["lax",{"_index":1654,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["layer",{"_index":2830,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["layout",{"_index":247,"title":{},"body":{"interfaces/ComponentRecord.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["layout'},{'name",{"_index":561,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["layout.component.html",{"_index":3123,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts",{"_index":3120,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:21",{"_index":3138,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:26",{"_index":3135,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:31",{"_index":3133,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:36",{"_index":3129,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:41",{"_index":3130,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.component.ts:43",{"_index":3127,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layout.header?.left",{"_index":3223,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.main",{"_index":3225,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.header?.right",{"_index":3227,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.navigation",{"_index":3229,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts",{"_index":3151,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:103",{"_index":3189,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:110",{"_index":3184,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:167",{"_index":3182,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:183",{"_index":3172,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:191",{"_index":3180,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:198",{"_index":3171,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:205",{"_index":3186,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:220",{"_index":3179,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:234",{"_index":3177,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:253",{"_index":3174,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:35",{"_index":3209,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:40",{"_index":3196,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:47",{"_index":3195,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:52",{"_index":3191,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:60",{"_index":3208,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:66",{"_index":3211,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:71",{"_index":3210,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:76",{"_index":3207,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.service.ts:98",{"_index":3193,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["layout.ts",{"_index":1604,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["layout.types.ts",{"_index":228,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{}}}],["layout.types.ts:6",{"_index":232,"title":{},"body":{"interfaces/ComponentRecord.html":{}}}],["layout/mobile",{"_index":3119,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["layoutservice",{"_index":3126,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["layoutsubject",{"_index":3159,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["lazy",{"_index":2669,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["lazyhtmlgeneration",{"_index":1679,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["leaks",{"_index":2298,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["leave",{"_index":4294,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["leaving",{"_index":4223,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["left",{"_index":241,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["legend",{"_index":544,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["length",{"_index":218,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{}}}],["level",{"_index":2734,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["levels",{"_index":2705,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["liability",{"_index":5267,"title":{},"body":{"index.html":{},"license.html":{}}}],["liable",{"_index":5264,"title":{},"body":{"index.html":{},"license.html":{}}}],["lib",{"_index":2191,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{}}}],["libs/.../authentication.interceptor.ts",{"_index":5135,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../authentication.ts",{"_index":5132,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../core.ts",{"_index":5133,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../i18n",{"_index":5130,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/.../sort",{"_index":5128,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts",{"_index":1281,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103",{"_index":1352,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114",{"_index":1353,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125",{"_index":1355,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138",{"_index":1334,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158",{"_index":1343,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177",{"_index":1323,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199",{"_index":1329,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211",{"_index":1326,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232",{"_index":1319,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34",{"_index":1301,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40",{"_index":1303,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46",{"_index":1305,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53",{"_index":1314,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61",{"_index":1317,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71",{"_index":1340,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80",{"_index":1347,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89",{"_index":1350,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96",{"_index":1318,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["libs/angular/authentication/src/lib/directives/has",{"_index":2219,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["libs/angular/authentication/src/lib/directives/is",{"_index":2887,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts",{"_index":5138,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/angular/authentication/src/lib/pipes/has",{"_index":2274,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["libs/angular/authentication/src/lib/services/authenticated",{"_index":1160,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["libs/angular/authentication/src/lib/types/authenticated",{"_index":1254,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["libs/angular/authentication/src/lib/types/authentication",{"_index":1238,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["libs/angular/cookies/src/lib/abstracts/cookie",{"_index":1821,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{}}}],["libs/angular/cookies/src/lib/directives/has",{"_index":2149,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts",{"_index":1686,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166",{"_index":1721,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184",{"_index":1710,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194",{"_index":1725,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213",{"_index":1715,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220",{"_index":1738,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229",{"_index":1717,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238",{"_index":1719,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256",{"_index":1731,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277",{"_index":1728,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31",{"_index":1764,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36",{"_index":1758,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41",{"_index":1750,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46",{"_index":1769,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53",{"_index":1743,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58",{"_index":1770,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63",{"_index":1761,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69",{"_index":1753,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75",{"_index":1745,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81",{"_index":1767,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86",{"_index":1741,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99",{"_index":1733,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["libs/angular/cookies/src/lib/types/cookie",{"_index":1647,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["libs/angular/cookies/src/lib/types/has",{"_index":2148,"title":{},"body":{"interfaces/NgxHasCookieConfiguration.html":{}}}],["libs/angular/cookies/src/lib/types/set",{"_index":1819,"title":{},"body":{"interfaces/NgxCookieValue.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts",{"_index":4669,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:106",{"_index":4686,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:115",{"_index":4689,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:136",{"_index":4684,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:15",{"_index":4700,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:20",{"_index":4702,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:25",{"_index":4711,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:30",{"_index":4706,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:35",{"_index":4698,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:40",{"_index":4708,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:45",{"_index":4704,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:50",{"_index":4696,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:56",{"_index":4693,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:61",{"_index":4683,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:89",{"_index":4692,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/core/src/lib/services/window/window.service.ts:99",{"_index":4685,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["libs/angular/forms/src/lib/abstracts/base",{"_index":93,"title":{},"body":{"classes/BaseFormAccessor.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts",{"_index":2029,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13",{"_index":2032,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17",{"_index":2031,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9",{"_index":2033,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{}}}],["libs/angular/forms/src/lib/abstracts/form",{"_index":392,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["libs/angular/forms/src/lib/abstracts/save",{"_index":3673,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts",{"_index":2043,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:100",{"_index":2065,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:105",{"_index":2077,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:110",{"_index":2076,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:115",{"_index":2067,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:120",{"_index":2072,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:122",{"_index":2055,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:129",{"_index":2064,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:206",{"_index":2059,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:243",{"_index":2063,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:280",{"_index":2057,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:40",{"_index":2079,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:47",{"_index":2082,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:52",{"_index":2070,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60",{"_index":2088,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65",{"_index":2075,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70",{"_index":2084,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75",{"_index":2087,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80",{"_index":2066,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:85",{"_index":2074,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:90",{"_index":2083,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/directives/errors/errors.directive.ts:95",{"_index":2085,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["libs/angular/forms/src/lib/interfaces/errors.interface.ts",{"_index":2036,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["libs/angular/forms/src/lib/interfaces/form",{"_index":465,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["libs/angular/forms/src/lib/utils/accessor",{"_index":260,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["libs/angular/forms/src/lib/validators/at",{"_index":6,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts",{"_index":4595,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:100",{"_index":4625,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:27",{"_index":4603,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:40",{"_index":4609,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:55",{"_index":4641,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:70",{"_index":4631,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/forms/src/lib/validators/validators.ts:83",{"_index":4613,"title":{},"body":{"classes/NgxValidators.html":{}}}],["libs/angular/i18n/src/lib/abstracts/i18n",{"_index":2385,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["libs/angular/i18n/src/lib/components/empty",{"_index":2413,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["libs/angular/i18n/src/lib/i18n.types.ts",{"_index":2389,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["libs/angular/i18n/src/lib/loader/multi",{"_index":2486,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts",{"_index":2661,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16",{"_index":2678,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20",{"_index":2676,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22",{"_index":2675,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["libs/angular/i18n/src/lib/services/i18n",{"_index":2419,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts",{"_index":2622,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:16",{"_index":2643,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:21",{"_index":2639,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:26",{"_index":2645,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:33",{"_index":2647,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:40",{"_index":2649,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:49",{"_index":2637,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:65",{"_index":2641,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:76",{"_index":2631,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:87",{"_index":2634,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["libs/angular/i18n/src/lib/services/root",{"_index":2561,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts",{"_index":3255,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:22",{"_index":3269,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:23",{"_index":3268,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28",{"_index":3262,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35",{"_index":3260,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40",{"_index":3259,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45",{"_index":3261,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:50",{"_index":3264,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:56",{"_index":3267,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:58",{"_index":3263,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast",{"_index":4057,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts",{"_index":4068,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:15",{"_index":4074,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20",{"_index":4069,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:22",{"_index":4073,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:30",{"_index":4070,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts",{"_index":4174,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17",{"_index":4191,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22",{"_index":4186,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33",{"_index":4187,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47",{"_index":4184,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55",{"_index":4181,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60",{"_index":4183,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65",{"_index":4185,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["libs/angular/inform/src/lib/abstracts/tour",{"_index":4421,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/components/toast",{"_index":4077,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts",{"_index":4205,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114",{"_index":4224,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23",{"_index":4231,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24",{"_index":4226,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29",{"_index":4221,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36",{"_index":4220,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43",{"_index":4222,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50",{"_index":4218,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57",{"_index":4219,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67",{"_index":4229,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72",{"_index":4215,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77",{"_index":4227,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83",{"_index":4217,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88",{"_index":4216,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93",{"_index":4225,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["libs/angular/inform/src/lib/directives/tour",{"_index":4371,"title":{},"body":{"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["libs/angular/inform/src/lib/mocks/tour",{"_index":512,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts",{"_index":3360,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:124",{"_index":3368,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:146",{"_index":3384,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:177",{"_index":3370,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:222",{"_index":3379,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:244",{"_index":3375,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:29",{"_index":3387,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:32",{"_index":3389,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:37",{"_index":3393,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:42",{"_index":3391,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/modal/modal.service.ts:49",{"_index":3381,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts",{"_index":4097,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:155",{"_index":4114,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:186",{"_index":4110,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:213",{"_index":4111,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:222",{"_index":4108,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:243",{"_index":4112,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:37",{"_index":4118,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:44",{"_index":4126,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:49",{"_index":4128,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:54",{"_index":4127,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:59",{"_index":4124,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:64",{"_index":4137,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:84",{"_index":4123,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:95",{"_index":4117,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/toast/toast.service.ts:96",{"_index":4106,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts",{"_index":4243,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122",{"_index":4258,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169",{"_index":4253,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184",{"_index":4255,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197",{"_index":4252,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23",{"_index":4261,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24",{"_index":4267,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25",{"_index":4264,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28",{"_index":4259,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33",{"_index":4273,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39",{"_index":4262,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44",{"_index":4265,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49",{"_index":4272,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54",{"_index":4251,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["libs/angular/inform/src/lib/types/modal.types.ts",{"_index":3287,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["libs/angular/inform/src/lib/types/toast.types.ts",{"_index":4035,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["libs/angular/inform/src/lib/types/tooltip.types.ts",{"_index":4197,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["libs/angular/inform/src/lib/types/tour.token.type.ts",{"_index":4456,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["libs/angular/inform/src/lib/types/tour.types.ts",{"_index":4330,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["libs/angular/layout/src/lib/abstracts/display",{"_index":1892,"title":{},"body":{"directives/NgxDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/drag",{"_index":768,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/open",{"_index":3988,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/select",{"_index":3996,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/abstracts/table/sort",{"_index":4032,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts",{"_index":972,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111",{"_index":994,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128",{"_index":997,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33",{"_index":1006,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38",{"_index":1004,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43",{"_index":1008,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48",{"_index":987,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82",{"_index":999,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92",{"_index":1002,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["libs/angular/layout/src/lib/components/accordion/item/accordion",{"_index":1046,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts",{"_index":704,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:14",{"_index":751,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:19",{"_index":747,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:20",{"_index":749,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:21",{"_index":746,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:26",{"_index":744,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:31",{"_index":719,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:36",{"_index":731,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:42",{"_index":721,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:47",{"_index":729,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:52",{"_index":750,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:57",{"_index":732,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:82",{"_index":735,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/cell.directive.ts:91",{"_index":741,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/cell/currency",{"_index":1829,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/date",{"_index":1868,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["libs/angular/layout/src/lib/components/cell/generic",{"_index":3933,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["libs/angular/layout/src/lib/components/configurable",{"_index":1589,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["libs/angular/layout/src/lib/components/image",{"_index":2712,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["libs/angular/layout/src/lib/components/mobile",{"_index":3118,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["libs/angular/layout/src/lib/components/table/ngx",{"_index":4861,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts",{"_index":1484,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:100",{"_index":1502,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:105",{"_index":1504,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:110",{"_index":1522,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:115",{"_index":1543,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:120",{"_index":1528,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:125",{"_index":1524,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:130",{"_index":1500,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:135",{"_index":1536,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:139",{"_index":1507,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:164",{"_index":1506,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:188",{"_index":1505,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:39",{"_index":1547,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:44",{"_index":1530,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:51",{"_index":1541,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:56",{"_index":1544,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:61",{"_index":1526,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:68",{"_index":1534,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:73",{"_index":1532,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:75",{"_index":1539,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/button/button.directive.ts:80",{"_index":1519,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["libs/angular/layout/src/lib/directives/display",{"_index":1914,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["libs/angular/layout/src/lib/directives/drag",{"_index":920,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["libs/angular/layout/src/lib/directives/has",{"_index":2310,"title":{},"body":{"directives/NgxHasFocusDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts",{"_index":2921,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:105",{"_index":2944,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:112",{"_index":2926,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:119",{"_index":2946,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:126",{"_index":2937,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:131",{"_index":2927,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:138",{"_index":2942,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:140",{"_index":2929,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:165",{"_index":2928,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:40",{"_index":2952,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:45",{"_index":2938,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:52",{"_index":2945,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:57",{"_index":2947,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:62",{"_index":2935,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:69",{"_index":2940,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:74",{"_index":2939,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:79",{"_index":2933,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/link/link.directive.ts:96",{"_index":2950,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["libs/angular/layout/src/lib/directives/media",{"_index":2980,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["libs/angular/layout/src/lib/directives/tree",{"_index":4462,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["libs/angular/layout/src/lib/enums/sort",{"_index":5131,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["libs/angular/layout/src/lib/pipes/aria",{"_index":1148,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/get",{"_index":3972,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/has",{"_index":3982,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/item",{"_index":1619,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["libs/angular/layout/src/lib/pipes/matches",{"_index":2956,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/show",{"_index":4002,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["libs/angular/layout/src/lib/pipes/sort",{"_index":4022,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["libs/angular/layout/src/lib/services/image",{"_index":2795,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["libs/angular/layout/src/lib/services/media",{"_index":3011,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["libs/angular/layout/src/lib/services/mobile",{"_index":3150,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["libs/angular/layout/src/lib/services/online",{"_index":3466,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["libs/angular/layout/src/lib/tokens/ngx",{"_index":3941,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/button.types.ts",{"_index":1461,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/configurable",{"_index":1603,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["libs/angular/layout/src/lib/types/display",{"_index":1901,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/drag",{"_index":904,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["libs/angular/layout/src/lib/types/image",{"_index":2684,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["libs/angular/layout/src/lib/types/link.types.ts",{"_index":2911,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{}}}],["libs/angular/layout/src/lib/types/media",{"_index":2978,"title":{},"body":{"interfaces/NgxMediaQuery.html":{}}}],["libs/angular/layout/src/lib/types/mobile",{"_index":227,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{}}}],["libs/angular/layout/src/lib/types/show",{"_index":3966,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["libs/angular/layout/src/lib/types/sort",{"_index":4018,"title":{},"body":{"interfaces/NgxTableSortEvent.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts",{"_index":3891,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13",{"_index":3909,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15",{"_index":3898,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42",{"_index":3904,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51",{"_index":3907,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60",{"_index":3900,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69",{"_index":3902,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78",{"_index":3911,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/base",{"_index":111,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/entity",{"_index":158,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["libs/angular/store/src/lib/rxjs/interfaces/store",{"_index":146,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts",{"_index":294,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17",{"_index":302,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9",{"_index":298,"title":{},"body":{"injectables/EffectsService.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts",{"_index":4823,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:11",{"_index":4825,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:12",{"_index":4827,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:14",{"_index":4832,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/effects.ts:24",{"_index":4835,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["libs/angular/store/src/lib/rxjs/spec/store",{"_index":4756,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts",{"_index":3718,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts:13",{"_index":3720,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/abstracts/store.service.ts:18",{"_index":3723,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["libs/angular/store/src/lib/signal/types/signal",{"_index":3729,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["libs/angular/utils/src/lib/abstracts/query",{"_index":3478,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["libs/angular/utils/src/lib/directives/cypress",{"_index":1858,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["libs/angular/utils/src/lib/directives/focus",{"_index":326,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts",{"_index":178,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13",{"_index":188,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/has",{"_index":470,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts",{"_index":487,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8",{"_index":489,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/replace",{"_index":3591,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts",{"_index":5092,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17",{"_index":5096,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["libs/angular/utils/src/lib/services/broadcast",{"_index":1400,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["libs/angular/utils/src/lib/services/media",{"_index":3058,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["libs/angular/utils/src/lib/services/storage",{"_index":3774,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["libs/angular/utils/src/lib/types/replace",{"_index":3583,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["libs/angular/utils/src/lib/types/storage.types.ts",{"_index":3760,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["libs/javascript/core/src/lib/core.ts",{"_index":5137,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/javascript/types/authentication/src/lib/authentication.ts",{"_index":5136,"title":{},"body":{"miscellaneous/functions.html":{}}}],["license",{"_index":5218,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["lifecycle",{"_index":5058,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["limit",{"_index":2143,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["limitation",{"_index":5236,"title":{},"body":{"index.html":{},"license.html":{}}}],["limited",{"_index":4134,"title":{},"body":{"injectables/NgxToastService.html":{},"index.html":{},"license.html":{}}}],["line",{"_index":3274,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["link",{"_index":2912,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["link.\"the",{"_index":3636,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linkcomponent",{"_index":3613,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linkedsignal",{"_index":4867,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["links",{"_index":3609,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["linktype",{"_index":2924,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["list",{"_index":438,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["listen",{"_index":1088,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["listened",{"_index":3073,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["listener",{"_index":1782,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["listeners",{"_index":1815,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["listens",{"_index":4152,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["listentoonlinestatus",{"_index":1904,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["listing",{"_index":3815,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["lists",{"_index":3354,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["literal",{"_index":144,"title":{},"body":{"interfaces/BaseStoreActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxMobileLayoutBase.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["live",{"_index":828,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"dependencies.html":{}}}],["liveannouncer",{"_index":825,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["liveregionservice",{"_index":815,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["load",{"_index":1757,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TableCellTemplate.html":{}}}],["loaded",{"_index":2422,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loader",{"_index":2412,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["loading",{"_index":114,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxLinkConfiguration.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loading'},{'name",{"_index":587,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["loading.service.ts",{"_index":2421,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:15",{"_index":2449,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:21",{"_index":2466,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:23",{"_index":2453,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:25",{"_index":2465,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:28",{"_index":2464,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:40",{"_index":2451,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:48",{"_index":2439,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:57",{"_index":2435,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:67",{"_index":2441,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:77",{"_index":2444,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.service.ts:91",{"_index":2447,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types",{"_index":2470,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loading.types.ts",{"_index":5102,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loading/i18n",{"_index":2420,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["loadingcomponent",{"_index":1494,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["loadingdata",{"_index":1495,"title":{},"body":{"directives/NgxButtonDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["loadingtemplate",{"_index":4935,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["loadtranslations",{"_index":2432,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["loadtranslations(paths",{"_index":2443,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["local",{"_index":2577,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["locale",{"_index":1668,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["localstorage",{"_index":2609,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{}}}],["localstorage.getitem('ngx",{"_index":2613,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage.setitem('ngx",{"_index":2611,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["localstorage/sessionstorage",{"_index":3823,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["localstoragerecord",{"_index":3778,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["location",{"_index":1273,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["lodash",{"_index":1865,"title":{},"body":{"directives/NgxCypressTagDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{}}}],["log",{"_index":2099,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["logical",{"_index":3323,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["logs",{"_index":3836,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["longer",{"_index":410,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["longestrow",{"_index":1638,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["loop",{"_index":3039,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["lower",{"_index":3616,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercase",{"_index":3645,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["lowercased",{"_index":3618,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["made",{"_index":1191,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["main",{"_index":239,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"index.html":{}}}],["maintained",{"_index":5148,"title":{},"body":{"index.html":{}}}],["make",{"_index":809,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["makes",{"_index":4369,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["managescripttags",{"_index":1676,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["map",{"_index":850,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{}}}],["map(([action",{"_index":3417,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map(([query",{"_index":3199,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["map(([toasts",{"_index":4131,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["map((action",{"_index":3424,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["map((hascookies",{"_index":2208,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["map((key",{"_index":2145,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["map((layout",{"_index":3246,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["map((query",{"_index":3056,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["map((response",{"_index":1228,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["map((result",{"_index":2462,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["map((status",{"_index":1311,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["map((toasts",{"_index":4154,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["map((translations",{"_index":2534,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["maps",{"_index":3115,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["mark",{"_index":946,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["markallasdirty",{"_index":401,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallasdirty(form",{"_index":418,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched",{"_index":402,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markallastouched(form",{"_index":426,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markasactive",{"_index":779,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasactive(id",{"_index":944,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["markasdirty",{"_index":411,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["markasinitial",{"_index":3187,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["markasrendered",{"_index":4103,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["markasrendered(toast",{"_index":4107,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["markastouched",{"_index":424,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["marked",{"_index":4448,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["marker",{"_index":2692,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["marker'},{'name",{"_index":574,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["marker.addeventlistener('select",{"_index":2881,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.addeventlistener('statechange",{"_index":2875,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.all_marker_types",{"_index":2858,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.availablemarkertypes",{"_index":2838,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.close",{"_index":2833,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.component.scss",{"_index":2717,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts",{"_index":2714,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:104",{"_index":2743,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:109",{"_index":2741,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:111",{"_index":2746,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:116",{"_index":2748,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:137",{"_index":2749,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:149",{"_index":2744,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:47",{"_index":2757,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:48",{"_index":2759,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:49",{"_index":2752,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:54",{"_index":2750,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:59",{"_index":2758,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:64",{"_index":2754,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:69",{"_index":2735,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:74",{"_index":2736,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:79",{"_index":2740,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:84",{"_index":2732,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:89",{"_index":2733,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:94",{"_index":2760,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.component.ts:99",{"_index":2738,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["marker.removeeventlistener('select",{"_index":2832,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.removeeventlistener('statechange",{"_index":2842,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.restorestate(configuration.defaultstate",{"_index":2874,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts",{"_index":2796,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:117",{"_index":2806,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:188",{"_index":2816,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:207",{"_index":2812,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:221",{"_index":2819,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:26",{"_index":2821,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:31",{"_index":2820,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:40",{"_index":2809,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.service.ts:66",{"_index":2818,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show",{"_index":2871,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.show(configuration.defaultstate",{"_index":2840,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.targetroot",{"_index":2831,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.types.ts",{"_index":2685,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["marker.uistylesettings.clearbuttonvisible",{"_index":2855,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.notesareastyleclassname",{"_index":2860,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbaractivebuttonstylecolorsclassname",{"_index":2868,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarbuttonstylecolorsclassname",{"_index":2867,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolbarstylecolorsclassname",{"_index":2863,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxactivebuttonstylecolorsclassname",{"_index":2870,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxbuttonstylecolorsclassname",{"_index":2869,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.toolboxstylecolorsclassname",{"_index":2865,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoombuttonvisible",{"_index":2846,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.uistylesettings.zoomoutbuttonvisible",{"_index":2848,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomlevel",{"_index":2853,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker.zoomsteps",{"_index":2849,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marker/image",{"_index":2713,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markerarea",{"_index":2815,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerarea(image",{"_index":2841,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerareastate",{"_index":2690,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerbase",{"_index":2687,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerclicked",{"_index":2724,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerdestroyedsubject",{"_index":2725,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["markerjs",{"_index":2689,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{}}}],["markerjs2",{"_index":2691,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"dependencies.html":{}}}],["markers",{"_index":2739,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["markertypes",{"_index":2704,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["markerview",{"_index":2811,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["markerview(image",{"_index":2829,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["marks",{"_index":415,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["marktranslationsloadedasfailed",{"_index":2433,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["match",{"_index":501,"title":{},"body":{"pipes/IbanPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/TableCellTemplate.html":{}}}],["matched",{"_index":82,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["matchedquery",{"_index":3096,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["matchedquery.addeventlistener('change",{"_index":3101,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["matches",{"_index":2984,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["matchesquery",{"_index":2962,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["matchesquery(id",{"_index":3019,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matchesquery(this.ngxmediaquery",{"_index":3008,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["matchfunction",{"_index":4640,"title":{},"body":{"classes/NgxValidators.html":{}}}],["matching",{"_index":89,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["matchingset",{"_index":3053,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["matchingset.has(query",{"_index":3057,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["math.max",{"_index":1639,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["max",{"_index":1634,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"classes/NgxValidators.html":{}}}],["maxamount",{"_index":4050,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["maxdate",{"_index":4668,"title":{},"body":{"classes/NgxValidators.html":{}}}],["maximum",{"_index":4634,"title":{},"body":{"classes/NgxValidators.html":{}}}],["maxtime",{"_index":4051,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["meant",{"_index":923,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["mechanic",{"_index":4953,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["media",{"_index":3013,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["mediaqueries",{"_index":3016,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist",{"_index":3036,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["mediaquerylist.addeventlistener('change",{"_index":3048,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist.matches",{"_index":3043,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylist.removeeventlistener('change",{"_index":3037,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["mediaquerylistenermap",{"_index":3065,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["mediaquerylistevent",{"_index":3046,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["mediaqueryservice",{"_index":2985,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["mediaservice",{"_index":2971,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["memberof",{"_index":382,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["memoizedselector",{"_index":121,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["memory",{"_index":2297,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["merchantability",{"_index":5257,"title":{},"body":{"index.html":{},"license.html":{}}}],["merge",{"_index":1948,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{},"license.html":{}}}],["message",{"_index":841,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["messageerror",{"_index":1431,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["messagerecord",{"_index":819,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["messages",{"_index":822,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxFormsErrorAbstractComponent.html":{}}}],["messagetype",{"_index":1425,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["message{any",{"_index":1454,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["met",{"_index":1277,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxModalService.html":{}}}],["metadata",{"_index":179,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["method",{"_index":380,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["methods",{"_index":183,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["methodsdictionary",{"_index":3733,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["milestone",{"_index":5206,"title":{},"body":{"index.html":{}}}],["min",{"_index":4629,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mind",{"_index":3614,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["mindate",{"_index":4667,"title":{},"body":{"classes/NgxValidators.html":{}}}],["minimum",{"_index":4424,"title":{},"body":{"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{}}}],["minmax(0",{"_index":1644,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["miscellaneous",{"_index":5126,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["missing",{"_index":3552,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["mit",{"_index":5219,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mm",{"_index":4621,"title":{},"body":{"classes/NgxValidators.html":{}}}],["mobile",{"_index":253,"title":{},"body":{"interfaces/ComponentRecord.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mock",{"_index":514,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockchannel",{"_index":306,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocked",{"_index":2824,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["mockprivatechannel",{"_index":307,"title":{},"body":{"injectables/EffectsService.html":{}}}],["mocktourholdercomponent",{"_index":508,"title":{"components/MockTourHolderComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mocktourstepcomponent",{"_index":550,"title":{"components/MockTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["mockvideos",{"_index":308,"title":{},"body":{"injectables/EffectsService.html":{}}}],["modal",{"_index":1739,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{}}}],["modals",{"_index":3348,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["modalvisible",{"_index":1697,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modalvisiblesubject",{"_index":1698,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["mode",{"_index":1672,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["models",{"_index":3735,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["modifies",{"_index":1747,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["modify",{"_index":5238,"title":{},"body":{"index.html":{},"license.html":{}}}],["modular",{"_index":5171,"title":{},"body":{"index.html":{}}}],["module",{"_index":2665,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["modules",{"_index":2668,"title":{"modules.html":{}},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"modules.html":{}}}],["moment",{"_index":2663,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["mono",{"_index":5146,"title":{},"body":{"index.html":{}}}],["more",{"_index":41,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["mouse",{"_index":357,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["mouseenter",{"_index":4179,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["mouseleave",{"_index":4180,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["move",{"_index":996,"title":{},"body":{"components/NgxAccordionComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["moved",{"_index":878,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["movedown",{"_index":4470,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movefocus",{"_index":983,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["movefocus(id",{"_index":989,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["moveleft",{"_index":4471,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveleft(event",{"_index":4505,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveright",{"_index":4472,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moves",{"_index":995,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["moveto",{"_index":4558,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["moveto(direction",{"_index":4570,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["movetobottomcontrolend",{"_index":4473,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetobottomend",{"_index":4474,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell",{"_index":4475,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetocell(cell",{"_index":4509,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcellofgrid",{"_index":4476,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstcolumnofgrid",{"_index":4477,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetofirstofrow",{"_index":4478,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["movetolastcellofgrid",{"_index":4479,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moveup",{"_index":4480,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["moving",{"_index":1611,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["mozilla",{"_index":3289,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ms",{"_index":4344,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["multi",{"_index":289,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["multiple",{"_index":2489,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["multiselect",{"_index":5073,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["multitranslationloader",{"_index":2536,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["mycomponent",{"_index":481,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["name",{"_index":180,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named",{"_index":5193,"title":{},"body":{"index.html":{}}}],["names",{"_index":2859,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"interfaces/TableCellTemplate.html":{}}}],["native",{"_index":3276,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["nativeelement",{"_index":1496,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["nature",{"_index":3644,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["navigate",{"_index":3560,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["navigating",{"_index":4529,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["navigation",{"_index":245,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["navigationextras",{"_index":4332,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["near",{"_index":4306,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["necessary",{"_index":281,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTourStepComponent.html":{}}}],["need",{"_index":74,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["needed",{"_index":55,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["needs",{"_index":1251,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["negative",{"_index":4366,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["nested",{"_index":1878,"title":{},"body":{"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["never",{"_index":105,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["new",{"_index":61,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["newcontainer",{"_index":919,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newindex",{"_index":917,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["newlanguage",{"_index":2606,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["newly",{"_index":2436,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["newsortdirection",{"_index":758,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["newvalue",{"_index":3769,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["next",{"_index":1041,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"miscellaneous/functions.html":{}}}],["next.active",{"_index":4283,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.id",{"_index":4287,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.path",{"_index":2556,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["next.source",{"_index":4284,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["next.translations",{"_index":2557,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["nextstate",{"_index":3686,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ng_validators",{"_index":276,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["ng_value_accessor",{"_index":277,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngaftercontentchecked",{"_index":5059,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngafterviewinit",{"_index":664,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxToastComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["ngclass",{"_index":4865,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngcomponentoutlet",{"_index":3121,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngif",{"_index":2095,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ngonchanges",{"_index":2730,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["ngonchanges(changes",{"_index":2747,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["ngondestroy",{"_index":403,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngoninit",{"_index":665,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngrx/effects",{"_index":4836,"title":{},"body":{"injectables/StoreEffects.html":{},"dependencies.html":{}}}],["ngrx/entity",{"_index":154,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngrx/signals",{"_index":3732,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"dependencies.html":{}}}],["ngrx/store",{"_index":124,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"dependencies.html":{}}}],["ngtemplateoutlet",{"_index":1050,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngx",{"_index":554,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"dependencies.html":{}}}],["ngxabstracttablecelldirective",{"_index":595,"title":{"directives/NgxAbstractTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxabstracttablecelldirective:14",{"_index":1855,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:21",{"_index":3938,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:26",{"_index":3939,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:27",{"_index":3936,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:31",{"_index":1832,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:32",{"_index":1853,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:33",{"_index":3937,"title":{},"body":{"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:36",{"_index":1835,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:38",{"_index":1851,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:42",{"_index":1833,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:44",{"_index":1843,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:47",{"_index":1834,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:49",{"_index":1839,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:52",{"_index":1854,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:57",{"_index":1836,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:59",{"_index":1889,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:65",{"_index":1885,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:72",{"_index":1881,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:77",{"_index":1880,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["ngxabstracttablecelldirective:82",{"_index":1837,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxabstracttablecelldirective:91",{"_index":1838,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["ngxaccessibleabstractdraganddropitemdirective",{"_index":597,"title":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropabstractservice",{"_index":806,"title":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddropbasemessage",{"_index":903,"title":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropcontainer",{"_index":926,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainer]'},{'name",{"_index":599,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerdirective",{"_index":598,"title":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropcontainerindex",{"_index":930,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropcontainerlabel",{"_index":933,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{}}}],["ngxaccessibledraganddropfromtomessage",{"_index":906,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddrophost",{"_index":937,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophost]'},{'name",{"_index":601,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddrophostdescription",{"_index":954,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["ngxaccessibledraganddrophostdirective",{"_index":600,"title":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitem]'},{'name",{"_index":603,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropitemdirective",{"_index":602,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccessibledraganddropmessage",{"_index":839,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmessagerecord",{"_index":856,"title":{"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{}},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmessagerecords",{"_index":855,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["ngxaccessibledraganddropmoveevent",{"_index":915,"title":{"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccessibledraganddropmovetype",{"_index":914,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["ngxaccordioncomponent",{"_index":553,"title":{"components/NgxAccordionComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionitemcomponent",{"_index":556,"title":{"components/NgxAccordionItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxaccordionopenbehavior",{"_index":1011,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["ngxariasort",{"_index":1151,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["ngxariasortpipe",{"_index":1147,"title":{"pipes/NgxAriaSortPipe.html":{}},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxauthenticatedhttpclient",{"_index":1159,"title":{"injectables/NgxAuthenticatedHttpClient.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpclientconfiguration",{"_index":1212,"title":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{}},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticatedhttpinterceptor",{"_index":5134,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedhttpinterceptor(request",{"_index":5139,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxauthenticatedroute",{"_index":1253,"title":{"interfaces/NgxAuthenticatedRoute.html":{}},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxauthenticatedroutes",{"_index":1280,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxauthenticationabstractservice",{"_index":1247,"title":{"classes/NgxAuthenticationAbstractService.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationconfiguration",{"_index":1250,"title":{"interfaces/NgxAuthenticationConfiguration.html":{}},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{}}}],["ngxauthenticationresponsefeature",{"_index":1322,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["ngxauthenticationservicetoken",{"_index":2240,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxauthenticationstatus",{"_index":1360,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["ngxauthenticationurlhandlertoken",{"_index":1210,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["ngxbroadcastchannelservice",{"_index":1399,"title":{"injectables/NgxBroadcastChannelService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["ngxbutton",{"_index":1487,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["ngxbutton]'},{'name",{"_index":605,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxbuttonconfiguration",{"_index":1460,"title":{"interfaces/NgxButtonConfiguration.html":{}},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttonconfigurationtoken",{"_index":1548,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["ngxbuttondirective",{"_index":604,"title":{"directives/NgxButtonDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxbuttondisplaytype",{"_index":1482,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttoniconposition",{"_index":1466,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttonpriority",{"_index":1468,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttontype",{"_index":1473,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxbuttonwidth",{"_index":1478,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["ngxconfigurablelayoutcomponent",{"_index":559,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutgrid",{"_index":1609,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxconfigurablelayoutitemcomponent",{"_index":562,"title":{"components/NgxConfigurableLayoutItemComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxconfigurablelayoutitemdropevent",{"_index":1602,"title":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxconfigurablelayoutitementity",{"_index":1610,"title":{"interfaces/NgxConfigurableLayoutItemEntity.html":{}},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsize",{"_index":1622,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsizeoption",{"_index":1612,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayoutitemsizepipe",{"_index":1618,"title":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["ngxconfigurablelayouttype",{"_index":1615,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["ngxcookie",{"_index":1646,"title":{"interfaces/NgxCookie.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["ngxcookiecategories",{"_index":1662,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookiechangedevent",{"_index":1682,"title":{"interfaces/NgxCookieChangedEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieconfiguration",{"_index":1671,"title":{"interfaces/NgxCookieConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookieevent",{"_index":1681,"title":{"interfaces/NgxCookieEvent.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookielanguageconfiguration",{"_index":1663,"title":{"interfaces/NgxCookieLanguageConfiguration.html":{}},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{}}}],["ngxcookies",{"_index":1781,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ngxcookieservice",{"_index":1685,"title":{"injectables/NgxCookieService.html":{}},"body":{"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxcookiesfallbackcomponent",{"_index":606,"title":{"directives/NgxCookiesFallBackComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcookiesfallbackcomponenttoken",{"_index":2176,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ngxcookievalue",{"_index":1730,"title":{"interfaces/NgxCookieValue.html":{}},"body":{"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{}}}],["ngxcurrencytablecellcomponent",{"_index":563,"title":{"components/NgxCurrencyTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxcypresstagdirective",{"_index":607,"title":{"directives/NgxCypressTagDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdatetablecellcomponent",{"_index":567,"title":{"components/NgxDateTableCellComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentarialive",{"_index":1908,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentcomponent",{"_index":609,"title":{"directives/NgxDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentcomponent:13",{"_index":5086,"title":{},"body":{"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["ngxdisplaycontentcomponent:8",{"_index":5087,"title":{},"body":{"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["ngxdisplaycontentcomponentconfiguration",{"_index":1905,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["ngxdisplaycontentconditions",{"_index":1912,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentconfiguration",{"_index":1900,"title":{"interfaces/NgxDisplayContentConfiguration.html":{}},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentconfigurationtoken",{"_index":1952,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentdirective",{"_index":610,"title":{"directives/NgxDisplayContentDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxdisplaycontentoverrideconfiguration",{"_index":1913,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxdisplaycontentrecord",{"_index":1911,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{}}}],["ngxdisplaycontentstatus",{"_index":1906,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["ngxforms",{"_index":459,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["ngxformscontrolvalueaccessor",{"_index":612,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserror",{"_index":2071,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrorabstractcomponent",{"_index":613,"title":{"directives/NgxFormsErrorAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorconfigurationoptions",{"_index":2035,"title":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrordirective",{"_index":2102,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors",{"_index":2044,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrors]'},{'name",{"_index":615,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorsconfigurationtoken",{"_index":2069,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["ngxformserrorsdirective",{"_index":614,"title":{"directives/NgxFormsErrorsDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxformserrorshowsettings",{"_index":2041,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["ngxformserrorshowwhensettings",{"_index":2042,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["ngxhascookieconfiguration",{"_index":1828,"title":{"interfaces/NgxHasCookieConfiguration.html":{}},"body":{"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{}}}],["ngxhascookiedirective",{"_index":616,"title":{"directives/NgxHasCookieDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasCookieDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeature",{"_index":2225,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeature]'},{'name",{"_index":619,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeaturedirective",{"_index":618,"title":{"directives/NgxHasFeatureDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfeatureelse",{"_index":2228,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureguard",{"_index":1262,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhasfeaturepipe",{"_index":2273,"title":{"pipes/NgxHasFeaturePipe.html":{}},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["ngxhasfeatureshouldhaveallfeatures",{"_index":2229,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfeatureshouldhavefeature",{"_index":2230,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["ngxhasfocusdirective",{"_index":620,"title":{"directives/NgxHasFocusDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdirective:13",{"_index":4523,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:18",{"_index":4500,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:25",{"_index":4499,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:34",{"_index":4517,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdirective:43",{"_index":4518,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective",{"_index":621,"title":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhasfocusdraganddropabstractdirective:15",{"_index":804,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:20",{"_index":788,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:31",{"_index":786,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:39",{"_index":803,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:41",{"_index":793,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:45",{"_index":796,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:47",{"_index":797,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhasfocusdraganddropabstractdirective:54",{"_index":795,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{}}}],["ngxhaspermission",{"_index":2336,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermission]'},{'name",{"_index":623,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissiondirective",{"_index":622,"title":{"directives/NgxHasPermissionDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxhaspermissionelse",{"_index":2337,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionguard",{"_index":1267,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxhaspermissionpipe",{"_index":2369,"title":{"pipes/NgxHasPermissionPipe.html":{}},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["ngxhaspermissionshouldhaveallpermissions",{"_index":2338,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxhaspermissionshouldhavepermission",{"_index":2339,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["ngxi18n",{"_index":2618,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["ngxi18nabstractservice",{"_index":2384,"title":{"classes/NgxI18nAbstractService.html":{}},"body":{"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nconfiguration",{"_index":2388,"title":{"interfaces/NgxI18nConfiguration.html":{}},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nconfigurationtoken",{"_index":2515,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["ngxi18nemptycomponent",{"_index":569,"title":{"components/NgxI18nEmptyComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxi18nloadingservice",{"_index":2418,"title":{"injectables/NgxI18nLoadingService.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nmodule",{"_index":2498,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi18nmultitranslationhttploader",{"_index":2485,"title":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi18nrootservice",{"_index":2560,"title":{"injectables/NgxI18nRootService.html":{}},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{}}}],["ngxi18nservice",{"_index":2621,"title":{"injectables/NgxI18nService.html":{}},"body":{"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18nsetlanguageguard",{"_index":2417,"title":{},"body":{"components/NgxI18nEmptyComponent.html":{}}}],["ngxi18ntranslationloaderresolver",{"_index":2660,"title":{"injectables/NgxI18nTranslationLoaderResolver.html":{}},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["ngxi18ntranslationpathstoken",{"_index":2516,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["ngxi8nrootservice",{"_index":2640,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["ngximagemarker",{"_index":2711,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerbase",{"_index":2683,"title":{"interfaces/NgxImageMarkerBase.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkercomponent",{"_index":572,"title":{"components/NgxImageMarkerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngximagemarkerconfiguration",{"_index":2696,"title":{"interfaces/NgxImageMarkerConfiguration.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkeredit",{"_index":2710,"title":{"interfaces/NgxImageMarkerEdit.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkeritem",{"_index":2694,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerservice",{"_index":2755,"title":{"injectables/NgxImageMarkerService.html":{}},"body":{"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["ngximagemarkerstate",{"_index":2693,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkertypes",{"_index":2695,"title":{"interfaces/NgxImageMarkerTypes.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngximagemarkerview",{"_index":2708,"title":{"interfaces/NgxImageMarkerView.html":{}},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["ngxinform",{"_index":3400,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxisauthenticated",{"_index":2890,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticated]'},{'name",{"_index":625,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticateddirective",{"_index":624,"title":{"directives/NgxIsAuthenticatedDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxisauthenticatedelse",{"_index":2891,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["ngxisauthenticatedguard",{"_index":1271,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["ngxlayout",{"_index":2020,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["ngxlink",{"_index":2923,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["ngxlink]'},{'name",{"_index":627,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxlinkconfiguration",{"_index":2910,"title":{"interfaces/NgxLinkConfiguration.html":{}},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinkconfigurationtoken",{"_index":2953,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["ngxlinkcontext",{"_index":2916,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinkdestination",{"_index":2920,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinkdirective",{"_index":626,"title":{"directives/NgxLinkDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxlinkiconposition",{"_index":2913,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinkpriority",{"_index":2914,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxlinktype",{"_index":2915,"title":{},"body":{"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["ngxmatchesquery",{"_index":2960,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["ngxmatchesquerypipe",{"_index":2955,"title":{"pipes/NgxMatchesQueryPipe.html":{}},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["ngxmediaqueriestoken",{"_index":3032,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["ngxmediaquery",{"_index":2977,"title":{"interfaces/NgxMediaQuery.html":{}},"body":{"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["ngxmediaquery]'},{'name",{"_index":629,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmediaquerydirective",{"_index":628,"title":{"directives/NgxMediaQueryDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmediaqueryelse",{"_index":2986,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["ngxmediaqueryservice",{"_index":2972,"title":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}},"body":{"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmediaqueryshouldmatch",{"_index":2987,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["ngxmobilelayout",{"_index":249,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayout['header",{"_index":258,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{}}}],["ngxmobilelayoutbase",{"_index":234,"title":{"interfaces/NgxMobileLayoutBase.html":{}},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{}}}],["ngxmobilelayoutcomponent",{"_index":575,"title":{"components/NgxMobileLayoutComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmobilelayoutconfiguration",{"_index":250,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutconfigurationtoken",{"_index":3190,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutelements",{"_index":254,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutitem",{"_index":233,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmobilelayoutservice",{"_index":248,"title":{"injectables/NgxMobileLayoutService.html":{}},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["ngxmodalabstractcomponent",{"_index":630,"title":{"directives/NgxModalAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxmodalabstractcomponent`](../abstracts/modal/modal.abstract.component.ts",{"_index":3337,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalactiontype",{"_index":3270,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabelbaseoptions",{"_index":3286,"title":{"interfaces/NgxModalAriaLabelBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabelledoptions",{"_index":3306,"title":{"interfaces/NgxModalAriaLabelledOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalarialabeloptions",{"_index":3305,"title":{"interfaces/NgxModalAriaLabelOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalbaseconfiguration",{"_index":3347,"title":{"interfaces/NgxModalBaseConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalbaseoptions",{"_index":3351,"title":{"interfaces/NgxModalBaseOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcdkmodalconfiguration",{"_index":3317,"title":{"interfaces/NgxModalCDKModalConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalclose",{"_index":3412,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalcomponentconfiguration",{"_index":3335,"title":{"interfaces/NgxModalComponentConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalcomponentoptions",{"_index":3358,"title":{"interfaces/NgxModalComponentOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalconfiguration",{"_index":3350,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalconfigurationtoken",{"_index":3395,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["ngxmodalglobalcdkconfiguration",{"_index":3309,"title":{"interfaces/NgxModalGlobalCDKConfiguration.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodallabelariaoptions",{"_index":3307,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodaloptions",{"_index":3359,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalrole",{"_index":3297,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxmodalservice",{"_index":3256,"title":{"injectables/NgxModalService.html":{}},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{}}}],["ngxmodaltypeoptions",{"_index":3357,"title":{"interfaces/NgxModalTypeOptions.html":{}},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["ngxngxwindowservice",{"_index":4713,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["ngxonlineservice",{"_index":1969,"title":{"injectables/NgxOnlineService.html":{}},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["ngxopenrowstatecolumn",{"_index":4919,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxqueryparamformsynccomponent",{"_index":631,"title":{"directives/NgxQueryParamFormSyncComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxreplaceelements",{"_index":3595,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsconfiguration",{"_index":3588,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsconfigurationelement",{"_index":3582,"title":{"interfaces/NgxReplaceElementsConfigurationElement.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["ngxreplaceelementsconfigurationtoken",{"_index":3648,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsitem",{"_index":3589,"title":{"interfaces/NgxReplaceElementsItem.html":{}},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementspipe",{"_index":3590,"title":{"pipes/NgxReplaceElementsPipe.html":{}},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["ngxreplaceelementsselector",{"_index":3586,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["ngxsaveonexitabstractservice",{"_index":3672,"title":{"classes/NgxSaveOnExitAbstractService.html":{}},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["ngxsaveonexitcomponent",{"_index":632,"title":{"directives/NgxSaveOnExitComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxsignalstore",{"_index":3719,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreconfiguration",{"_index":3741,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoredispatchactions",{"_index":3755,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstorerecord",{"_index":3756,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreselectfunction",{"_index":3737,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreservice",{"_index":3717,"title":{"injectables/NgxSignalStoreService.html":{}},"body":{"injectables/NgxSignalStoreService.html":{}}}],["ngxsignalstoreslice",{"_index":3728,"title":{"interfaces/NgxSignalStoreSlice.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicearraygenerator",{"_index":3738,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicearraymethods",{"_index":3748,"title":{"interfaces/NgxSignalStoreSliceArrayMethods.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicebasemethods",{"_index":3749,"title":{"interfaces/NgxSignalStoreSliceBaseMethods.html":{}},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoresliceconfiguration",{"_index":3743,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicedatatype",{"_index":3746,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicegenerator",{"_index":3739,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreslicemethods",{"_index":3747,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstorestate",{"_index":3726,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxsignalstoreviewstate",{"_index":3725,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["ngxstorage",{"_index":3759,"title":{"interfaces/NgxStorage.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragebaseevent",{"_index":3766,"title":{"interfaces/NgxStorageBaseEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageclearevent",{"_index":3770,"title":{"interfaces/NgxStorageClearEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageevent",{"_index":3772,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragerecord",{"_index":3764,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageremoveevent",{"_index":3771,"title":{"interfaces/NgxStorageRemoveEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstorageservice",{"_index":3773,"title":{"injectables/NgxStorageService.html":{}},"body":{"injectables/NgxStorageService.html":{}}}],["ngxstoragesetevent",{"_index":3767,"title":{"interfaces/NgxStorageSetEvent.html":{}},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstoragetype",{"_index":3765,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["ngxstore",{"_index":3873,"title":{"interfaces/NgxStore.html":{}},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreactions",{"_index":3876,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreselectors",{"_index":3877,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ngxstoreservice",{"_index":3539,"title":{"injectables/NgxStoreService.html":{}},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:13",{"_index":4809,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:15",{"_index":4810,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:42",{"_index":4787,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:51",{"_index":4788,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:60",{"_index":4785,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxstoreservice:69",{"_index":4786,"title":{},"body":{"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["ngxtablecelldirective",{"_index":633,"title":{"directives/NgxTableCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableclass",{"_index":3947,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["ngxtablecomponent",{"_index":576,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableconfiguration",{"_index":3940,"title":{"interfaces/NgxTableConfiguration.html":{}},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableconfigurationtoken",{"_index":3964,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablecypressdatatags",{"_index":755,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablecypressdatatagsbase",{"_index":3965,"title":{"interfaces/NgxTableCypressDataTagsBase.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablegetpipe",{"_index":1870,"title":{"pipes/NgxTableGetPipe.html":{}},"body":{"components/NgxDateTableCellComponent.html":{},"pipes/NgxTableGetPipe.html":{}}}],["ngxtablehasobservers",{"_index":3983,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["ngxtablehasobserverspipe",{"_index":3981,"title":{"pipes/NgxTableHasObserversPipe.html":{}},"body":{"pipes/NgxTableHasObserversPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableopenrowstatetemplateabstractcomponent",{"_index":634,"title":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableselectcolumn",{"_index":4914,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ngxtableselecttemplateabstractcomponent",{"_index":635,"title":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtableshowheader",{"_index":4005,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["ngxtableshowheaderpipe",{"_index":4001,"title":{"pipes/NgxTableShowHeaderPipe.html":{}},"body":{"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtableshowheaderrequirements",{"_index":3970,"title":{"interfaces/NgxTableShowHeaderRequirements.html":{}},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["ngxtablesortdirection",{"_index":740,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"miscellaneous/enumerations.html":{}}}],["ngxtablesortdirection.ascending",{"_index":759,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesortdirection.descending",{"_index":764,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["ngxtablesortevent",{"_index":756,"title":{"interfaces/NgxTableSortEvent.html":{}},"body":{"directives/NgxAbstractTableCellDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxTableSortEvent.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorticon",{"_index":4025,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ngxtablesorticonpipe",{"_index":4021,"title":{"pipes/NgxTableSortIconPipe.html":{}},"body":{"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtablesorttemplateabstractcomponent",{"_index":636,"title":{"directives/NgxTableSortTemplateAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoast",{"_index":4034,"title":{"interfaces/NgxToast.html":{}},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastbundlercomponent",{"_index":637,"title":{"directives/NgxToastBundlerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastcomponent",{"_index":638,"title":{"directives/NgxToastComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastconfiguration",{"_index":4037,"title":{"interfaces/NgxToastConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastconfigurationtoken",{"_index":4087,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastcontainercomponent",{"_index":578,"title":{"components/NgxToastContainerComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtoastcreator",{"_index":4052,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastdefaultconfiguration",{"_index":4049,"title":{"interfaces/NgxToastDefaultConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastevent",{"_index":4056,"title":{"interfaces/NgxToastEvent.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtoastmaxamountbaseconfiguration",{"_index":4041,"title":{"interfaces/NgxToastMaxAmountBaseConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountbundleconfiguration",{"_index":4045,"title":{"interfaces/NgxToastMaxAmountBundleConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountconfiguration",{"_index":4047,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastmaxamountotherconfiguration",{"_index":4046,"title":{"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastposition",{"_index":4039,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["ngxtoastservice",{"_index":4036,"title":{"injectables/NgxToastService.html":{}},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["ngxtooltip",{"_index":4206,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltip]'},{'name",{"_index":641,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipabstractcomponent",{"_index":639,"title":{"directives/NgxTooltipAbstractComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipactiveelementevent",{"_index":4196,"title":{"interfaces/NgxTooltipActiveElementEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipactivetooltipevent",{"_index":4203,"title":{"interfaces/NgxTooltipActiveTooltipEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipbaseevent",{"_index":4198,"title":{"interfaces/NgxTooltipBaseEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipcomponent",{"_index":4207,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipconfiguration",{"_index":4199,"title":{"interfaces/NgxTooltipConfiguration.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipconfigurationtoken",{"_index":4280,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["ngxtooltipdirective",{"_index":640,"title":{"directives/NgxTooltipDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtooltipdisabled",{"_index":4208,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipevent",{"_index":4204,"title":{},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipid",{"_index":4209,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["ngxtooltipinactiveevent",{"_index":4202,"title":{"interfaces/NgxTooltipInactiveEvent.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipitem",{"_index":4201,"title":{"interfaces/NgxTooltipItem.html":{}},"body":{"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltipposition",{"_index":4192,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtooltippositionclass",{"_index":4193,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{}}}],["ngxtooltipservice",{"_index":4175,"title":{"injectables/NgxTooltipService.html":{}},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["ngxtouraction",{"_index":4340,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourbackdropclipevent",{"_index":4329,"title":{"interfaces/NgxTourBackdropClipEvent.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourdirection",{"_index":4333,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourinteraction",{"_index":4334,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtouritemdirective",{"_index":642,"title":{"directives/NgxTourItemDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourregistrationevent",{"_index":4336,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourrouteoptions",{"_index":4338,"title":{"interfaces/NgxTourRouteOptions.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourservice",{"_index":535,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtourshowwhen",{"_index":4397,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourshowwhen]'},{'name",{"_index":645,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhendirective",{"_index":644,"title":{"directives/NgxTourShowWhenDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourshowwhenelse",{"_index":4398,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["ngxtourstep",{"_index":4341,"title":{"interfaces/NgxTourStep.html":{}},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["ngxtourstep.offset",{"_index":4461,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourstepcomponent",{"_index":646,"title":{"directives/NgxTourStepComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtourstepcomponent:103",{"_index":700,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:105",{"_index":687,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:112",{"_index":686,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:33",{"_index":703,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:38",{"_index":683,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:45",{"_index":682,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:53",{"_index":677,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:58",{"_index":696,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:63",{"_index":693,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:68",{"_index":681,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:73",{"_index":674,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:78",{"_index":675,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:83",{"_index":670,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:88",{"_index":676,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:93",{"_index":679,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepcomponent:98",{"_index":689,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["ngxtourstepoffset",{"_index":4370,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourstepposition",{"_index":4335,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["ngxtourtokenconfiguration",{"_index":4455,"title":{"interfaces/NgxTourTokenConfiguration.html":{}},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtourtokentype",{"_index":4459,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["ngxtreegrid",{"_index":4553,"title":{},"body":{"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ngxtreegrid]'},{'name",{"_index":650,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcell",{"_index":4467,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcell]'},{'name",{"_index":648,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcelldirective",{"_index":647,"title":{"directives/NgxTreeGridCellDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridcellrow",{"_index":4468,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegridcelltarget",{"_index":4510,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxtreegriddirective",{"_index":649,"title":{"directives/NgxTreeGridDirective.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridexpandable",{"_index":4554,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["ngxtreegridrow",{"_index":652,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowdirective",{"_index":651,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ngxtreegridrowtarget",{"_index":4511,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["ngxutils",{"_index":1448,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["ngxvalidators",{"_index":4594,"title":{"classes/NgxValidators.html":{}},"body":{"classes/NgxValidators.html":{}}}],["ngxwindowservice",{"_index":1442,"title":{"injectables/NgxWindowService.html":{}},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["node",{"_index":1559,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["node_modules/@ngrx/signals/src/signal",{"_index":3734,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["nodes",{"_index":1556,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["non",{"_index":1629,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"index.html":{}}}],["none",{"_index":1153,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{}}}],["noninfringement",{"_index":5261,"title":{},"body":{"index.html":{},"license.html":{}}}],["note",{"_index":3621,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["notes",{"_index":2861,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["nothing",{"_index":67,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{}}}],["notice",{"_index":5248,"title":{},"body":{"index.html":{},"license.html":{}}}],["notify",{"_index":1814,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["now",{"_index":3639,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["npm",{"_index":5154,"title":{},"body":{"index.html":{}}}],["null",{"_index":48,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentRecord.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{}}}],["number",{"_index":190,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["number(value",{"_index":3870,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["numbers",{"_index":199,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["obj",{"_index":23,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxMobileLayoutService.html":{},"dependencies.html":{}}}],["object",{"_index":36,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["object.entries(item.data).foreach(([key",{"_index":3663,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["object.entries(record).foreach(([key",{"_index":3863,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(storage).foreach(([key",{"_index":3866,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["object.entries(this.sortabletablecellrecord()).foreach(([cellname",{"_index":5039,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.keys(categories).length",{"_index":1780,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["object.keys(data",{"_index":2142,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(data).map((key",{"_index":2140,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(data).slice(0",{"_index":2147,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["object.keys(parseddata",{"_index":3576,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.keys(selectors).reduce((previous",{"_index":3914,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["object.keys(value).length",{"_index":3566,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["object.values(group.controls",{"_index":63,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["object.values(this.listeners).foreach",{"_index":3035,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["object.values(this.markers",{"_index":2885,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["object.values(this.rowsformgroup.controls).some",{"_index":4982,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(this.sortabletablecellrecord()).foreach((cell",{"_index":5053,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["object.values(value).every((selected",{"_index":5068,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["objects",{"_index":3824,"title":{},"body":{"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["observable",{"_index":300,"title":{},"body":{"injectables/EffectsService.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"miscellaneous/functions.html":{}}}],["observable.pipe(sharereplay",{"_index":2478,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["observables",{"_index":1688,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxStorageService.html":{},"interfaces/TableCellTemplate.html":{}}}],["observe",{"_index":1226,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["observer",{"_index":3985,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers",{"_index":477,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers.pipe.ts",{"_index":472,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:13",{"_index":3984,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["observers.pipe.ts:8",{"_index":476,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["observers/has",{"_index":471,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["obtaining",{"_index":5230,"title":{},"body":{"index.html":{},"license.html":{}}}],["occurring",{"_index":3822,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["of(event).pipe",{"_index":4145,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["of(mockchannel",{"_index":310,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockprivatechannel",{"_index":311,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(mockvideos",{"_index":312,"title":{},"body":{"injectables/EffectsService.html":{}}}],["of(payload",{"_index":4848,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["of(this.currentlanguage",{"_index":864,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["offer",{"_index":3816,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["offline",{"_index":1907,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["offline'},{'name",{"_index":589,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["offset",{"_index":4355,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["old",{"_index":3859,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["oldvalue",{"_index":3768,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["omit",{"_index":256,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxMobileLayoutBase.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["onblur",{"_index":781,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["once",{"_index":2040,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange",{"_index":1787,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["onchange.bind(this",{"_index":1789,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onchanged",{"_index":4882,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onchanges",{"_index":2716,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["onclose",{"_index":3353,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["onconsent",{"_index":1759,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onconsent.bind(this",{"_index":1786,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["ondestroy",{"_index":396,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["ondestroycomponent",{"_index":2189,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["ondestroyed",{"_index":2199,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["ondestroysubject",{"_index":1920,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["one",{"_index":7,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/ComponentTypeWrapper.html":{},"components/NgxAccordionItemComponent.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["ones",{"_index":762,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["onescape",{"_index":666,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["onfirstconsent",{"_index":1765,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfirstconsent.bind(this",{"_index":1784,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onfocus",{"_index":782,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["oninit",{"_index":1048,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["online",{"_index":1970,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["onlineservice",{"_index":1921,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["onlinesubject",{"_index":3468,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["onlyself",{"_index":468,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["onmodalhide",{"_index":1793,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalhide.bind(this",{"_index":1795,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow",{"_index":1790,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onmodalshow.bind(this",{"_index":1792,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["onpush",{"_index":2004,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["ontouch",{"_index":4881,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["ontouched",{"_index":4989,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["onvisible",{"_index":4347,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["open",{"_index":982,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["open(options",{"_index":3380,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["open/closed",{"_index":1096,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["openaside",{"_index":3167,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["opened",{"_index":1139,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["openedindex",{"_index":4964,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openedrows",{"_index":4894,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["openflyout",{"_index":3168,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["openflyout(flyout",{"_index":3181,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["opening",{"_index":3401,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["openrowstate",{"_index":3963,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{}}}],["openrowstatetemplate",{"_index":4943,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["opens",{"_index":3382,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["operator",{"_index":538,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["operators",{"_index":534,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/StoreEffects.html":{}}}],["opinionated",{"_index":1164,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["opt",{"_index":1673,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["option",{"_index":4910,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["optional",{"_index":12,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":1824,"title":{},"body":{"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["options",{"_index":35,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxStore.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["options.autoclose",{"_index":3420,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.autofocus",{"_index":3444,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.closeonnavigation",{"_index":3454,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.component",{"_index":3405,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.conditionalfunction",{"_index":52,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.controls",{"_index":53,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["options.data",{"_index":3460,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.describedbyid",{"_index":3440,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.direction",{"_index":3447,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.has('when",{"_index":4015,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["options.hasbackdrop",{"_index":3449,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.interface.ts",{"_index":466,"title":{},"body":{"interfaces/FormStateOptionsEntity.html":{}}}],["options.label",{"_index":3438,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.labelledbyid",{"_index":3439,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.panelclass",{"_index":3451,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.restorefocus",{"_index":3443,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.role",{"_index":3436,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.ts",{"_index":149,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{}}}],["options.type",{"_index":3463,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["options.viewcontainerref",{"_index":3445,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["optionsvalue",{"_index":3373,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["order",{"_index":97,"title":{},"body":{"classes/BaseFormAccessor.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["original",{"_index":211,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/TransformPipe.html":{}}}],["original.slice(0",{"_index":213,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["original.slice(index",{"_index":214,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["originx",{"_index":4268,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["originy",{"_index":4269,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["others",{"_index":2658,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["otherwise",{"_index":5270,"title":{},"body":{"index.html":{},"license.html":{}}}],["ouput",{"_index":482,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["out",{"_index":1344,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"index.html":{},"license.html":{}}}],["outcome",{"_index":2001,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["outerhtml",{"_index":3615,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["outline",{"_index":1476,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{}}}],["output",{"_index":350,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["output.observers.length",{"_index":485,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["output['listeners']?.length",{"_index":3987,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["outputemitterref",{"_index":349,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["outputs",{"_index":2731,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["outputtoobservable",{"_index":3394,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.action).pipe(startwith(undefined",{"_index":3410,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outputtoobservable(modal.close).pipe",{"_index":3411,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["outside",{"_index":4297,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["over",{"_index":2477,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["overarching",{"_index":4552,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["overlay",{"_index":4275,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlaypositionbuilder",{"_index":4245,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayref",{"_index":4246,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayservice",{"_index":4247,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayx",{"_index":4270,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["overlayy",{"_index":4271,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["override",{"_index":591,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["overrideconfiguration",{"_index":1922,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["overview",{"_index":5274,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":837,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxModalService.html":{}}}],["overwrites",{"_index":3376,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["overwritten",{"_index":1538,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["p",{"_index":2039,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["package",{"_index":273,"title":{"dependencies.html":{},"properties.html":{}},"body":{"interfaces/ComponentTypeWrapper.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"index.html":{}}}],["packages",{"_index":2765,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"index.html":{}}}],["padding",{"_index":4350,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["page",{"_index":1756,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["pages",{"_index":5179,"title":{},"body":{"index.html":{}}}],["pairs",{"_index":1591,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["pairwise",{"_index":4279,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["panelclass",{"_index":3314,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["paragraph",{"_index":2132,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["param",{"_index":34,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["parameter",{"_index":2399,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parameters",{"_index":193,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["parameters[1",{"_index":1222,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[1]['params",{"_index":1219,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["parameters[2",{"_index":1235,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["params",{"_index":40,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["parent",{"_index":483,"title":{},"body":{"pipes/HasObserversPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["parent.appendchild(element",{"_index":897,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parent.contains(element",{"_index":3283,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["parent.setattribute('aria",{"_index":898,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["parentelement",{"_index":2018,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.getattribute('aria",{"_index":2025,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parentelement.setattribute('aria",{"_index":2022,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["parse",{"_index":3651,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{}}}],["parsed",{"_index":3821,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parseddata",{"_index":3573,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["parser",{"_index":3654,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parser.parsefromstring(value",{"_index":3655,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["parses",{"_index":3797,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue",{"_index":3783,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["parsevalue(value",{"_index":3795,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["part",{"_index":238,"title":{},"body":{"interfaces/ComponentRecord.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["partial",{"_index":169,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxDisplayContentConfiguration.html":{}}}],["particular",{"_index":5259,"title":{},"body":{"index.html":{},"license.html":{}}}],["particularly",{"_index":4604,"title":{},"body":{"classes/NgxValidators.html":{}}}],["parts",{"_index":3604,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["pass",{"_index":102,"title":{},"body":{"classes/BaseFormAccessor.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passed",{"_index":377,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["passes",{"_index":844,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["patch",{"_index":1176,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["patch(url",{"_index":1200,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["patched",{"_index":4973,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["patchvalue(true",{"_index":5046,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["path",{"_index":1651,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"pipes/NgxTableGetPipe.html":{}}}],["paths",{"_index":2446,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["path}${lang}.json",{"_index":2529,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["pattern",{"_index":976,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["payload",{"_index":138,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["perform",{"_index":1085,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxMediaQueryService.html":{}}}],["performance",{"_index":4010,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["permission",{"_index":1268,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"index.html":{},"license.html":{}}}],["permission(s",{"_index":2354,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permission.directive.ts",{"_index":2334,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:103",{"_index":2346,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:110",{"_index":2347,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:167",{"_index":2345,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:30",{"_index":2359,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:31",{"_index":2348,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:34",{"_index":2349,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:39",{"_index":2350,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:44",{"_index":2357,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:45",{"_index":2358,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:46",{"_index":2351,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:47",{"_index":2352,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:52",{"_index":2353,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:57",{"_index":2356,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:62",{"_index":2355,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:67",{"_index":2342,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:72",{"_index":2343,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:77",{"_index":2344,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.directive.ts:82",{"_index":2341,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permission.pipe.ts",{"_index":2370,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:18",{"_index":2376,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:19",{"_index":2377,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:24",{"_index":2379,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:28",{"_index":2380,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:33",{"_index":2378,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:42",{"_index":2372,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:55",{"_index":2375,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:68",{"_index":2373,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission.pipe.ts:92",{"_index":2371,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["permission/has",{"_index":2333,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permissions",{"_index":1266,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["permissions(s",{"_index":2335,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["permissiontype",{"_index":1269,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{}}}],["permit",{"_index":5245,"title":{},"body":{"index.html":{},"license.html":{}}}],["person",{"_index":5229,"title":{},"body":{"index.html":{},"license.html":{}}}],["persons",{"_index":5246,"title":{},"body":{"index.html":{},"license.html":{}}}],["pipe",{"_index":174,"title":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["pipe(filter((languages",{"_index":2584,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["pipe(switchmap",{"_index":4814,"title":{},"body":{"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["pipe(usemockdataduringtour('world",{"_index":523,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["pipe,pipetransform,outputemitterref",{"_index":3986,"title":{},"body":{"pipes/NgxTableHasObserversPipe.html":{}}}],["pipe/get.pipe",{"_index":1891,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipe/get.pipe.ts",{"_index":3973,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipe/get.pipe.ts:16",{"_index":3974,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["pipes",{"_index":176,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"overview.html":{}}}],["pipes/get",{"_index":1890,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["pipetransform",{"_index":204,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["placed",{"_index":924,"title":{},"body":{"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["platform",{"_index":4687,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platform_id",{"_index":4734,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platformid",{"_index":4674,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["platforms",{"_index":4712,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["played",{"_index":4072,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["please",{"_index":823,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourStepComponent.html":{},"index.html":{}}}],["polite",{"_index":1909,"title":{},"body":{"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["portal",{"_index":4314,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["portions",{"_index":5251,"title":{},"body":{"index.html":{},"license.html":{}}}],["position",{"_index":659,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{}}}],["positionclass",{"_index":4176,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["positionrecord",{"_index":4248,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["positionstrategy",{"_index":4309,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["possible",{"_index":251,"title":{},"body":{"interfaces/ComponentRecord.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxMobileLayoutBase.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["post",{"_index":1177,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["post(url",{"_index":1203,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["postmessage",{"_index":1411,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["postmessage(channelname",{"_index":1424,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["pr",{"_index":5203,"title":{},"body":{"index.html":{}}}],["practices",{"_index":726,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["practices#selecting",{"_index":728,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["precedence",{"_index":3320,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["preconditions",{"_index":3385,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["preference",{"_index":1779,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["preferences",{"_index":1748,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["prepend",{"_index":3753,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["present",{"_index":1331,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["presented",{"_index":1586,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["preserve",{"_index":3721,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["preserved",{"_index":2016,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["pressed",{"_index":387,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxModalAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["prevent",{"_index":1137,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["prevented",{"_index":3695,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["previous",{"_index":2555,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["previous.active",{"_index":4298,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.id",{"_index":4292,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previous.source",{"_index":4295,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["previouscontainer",{"_index":918,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previousindex",{"_index":916,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["previously",{"_index":3330,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["previousvalue",{"_index":4898,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["primary",{"_index":1469,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["priority",{"_index":1467,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxToastService.html":{}}}],["private",{"_index":399,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["proceed",{"_index":3344,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["programmatically",{"_index":4526,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["project",{"_index":3352,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["projects",{"_index":5184,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1669,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["proof",{"_index":3776,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["prop",{"_index":3659,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["properties",{"_index":11,"title":{"properties.html":{}},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/ComponentRecord.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"properties.html":{}}}],["property",{"_index":136,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"pipes/HasObserversPipe.html":{},"directives/NgxDisplayContentComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["proposed",{"_index":2575,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["props",{"_index":3757,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["protected",{"_index":397,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["provide",{"_index":287,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["provided",{"_index":409,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["providedin",{"_index":1213,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["providengxreplaceelementsconfiguration",{"_index":3627,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["provider",{"_index":274,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["providers",{"_index":282,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/FormAccessorContainer.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["providers.util.ts",{"_index":262,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["providers/accessor",{"_index":261,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["provides",{"_index":365,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{},"index.html":{}}}],["providing",{"_index":1167,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"index.html":{}}}],["public",{"_index":184,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{}}}],["publish",{"_index":5239,"title":{},"body":{"index.html":{},"license.html":{}}}],["pure",{"_index":2295,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["purpose",{"_index":5260,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposes",{"_index":1598,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["put",{"_index":1178,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["put(url",{"_index":1205,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["queries",{"_index":3014,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["query",{"_index":2406,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["query(s",{"_index":2959,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.directive.ts",{"_index":2982,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:151",{"_index":2991,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:27",{"_index":2998,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:31",{"_index":2999,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:35",{"_index":3002,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:40",{"_index":2994,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:45",{"_index":2995,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:50",{"_index":3000,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:51",{"_index":3001,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:52",{"_index":2996,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:53",{"_index":2997,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:58",{"_index":2989,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:63",{"_index":2990,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:68",{"_index":2988,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:90",{"_index":2992,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.directive.ts:97",{"_index":2993,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["query.pipe.ts",{"_index":2958,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:14",{"_index":2974,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:15",{"_index":2967,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:20",{"_index":2969,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:24",{"_index":2970,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:29",{"_index":2968,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:38",{"_index":2963,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:51",{"_index":2966,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:62",{"_index":2964,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.pipe.ts:86",{"_index":2961,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query.removeeventlistener('change",{"_index":3111,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query.service",{"_index":3212,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["query.service.ts",{"_index":3012,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:106",{"_index":3020,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:16",{"_index":3030,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:21",{"_index":3029,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:28",{"_index":3027,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:34",{"_index":3025,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:38",{"_index":3018,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:45",{"_index":3021,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.service.ts:57",{"_index":3023,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["query.types.ts",{"_index":2979,"title":{},"body":{"interfaces/NgxMediaQuery.html":{}}}],["query/matches",{"_index":2957,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["query/media",{"_index":2981,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{}}}],["query/mediaquery.service.ts",{"_index":3059,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:102",{"_index":3071,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:121",{"_index":3075,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:13",{"_index":3085,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:18",{"_index":3084,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:23",{"_index":3083,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:29",{"_index":3080,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:37",{"_index":3082,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["query/mediaquery.service.ts:44",{"_index":3078,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent",{"_index":3045,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent.currenttarget",{"_index":3100,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querychangedevent.matches",{"_index":3047,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["querychangedsubject",{"_index":3066,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryid",{"_index":3107,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryidmap",{"_index":3067,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["querylist",{"_index":4928,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["querylistmap",{"_index":3068,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["queryparam",{"_index":3511,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparams",{"_index":3481,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamshandling",{"_index":3578,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queryparamstype",{"_index":3492,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["queue",{"_index":4100,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["queue.findindex",{"_index":4149,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["queue.slice(index",{"_index":4151,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["quick",{"_index":5172,"title":{},"body":{"index.html":{}}}],["radio",{"_index":3961,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["radiocontrol",{"_index":4912,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["radiotemplate",{"_index":4939,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["random",{"_index":3532,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["range",{"_index":4627,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range.validator",{"_index":4654,"title":{},"body":{"classes/NgxValidators.html":{}}}],["range/date",{"_index":4653,"title":{},"body":{"classes/NgxValidators.html":{}}}],["reached",{"_index":4158,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["reactiveformsmodule",{"_index":4869,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["read",{"_index":3724,"title":{},"body":{"injectables/NgxSignalStoreService.html":{}}}],["readme",{"_index":177,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"pipes/TransformPipe.html":{}}}],["readme’s",{"_index":5188,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":331,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["ready",{"_index":2307,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["real",{"_index":3825,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["really",{"_index":1809,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["reason",{"_index":1134,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["receive",{"_index":3979,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["record",{"_index":820,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"injectables/NgxI18nLoadingService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxTooltipService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["record[key",{"_index":3850,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key].asobservable",{"_index":3851,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["record[key]?.next(undefined",{"_index":3861,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["records",{"_index":5018,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["recreate",{"_index":2777,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["redirect",{"_index":1274,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reduce",{"_index":3562,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reduce((previous",{"_index":2554,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reducers",{"_index":130,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["reducers.ts",{"_index":160,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["redux",{"_index":5169,"title":{},"body":{"index.html":{}}}],["ref",{"_index":2068,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["refer",{"_index":2598,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["reference",{"_index":1601,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["refers",{"_index":3640,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["reformat",{"_index":499,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["reformat.trim",{"_index":505,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["regarding",{"_index":5198,"title":{},"body":{"index.html":{}}}],["regardless",{"_index":1097,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["region",{"_index":829,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{}}}],["register",{"_index":1000,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["registercell",{"_index":4559,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registercell(index",{"_index":4573,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerdraganddropitem",{"_index":941,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registerdraganddropitem(item",{"_index":949,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["registered",{"_index":1007,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxTreeGridDirective.html":{}}}],["registeritem",{"_index":984,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registeritem(item",{"_index":998,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["registermediaqueries",{"_index":3069,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["registermediaqueries(...queries",{"_index":3077,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["registeronchange(fn",{"_index":4986,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerontouched(fn",{"_index":4990,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["registerquery",{"_index":3017,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registerquery(value",{"_index":3022,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["registerrow",{"_index":4560,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registerrow(row",{"_index":4575,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["registers",{"_index":3024,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["regular",{"_index":1474,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["related",{"_index":4715,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["relating",{"_index":5158,"title":{},"body":{"index.html":{}}}],["relativeto",{"_index":3572,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["reload",{"_index":2681,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["remaining",{"_index":1278,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{}}}],["remove",{"_index":506,"title":{},"body":{"pipes/IbanPipe.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["removecookie",{"_index":1705,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removecookie(cookie",{"_index":1727,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["removed",{"_index":4055,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["removefocus",{"_index":783,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["removeitem",{"_index":985,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["removeitem(item",{"_index":1001,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["removeitem(key",{"_index":3798,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["removeonblur",{"_index":4211,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["removeonmouseout",{"_index":4177,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["removerow",{"_index":4561,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removerow(index",{"_index":4577,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["removes",{"_index":1003,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTreeGridDirective.html":{}}}],["removetoast",{"_index":4104,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["removetoast(toast",{"_index":4109,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["removetooltip",{"_index":4212,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["removing",{"_index":2884,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["render",{"_index":236,"title":{},"body":{"interfaces/ComponentRecord.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["rendered",{"_index":1592,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{}}}],["renderelsetemplate",{"_index":2161,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["renderer",{"_index":1058,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["renderer2",{"_index":1113,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["rendering",{"_index":1776,"title":{},"body":{"injectables/NgxCookieService.html":{},"interfaces/TableCellTemplate.html":{}}}],["renderinitialtemplate",{"_index":1924,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renders",{"_index":1931,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["rendertemplate",{"_index":1925,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["rendertemplate(status",{"_index":1937,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["renderthentemplate",{"_index":2162,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["reordered",{"_index":884,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["repeat(${longestrow",{"_index":1643,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["replace",{"_index":497,"title":{},"body":{"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["replace(`{{#from",{"_index":885,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replace(`{{#to",{"_index":886,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["replacement",{"_index":3660,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.innerhtml",{"_index":3665,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replacement.setattribute(key",{"_index":3664,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaces",{"_index":352,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["replacing",{"_index":3634,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["replaysubject",{"_index":3081,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["repo",{"_index":5147,"title":{},"body":{"index.html":{}}}],["reposition",{"_index":4304,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["repository",{"_index":5191,"title":{},"body":{"index.html":{}}}],["represent",{"_index":720,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["represented",{"_index":3818,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["represents",{"_index":1844,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["request",{"_index":1186,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"miscellaneous/functions.html":{}}}],["requested",{"_index":2550,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["requestedtranslations",{"_index":2519,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["requests",{"_index":2400,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["require",{"_index":2879,"title":{},"body":{"injectables/NgxImageMarkerService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["requireatleastone",{"_index":3968,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["required",{"_index":72,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["required.validator",{"_index":4648,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required.validator.ts",{"_index":9,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["required/all",{"_index":4647,"title":{},"body":{"classes/NgxValidators.html":{}}}],["required/at",{"_index":8,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["required/depended",{"_index":4659,"title":{},"body":{"classes/NgxValidators.html":{}}}],["requiredfeatures",{"_index":1324,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.every((feature",{"_index":1383,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredfeatures.some((feature",{"_index":1385,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions",{"_index":1327,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.every((permission",{"_index":1391,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requiredpermissions.some((permission",{"_index":1393,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["requirements.ts",{"_index":3967,"title":{},"body":{"interfaces/NgxTableCypressDataTagsBase.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{}}}],["requires",{"_index":3340,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["rerender",{"_index":5095,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["res.status",{"_index":2541,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["reset",{"_index":2309,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/TableCellTemplate.html":{}}}],["resetformonnewdata",{"_index":4954,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resetngxtableform",{"_index":4873,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["resets",{"_index":736,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{}}}],["resetsortdirection",{"_index":717,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["resize",{"_index":4744,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["resolve",{"_index":2674,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resolver",{"_index":2667,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["resources",{"_index":2540,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["respective",{"_index":5187,"title":{},"body":{"index.html":{}}}],["respectively",{"_index":3827,"title":{},"body":{"injectables/NgxStorageService.html":{},"index.html":{}}}],["respond",{"_index":3266,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["response",{"_index":1227,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{}}}],["response.body",{"_index":1232,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.headers.get('content",{"_index":1230,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["response.user",{"_index":1366,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["responsetype",{"_index":1224,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["rest",{"_index":1808,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["restore",{"_index":3329,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restorefocus",{"_index":3333,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["restriction",{"_index":5234,"title":{},"body":{"index.html":{},"license.html":{}}}],["result",{"_index":868,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{},"pipes/TransformPipe.html":{}}}],["result.length",{"_index":2463,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["result.replace",{"_index":874,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["result.slice(0",{"_index":4135,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["results",{"_index":88,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["resulttype",{"_index":3884,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['actions",{"_index":3890,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["resulttype[key]['selectors",{"_index":3887,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["return",{"_index":44,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["returned",{"_index":3978,"title":{},"body":{"pipes/NgxTableGetPipe.html":{}}}],["returning",{"_index":3670,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["returns",{"_index":196,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/EffectsService.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":4690,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["reunes",{"_index":5217,"title":{},"body":{"index.html":{}}}],["revision",{"_index":1675,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["right",{"_index":242,"title":{},"body":{"interfaces/ComponentRecord.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["rights",{"_index":5237,"title":{},"body":{"index.html":{},"license.html":{}}}],["role",{"_index":1014,"title":{},"body":{"components/NgxAccordionComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridDirective.html":{}}}],["root",{"_index":1214,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["rootclass",{"_index":660,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["rooti18nservice",{"_index":2625,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["roottarget",{"_index":2805,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["route",{"_index":1259,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["route.types.ts",{"_index":1255,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["router",{"_index":3482,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["routermodule",{"_index":3122,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["routeroutlet",{"_index":3131,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["routerstatesnapshot",{"_index":3683,"title":{},"body":{"classes/NgxSaveOnExitAbstractService.html":{}}}],["routes",{"_index":1256,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{}}}],["routing",{"_index":3153,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["row",{"_index":1636,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["row)?.focus",{"_index":4540,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["row.directive",{"_index":4524,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["rowclass",{"_index":4956,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rowclicked",{"_index":3953,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowitem",{"_index":1873,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rowkey",{"_index":1871,"title":{},"body":{"components/NgxDateTableCellComponent.html":{}}}],["rows",{"_index":3946,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["rowsformgroup",{"_index":4900,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["rtl",{"_index":1666,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["run",{"_index":1242,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["runariachecks",{"_index":3366,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runariachecks(options",{"_index":3383,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["runinbrowser",{"_index":4681,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["runinbrowser(action",{"_index":4688,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["running",{"_index":2301,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxModalService.html":{}}}],["rxjs",{"_index":304,"title":{},"body":{"injectables/EffectsService.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"dependencies.html":{},"index.html":{}}}],["rxjs/operators",{"_index":2469,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["sadly",{"_index":166,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["safe",{"_index":4671,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["safehtml",{"_index":3598,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["safely",{"_index":4289,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["same",{"_index":2027,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["samesite",{"_index":1652,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["sanitize",{"_index":3668,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["sanitizer",{"_index":3601,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["save",{"_index":2608,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"injectables/NgxStorageService.html":{}}}],["saved",{"_index":3086,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["saves",{"_index":2507,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{}}}],["saving",{"_index":3820,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["scan",{"_index":2467,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scan((actions",{"_index":2456,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["scramble",{"_index":3501,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambled",{"_index":3526,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams",{"_index":3486,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(params",{"_index":3499,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams(value",{"_index":3543,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambleparams?(params",{"_index":3580,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler",{"_index":3530,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambler(value.sorting",{"_index":3544,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["scrambling",{"_index":3551,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["screen",{"_index":2983,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["scroll",{"_index":4303,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollingup",{"_index":4675,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollingupsubject",{"_index":4676,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrolls",{"_index":4305,"title":{},"body":{"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{}}}],["scrollstrategy",{"_index":4307,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["scrollto",{"_index":4682,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollto(offset",{"_index":4691,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["scrollup",{"_index":4751,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["se",{"_index":4662,"title":{},"body":{"classes/NgxValidators.html":{}}}],["searches",{"_index":4502,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["searchquery",{"_index":3533,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["second",{"_index":1999,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["secondary",{"_index":1470,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["seconds",{"_index":4163,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["see",{"_index":38,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["seen",{"_index":697,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["select",{"_index":98,"title":{},"body":{"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"injectables/NgxBroadcastChannelService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectable",{"_index":4902,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectablekey",{"_index":4949,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectabletype",{"_index":4950,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectall",{"_index":319,"title":{},"body":{"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectchannelmessageerrors",{"_index":1412,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessageerrors(channelname",{"_index":1429,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages",{"_index":1413,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selectchannelmessages(channelname",{"_index":1434,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["selected",{"_index":792,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["selectedrow",{"_index":4922,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selecterror",{"_index":142,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrorfromstore",{"_index":3893,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrorfromstore(selector",{"_index":3899,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessage",{"_index":143,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selecterrormessagefromstore",{"_index":3894,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selecterrormessagefromstore(selector",{"_index":3901,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore",{"_index":3895,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectfromstore(selector",{"_index":3903,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectid",{"_index":156,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selection",{"_index":5069,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["selectloading",{"_index":141,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["selectloadingfromstore",{"_index":3896,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selectloadingfromstore(selector",{"_index":3906,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["selector",{"_index":329,"title":{},"body":{"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["selector.selectall",{"_index":3924,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterror",{"_index":3928,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selecterrormessage",{"_index":3930,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selector.selectloading",{"_index":3926,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["selectors",{"_index":131,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["selectors.channel",{"_index":4790,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.subscribercount",{"_index":4801,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectors.videos",{"_index":4803,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["selectrow(index",{"_index":5043,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sell",{"_index":5243,"title":{},"body":{"index.html":{},"license.html":{}}}],["send",{"_index":1189,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["sending",{"_index":3529,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sends",{"_index":1427,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["separately",{"_index":3099,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["series",{"_index":2445,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["server",{"_index":1774,"title":{},"body":{"injectables/NgxCookieService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["serves",{"_index":2797,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["service",{"_index":808,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxWindowService.html":{}}}],["service.abstract.ts",{"_index":2386,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.abstract.ts:9",{"_index":2387,"title":{},"body":{"classes/NgxI18nAbstractService.html":{}}}],["service.ts",{"_index":4767,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:14",{"_index":4791,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:17",{"_index":4797,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:20",{"_index":4793,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:23",{"_index":4795,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:27",{"_index":4804,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:30",{"_index":4808,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:33",{"_index":4806,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:34",{"_index":4807,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:37",{"_index":4802,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:40",{"_index":4799,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:42",{"_index":4800,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:44",{"_index":4782,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:52",{"_index":4778,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:56",{"_index":4784,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:65",{"_index":4779,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:69",{"_index":4780,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service.ts:73",{"_index":4781,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["service/online.service.ts",{"_index":3467,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:10",{"_index":3474,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:15",{"_index":3473,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:20",{"_index":3471,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:25",{"_index":3469,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/online.service.ts:51",{"_index":3470,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["service/storage.service.ts",{"_index":3775,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:122",{"_index":3801,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:175",{"_index":3799,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:20",{"_index":3810,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:214",{"_index":3788,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:25",{"_index":3806,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:254",{"_index":3803,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:265",{"_index":3796,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:29",{"_index":3805,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:33",{"_index":3809,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:38",{"_index":3808,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:39",{"_index":3786,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:54",{"_index":3812,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:70",{"_index":3814,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:83",{"_index":3792,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["service/storage.service.ts:93",{"_index":3794,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["services",{"_index":536,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxStore.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["session",{"_index":1299,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["sessionfeatures",{"_index":1376,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionfeatures.has(`${feature",{"_index":1384,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions",{"_index":1389,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionpermissions.has(permission",{"_index":1392,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sessionstorage",{"_index":3785,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sessionstoragerecord",{"_index":3779,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["set",{"_index":137,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"interfaces/TableCellTemplate.html":{}}}],["set([...(features",{"_index":1377,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set([...permissions",{"_index":1390,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["set(hideheaderrowwhen",{"_index":4011,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["set(ids",{"_index":3054,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["set(object.keys(cleanedformvalue",{"_index":62,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setactive",{"_index":4374,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setactive(isactive",{"_index":4380,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["setariabusytag",{"_index":1926,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setariabusytag(isloading",{"_index":1940,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag",{"_index":1927,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setarialivetag(value",{"_index":1944,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["setavailablelanguages",{"_index":2570,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setavailablelanguages(languages",{"_index":2579,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcompleted",{"_index":4854,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setcompleted(payload",{"_index":4851,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setcookie",{"_index":1706,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcookie(cookie",{"_index":1729,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setcurrentlanguage",{"_index":2571,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setcurrentlanguage(language",{"_index":2581,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["setdata",{"_index":4855,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["setdata(payload",{"_index":4846,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["setdatainroute",{"_index":3487,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdatainroute(data",{"_index":3503,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["setdisabledstate?(isdisabled",{"_index":4993,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["setdraganddropdescription",{"_index":816,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(parent",{"_index":830,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setdraganddropdescription(this.elementref.nativeelement",{"_index":969,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["seterror",{"_index":3751,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["setfocus",{"_index":784,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["setfocus(hasfocus",{"_index":1092,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["setformerror",{"_index":25,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(control",{"_index":71,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setformerror(group.get(key",{"_index":85,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["setglobalfeatures",{"_index":1293,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setglobalfeatures(features",{"_index":1328,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["setitem",{"_index":3763,"title":{},"body":{"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["setitem(key",{"_index":3800,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setlanguage",{"_index":2626,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["setlayout",{"_index":3169,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setlayout(layout",{"_index":3183,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setloading",{"_index":3752,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["setmessage",{"_index":817,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["setmessage(message",{"_index":838,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["sets",{"_index":742,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["setsortdirection",{"_index":718,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["setsortdirection(direction",{"_index":739,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{}}}],["settimeout",{"_index":1017,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["setting",{"_index":2038,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["settings",{"_index":1737,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["settooltipevent",{"_index":4250,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["settooltipevent(event",{"_index":4254,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["setup",{"_index":54,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAbstractTableCellDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{}}}],["setupcookieshandler",{"_index":1707,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupcookieshandler(categories",{"_index":1732,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["setupinitiallayout",{"_index":3170,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setupinitiallayout(markasinitial",{"_index":3185,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["setupstorage",{"_index":3784,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setupstorage(storage",{"_index":3802,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["setwitherror",{"_index":4843,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["several",{"_index":4714,"title":{},"body":{"injectables/NgxWindowService.html":{},"index.html":{}}}],["shall",{"_index":5249,"title":{},"body":{"index.html":{},"license.html":{}}}],["share",{"_index":2764,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shared",{"_index":2190,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sharereplay",{"_index":2468,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["shouldbeauthenticated",{"_index":1272,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxIsAuthenticatedDirective.html":{}}}],["shouldhaveallfeatures",{"_index":1265,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasFeatureDirective.html":{}}}],["shouldhaveallpermissions",{"_index":1270,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["shouldhavefeature",{"_index":2231,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["shouldhavepermission",{"_index":2340,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["shouldn't",{"_index":3502,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["shouldrender",{"_index":2270,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["shouldshow",{"_index":2061,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["show",{"_index":1529,"title":{},"body":{"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showaside",{"_index":3160,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["showbundled",{"_index":4060,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"injectables/NgxToastService.html":{}}}],["showbundledtoasts",{"_index":4101,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showdetailrow",{"_index":3944,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showdetailrowoption",{"_index":3958,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showed",{"_index":4008,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["showflyout",{"_index":3161,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["showinactive",{"_index":1607,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["showing",{"_index":4343,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["showmodal",{"_index":1708,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["shown",{"_index":1481,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["showonfocus",{"_index":4213,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["showonmouseenter",{"_index":4178,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{}}}],["showopenrowstate",{"_index":3948,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["shows",{"_index":4063,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"injectables/NgxToastService.html":{}}}],["showselectedopenrow",{"_index":3951,"title":{},"body":{"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["showtoast",{"_index":4105,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showtoast(data",{"_index":4113,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["showtooltip",{"_index":4214,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["showtooltip(tooltip",{"_index":4257,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["showwhen",{"_index":2037,"title":{},"body":{"interfaces/NgxFormsErrorConfigurationOptions.html":{}}}],["side",{"_index":1775,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["sign",{"_index":1338,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signal",{"_index":699,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["signal(false",{"_index":1105,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/TableCellTemplate.html":{}}}],["signalstorefeature",{"_index":3731,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["signed",{"_index":1316,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signin",{"_index":1294,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signin(signindata",{"_index":1332,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindata",{"_index":1337,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signindatatype",{"_index":1333,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signing",{"_index":1362,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser",{"_index":1295,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signinuser(signindata",{"_index":1339,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout",{"_index":1296,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signout(signoutdatatype",{"_index":1341,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutdatatype",{"_index":1342,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutresponsetype",{"_index":1361,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser",{"_index":1297,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signoutuser(signoutdatatype",{"_index":1346,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["signs",{"_index":1335,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["similar",{"_index":265,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["simplechangehaschanged",{"_index":2762,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.canedit",{"_index":2773,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.currentzoomlevel",{"_index":2775,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.markertypes",{"_index":2774,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.startstate",{"_index":2772,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simplechangehaschanged(changes.zoomlevels",{"_index":2776,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["simply",{"_index":3570,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["single",{"_index":2144,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/TableCellTemplate.html":{}}}],["situations",{"_index":3527,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxValidators.html":{}}}],["size",{"_index":1630,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{}}}],["size.pipe.ts",{"_index":1621,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size.pipe.ts:17",{"_index":1625,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["size/item",{"_index":1620,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["slice",{"_index":151,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["slice(0",{"_index":2146,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["slicekey",{"_index":3879,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["slices",{"_index":3750,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["software",{"_index":5231,"title":{},"body":{"index.html":{},"license.html":{}}}],["something",{"_index":2479,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxWindowService.html":{}}}],["somethinghappened",{"_index":4729,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["somethinghascompleted",{"_index":478,"title":{},"body":{"pipes/HasObserversPipe.html":{}}}],["sometimes",{"_index":3525,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["someuniqueid",{"_index":3637,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["somewhere",{"_index":4920,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sort",{"_index":713,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["sort.pipe.ts",{"_index":1150,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort.pipe.ts:12",{"_index":1152,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sort/aria",{"_index":1149,"title":{},"body":{"pipes/NgxAriaSortPipe.html":{}}}],["sortable",{"_index":714,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sortableinput",{"_index":5025,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortabletablecellrecord",{"_index":4890,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sortdirection",{"_index":715,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorted",{"_index":4946,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["sorting",{"_index":734,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["sorttemplate",{"_index":4941,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/BaseFormAccessor.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"interfaces/ComponentTypeWrapper.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{}}}],["sources",{"_index":4293,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["space",{"_index":504,"title":{},"body":{"pipes/IbanPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["spaces",{"_index":498,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["span",{"_index":1465,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["specific",{"_index":75,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["specifically",{"_index":3419,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["specstoreassets",{"_index":4755,"title":{"interfaces/SpecStoreAssets.html":{}},"body":{"interfaces/SpecStoreAssets.html":{}}}],["specstoreservice",{"_index":4766,"title":{"injectables/SpecStoreService.html":{}},"body":{"injectables/SpecStoreService.html":{}}}],["ssr",{"_index":3622,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["standalone",{"_index":182,"title":{},"body":{"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCypressTagDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["standard",{"_index":3033,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["start",{"_index":2697,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxTooltipService.html":{},"classes/NgxValidators.html":{},"index.html":{}}}],["startcontrolkey",{"_index":4618,"title":{},"body":{"classes/NgxValidators.html":{}}}],["started",{"_index":5144,"title":{"index.html":{},"license.html":{}},"body":{}}],["started.html",{"_index":1736,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startstate",{"_index":2726,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["starttour",{"_index":519,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["startwith",{"_index":1772,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{}}}],["startwith(cookieconsent.getcookie('data",{"_index":1806,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["startwith(undefined",{"_index":3413,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["state",{"_index":422,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"interfaces/NgxTableConfiguration.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["state.service.ts",{"_index":4838,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["state.service.ts:31",{"_index":4856,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:36",{"_index":4859,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:44",{"_index":4858,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["state.service.ts:50",{"_index":4857,"title":{},"body":{"injectables/StoreStateService.html":{}}}],["stateinterface",{"_index":115,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{}}}],["states",{"_index":1486,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["statetype",{"_index":3742,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["stateupdated",{"_index":2727,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["statewrapper",{"_index":3892,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["static",{"_index":1616,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"classes/NgxValidators.html":{}}}],["status",{"_index":1312,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxOnlineService.html":{}}}],["stay",{"_index":3522,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["step",{"_index":551,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["step(card",{"_index":4367,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["step.component.mock.ts",{"_index":654,"title":{},"body":{"components/MockTourStepComponent.html":{}}}],["step.component.ts",{"_index":4423,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:103",{"_index":4439,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:105",{"_index":4435,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:112",{"_index":4434,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:33",{"_index":4440,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:38",{"_index":4433,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:45",{"_index":4432,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:53",{"_index":4429,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:58",{"_index":4438,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:63",{"_index":4437,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:68",{"_index":4431,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:73",{"_index":4426,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:78",{"_index":4427,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:83",{"_index":4425,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:88",{"_index":4428,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:93",{"_index":4430,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step.component.ts:98",{"_index":4436,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["step/tour",{"_index":4422,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["stepclass",{"_index":661,"title":{},"body":{"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["steps",{"_index":673,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["steptitle",{"_index":4449,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["still",{"_index":3398,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["stop",{"_index":4527,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["stopped",{"_index":1572,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["storage",{"_index":2578,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{}}}],["storage.clear",{"_index":3862,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.removeitem(key",{"_index":3860,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage.setitem(key",{"_index":3855,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storage[key",{"_index":3853,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageevents",{"_index":3780,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageeventsubject",{"_index":3781,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice",{"_index":3832,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.localstorage.setitem('hello",{"_index":3833,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.sessionstorage.setitem('hello",{"_index":3834,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["storageservice.storageevent$.subscribe(console.log",{"_index":3835,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["store",{"_index":305,"title":{},"body":{"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["store.spec",{"_index":309,"title":{},"body":{"injectables/EffectsService.html":{}}}],["store.ts",{"_index":112,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{}}}],["store.types.ts",{"_index":3730,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["storeassetsoptions",{"_index":3880,"title":{"interfaces/StoreAssetsOptions.html":{}},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["storeauthenticationresponse",{"_index":1298,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeauthenticationresponse(response",{"_index":1348,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["stored",{"_index":1345,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeeffects",{"_index":4822,"title":{"injectables/StoreEffects.html":{}},"body":{"injectables/StoreEffects.html":{}}}],["storeflowassets",{"_index":3883,"title":{},"body":{"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["storeitem",{"_index":3905,"title":{},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{}}}],["stores",{"_index":1336,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["storeservice",{"_index":3538,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["storeslice",{"_index":4763,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["storestate",{"_index":3908,"title":{"interfaces/StoreState.html":{}},"body":{"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["storestateservice",{"_index":4841,"title":{"injectables/StoreStateService.html":{}},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["strategy",{"_index":4042,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["streams",{"_index":3105,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["stress",{"_index":3642,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["strict",{"_index":1655,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["string",{"_index":152,"title":{},"body":{"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxLinkConfiguration.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"pipes/NgxTableSortIconPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"classes/NgxValidators.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["string(date.now",{"_index":2411,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["stringifiedqueryparamstype",{"_index":3547,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["stringify",{"_index":3575,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["strings",{"_index":1379,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["stringtype",{"_index":3301,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["string}{{#from}}${string}{{#item}}${string}{{#to}}${string",{"_index":911,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#from}}${string}{{#to}}${string}{{#item}}${string",{"_index":912,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string",{"_index":913,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#from}}${string}{{#to}}${string",{"_index":908,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#item}}${string}{{#to}}${string}{{#from}}${string",{"_index":907,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#from}}${string}{{#item}}${string",{"_index":910,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{#to}}${string}{{#item}}${string}{{#from}}${string",{"_index":909,"title":{},"body":{"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{}}}],["string}{{id}}${string",{"_index":3587,"title":{},"body":{"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{}}}],["structural",{"_index":2152,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["studio",{"_index":5223,"title":{},"body":{"index.html":{},"license.html":{}}}],["styleurl",{"_index":1052,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["styleurls",{"_index":4876,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["styling",{"_index":1626,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["sub",{"_index":3875,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["subject",{"_index":442,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{},"license.html":{}}}],["subject.complete",{"_index":3865,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.getvalue",{"_index":3854,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(item",{"_index":3857,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subject.next(undefined",{"_index":3864,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["subjects",{"_index":3790,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["sublicense",{"_index":5241,"title":{},"body":{"index.html":{},"license.html":{}}}],["subscribe",{"_index":543,"title":{},"body":{"components/MockTourHolderComponent.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscribe(observable",{"_index":2278,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["subscribed",{"_index":3063,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["subscribercount",{"_index":4758,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["subscribes",{"_index":484,"title":{},"body":{"pipes/HasObserversPipe.html":{},"injectables/NgxBroadcastChannelService.html":{}}}],["subscription",{"_index":2167,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["subscriptions",{"_index":2302,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMediaQueryService-1.html":{}}}],["subsequent",{"_index":416,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["subslice",{"_index":3881,"title":{},"body":{"interfaces/NgxStore.html":{},"interfaces/SpecStoreAssets.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["substantial",{"_index":5250,"title":{},"body":{"index.html":{},"license.html":{}}}],["substrings",{"_index":871,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["succeeded",{"_index":503,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["such",{"_index":2524,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["summary",{"_index":1083,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["summaryelement",{"_index":1059,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["super(route",{"_index":3540,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["super(selectors",{"_index":4842,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["sure",{"_index":2662,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["survey.component.html",{"_index":3535,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["switch",{"_index":761,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["switchmap",{"_index":1359,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["switchmap((isauthenticated",{"_index":1395,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["sync",{"_index":3518,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts",{"_index":3480,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:100",{"_index":3497,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:110",{"_index":3489,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:119",{"_index":3504,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:152",{"_index":3495,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:161",{"_index":3493,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:168",{"_index":3500,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:17",{"_index":3515,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:174",{"_index":3507,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:18",{"_index":3517,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:20",{"_index":3509,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:25",{"_index":3510,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:30",{"_index":3513,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync.component.abstract.ts:33",{"_index":3498,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["sync/query",{"_index":3479,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["system",{"_index":2390,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["tab",{"_index":3707,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["tabindex",{"_index":361,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxTooltipDirective.html":{}}}],["table",{"_index":564,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["table'},{'name",{"_index":577,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["table.component.html",{"_index":4875,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.scss",{"_index":4877,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["table.component.ts",{"_index":4862,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplate",{"_index":4860,"title":{"interfaces/TableCellTemplate.html":{}},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplaterecord",{"_index":4889,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecelltemplates",{"_index":4929,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecolumns",{"_index":4925,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tablecypressrecord",{"_index":4892,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tables",{"_index":3991,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["tableviewcomponent",{"_index":3536,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tag",{"_index":722,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["tag.directive.ts",{"_index":1860,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:18",{"_index":1864,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag.directive.ts:25",{"_index":1862,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tag/cypress",{"_index":1859,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["tags",{"_index":5030,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tailored",{"_index":1194,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["take",{"_index":851,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"classes/NgxSaveOnExitAbstractService.html":{}}}],["take(1",{"_index":866,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["taken",{"_index":4362,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["takes",{"_index":3061,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["takeuntil",{"_index":1968,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.destroyed",{"_index":2213,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["takeuntil(this.hasmodalsubject.pipe(filter((hasmodal",{"_index":3427,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["takeuntil(this.markerdestroyedsubject",{"_index":2793,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["takeuntil(this.ondestroysubject",{"_index":1977,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["takeuntil(this.ondestroysubject.asobservable",{"_index":2005,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["takeuntildestroyed",{"_index":2089,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxToastService.html":{}}}],["takeuntildestroyed(this.destroyref",{"_index":2120,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["taking",{"_index":3605,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["tap",{"_index":852,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["tap(([index",{"_index":4415,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["tap(([previous",{"_index":4282,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tap((action",{"_index":3418,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["tap((currentlanguage",{"_index":867,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((data",{"_index":3556,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["tap((hascookie",{"_index":2210,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["tap((hasfeature",{"_index":2269,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["tap((haspermission",{"_index":2368,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["tap((isauthenticated",{"_index":2909,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["tap((language",{"_index":890,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["tap((matchesquery",{"_index":3009,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["tap((online",{"_index":1973,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["tap((response",{"_index":1368,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["tap((selected",{"_index":5076,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["tap((translations",{"_index":2549,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["tap((value",{"_index":2306,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"components/NgxImageMarkerComponent.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["target",{"_index":2925,"title":{},"body":{"directives/NgxLinkDirective.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["target.innerhtml",{"_index":3666,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["target.replacewith(replacement",{"_index":3667,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["targetrowindex",{"_index":1608,"title":{},"body":{"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{}}}],["td",{"_index":4545,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["technologies",{"_index":813,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["template",{"_index":539,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["template.component.ts",{"_index":3989,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:12",{"_index":3993,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:13",{"_index":3997,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:14",{"_index":4033,"title":{},"body":{"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["template.component.ts:17",{"_index":3995,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:18",{"_index":3999,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["template.component.ts:22",{"_index":3992,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{}}}],["template.component.ts:23",{"_index":3998,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["templateref",{"_index":745,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templaterefs",{"_index":2186,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["templates",{"_index":748,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["templates/columns",{"_index":5061,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["templateurl",{"_index":479,"title":{},"body":{"pipes/HasObserversPipe.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["tertiary",{"_index":1471,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["test",{"_index":537,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/SpecStoreService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts",{"_index":5081,"title":{},"body":{"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:41",{"_index":5082,"title":{},"body":{"components/TestDisplayContentComponent.html":{}}}],["test.component.ts:62",{"_index":5088,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["test.component.ts:63",{"_index":5089,"title":{},"body":{"components/TestOverrideDisplayContentComponent.html":{}}}],["testdisplaycontentcomponent",{"_index":581,"title":{"components/TestDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrorcomponent",{"_index":583,"title":{"components/TestErrorComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testerrordatacomponent",{"_index":585,"title":{"components/TestErrorDataComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testing",{"_index":2823,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["testloadingcomponent",{"_index":586,"title":{"components/TestLoadingComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testofflinecomponent",{"_index":588,"title":{"components/TestOfflineComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["testoverridedisplaycontentcomponent",{"_index":590,"title":{"components/TestOverrideDisplayContentComponent.html":{}},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tests",{"_index":2257,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxImageMarkerService.html":{}}}],["text",{"_index":891,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"pipes/TransformPipe.html":{}}}],["text/html",{"_index":3652,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["that's",{"_index":2617,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["thentemplateref",{"_index":2159,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["thenviewref",{"_index":2232,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["there's",{"_index":1145,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/TableCellTemplate.html":{}}}],["therefor",{"_index":2878,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["they're",{"_index":3407,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["things",{"_index":3612,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.abstractcontrol",{"_index":2103,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.dirty",{"_index":2113,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.invalid",{"_index":2111,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.statuschanges.pipe(startwith(this.abstractcontrol.status",{"_index":2109,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.abstractcontrol.valuechanges.pipe(startwith(this.abstractcontrol.value",{"_index":2107,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.accessors",{"_index":451,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.actions",{"_index":4916,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.actions$.pipe",{"_index":4829,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.activetooltip",{"_index":4286,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.allowbeforeunloadhandler",{"_index":3712,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.allowmultipleopenrows",{"_index":5014,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ariadescribedby",{"_index":3281,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.arialabelledby",{"_index":3280,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.authenticationresponsesubject.asobservable",{"_index":1364,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationresponsesubject.next(response",{"_index":1363,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationservice",{"_index":2267,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{}}}],["this.authenticationservice.haspermission(converttoarray(permission",{"_index":2382,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.authenticationservice.isauthenticated",{"_index":2908,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.authenticationstatussubject.next('signed",{"_index":1369,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.authenticationstatussubject.pipe",{"_index":1309,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.availablelanguagessubject",{"_index":2583,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.getvalue().includes(language",{"_index":2616,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(languages",{"_index":2615,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.availablelanguagessubject.next(this.configuration.availablelanguages",{"_index":2604,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.baseurl",{"_index":1217,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.baseurl}/${url",{"_index":1218,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.broadcastchannel[channelname",{"_index":1450,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].close",{"_index":1453,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.broadcastchannel[channelname].postmessage(message",{"_index":1457,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["this.buttontype",{"_index":1512,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.buttonwidth",{"_index":1514,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.canedit",{"_index":2787,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.cdref",{"_index":2296,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["this.cdref.detectchanges",{"_index":1130,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.cdref.markforcheck",{"_index":4968,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.changedetectorref",{"_index":2300,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["this.changedetectorref.markforcheck",{"_index":2308,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{}}}],["this.channel",{"_index":4815,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.cleardata",{"_index":3568,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.clearstorage(localstorage",{"_index":3847,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.clearstorage(sessionstorage",{"_index":3848,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.close(options.onclose",{"_index":3423,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.close.emit",{"_index":3271,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{}}}],["this.column",{"_index":767,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.columns",{"_index":4915,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.component",{"_index":2217,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.componentref",{"_index":2123,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.destroy",{"_index":2122,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.instance",{"_index":2125,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('cookies",{"_index":2218,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.componentref.setinput('data",{"_index":2129,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('errorkeys",{"_index":2128,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.componentref.setinput('errors",{"_index":2127,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.conditions",{"_index":2017,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.error",{"_index":1995,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.loading",{"_index":1991,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.conditions.offline",{"_index":1988,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.config.cachebust",{"_index":2530,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.config.component",{"_index":2117,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.errors[key",{"_index":2141,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.show",{"_index":2139,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.config.showwhen",{"_index":2112,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.configuration.autoclose",{"_index":4165,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.component",{"_index":4317,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.components.error",{"_index":1997,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.loading",{"_index":1993,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.components.offline",{"_index":1990,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.defaultlanguage",{"_index":2601,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.defaultposition",{"_index":4300,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.configuration.hidewhennotemplateprovided",{"_index":2014,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.icon",{"_index":1580,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.configuration.languagerouteparam",{"_index":2603,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.configuration.listentoonlinestatus",{"_index":1971,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.configuration.maxamount",{"_index":4119,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount.amount",{"_index":4136,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount.strategy",{"_index":4120,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxamount?.strategy",{"_index":4172,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration.maxtime",{"_index":4170,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration?.icon",{"_index":1576,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.configuration?.iconposition",{"_index":1535,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration?.labelwrapper",{"_index":1553,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.configuration?.loading",{"_index":1564,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.configuration?.maxamount?.['component",{"_index":4116,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.configuration?.modals?.[options.type",{"_index":3404,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration?.modals[options.type",{"_index":3464,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.configuration[item.elementid",{"_index":3657,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.containers().find((container",{"_index":966,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.context",{"_index":2932,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["this.control",{"_index":2100,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.cookies",{"_index":2194,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookies.map((cookie",{"_index":2202,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.cookieschanged$.pipe",{"_index":1805,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.asobservable",{"_index":1740,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookieschangedsubject.next(cookieconsent.getcookie('data",{"_index":1816,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchanged$.pipe(startwith(undefined",{"_index":1798,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.asobservable",{"_index":1744,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentchangedsubject.next(event",{"_index":1788,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsented$.pipe(startwith(undefined",{"_index":1797,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.asobservable",{"_index":1752,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.cookiesconsentedsubject.next(event",{"_index":1785,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.createimagemakeredit(id",{"_index":2827,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarker",{"_index":2768,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.createmarkerclickedlistener(marker",{"_index":2836,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmarkervaluechanges(marker",{"_index":2843,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.createmodalcomponent(options",{"_index":3409,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.createreadonlyimagemarker(id",{"_index":2828,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.currentlanguage",{"_index":860,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.asobservable",{"_index":2590,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.getvalue",{"_index":2605,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentlanguagesubject.next(newlanguage",{"_index":2612,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.currentmarker",{"_index":2769,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.close",{"_index":2779,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.mode",{"_index":2790,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentmarker.valuechanges",{"_index":2791,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.currentquerymatch.asobservable",{"_index":3026,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentquerymatch.next(id",{"_index":3044,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentquerymatch.pipe",{"_index":3055,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.currentscrollposition",{"_index":4723,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentscrollpositionsubject$.asobservable",{"_index":4695,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.currentsorting",{"_index":4888,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.currentzoomlevel",{"_index":2783,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.custommessages",{"_index":902,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.cypresstag",{"_index":1863,"title":{},"body":{"directives/NgxCypressTagDirective.html":{}}}],["this.data",{"_index":4903,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data().length",{"_index":4899,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data().reduce((previousvalue",{"_index":4897,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()?.length",{"_index":4970,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data()[index][selectablekey",{"_index":5045,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.data.length",{"_index":5012,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.datasourcesubject",{"_index":521,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.defaultlanguage",{"_index":2600,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.defaultlayout",{"_index":3217,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.aside",{"_index":3234,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.flyout",{"_index":3232,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.footer",{"_index":3235,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.left",{"_index":3224,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.main",{"_index":3226,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.header?.right",{"_index":3228,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultlayout.navigation",{"_index":3230,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.defaultrowopen",{"_index":4965,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.definedcolumns.set",{"_index":5056,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.description",{"_index":970,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.destination",{"_index":2931,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["this.destroyed",{"_index":2200,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.complete",{"_index":454,"title":{},"body":{"directives/FormAccessorContainer.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next",{"_index":2214,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.destroyed$.next(null",{"_index":5079,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.destroyed$.next(undefined",{"_index":453,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.destroyedsubject$.asobservable",{"_index":3709,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.complete",{"_index":3716,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject$.next(undefined",{"_index":3715,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.destroyedsubject.complete",{"_index":1045,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.destroyedsubject.next",{"_index":1044,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.detailrowtemplate",{"_index":4918,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.detailselement",{"_index":1135,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.dialogservice.closeall",{"_index":3430,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.dialogservice.open(component",{"_index":3434,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.disabled",{"_index":384,"title":{},"body":{"directives/FocusClickDirective.html":{},"components/NgxAccordionItemComponent.html":{}}}],["this.display",{"_index":1515,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.displaycontentconfiguration",{"_index":1980,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.dispose",{"_index":2198,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.document",{"_index":4727,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.addeventlistener('scroll",{"_index":4741,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.document.defaultview",{"_index":4740,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.draganddropservice",{"_index":968,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.editabletablecellrecord.set",{"_index":5022,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.editabletablecellrecord.update((value",{"_index":5032,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.effectsservice.fetchchannel",{"_index":4831,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.effectsservice.fetchvideos",{"_index":4834,"title":{},"body":{"injectables/StoreEffects.html":{}}}],["this.elementref",{"_index":4241,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.elementref.nativeelement",{"_index":1540,"title":{},"body":{"directives/NgxButtonDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxModalAbstractComponent.html":{}}}],["this.elementref.nativeelement.children",{"_index":4542,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.focus",{"_index":2332,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.elementref.nativeelement.getattribute('id",{"_index":4390,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elementref.nativeelement.parentelement",{"_index":2019,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentelement?.setattribute('aria",{"_index":2028,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.elementref.nativeelement.parentnode",{"_index":2138,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.elementref.nativeelement.setattribute('id",{"_index":4393,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.elsetemplateref",{"_index":2264,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.elseviewref",{"_index":2266,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.emitvalueonsingleitem",{"_index":4969,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.errorcomponent",{"_index":2121,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.errorselement",{"_index":2130,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.extractcomponent(layout.aside",{"_index":3205,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.extractcomponent(layout.flyout",{"_index":3204,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.extractcomponent(layout.footer",{"_index":3206,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.extractcomponent(layout.header.left",{"_index":3200,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.extractcomponent(layout.header.main",{"_index":3201,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.extractcomponent(layout.header.right",{"_index":3202,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.extractcomponent(layout.navigation",{"_index":3203,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.feature",{"_index":2262,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.findfocusableelement",{"_index":4538,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.firstcookiesconsentedsubject.asobservable",{"_index":1760,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.firstcookiesconsentedsubject.next(event",{"_index":1783,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.focusclick.emit",{"_index":390,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.focusclick.emit(event",{"_index":385,"title":{},"body":{"directives/FocusClickDirective.html":{}}}],["this.form",{"_index":3553,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.reset",{"_index":3569,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.setvalue(value",{"_index":3567,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.form.valuechanges",{"_index":3555,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.formgenerated",{"_index":4905,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.formgroupdirective",{"_index":2104,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formgroupdirective.form.get(control",{"_index":2105,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.formnamedirective?.control.get(control",{"_index":2106,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getauthenticationresponse().pipe",{"_index":1365,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getcomponent",{"_index":3222,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcomponent(layout.aside",{"_index":3233,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcomponent(layout.footer",{"_index":3231,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.getcookie(cookie",{"_index":1807,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.geterrors(this.abstractcontrol.errors",{"_index":2126,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.geterrors(this.abstractcontrol.errors).errors.join",{"_index":2136,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.getitem(key",{"_index":3843,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getitemobservable(key",{"_index":3844,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.getnewlanguage(language",{"_index":2607,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.getrow(0",{"_index":4588,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(index)?.registercell(cell",{"_index":4592,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getrow(this.rows.length",{"_index":4589,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.getsession().pipe",{"_index":1388,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.getvalue",{"_index":3452,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.data",{"_index":3459,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.hasbackdrop",{"_index":3448,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(configuration?.panelclass",{"_index":3450,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.getvalue(undefined",{"_index":3442,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.globalfeaturessubject.asobservable()]).pipe",{"_index":1374,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.globalfeaturessubject.next(features",{"_index":1386,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.handleaccessorsaction",{"_index":449,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["this.handlecomponentrender(this.haserrors",{"_index":2119,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlecontentscroll.bind(this",{"_index":4742,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.handlecurrentsort(this.currentsorting",{"_index":4887,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlecurrentsort(this.currentsortingevent",{"_index":5036,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handledatachanges",{"_index":3558,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handledatachanges(data",{"_index":3559,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.handleicon",{"_index":1510,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.handleloading",{"_index":1511,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.handlenocomponentflow(this.haserrors",{"_index":2118,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.handlerowclicked(this.data()[0",{"_index":4971,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowclicked(this.data()[openedindex",{"_index":4967,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowcolumns",{"_index":5062,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handlerowstate(index",{"_index":5008,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handletablecelltemplates",{"_index":5063,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.handleurl(url",{"_index":1221,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.handlewhenfocussed",{"_index":1122,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hascookie",{"_index":2193,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hascookieelse",{"_index":2197,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.hasdocument",{"_index":4739,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.haserrors",{"_index":2114,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.haserrors.set",{"_index":2110,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.hasfeature",{"_index":2304,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.hasfocus",{"_index":1146,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxTreeGridCellDirective.html":{}}}],["this.hasfocus.set(hasfocus",{"_index":1132,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.hasfootertemplates.set",{"_index":5033,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.hasmodalsubject.asobservable",{"_index":3390,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(false",{"_index":3431,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.next(true",{"_index":3403,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.hasmodalsubject.value",{"_index":3399,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.haspermission",{"_index":2383,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.hasrequireddescription(options",{"_index":3432,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.headercontrol.disable",{"_index":4995,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.enable",{"_index":4998,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(false",{"_index":4984,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.patchvalue(true",{"_index":4985,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.setvalue",{"_index":5067,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.headercontrol.valuechanges",{"_index":5075,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.httpclient",{"_index":1223,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.delete",{"_index":1233,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get",{"_index":1220,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.get('test",{"_index":4813,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.httpclient.patch",{"_index":1237,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.post",{"_index":1234,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.httpclient.put",{"_index":1236,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["this.i18nloadingservice.dispatchtranslationloaderaction",{"_index":2680,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.i18nservice.initi18n(this.i18nservice.currentlanguage).pipe",{"_index":2682,"title":{},"body":{"injectables/NgxI18nTranslationLoaderResolver.html":{}}}],["this.icon",{"_index":1517,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconcomponent",{"_index":1575,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconcomponent.instance.elementref.nativeelement",{"_index":1583,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconcomponent.setinput('data",{"_index":1581,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconcomponent?.destroy",{"_index":1588,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconelement",{"_index":1574,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconelement.classname",{"_index":1578,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.iconposition",{"_index":1518,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.id",{"_index":4195,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.imageelement",{"_index":2770,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imageelement().nativeelement",{"_index":2786,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.imagemarkerservice.createimagemarker",{"_index":2785,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.initform",{"_index":3554,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.initiallayoutset$.pipe",{"_index":3216,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.initiallayoutsetsubject",{"_index":3194,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.initiallayoutsetsubject$.next(true",{"_index":3244,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.injector",{"_index":3624,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.isactive",{"_index":4389,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.isauthenticated$.pipe",{"_index":1394,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.isbrowser",{"_index":4738,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.isdirty",{"_index":3713,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["this.isfocussed",{"_index":4164,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.isopen.set(isopen",{"_index":1126,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.itemregisteredsubject.next",{"_index":1027,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.itemregisteredsubject.pipe",{"_index":1016,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items",{"_index":1032,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex",{"_index":1029,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.findindex((item",{"_index":1042,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.foreach((item",{"_index":1021,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.length",{"_index":1039,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.push(item",{"_index":1028,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(0",{"_index":1033,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items.slice(index",{"_index":1034,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[direction",{"_index":1038,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[id].markasactive",{"_index":965,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.items[index]?.updateaccordionitemstate(true",{"_index":1026,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.items[item.itemid",{"_index":971,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{}}}],["this.languagerouteparam",{"_index":2602,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.layout$.pipe",{"_index":3245,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutservice.asideshown",{"_index":3128,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutservice.flyoutshown",{"_index":3132,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutservice.setupinitiallayout",{"_index":3140,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["this.layoutsubject$.asobservable().pipe(distinctuntilchanged",{"_index":3198,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.getvalue",{"_index":3237,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next",{"_index":3219,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next(clean(layout",{"_index":3218,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.layoutsubject$.next(clean(this.defaultlayout",{"_index":3243,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.linktype",{"_index":2930,"title":{},"body":{"directives/NgxLinkDirective.html":{}}}],["this.listeners[id",{"_index":3041,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.listeners[item",{"_index":3052,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.liveregionservice.announce(result",{"_index":887,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.loading",{"_index":1516,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent",{"_index":1565,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.destroy",{"_index":1573,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.instance.elementref.nativeelement",{"_index":1571,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingcomponent.setinput('data",{"_index":1567,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.loadingdata",{"_index":1568,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.localstoragerecord",{"_index":3842,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.markerclicked.emit(value",{"_index":2794,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.complete",{"_index":2782,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markerdestroyedsubject.next",{"_index":2781,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.markers[id",{"_index":2834,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["this.markertypes",{"_index":2789,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.matchesquery",{"_index":2976,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["this.mediaquerylistenermap.clear",{"_index":3117,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaquerylistenermap.get(id",{"_index":3112,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaquerylistenermap.set(id",{"_index":3102,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.mediaqueryservice",{"_index":3007,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["this.mediaservice.currentquerymatch$.pipe(distinctuntilchanged",{"_index":3197,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.messagerecord[currentlanguage].container",{"_index":880,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage].item",{"_index":876,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[currentlanguage][type",{"_index":869,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.messagerecord[language].description",{"_index":892,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{}}}],["this.modalvisiblesubject.asobservable",{"_index":1766,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(false",{"_index":1794,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.modalvisiblesubject.next(true",{"_index":1791,"title":{},"body":{"injectables/NgxCookieService.html":{}}}],["this.movetocell('first",{"_index":4535,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell('last",{"_index":4536,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(ngxtreegridcell",{"_index":4533,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.movetocell(this.ngxtreegridcell",{"_index":4534,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.nativeelement",{"_index":1570,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.nativeelement.childnodes.foreach((node",{"_index":1557,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.nativeelement.firstchild",{"_index":1585,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.ngxcookieservice.hasacceptedcategory(cookie.category",{"_index":2204,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxcookieservice.hasacceptedservice(cookie.category",{"_index":2207,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.ngxhasfeature",{"_index":2263,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureelse",{"_index":2265,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhaveallfeatures",{"_index":2259,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhasfeatureshouldhavefeature",{"_index":2261,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.ngxhaspermission",{"_index":2365,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionelse",{"_index":2366,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhaveallpermissions",{"_index":2361,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxhaspermissionshouldhavepermission",{"_index":2363,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.ngxisauthenticated",{"_index":2906,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxisauthenticatedelse",{"_index":2907,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.ngxmediaqueryshouldmatch",{"_index":3010,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["this.ngxtableconfiguration?.allowmultiplerowsopen",{"_index":4948,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.emitvalueonsingleitem",{"_index":4960,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.hideheaderwhen",{"_index":4962,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.highlightkey",{"_index":4957,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.ngxtableclass",{"_index":4880,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showdetailrow",{"_index":4959,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showopenrowstate",{"_index":4958,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtableconfiguration?.showselectedopenrow",{"_index":4955,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ngxtooltip",{"_index":4238,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipcomponent",{"_index":4240,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipdisabled",{"_index":4236,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipid",{"_index":4242,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipposition",{"_index":4239,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.ngxtooltipservice.settooltipevent",{"_index":4194,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{}}}],["this.ngxtourshowwhen",{"_index":4411,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtourshowwhenelse",{"_index":4412,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.ngxtreegrid",{"_index":4586,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.ngxtreegridcell",{"_index":4531,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.ngxtreegridcellrow",{"_index":4547,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.onblur",{"_index":2331,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onchanged",{"_index":4987,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(handlengxtablevaluechanges(value",{"_index":5070,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.onchanged(value",{"_index":5072,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.ondestroysubject.complete",{"_index":2007,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.ondestroysubject.next",{"_index":2006,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxTooltipService.html":{}}}],["this.onfocus",{"_index":2330,"title":{},"body":{"directives/NgxHasFocusDragAndDropAbstractDirective.html":{}}}],["this.onlineservice.online",{"_index":1972,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.onlinesubject.asobservable",{"_index":3472,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(false",{"_index":3477,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.onlinesubject.next(true",{"_index":3476,"title":{},"body":{"injectables/NgxOnlineService.html":{}}}],["this.ontouch",{"_index":4991,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.open",{"_index":1015,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["this.openedrows()[index",{"_index":5009,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openedrows.set(action",{"_index":5015,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.openedrows.update((value",{"_index":5013,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.overlaypositionbuilder",{"_index":4310,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref",{"_index":4301,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.attach",{"_index":4319,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.detach",{"_index":4324,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref.updatepositionstrategy(positionstrategy",{"_index":4313,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayref?.hasattached",{"_index":4285,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.create",{"_index":4302,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overlayservice.scrollstrategies.reposition",{"_index":4308,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.overrideconfiguration",{"_index":1979,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.data",{"_index":2013,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.overrideconfiguration[status]?.template",{"_index":2008,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.parent.getrow(ngxtreegridcellrow",{"_index":4550,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parent.movefocus(this.id",{"_index":1125,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.registeritem(this",{"_index":1133,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent.removeitem(this",{"_index":1144,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.parent?.registercell(ngxtreegridcellrow",{"_index":4548,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.parsevalue(storage.getitem(key",{"_index":3849,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.permission",{"_index":2364,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.position",{"_index":4444,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.priority",{"_index":1513,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.querychangedsubject.asobservable().pipe",{"_index":3104,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.complete",{"_index":3114,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.next(id",{"_index":3098,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querychangedsubject.next(null",{"_index":3113,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.get",{"_index":3088,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.get(id",{"_index":3087,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.has(id",{"_index":3103,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap.set(id",{"_index":3095,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap].find",{"_index":3092,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryidmap].some(([_",{"_index":3090,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap",{"_index":3110,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.clear",{"_index":3116,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.get(id).matches",{"_index":3108,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.querylistmap.set(id",{"_index":3097,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["this.queryparams",{"_index":3561,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.queue",{"_index":4153,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.getvalue().find",{"_index":4160,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.getvalue().length",{"_index":4121,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.next",{"_index":4147,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.queue$.next([...queue.slice(0",{"_index":4150,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.radiocontrol.disable",{"_index":4996,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.enable",{"_index":4999,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.patchvalue(value",{"_index":4977,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.radiocontrol.valuechanges",{"_index":5071,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.registerquery(this.mediaqueries",{"_index":3034,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["this.removeitem(key",{"_index":3845,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.removetoast(toast",{"_index":4167,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.removetooltip",{"_index":4234,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.renderelsetemplate",{"_index":2212,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.renderer.addclass",{"_index":1582,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.appendchild",{"_index":1569,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.appendchild(this.nativeelement",{"_index":1563,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.appendchild(wrapperelement",{"_index":1558,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.createelement",{"_index":1552,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.createelement('i",{"_index":1577,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.createelement('p",{"_index":2133,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.insertbefore",{"_index":1584,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.listen(detailselement.nativeelement",{"_index":1140,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.renderer.nextsibling(this.elementref.nativeelement",{"_index":2115,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.removechild(this.elementref.nativeelement.parentnode",{"_index":2131,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.removechild(this.nativeelement",{"_index":1587,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.removechild(wrapperelement",{"_index":1561,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.removeclass",{"_index":2116,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setattribute(this.errorselement",{"_index":2134,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderer.setattribute(wrapperelement",{"_index":1560,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.renderer.setproperty",{"_index":2135,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.renderinitialtemplate",{"_index":1998,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('error",{"_index":1996,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('loading",{"_index":1992,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.rendertemplate('offline",{"_index":1989,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.renderthentemplate",{"_index":2211,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.resetformonnewdata",{"_index":4909,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.role",{"_index":4593,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rootclass",{"_index":4445,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.rooti18nservice.currentlanguage",{"_index":2651,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.rooti18nservice.setcurrentlanguage(language",{"_index":2654,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.route",{"_index":3512,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.router.navigate",{"_index":3571,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.row",{"_index":4549,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.row.getcell(cell",{"_index":4539,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{}}}],["this.rowclicked.emit(row",{"_index":5001,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rows",{"_index":4583,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.length",{"_index":4591,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.push(row",{"_index":4582,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows.slice(0",{"_index":4584,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[direction",{"_index":4590,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rows[index",{"_index":4587,"title":{},"body":{"directives/NgxTreeGridDirective.html":{}}}],["this.rowsformgroup",{"_index":4908,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.disable",{"_index":4994,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.enable",{"_index":4997,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue",{"_index":5077,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.patchvalue(writengxtablevalue(value",{"_index":4980,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.reset",{"_index":4978,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.rowsformgroup.valuechanges",{"_index":5064,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.runariachecks(options",{"_index":3408,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(body.documentelement.innerhtml",{"_index":3671,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["this.scrambleparams",{"_index":3548,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrambleparams(data",{"_index":3574,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.scrollingup",{"_index":4721,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.asobservable",{"_index":4703,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(false",{"_index":4753,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.scrollingupsubject$.next(true",{"_index":4754,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.selectable",{"_index":4904,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectablekey",{"_index":4907,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectabletype",{"_index":4976,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow",{"_index":5003,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(index",{"_index":5007,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selectedrow.set(undefined",{"_index":5006,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.selecterrorfromstore",{"_index":4792,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors.videos",{"_index":4805,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrorfromstore(selectors[key",{"_index":3919,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selecterrormessagefromstore",{"_index":4794,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selecterrormessagefromstore(selectors[key",{"_index":3921,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectfromstore",{"_index":4789,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors.darkmode",{"_index":4798,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectfromstore(selectors[key",{"_index":3915,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.selectloadingfromstore",{"_index":4796,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.selectloadingfromstore(selectors[key",{"_index":3917,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.session",{"_index":1398,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sessionstoragerecord",{"_index":3840,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setariabusytag(this.conditions.loading",{"_index":1987,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setarialivetag(this.displaycontentarialive",{"_index":1981,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.setcurrentlanguage(language",{"_index":2614,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.setdatainroute(data",{"_index":3557,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.setitem(key",{"_index":3846,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setsortdirection(newsortdirection",{"_index":765,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.setupstorage(localstorage",{"_index":3841,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.setupstorage(sessionstorage",{"_index":3839,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.shouldbeauthenticated",{"_index":2905,"title":{},"body":{"directives/NgxIsAuthenticatedDirective.html":{}}}],["this.shouldhaveallfeatures",{"_index":2258,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhaveallpermissions",{"_index":2360,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.shouldhavefeature",{"_index":2260,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{}}}],["this.shouldhavepermission",{"_index":2362,"title":{},"body":{"directives/NgxHasPermissionDirective.html":{}}}],["this.showaside.asreadonly",{"_index":3188,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showaside.set(false",{"_index":3242,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showaside.set(true",{"_index":3241,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showbundledtoasts$.next(false",{"_index":4157,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showbundledtoasts$.next(true",{"_index":4173,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showbundledtoasts$]).pipe",{"_index":4130,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.showdetailrow",{"_index":4896,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showflyout.asreadonly",{"_index":3192,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showflyout.set(false",{"_index":3240,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showflyout.set(true",{"_index":3238,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["this.showopenrowstate",{"_index":4917,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showselectedopenrow",{"_index":5002,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.showtooltip",{"_index":4233,"title":{},"body":{"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{}}}],["this.signinuser(signindata).pipe",{"_index":1367,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.signoutuser(signoutdatatype).pipe",{"_index":1371,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.sort.emit",{"_index":766,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.sortabletablecellrecord",{"_index":5048,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column",{"_index":5038,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[column].handlesort",{"_index":5041,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].setsortdirection(event.direction",{"_index":5054,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord()[event.column].sortdirection",{"_index":5049,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.set",{"_index":5020,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortabletablecellrecord.update((value",{"_index":5029,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.sortdirection",{"_index":763,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{}}}],["this.startstate",{"_index":2788,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.state.data",{"_index":4850,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.state.iscompleted",{"_index":4853,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.stateupdated.emit(value",{"_index":2792,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["this.statewrapper",{"_index":3913,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.stepclass",{"_index":4446,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.storageeventsubject.asobservable",{"_index":3807,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.storageeventsubject.next(event",{"_index":3858,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.store",{"_index":3727,"title":{},"body":{"injectables/NgxSignalStoreService.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store).pipe",{"_index":4849,"title":{},"body":{"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["this.store.dispatch(actions.channel.clear",{"_index":4816,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.channel.effects.set",{"_index":4820,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.clear",{"_index":4819,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.dispatch(actions.videos.effects.set",{"_index":4821,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.store.pipe(select(selector.error",{"_index":3927,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.errormessage",{"_index":3929,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.loading",{"_index":3925,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.store.pipe(select(selector.select",{"_index":3923,"title":{},"body":{"injectables/NgxStoreService.html":{}}}],["this.storeauthenticationresponse(response",{"_index":1370,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeauthenticationresponse(undefined",{"_index":1372,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{}}}],["this.storeservice.setfilters(value",{"_index":3542,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.subscribe",{"_index":2381,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["this.subscribe(this.authenticationservice.hasfeature(converttoarray(feature",{"_index":2303,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["this.subscribe(this.mediaservice.matchesquery(query",{"_index":2975,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["this.summaryelement()?.nativeelement.focus",{"_index":1131,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.tablecelltemplaterecord.set",{"_index":5019,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecelltemplaterecord.update((value",{"_index":5028,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecolumns.set([...(columns",{"_index":5057,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.set",{"_index":5021,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.tablecypressrecord.update((value",{"_index":5031,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["this.template",{"_index":2096,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.templateref",{"_index":2097,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxMediaQueryDirective.html":{}}}],["this.thentemplateref",{"_index":2192,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.thenviewref",{"_index":2271,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.titleelement",{"_index":4447,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.titleid.set(id",{"_index":4454,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.toastevents",{"_index":4143,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toastevents$.next",{"_index":4159,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toasts().find",{"_index":4169,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toasts().length",{"_index":4122,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["this.toastservice.bundledcomponent",{"_index":4085,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.hasbundledtoasts",{"_index":4089,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.markasrendered(this.toast",{"_index":4075,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["this.toastservice.removetoast(this.toast",{"_index":4076,"title":{},"body":{"directives/NgxToastComponent.html":{}}}],["this.toastservice.setfocus(hasfocus",{"_index":4094,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.toastservice.showbundled",{"_index":4067,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{}}}],["this.toastservice.toasts",{"_index":4091,"title":{},"body":{"components/NgxToastContainerComponent.html":{}}}],["this.tooltipeventssubject",{"_index":4281,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipeventssubject.next(event",{"_index":4326,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["this.tooltipservice.removetooltip",{"_index":4235,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tooltipservice.settooltipevent",{"_index":4237,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["this.tourservice.closetour().subscribe",{"_index":4441,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["this.tourservice.currentindex",{"_index":4413,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.currenttour",{"_index":4414,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["this.tourservice.registerelement(this",{"_index":4391,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.tourservice.starttour",{"_index":540,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["this.tourservice.unregisterelement(this.touritem",{"_index":4394,"title":{},"body":{"directives/NgxTourItemDirective.html":{}}}],["this.translateservice.get(key",{"_index":2659,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.getfallbacklang",{"_index":2653,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.getlangs",{"_index":2652,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.instant(key",{"_index":2657,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.reloadlang(language",{"_index":2656,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translateservice.use(this.rooti18nservice.currentlanguage",{"_index":2655,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["this.translationloaderactionssubject$.next(action",{"_index":2473,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloaderactionssubject$.pipe",{"_index":2454,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationloadingservice.addloadedtranslations",{"_index":2551,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.gettranslations",{"_index":2518,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.loadtranslations",{"_index":2546,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationloadingservice.marktranslationsloadedasfailed",{"_index":2543,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationsfailedsubject$.asobservable",{"_index":2450,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsfailedsubject$.next(false",{"_index":2484,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationsloading[paths",{"_index":2476,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationspaths.map((path",{"_index":2520,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationspaths.tostring",{"_index":2547,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["this.translationssubject$.getvalue",{"_index":2475,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.translationssubject$.next",{"_index":2474,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["this.unscrambleparams",{"_index":3549,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.unscrambleparams(value",{"_index":3565,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["this.updateaccordionitemstate(event.newstate",{"_index":1143,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["this.updateconditions",{"_index":1974,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateconditions(this.displaycontent",{"_index":1978,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateview",{"_index":2196,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.updateviewsubject",{"_index":1985,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.updateviewsubject.next",{"_index":1976,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.videos",{"_index":4818,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["this.viewcontainer.clear",{"_index":1986,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createcomponent",{"_index":1579,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["this.viewcontainer.createcomponent(component",{"_index":2011,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createcomponent(this.configuration.loading",{"_index":1566,"title":{},"body":{"directives/NgxButtonDirective.html":{}}}],["this.viewcontainer.createembeddedview",{"_index":2272,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.hascookieelse",{"_index":2216,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.overrideconfiguration[status]?.template",{"_index":2009,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.template",{"_index":2098,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.templateref",{"_index":2015,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["this.viewcontainer.createembeddedview(this.thentemplateref",{"_index":2215,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["this.widthsubject$.asobservable",{"_index":4707,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.getvalue",{"_index":4747,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.widthsubject$.next(this.window.innerwidth",{"_index":4743,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window",{"_index":4725,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.addeventlistener('resize",{"_index":4745,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.innerwidth",{"_index":4746,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.window.scrollto(0",{"_index":4748,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice",{"_index":3837,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["this.windowservice.currentscrollposition",{"_index":4724,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.document",{"_index":4728,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.hasdocument",{"_index":4732,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.isbrowser",{"_index":1778,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.runinbrowser",{"_index":1447,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollingup",{"_index":4722,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.scrollto(500",{"_index":4730,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.width",{"_index":4720,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowservice.window",{"_index":4726,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.windowsservice.runinbrowser",{"_index":2610,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["this.windowwidth",{"_index":4719,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["this.zoomlevels",{"_index":2784,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["those",{"_index":2455,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["though",{"_index":4361,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["through",{"_index":1428,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["throughout",{"_index":2624,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["throw",{"_index":407,"title":{},"body":{"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTourStepComponent.html":{}}}],["throwerror",{"_index":3031,"title":{},"body":{"injectables/NgxMediaQueryService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{}}}],["tick",{"_index":1020,"title":{},"body":{"components/NgxAccordionComponent.html":{}}}],["time",{"_index":1244,"title":{},"body":{"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/TableCellTemplate.html":{}}}],["times",{"_index":2761,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["timing",{"_index":3213,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["title",{"_index":541,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement",{"_index":662,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.getattribute('id",{"_index":4452,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleelement.nativeelement.setattribute('id",{"_index":4453,"title":{},"body":{"directives/NgxTourStepComponent.html":{}}}],["titleid",{"_index":663,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["toast",{"_index":579,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["toast.configuration?.autoclose",{"_index":4166,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toast.configuration?.haspriority",{"_index":4148,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toast.id",{"_index":4095,"title":{},"body":{"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{}}}],["toastevents",{"_index":4102,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toasts",{"_index":4054,"title":{},"body":{"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{}}}],["toasts.length",{"_index":4155,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["toastservice",{"_index":4059,"title":{},"body":{"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{}}}],["toberemoved",{"_index":4053,"title":{},"body":{"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["todo",{"_index":133,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{}}}],["toggle",{"_index":1141,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["toggleevent",{"_index":1142,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["token",{"_index":4457,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{},"injectables/NgxWindowService.html":{}}}],["tokens",{"_index":1211,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/TableCellTemplate.html":{}}}],["toobservable",{"_index":3003,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaquery",{"_index":3004,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaqueryelse",{"_index":3005,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toobservable(this.ngxmediaqueryshouldmatch",{"_index":3006,"title":{},"body":{"directives/NgxMediaQueryDirective.html":{}}}],["toolbar",{"_index":2864,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["toolbox",{"_index":2866,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["tools",{"_index":5175,"title":{},"body":{"index.html":{}}}],["tooltip",{"_index":4182,"title":{},"body":{"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{}}}],["tooltipeventssubject",{"_index":4249,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipportal",{"_index":4315,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipposition",{"_index":4299,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref",{"_index":4318,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('id",{"_index":4323,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('position",{"_index":4321,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('positionclass",{"_index":4322,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltipref.setinput('text",{"_index":4320,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["tooltips",{"_index":5180,"title":{},"body":{"index.html":{}}}],["tooltipservice",{"_index":4210,"title":{},"body":{"directives/NgxTooltipDirective.html":{}}}],["top",{"_index":3819,"title":{},"body":{"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{}}}],["tort",{"_index":5269,"title":{},"body":{"index.html":{},"license.html":{}}}],["tosignal",{"_index":3139,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{},"injectables/NgxToastService.html":{}}}],["tosignal(this.layoutservice.layout",{"_index":3134,"title":{},"body":{"components/NgxMobileLayoutComponent.html":{}}}],["total",{"_index":671,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["touched",{"_index":425,"title":{},"body":{"directives/FormAccessorContainer.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["touchedeventlistener",{"_index":2092,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touchedeventlistener(this.abstractcontrol",{"_index":2108,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["touppercase",{"_index":5100,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["tour",{"_index":515,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"index.html":{}}}],["tour.types",{"_index":4458,"title":{},"body":{"interfaces/NgxTourTokenConfiguration.html":{}}}],["touritem",{"_index":4337,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["touritem]'},{'name",{"_index":643,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["tourservice",{"_index":518,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["track",{"_index":2532,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxWindowService.html":{}}}],["tracked",{"_index":3079,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["trailing",{"_index":507,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["transform",{"_index":185,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"pipes/NgxMatchesQueryPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"pipes/TransformPipe.html":{}}}],["transform(direction",{"_index":4026,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["transform(feature",{"_index":2281,"title":{},"body":{"pipes/NgxHasFeaturePipe.html":{}}}],["transform(output",{"_index":474,"title":{},"body":{"pipes/HasObserversPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{}}}],["transform(permission",{"_index":2374,"title":{},"body":{"pipes/NgxHasPermissionPipe.html":{}}}],["transform(query",{"_index":2965,"title":{},"body":{"pipes/NgxMatchesQueryPipe.html":{}}}],["transform(undefined",{"_index":1623,"title":{},"body":{"pipes/NgxConfigurableLayoutItemSizePipe.html":{}}}],["transform(value",{"_index":186,"title":{},"body":{"pipes/BtwPipe.html":{},"pipes/IbanPipe.html":{},"pipes/NgxAriaSortPipe.html":{},"pipes/NgxReplaceElementsPipe.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/TransformPipe.html":{}}}],["transformer",{"_index":5093,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformer(value",{"_index":5101,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformertype",{"_index":5097,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["transformpipe",{"_index":5091,"title":{"pipes/TransformPipe.html":{}},"body":{"pipes/TransformPipe.html":{}}}],["transforms",{"_index":5098,"title":{},"body":{"pipes/TransformPipe.html":{}}}],["translate",{"_index":2644,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translate/core",{"_index":2509,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"dependencies.html":{}}}],["translateloader",{"_index":2491,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translateservice",{"_index":2627,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["translation",{"_index":1659,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["translation.fromstore",{"_index":2553,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts",{"_index":2488,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:19",{"_index":2502,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:25",{"_index":2497,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:30",{"_index":2500,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:35",{"_index":2504,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation.loader.ts:42",{"_index":2506,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translation/multi",{"_index":2487,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationloaderactionentity",{"_index":2438,"title":{"interfaces/TranslationLoaderActionEntity.html":{}},"body":{"injectables/NgxI18nLoadingService.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["translationloaderactionssubject",{"_index":2423,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationloaderactionstateenum",{"_index":5103,"title":{},"body":{"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/enumerations.html":{}}}],["translationloadingservice",{"_index":2493,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translations",{"_index":1667,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"index.html":{}}}],["translationsfailed",{"_index":2424,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsfailedsubject",{"_index":2425,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloaded",{"_index":2426,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationsloading",{"_index":2427,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationspaths",{"_index":2494,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["translationssubject",{"_index":2428,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{}}}],["translationtype",{"_index":2635,"title":{},"body":{"injectables/NgxI18nService.html":{}}}],["tree",{"_index":511,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["treegrid",{"_index":4465,"title":{},"body":{"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["trigger",{"_index":1127,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["triggered",{"_index":1746,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{}}}],["triggering",{"_index":1754,"title":{},"body":{"injectables/NgxCookieService.html":{},"injectables/NgxWindowService.html":{}}}],["true",{"_index":47,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxI18nEmptyComponent.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{},"pipes/TransformPipe.html":{}}}],["trusted",{"_index":3669,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["truth",{"_index":2599,"title":{},"body":{"injectables/NgxI18nRootService.html":{},"injectables/NgxToastService.html":{}}}],["try",{"_index":4161,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["ts",{"_index":2511,"title":{},"body":{"classes/NgxI18nMultiTranslationHttpLoader.html":{},"dependencies.html":{}}}],["tuples",{"_index":3062,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["two",{"_index":3277,"title":{},"body":{"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreAssetsGeneratorOptions.html":{},"interfaces/BaseStoreSelectors.html":{},"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"injectables/EffectsService.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreAssetsGeneratorOptions.html":{},"interfaces/EntityStoreSelectors.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"interfaces/FormStateOptionsEntity.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"injectables/NgxBroadcastChannelService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{},"interfaces/NgxConfigurableLayoutItemEntity.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"interfaces/NgxDisplayContentConfiguration.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxHasCookieConfiguration.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"interfaces/NgxMediaQuery.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxMobileLayoutBase.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxReplaceElementsConfigurationElement.html":{},"interfaces/NgxReplaceElementsItem.html":{},"pipes/NgxReplaceElementsPipe.html":{},"classes/NgxSaveOnExitAbstractService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"interfaces/NgxStorage.html":{},"interfaces/NgxStorageBaseEvent.html":{},"interfaces/NgxStorageClearEvent.html":{},"interfaces/NgxStorageRemoveEvent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStorageSetEvent.html":{},"interfaces/NgxStore.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"interfaces/NgxTableCypressDataTagsBase.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableHasObserversPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"interfaces/NgxTableShowHeaderRequirements.html":{},"interfaces/NgxTableSortEvent.html":{},"pipes/NgxTableSortIconPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"components/NgxToastContainerComponent.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTooltipActiveElementEvent.html":{},"interfaces/NgxTooltipActiveTooltipEvent.html":{},"interfaces/NgxTooltipBaseEvent.html":{},"interfaces/NgxTooltipConfiguration.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTooltipInactiveEvent.html":{},"interfaces/NgxTooltipItem.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreAssetsOptions.html":{},"injectables/StoreEffects.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"miscellaneous/functions.html":{}}}],["typed",{"_index":164,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"directives/NgxDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{}}}],["typedaction",{"_index":165,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{}}}],["typeof",{"_index":863,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/TranslationLoaderActionEntity.html":{}}}],["types",{"_index":757,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxCookiesFallBackComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxModalService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"injectables/NgxStorageService.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["types/toast.types",{"_index":4142,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["typescript",{"_index":3396,"title":{},"body":{"injectables/NgxModalService.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["typing",{"_index":1381,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["uarr",{"_index":4030,"title":{},"body":{"pipes/NgxTableSortIconPipe.html":{}}}],["ui",{"_index":2154,"title":{},"body":{"directives/NgxHasCookieDirective.html":{}}}],["unauthenticated",{"_index":1171,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["uncheck",{"_index":4981,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["undefined",{"_index":1031,"title":{},"body":{"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"injectables/NgxI18nRootService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTreeGridCellDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["under",{"_index":4359,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["underneath",{"_index":2060,"title":{},"body":{"directives/NgxFormsErrorsDirective.html":{}}}],["uniqby",{"_index":4138,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["uniqby(toasts",{"_index":4133,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["unique",{"_index":801,"title":{},"body":{"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTooltipDirective.html":{}}}],["unknown",{"_index":173,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"pipes/NgxTableGetPipe.html":{},"interfaces/TableCellTemplate.html":{}}}],["unless",{"_index":1537,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["unload",{"_index":3694,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["unregister",{"_index":3076,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["unscramble",{"_index":3508,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams",{"_index":3488,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(params",{"_index":3506,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams(value",{"_index":3545,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambleparams?(params",{"_index":3581,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler",{"_index":3531,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unscrambler(value.sorting",{"_index":3546,"title":{},"body":{"directives/NgxQueryParamFormSyncComponent.html":{}}}],["unselect",{"_index":5005,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unset",{"_index":1313,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{}}}],["unsorted",{"_index":5052,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["unsubscribe",{"_index":3425,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["until",{"_index":3215,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["unused",{"_index":4883,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["up",{"_index":990,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"components/NgxMobileLayoutComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxWindowService.html":{}}}],["upcoming",{"_index":4290,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["update",{"_index":162,"title":{},"body":{"interfaces/BasicEntityAdapterReducerActions.html":{},"interfaces/BasicEntityState.html":{},"interfaces/EntityStoreActions.html":{},"interfaces/EntityStoreAssets.html":{},"interfaces/EntityStoreSelectors.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxImageMarkerService.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["updateaccordionitemstate",{"_index":1064,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateaccordionitemstate(isopen",{"_index":1094,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["updateallvalueandvalidity",{"_index":404,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateallvalueandvalidity(form",{"_index":430,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateconditions",{"_index":1928,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updateconditions(conditions",{"_index":1946,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["updated",{"_index":1975,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{}}}],["updates",{"_index":432,"title":{},"body":{"directives/FormAccessorContainer.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{}}}],["updatevalueandvalidity",{"_index":435,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["updateview",{"_index":2163,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["updateviewsubject",{"_index":1923,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["upon",{"_index":2223,"title":{},"body":{"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["url",{"_index":1188,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/SpecStoreAssets.html":{}}}],["us/docs/web/accessibility/aria/aria_live_regions",{"_index":1955,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["us/docs/web/accessibility/aria/attributes/aria",{"_index":3304,"title":{},"body":{"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{}}}],["us/docs/web/api/broadcastchannel",{"_index":1407,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["use",{"_index":203,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentTypeWrapper.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/HasObserversPipe.html":{},"pipes/IbanPipe.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nRootService.html":{},"pipes/NgxMatchesQueryPipe.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTableConfiguration.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":106,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxAuthenticationConfiguration.html":{},"interfaces/NgxButtonConfiguration.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"directives/NgxCookiesFallBackComponent.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"classes/NgxI18nAbstractService.html":{},"components/NgxI18nEmptyComponent.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxStore.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{}}}],["useexisting",{"_index":288,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/TableCellTemplate.html":{}}}],["useful",{"_index":2401,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{},"interfaces/TableCellTemplate.html":{}}}],["uselocalstorage",{"_index":1653,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{}}}],["usemockdataduringtour",{"_index":533,"title":{},"body":{"components/MockTourHolderComponent.html":{}}}],["user",{"_index":354,"title":{},"body":{"directives/FocusClickDirective.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStoreService.html":{},"pipes/NgxTableGetPipe.html":{},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{},"injectables/NgxToastService.html":{},"injectables/NgxTooltipService.html":{}}}],["users",{"_index":1308,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"index.html":{}}}],["uses",{"_index":1258,"title":{},"body":{"interfaces/NgxAuthenticatedRoute.html":{},"directives/NgxTourItemDirective.html":{},"injectables/NgxWindowService.html":{}}}],["using",{"_index":358,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMediaQueryService-1.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["utilities",{"_index":5162,"title":{},"body":{"index.html":{}}}],["utils",{"_index":26,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"directives/FormAccessorContainer.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{},"interfaces/StoreState.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["uuid",{"_index":854,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{},"dependencies.html":{}}}],["v",{"_index":2405,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["v3",{"_index":5173,"title":{},"body":{"index.html":{}}}],["v4",{"_index":853,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxTooltipDirective.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourStepComponent.html":{}}}],["v7",{"_index":4141,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["v=1",{"_index":2407,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1.0.0",{"_index":2408,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["v=1743428073628",{"_index":2410,"title":{},"body":{"interfaces/NgxI18nConfiguration.html":{}}}],["valcke",{"_index":5210,"title":{},"body":{"index.html":{}}}],["valid",{"_index":3701,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{},"classes/NgxValidators.html":{}}}],["validates",{"_index":4626,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validation",{"_index":290,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{}}}],["validationerrors",{"_index":2034,"title":{},"body":{"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"classes/NgxValidators.html":{}}}],["validator",{"_index":30,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"classes/NgxValidators.html":{}}}],["validatorfn",{"_index":4610,"title":{},"body":{"classes/NgxValidators.html":{}}}],["validity",{"_index":433,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["value",{"_index":32,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"pipes/BtwPipe.html":{},"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"pipes/IbanPipe.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"classes/NgxAccessibleDragAndDropAbstractService.html":{},"directives/NgxAccessibleDragAndDropContainerDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"pipes/NgxAriaSortPipe.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"interfaces/NgxCookieValue.html":{},"directives/NgxCookiesFallBackComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"directives/NgxCypressTagDirective.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorAbstractComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxStoreService.html":{},"directives/NgxTableCellDirective.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourItemDirective.html":{},"directives/NgxTourShowWhenDirective.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreEffects.html":{},"injectables/StoreStateService.html":{},"interfaces/TableCellTemplate.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"pipes/TransformPipe.html":{},"miscellaneous/enumerations.html":{}}}],["value.charat(4",{"_index":221,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.charat(8",{"_index":224,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.isempty",{"_index":4016,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.isloading",{"_index":4017,"title":{},"body":{"pipes/NgxTableShowHeaderPipe.html":{}}}],["value.length",{"_index":4979,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["value.match(/^[0",{"_index":3868,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.match(/{(.*:.*[,]{0,1",{"_index":3871,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["value.replace(/(.{4})/g",{"_index":500,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.replace(/\\./g",{"_index":217,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value.replace(/\\s/g",{"_index":496,"title":{},"body":{"pipes/IbanPipe.html":{}}}],["value.tostring",{"_index":216,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["value]).foreach((item",{"_index":3040,"title":{},"body":{"injectables/NgxMediaQueryService.html":{}}}],["valuechanges",{"_index":2709,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["valuechanges.asobservable",{"_index":2880,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(event?.markerarea?.getstate",{"_index":2876,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["valuechanges.next(marker",{"_index":2883,"title":{},"body":{"injectables/NgxImageMarkerService.html":{}}}],["values",{"_index":2026,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"classes/NgxValidators.html":{}}}],["van",{"_index":5149,"title":{},"body":{"index.html":{},"license.html":{}}}],["vanilla",{"_index":1660,"title":{},"body":{"interfaces/NgxCookie.html":{},"interfaces/NgxCookieChangedEvent.html":{},"interfaces/NgxCookieConfiguration.html":{},"interfaces/NgxCookieEvent.html":{},"interfaces/NgxCookieLanguageConfiguration.html":{},"injectables/NgxCookieService.html":{},"dependencies.html":{}}}],["var",{"_index":547,"title":{},"body":{"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxI18nEmptyComponent.html":{},"components/NgxImageMarkerComponent.html":{},"components/NgxMobileLayoutComponent.html":{},"components/NgxToastContainerComponent.html":{},"components/TestDisplayContentComponent.html":{},"components/TestErrorComponent.html":{},"components/TestErrorDataComponent.html":{},"components/TestLoadingComponent.html":{},"components/TestOfflineComponent.html":{},"components/TestOverrideDisplayContentComponent.html":{}}}],["variables",{"_index":56,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{}}}],["vars",{"_index":4884,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["vat",{"_index":198,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["veire",{"_index":5151,"title":{},"body":{"index.html":{},"license.html":{}}}],["version",{"_index":1396,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxI18nConfiguration.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxSignalStoreService.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxToastService.html":{},"index.html":{},"properties.html":{}}}],["vertical",{"_index":4364,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["very",{"_index":1762,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{}}}],["videos",{"_index":4759,"title":{},"body":{"interfaces/SpecStoreAssets.html":{},"injectables/SpecStoreService.html":{}}}],["videoserror",{"_index":4771,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videoserrormessage",{"_index":4772,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["videosloading",{"_index":4773,"title":{},"body":{"injectables/SpecStoreService.html":{}}}],["view",{"_index":1966,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxTooltipService.html":{},"directives/NgxTourShowWhenDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["viewchild",{"_index":1119,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"components/NgxConfigurableLayoutItemComponent.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"components/NgxImageMarkerComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchild('celltmpl",{"_index":1842,"title":{},"body":{"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{}}}],["viewchild('details",{"_index":1103,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild('imageelement",{"_index":2753,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["viewchild('summary",{"_index":1116,"title":{},"body":{"components/NgxAccordionItemComponent.html":{}}}],["viewchild>('contenttmpl",{"_index":1599,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{}}}],["viewchild>('steptitle",{"_index":695,"title":{},"body":{"components/MockTourStepComponent.html":{},"directives/NgxTourStepComponent.html":{}}}],["viewchildren",{"_index":103,"title":{},"body":{"classes/BaseFormAccessor.html":{},"directives/FormAccessorContainer.html":{}}}],["viewchildren(baseformaccessor",{"_index":436,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["viewcontainer",{"_index":1497,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewcontainerref",{"_index":1545,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["viewmarkerbase",{"_index":2688,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["viewport",{"_index":4368,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["views",{"_index":2201,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxMediaQueryDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["visible",{"_index":1768,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipDirective.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["visual",{"_index":1128,"title":{},"body":{"components/NgxAccordionItemComponent.html":{},"directives/NgxLinkDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["visualize",{"_index":3994,"title":{},"body":{"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{},"directives/NgxTableSortTemplateAbstractComponent.html":{}}}],["visualized",{"_index":4000,"title":{},"body":{"directives/NgxTableSelectTemplateAbstractComponent.html":{}}}],["void",{"_index":347,"title":{},"body":{"directives/FocusClickDirective.html":{},"directives/FormAccessorContainer.html":{},"components/MockTourHolderComponent.html":{},"components/MockTourStepComponent.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"directives/NgxAccessibleDragAndDropHostDirective.html":{},"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxBroadcastChannelService.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nService.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxModalAbstractComponent.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"injectables/NgxOnlineService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"directives/NgxSaveOnExitComponent.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"directives/NgxToastBundlerComponent.html":{},"directives/NgxToastComponent.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"directives/NgxTooltipAbstractComponent.html":{},"directives/NgxTooltipDirective.html":{},"injectables/NgxTooltipService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"directives/NgxTourShowWhenDirective.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"injectables/SpecStoreService.html":{},"interfaces/TableCellTemplate.html":{}}}],["vs",{"_index":3826,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["wait",{"_index":1018,"title":{},"body":{"components/NgxAccordionComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxToast.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{}}}],["walkthrough",{"_index":5178,"title":{},"body":{"index.html":{}}}],["want",{"_index":270,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxI18nConfiguration.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridDirective.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["warn",{"_index":455,"title":{},"body":{"directives/FormAccessorContainer.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxSaveOnExitComponent.html":{},"pipes/NgxTableGetPipe.html":{},"pipes/NgxTableShowHeaderPipe.html":{}}}],["warning",{"_index":408,"title":{},"body":{"directives/FormAccessorContainer.html":{}}}],["warranties",{"_index":5256,"title":{},"body":{"index.html":{},"license.html":{}}}],["warranty",{"_index":5252,"title":{},"body":{"index.html":{},"license.html":{}}}],["wasn't",{"_index":3236,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["way",{"_index":2153,"title":{},"body":{"directives/NgxHasCookieDirective.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxStore.html":{},"injectables/NgxWindowService.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["ways",{"_index":1169,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["wcag",{"_index":1597,"title":{},"body":{"components/NgxConfigurableLayoutItemComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{}}}],["wcag/aria",{"_index":973,"title":{},"body":{"components/NgxAccordionComponent.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxModalService.html":{}}}],["wcag/wai",{"_index":2737,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}],["we'll",{"_index":2763,"title":{},"body":{"components/NgxImageMarkerComponent.html":{},"interfaces/NgxStore.html":{},"interfaces/StoreAssetsOptions.html":{}}}],["we're",{"_index":1773,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nRootService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{}}}],["we've",{"_index":1304,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxDisplayContentDirective.html":{}}}],["web",{"_index":3607,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponent",{"_index":3594,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["webcomponents",{"_index":3597,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["well",{"_index":84,"title":{},"body":{"interfaces/AtLeastOneRequiredValidatorOptions.html":{},"components/NgxConfigurableLayoutItemComponent.html":{}}}],["wen",{"_index":3426,"title":{},"body":{"injectables/NgxModalService.html":{}}}],["went",{"_index":2480,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["weren't",{"_index":3221,"title":{},"body":{"injectables/NgxMobileLayoutService.html":{}}}],["when.directive.ts",{"_index":4396,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:123",{"_index":4402,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:26",{"_index":4409,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:27",{"_index":4410,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:32",{"_index":4405,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:37",{"_index":4407,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:38",{"_index":4408,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:39",{"_index":4406,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:40",{"_index":4399,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:63",{"_index":4400,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:68",{"_index":4401,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:70",{"_index":4403,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when.directive.ts:74",{"_index":4404,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["when/tour",{"_index":4395,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenactive",{"_index":4417,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whenever",{"_index":1982,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxOnlineService.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxTooltipService.html":{}}}],["wheninactive",{"_index":4416,"title":{},"body":{"directives/NgxTourShowWhenDirective.html":{}}}],["whether",{"_index":730,"title":{},"body":{"directives/NgxAbstractTableCellDirective.html":{},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{},"components/NgxAccordionItemComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxAuthenticatedRoute.html":{},"classes/NgxAuthenticationAbstractService.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"pipes/NgxConfigurableLayoutItemSizePipe.html":{},"injectables/NgxCookieService.html":{},"components/NgxCurrencyTableCellComponent.html":{},"components/NgxDateTableCellComponent.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"directives/NgxHasFeatureDirective.html":{},"pipes/NgxHasFeaturePipe.html":{},"directives/NgxHasFocusDirective.html":{},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{},"directives/NgxHasPermissionDirective.html":{},"pipes/NgxHasPermissionPipe.html":{},"injectables/NgxI18nLoadingService.html":{},"injectables/NgxI18nTranslationLoaderResolver.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxIsAuthenticatedDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{},"pipes/NgxMatchesQueryPipe.html":{},"directives/NgxMediaQueryDirective.html":{},"injectables/NgxMediaQueryService.html":{},"components/NgxMobileLayoutComponent.html":{},"injectables/NgxMobileLayoutService.html":{},"interfaces/NgxModalAriaLabelBaseOptions.html":{},"interfaces/NgxModalAriaLabelOptions.html":{},"interfaces/NgxModalAriaLabelledOptions.html":{},"interfaces/NgxModalBaseConfiguration.html":{},"interfaces/NgxModalBaseOptions.html":{},"interfaces/NgxModalCDKModalConfiguration.html":{},"interfaces/NgxModalComponentConfiguration.html":{},"interfaces/NgxModalComponentOptions.html":{},"interfaces/NgxModalGlobalCDKConfiguration.html":{},"injectables/NgxModalService.html":{},"interfaces/NgxModalTypeOptions.html":{},"directives/NgxSaveOnExitComponent.html":{},"directives/NgxTableCellDirective.html":{},"interfaces/NgxTableConfiguration.html":{},"pipes/NgxTableShowHeaderPipe.html":{},"components/NgxToastContainerComponent.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"directives/NgxTourItemDirective.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTreeGridCellDirective.html":{},"directives/NgxTreeGridDirective.html":{},"classes/NgxValidators.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"interfaces/TranslationLoaderActionEntity.html":{},"index.html":{},"license.html":{}}}],["whilst",{"_index":2482,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["whitespace",{"_index":4354,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["whose",{"_index":3072,"title":{},"body":{"injectables/NgxMediaQueryService-1.html":{}}}],["width",{"_index":1477,"title":{},"body":{"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxWindowService.html":{}}}],["widthsubject",{"_index":4677,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wiki",{"_index":5156,"title":{},"body":{"index.html":{}}}],["window",{"_index":1771,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxSaveOnExitComponent.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["window.scrolly",{"_index":4752,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["window:beforeunload",{"_index":3692,"title":{},"body":{"directives/NgxSaveOnExitComponent.html":{}}}],["windowservice",{"_index":1408,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"components/NgxImageMarkerComponent.html":{},"injectables/NgxImageMarkerService.html":{},"injectables/NgxMediaQueryService.html":{},"injectables/NgxMediaQueryService-1.html":{},"directives/NgxModalAbstractComponent.html":{},"injectables/NgxOnlineService.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["windowservice.runinbrowser",{"_index":3838,"title":{},"body":{"injectables/NgxStorageService.html":{}}}],["windowsservice",{"_index":2567,"title":{},"body":{"injectables/NgxI18nRootService.html":{}}}],["windowwidth",{"_index":4718,"title":{},"body":{"injectables/NgxWindowService.html":{}}}],["wish",{"_index":194,"title":{},"body":{"pipes/BtwPipe.html":{},"interfaces/ComponentRecord.html":{},"components/MockTourStepComponent.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"directives/NgxButtonDirective.html":{},"injectables/NgxCookieService.html":{},"directives/NgxDisplayContentDirective.html":{},"interfaces/NgxFormsErrorConfigurationOptions.html":{},"directives/NgxFormsErrorsDirective.html":{},"directives/NgxHasCookieDirective.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"directives/NgxLinkDirective.html":{},"injectables/NgxMediaQueryService.html":{},"interfaces/NgxMobileLayoutBase.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"injectables/NgxStorageService.html":{},"interfaces/NgxStore.html":{},"directives/NgxTableSelectTemplateAbstractComponent.html":{},"interfaces/NgxToast.html":{},"directives/NgxToastComponent.html":{},"interfaces/NgxToastConfiguration.html":{},"interfaces/NgxToastDefaultConfiguration.html":{},"interfaces/NgxToastEvent.html":{},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"directives/NgxTourStepComponent.html":{},"directives/NgxTreeGridCellDirective.html":{},"interfaces/StoreAssetsOptions.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{}}}],["wishing",{"_index":1939,"title":{},"body":{"directives/NgxDisplayContentDirective.html":{}}}],["withcredentials",{"_index":1181,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{}}}],["within",{"_index":1726,"title":{},"body":{"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{},"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{},"injectables/NgxToastService.html":{},"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{},"directives/NgxTreeGridCellDirective.html":{},"classes/NgxValidators.html":{}}}],["withlatestfrom",{"_index":4140,"title":{},"body":{"injectables/NgxToastService.html":{},"directives/NgxTourShowWhenDirective.html":{}}}],["withlatestfrom(this.queue",{"_index":4146,"title":{},"body":{"injectables/NgxToastService.html":{}}}],["without",{"_index":209,"title":{},"body":{"pipes/BtwPipe.html":{},"injectables/NgxBroadcastChannelService.html":{},"injectables/NgxCookieService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"injectables/NgxStoreService.html":{},"injectables/NgxWindowService.html":{},"interfaces/TableCellTemplate.html":{},"pipes/TransformPipe.html":{},"index.html":{},"license.html":{}}}],["withpositions([this.positionrecord[tooltipposition",{"_index":4312,"title":{},"body":{"injectables/NgxTooltipService.html":{}}}],["work",{"_index":1382,"title":{},"body":{"classes/NgxAuthenticationAbstractService.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxModalService.html":{},"directives/NgxQueryParamFormSyncComponent.html":{},"pipes/NgxReplaceElementsPipe.html":{}}}],["workflow",{"_index":5170,"title":{},"body":{"index.html":{}}}],["works",{"_index":957,"title":{},"body":{"directives/NgxAccessibleDragAndDropHostDirective.html":{},"directives/NgxDisplayContentDirective.html":{},"directives/NgxFormsErrorsDirective.html":{}}}],["world",{"_index":527,"title":{},"body":{"components/MockTourHolderComponent.html":{},"injectables/NgxStorageService.html":{}}}],["wouter",{"_index":134,"title":{},"body":{"interfaces/BaseStore.html":{},"interfaces/BaseStoreActions.html":{},"interfaces/BaseStoreAssets.html":{},"interfaces/BaseStoreSelectors.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{},"injectables/NgxMediaQueryService-1.html":{},"injectables/NgxModalService.html":{},"interfaces/TableCellTemplate.html":{},"index.html":{}}}],["wrap",{"_index":263,"title":{},"body":{"interfaces/ComponentTypeWrapper.html":{},"interfaces/NgxButtonConfiguration.html":{},"directives/NgxButtonDirective.html":{},"interfaces/NgxLinkConfiguration.html":{},"directives/NgxLinkDirective.html":{}}}],["wrapped",{"_index":1433,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["wrapper",{"_index":1165,"title":{},"body":{"injectables/NgxAuthenticatedHttpClient.html":{},"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"injectables/NgxImageMarkerService.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"injectables/SpecStoreService.html":{},"injectables/StoreStateService.html":{},"index.html":{}}}],["wrapperelement",{"_index":1550,"title":{},"body":{"directives/NgxButtonDirective.html":{},"directives/NgxLinkDirective.html":{}}}],["wraps",{"_index":1403,"title":{},"body":{"injectables/NgxBroadcastChannelService.html":{}}}],["writable",{"_index":3758,"title":{},"body":{"interfaces/NgxSignalStoreSlice.html":{},"interfaces/NgxSignalStoreSliceArrayMethods.html":{},"interfaces/NgxSignalStoreSliceBaseMethods.html":{}}}],["writablesignal",{"_index":698,"title":{},"body":{"components/MockTourStepComponent.html":{},"components/NgxAccordionItemComponent.html":{},"directives/NgxFormsErrorsDirective.html":{},"injectables/NgxMobileLayoutService.html":{},"directives/NgxTourStepComponent.html":{},"interfaces/TableCellTemplate.html":{}}}],["writengxtablevalue",{"_index":4874,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue",{"_index":4972,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["writevalue(value",{"_index":4974,"title":{},"body":{"interfaces/TableCellTemplate.html":{}}}],["wrong",{"_index":2481,"title":{},"body":{"injectables/NgxI18nLoadingService.html":{},"classes/NgxI18nMultiTranslationHttpLoader.html":{}}}],["wysiwyg",{"_index":3610,"title":{},"body":{"pipes/NgxReplaceElementsPipe.html":{}}}],["xxxx.xxx.xxx",{"_index":220,"title":{},"body":{"pipes/BtwPipe.html":{}}}],["y",{"_index":4357,"title":{},"body":{"interfaces/NgxTourBackdropClipEvent.html":{},"interfaces/NgxTourRouteOptions.html":{},"interfaces/NgxTourStep.html":{},"interfaces/NgxTourTokenConfiguration.html":{}}}],["yes",{"_index":836,"title":{},"body":{"classes/NgxAccessibleDragAndDropAbstractService.html":{},"injectables/NgxAuthenticatedHttpClient.html":{},"classes/NgxAuthenticationAbstractService.html":{},"injectables/NgxCookieService.html":{},"injectables/NgxI18nService.html":{},"injectables/NgxMobileLayoutService.html":{},"injectables/NgxModalService.html":{},"injectables/NgxStoreService.html":{},"classes/NgxValidators.html":{}}}],["yourcomponent",{"_index":3830,"title":{},"body":{"injectables/NgxStorageService.html":{},"injectables/NgxWindowService.html":{}}}],["youtube",{"_index":4764,"title":{},"body":{"interfaces/SpecStoreAssets.html":{}}}],["yyyy",{"_index":4620,"title":{},"body":{"classes/NgxValidators.html":{}}}],["zone.js",{"_index":5124,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":2707,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"components/NgxImageMarkerComponent.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["zooming",{"_index":2699,"title":{},"body":{"interfaces/NgxImageMarkerBase.html":{},"interfaces/NgxImageMarkerConfiguration.html":{},"interfaces/NgxImageMarkerEdit.html":{},"interfaces/NgxImageMarkerTypes.html":{},"interfaces/NgxImageMarkerView.html":{}}}],["zoomlevels",{"_index":2728,"title":{},"body":{"components/NgxImageMarkerComponent.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AtLeastOneRequiredValidatorOptions.html":{"url":"interfaces/AtLeastOneRequiredValidatorOptions.html","title":"interface - AtLeastOneRequiredValidatorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AtLeastOneRequiredValidatorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/at-least-one-required/at-least-one-required.validator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            conditionalFunction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            controls\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        conditionalFunction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        conditionalFunction:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        controls\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        controls:     KeyType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FormGroup } from '@angular/forms';\nimport clean from 'obj-clean';\n\nimport { clearFormError, setFormError } from '../utils';\n\nexport interface AtLeastOneRequiredValidatorOptions {\n\tcontrols?: KeyType[];\n\tconditionalFunction?: (data: any) => boolean;\n}\n\n/**\n * FormGroup validator which checks if either at least one value is filled in\n *\n * @param options - An optional object with configuration options, see below params for more info\n */\nexport const atLeastOneRequiredValidator = (\n\toptions?: AtLeastOneRequiredValidatorOptions\n) => {\n\treturn (group: FormGroup): { atLeastOneRequiredError: true } | null => {\n\t\t// Iben: Get the optional configuration items\n\t\tlet conditionalFunction: (data: any) => boolean;\n\t\tlet keys: KeyType[];\n\n\t\tif (options) {\n\t\t\tconditionalFunction = options.conditionalFunction;\n\t\t\tkeys = options.controls;\n\t\t}\n\t\t// Iben: Setup the needed variables to handle the validator\n\t\tconst cleanedFormValue = clean(group.value);\n\t\tconst cleanedKeys = new Set(Object.keys(cleanedFormValue));\n\t\tconst controls = Object.values(group.controls);\n\t\tconst empty = cleanedKeys.size === 0;\n\n\t\t// Iben: If nothing is filled in, we return an error\n\t\tif (\n\t\t\t(empty && !conditionalFunction) ||\n\t\t\t(empty && conditionalFunction && conditionalFunction(group.value))\n\t\t) {\n\t\t\tfor (const control of controls) {\n\t\t\t\tsetFormError(control, 'required');\n\t\t\t}\n\n\t\t\treturn { atLeastOneRequiredError: true };\n\t\t}\n\n\t\t// Iben: Check if we need to check on a specific key\n\t\tif (keys) {\n\t\t\tconst hasOneKey = keys.reduce((hasOne, key) => hasOne || cleanedKeys.has(key), false);\n\n\t\t\t// Iben: Only return an error when there is no key matched at all\n\t\t\t// and in case of a conditionalFunction if the conditionalFunction is matched as well\n\t\t\tif (\n\t\t\t\t(!hasOneKey && !conditionalFunction) ||\n\t\t\t\t(!hasOneKey && conditionalFunction && conditionalFunction(group.value))\n\t\t\t) {\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tsetFormError(group.get(key), 'required');\n\t\t\t\t}\n\n\t\t\t\treturn { atLeastOneRequiredError: true };\n\t\t\t}\n\t\t}\n\n\t\t// Iben: In case there are no errors, clean the required errors and return null\n\t\tfor (const control of controls) {\n\t\t\tclearFormError(control, 'required');\n\t\t}\n\n\t\treturn null;\n\t};\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseFormAccessor.html":{"url":"classes/BaseFormAccessor.html","title":"class - BaseFormAccessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseFormAccessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/base-form/base-form.accessor.ts\n        \n\n\n            \n                Description\n            \n            \n                In order to select all accessors in a FormContainer, we need this base class to pass to our ViewChildren.\nIMPORTANT: This will never be used as an actual functional component\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class BaseFormAccessor {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStore.html":{"url":"interfaces/BaseStore.html","title":"interface - BaseStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:     ErrorInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ErrorInterface\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreActions.html":{"url":"interfaces/BaseStoreActions.html","title":"interface - BaseStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssets.html":{"url":"interfaces/BaseStoreAssets.html","title":"interface - BaseStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         BaseStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         BaseStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreAssetsGeneratorOptions.html":{"url":"interfaces/BaseStoreAssetsGeneratorOptions.html","title":"interface - BaseStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseStoreSelectors.html":{"url":"interfaces/BaseStoreSelectors.html","title":"interface - BaseStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/base-store.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            select\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        select\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        select:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpErrorResponse } from '@angular/common/http';\nimport {\n\tActionCreator,\n\tDefaultProjectorFn,\n\tMemoizedSelector,\n\tAction,\n\tActionReducer,\n} from '@ngrx/store';\n\nimport { BaseStoreEffectsInterface } from './effects';\n\nexport interface BaseStore {\n\tdata: StateInterface;\n\tloading: boolean;\n\terror: boolean;\n\terrorMessage: ErrorInterface;\n}\n\nexport interface BaseStoreAssets {\n\tactions: BaseStoreActions;\n\treducers: ActionReducer;\n\tselectors: BaseStoreSelectors;\n}\n\n// TODO: Wouter: Add ErrorInterface to error property\n \nexport interface BaseStoreActions {\n\tset: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean | ErrorInterface } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t};\n}\n\nexport interface BaseStoreSelectors {\n\tselect: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityAdapterReducerActions.html":{"url":"interfaces/BasicEntityAdapterReducerActions.html","title":"interface - BasicEntityAdapterReducerActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityAdapterReducerActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicEntityState.html":{"url":"interfaces/BasicEntityState.html","title":"interface - BasicEntityState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicEntityState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-adapter-reducers.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EntityState\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            entityStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        entityStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityStatus:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EntityState } from '@ngrx/entity';\n\n// Iben: actions get typed to any as the type TypedAction from ngrx/store is sadly not exported\ninterface BasicEntityAdapterReducerActions {\n\tadd: any;\n\tset: any;\n\tdelete: any;\n\tupdate: any;\n}\n\nexport type BasicEntityAdapterActions = Partial;\n\nexport interface BasicEntityState extends EntityState {\n\tentityStatus: {\n\t\tloading: boolean;\n\t\terror: boolean;\n\t\terrorMessage: unknown;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/BtwPipe.html":{"url":"pipes/BtwPipe.html","title":"pipe - BtwPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  BtwPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        btw\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/btw/btw.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Converts a BTW number to the correct format\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to convert\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        BtwPipe\nThe BtwPipe will format Belgian VAT numbers.\nFor example\n474603875 will format to 474.603.875.\nHow to use\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'btw',\n\tstandalone: true,\n})\nexport class BtwPipe implements PipeTransform {\n\t/**\n\t * Converts a BTW number to the correct format\n\t *\n\t * @param value - The value we wish to convert\n\t */\n\tpublic transform(value: string): string {\n\t\tif (!value) {\n\t\t\t// Denis: if the value is falsy, return it without transform.\n\t\t\treturn value;\n\t\t}\n\n\t\tconst addCharAtIndex = (original: string, char: string, index: number): string => {\n\t\t\treturn original.slice(0, index) + char + original.slice(index);\n\t\t};\n\n\t\t// Iben: Convert to string if it's a number\n\t\tvalue = value.toString();\n\n\t\tif (value.replace(/\\./g, '').length === 9) {\n\t\t\tvalue = '0' + value;\n\t\t}\n\n\t\t// Iben: Format: xxxx.xxx.xxx\n\t\tif (value.charAt(4) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 4);\n\t\t}\n\n\t\tif (value.charAt(8) !== '.') {\n\t\t\tvalue = addCharAtIndex(value, '.', 8);\n\t\t}\n\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentRecord.html":{"url":"interfaces/ComponentRecord.html","title":"interface - ComponentRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComponentRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/mobile-layout.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            default\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        ComponentType\n\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/types/mobile-layout.types.ts:6\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         ComponentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ComponentType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nexport type ComponentType = Type | null;\n\nexport interface ComponentRecord {\n\tdefault: ComponentType;\n\t[key: string]: ComponentType;\n}\n\nexport type NgxMobileLayoutItem = ComponentType | ComponentRecord;\n\ninterface NgxMobileLayoutBase {\n\t/**\n\t * The header we wish to render\n\t */\n\theader?: {\n\t\t/**\n\t\t * The center part of the header we wish to render\n\t\t */\n\t\tmain?: DataType;\n\t\t/**\n\t\t * The left part of the header we wish to render\n\t\t */\n\t\tleft?: DataType;\n\t\t/**\n\t\t * The right part of the header we wish to render\n\t\t */\n\t\tright?: DataType;\n\t};\n\t/**\n\t * An optional flyout we wish to render\n\t */\n\tflyout?: DataType;\n\t/**\n\t * An optional aside we wish to render\n\t */\n\taside?: DataType;\n\t/**\n\t * An optional navigation we wish to render\n\t */\n\tnavigation?: DataType;\n\t/**\n\t * The footer we wish to render\n\t */\n\tfooter?: DataType;\n}\n\n/**\n * A layout for the `NgxMobileLayoutService`\n */\nexport type NgxMobileLayout = NgxMobileLayoutBase;\n\n/**\n * A layout configuration for the `NgxMobileLayoutService`\n */\nexport type NgxMobileLayoutConfiguration = NgxMobileLayoutBase;\n\n/**\n * All possible elements of the mobile layout\n */\nexport type NgxMobileLayoutElements =\n\t| keyof Omit\n\t| `header.${keyof NgxMobileLayout['header']}`;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentTypeWrapper.html":{"url":"interfaces/ComponentTypeWrapper.html","title":"interface - ComponentTypeWrapper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComponentTypeWrapper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/utils/accessor-providers/accessor-providers.util.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface to wrap an component class in.\nThis interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Provider, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { BaseFormAccessor } from '../../abstracts';\n\n/**\n * An interface to wrap an component class in.\n *\n * This interface is for internal use, as a similar one already exists in the CDK, but we don't want to create a dependency on that for this package.\n */\ninterface ComponentTypeWrapper {\n\tnew (...args: any[]): ComponentType;\n}\n\n/**\n * Generates the necessary providers for a (Data)FormAccessor.\n *\n * @param  component - The component class of the (Data)FormAccessor\n */\nexport const createAccessorProviders = (\n\tcomponent: ComponentTypeWrapper\n): Provider[] => {\n\treturn [\n\t\t// Iben: Generate a provider for the control handling\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the validation handling\n\t\t{\n\t\t\tprovide: NG_VALIDATORS,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t\tmulti: true,\n\t\t},\n\t\t// Iben: Generate a provider for the FormContainer handling\n\t\t{\n\t\t\tprovide: BaseFormAccessor,\n\t\t\tuseExisting: forwardRef(() => component),\n\t\t},\n\t];\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EffectsService.html":{"url":"injectables/EffectsService.html","title":"injectable - EffectsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EffectsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel(isPublic: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isPublic\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/effects.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { DataType } from './store-assets';\nimport { mockChannel, mockPrivateChannel, mockVideos } from './store.spec';\n\n@Injectable()\nexport class EffectsService {\n\tpublic fetchChannel(isPublic: boolean): Observable {\n\t\tif (isPublic) {\n\t\t\treturn of(mockChannel);\n\t\t}\n\n\t\treturn of(mockPrivateChannel);\n\t}\n\n\tpublic fetchVideos(id: string): Observable {\n\t\treturn of(mockVideos);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreActions.html":{"url":"interfaces/EntityStoreActions.html","title":"interface - EntityStoreActions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreActions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            delete\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            effects\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:     ActionCreator>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delete:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        effects\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        effects:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:     ActionCreator\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionCreator\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssets.html":{"url":"interfaces/EntityStoreAssets.html","title":"interface - EntityStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         EntityStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:         ActionReducer | Action>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ActionReducer | Action>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         EntityStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreAssetsGeneratorOptions.html":{"url":"interfaces/EntityStoreAssetsGeneratorOptions.html","title":"interface - EntityStoreAssetsGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreAssetsGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-assets-generator-options.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            initialStateValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            slice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        initialStateValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialStateValue:     StateInterface[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StateInterface[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\n\nexport interface EntityStoreAssetsGeneratorOptions {\n\tslice: string;\n\tselectId?: IdSelector;\n\tinitialStateValue?: StateInterface[];\n}\n\nexport interface BaseStoreAssetsGeneratorOptions {\n\tslice: string;\n\tinitialStateValue?: StateInterface;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EntityStoreSelectors.html":{"url":"interfaces/EntityStoreSelectors.html","title":"interface - EntityStoreSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EntityStoreSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/entity-store-assets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            selectAll\n                                        \n                                \n                                \n                                        \n                                            selectError\n                                        \n                                \n                                \n                                        \n                                            selectErrorMessage\n                                        \n                                \n                                \n                                        \n                                            selectLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        selectAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectAll:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectError:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectErrorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectErrorMessage:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectLoading:     MemoizedSelector>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoizedSelector>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n\tActionReducer,\n\tAction,\n\tMemoizedSelector,\n\tDefaultProjectorFn,\n\tActionCreator,\n} from '@ngrx/store';\n\nimport { EntityStoreEffectsInterface } from './effects';\nimport { BasicEntityState } from './entity-adapter-reducers';\n\nexport interface EntityStoreAssets {\n\treducers: ActionReducer, Action>;\n\tselectors: EntityStoreSelectors;\n\tactions: EntityStoreActions;\n}\n\nexport interface EntityStoreSelectors {\n\tselectAll: MemoizedSelector>;\n\tselectLoading: MemoizedSelector>;\n\tselectError: MemoizedSelector>;\n\tselectErrorMessage: MemoizedSelector>;\n}\n\nexport interface EntityStoreActions {\n\tadd: ActionCreator { payload: StateInterface | StateInterface[] } & Action\n\t>;\n\tset: ActionCreator { payload: StateInterface[] } & Action\n\t>;\n\tupdate: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tdelete: ActionCreator { payload: StateInterface } & Action\n\t>;\n\tloading: ActionCreator { payload: boolean } & Action\n\t>;\n\terror: ActionCreator { payload: boolean } & Action\n\t>;\n\tclear: ActionCreator Action>;\n\teffects?: {\n\t\tadd: ActionCreator { payload: EffectsInterface['add'] } & Action\n\t\t>;\n\t\tset: ActionCreator { payload: EffectsInterface['set'] } & Action\n\t\t>;\n\t\tupdate: ActionCreator { payload: EffectsInterface['update'] } & Action\n\t\t>;\n\t\tdelete: ActionCreator { payload: EffectsInterface['delete'] } & Action\n\t\t>;\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FocusClickDirective.html":{"url":"directives/FocusClickDirective.html","title":"directive - FocusClickDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FocusClickDirective\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [focusClick]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                focusClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                isClicked\n                            \n                            \n                                    \n                                    Public\n                                isEntered\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                keydown.enter\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                            \n                        \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.enter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                \n            \n\n\n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isClicked\n                        \n                    \n                \n            \n            \n                \n                        \n                    isClicked(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isEntered\n                        \n                    \n                \n            \n            \n                \n                        \n                    isEntered()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.enter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:37\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        focusClick\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/focus-click/focus-click.directive.ts:24\n                        \n                    \n\n            \n                \n                    This directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and  by using the enter key on focus.\nA tabindex of 0 gets added to the host.\n\n                \n            \n\n        \n    \n\n\n\n    \n\n    \n        FocusClickDirective\nThe FocusClickDirective provides an a11y friendly click handler.\nThis directive replaces the default click directive and allows the user to execute\nthe click event by clicking the mouse and by using the enter key on focus.\nHow to use\nExample :\n    My Button\n\n    \n\n    \n        import { Directive, HostListener, OutputEmitterRef, input, output } from '@angular/core';\n\n@Directive({\n\tselector: '[focusClick]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.tabIndex]': '0',\n\t},\n})\nexport class FocusClickDirective {\n\t// Allow the button to ignore click events when set to true\n\tpublic readonly disabled = input(false);\n\n\t// Allow the function passed by the host to be executed\n\t// when the emit() method gets called\n\t/**\n\t * This directive replaces the default `click` directive and allows the user to execute\n\t * the `click` event by clicking the mouse **and**  by using the `enter` key on focus.\n\t *\n\t * A tabindex of `0` gets added to the host.\n\t *\n\t * @memberof FocusClickDirective\n\t */\n\tpublic readonly focusClick: OutputEmitterRef = output();\n\n\t// Add eventhandler to the click event\n\t@HostListener('click', ['$event'])\n\tpublic isClicked(event: Event): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit(event);\n\t\t}\n\t}\n\n\t// Add eventhandler to keydown event When enter is pressed and the event\n\t// isn't blocked, execute the click function of the host\n\t@HostListener('keydown.enter')\n\tpublic isEntered(): void {\n\t\tif (!this.disabled()) {\n\t\t\tthis.focusClick.emit();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/FormAccessorContainer.html":{"url":"directives/FormAccessorContainer.html","title":"directive - FormAccessorContainer","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  FormAccessorContainer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                accessors\n                            \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleAccessorsAction\n                            \n                            \n                                    Public\n                                markAllAsDirty\n                            \n                            \n                                    Public\n                                markAllAsTouched\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                updateAllValueAndValidity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleAccessorsAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleAccessorsAction(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:85\n                        \n                    \n\n\n            \n                \n                        Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsDirty\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsDirty on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as dirty\n                \n            \n            \n                \n                        \n                    markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:33\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as dirty\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAllAsTouched\n                        \n                    \n                \n            \n            \n                \n                    This method should no longer be used, use the markAsTouched on the form itself instead\n\nMarks the form and all the inputs of every subsequent form-accessors as touched\n                \n            \n            \n                \n                        \n                    markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:47\n                        \n                    \n\n\n            \n                \n                        Marks the form and all the inputs of every subsequent form-accessors as touched\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe form used in the component\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the form state changer\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:75\n                        \n                    \n\n\n            \n                \n                        Handle the destroy state of the component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAllValueAndValidity\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAllValueAndValidity(form: AbstractControl, options: FormStateOptionsEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:59\n                        \n                    \n\n\n            \n                \n                        Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                form\n                                            \n                                                        AbstractControl\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe provided forms\n\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            FormStateOptionsEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                            \n                                                    \nOptions passed to the updateValueAndValidity\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        accessors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChildren(BaseFormAccessor)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:18\n                        \n                    \n\n            \n                \n                    A list of all DataFormAccessors en FormAccessors of this component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/form-accessor-container/form-accessor-container.ts:23\n                        \n                    \n\n            \n                \n                    Destroyed state of the component\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OnDestroy, viewChildren } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { FormStateOptionsEntity } from '../../interfaces';\nimport {\n\thandleFormAccessorMarkAsDirty,\n\thandleFormAccessorMarkAsTouched,\n\thandleFormAccessorUpdateValueAndValidity,\n} from '../../utils';\nimport { BaseFormAccessor } from '../base-form/base-form.accessor';\n\n@Directive()\nexport class FormAccessorContainer implements OnDestroy {\n\t/**\n\t * A list of all DataFormAccessors en FormAccessors of this component\n\t */\n\treadonly accessors = viewChildren(BaseFormAccessor);\n\n\t/**\n\t * Destroyed state of the component\n\t */\n\tprotected readonly destroyed$ = new Subject();\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsDirty on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as dirty\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsDirty(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsDirty(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated This method should no longer be used, use the markAsTouched on the form itself instead\n\t *\n\t * Marks the form and all the inputs of every subsequent form-accessors as touched\n\t *\n\t * @param  form - The form used in the component\n\t * @param options - Options passed to the form state changer\n\t */\n\tpublic markAllAsTouched(form: AbstractControl, options: FormStateOptionsEntity = {}): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorMarkAsTouched(form, this.accessors() as any || [], options);\n\t\t});\n\t}\n\n\t/**\n\t * Updates the value and validity of the form and all the inputs of every subsequent form-accessors\n\t *\n\t * @param form - The provided forms\n\t * @param options - Options passed to the updateValueAndValidity\n\t */\n\tpublic updateAllValueAndValidity(\n\t\tform: AbstractControl,\n\t\toptions: FormStateOptionsEntity = {}\n\t): void {\n\t\tthis.handleAccessorsAction(() => {\n\t\t\thandleFormAccessorUpdateValueAndValidity(\n\t\t\t\tform,\n\t\t\t\tthis.accessors() as any || [],\n\t\t\t\toptions\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Handle the destroy state of the component\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next(undefined);\n\t\tthis.destroyed$.complete();\n\t}\n\n\t/**\n\t * Handle the accessors action of the FormContainer and throw a warning if no accessors are provided\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleAccessorsAction(action: () => void) {\n\t\t// Iben: Throw a warn in case there are no accessors found\n\t\tconst accessors = this.accessors();\n  if (!accessors || accessors.length === 0) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxForms: No (Data)FormAccessors were found in this component. Check if each (Data)FormAccessor also provides the BaseFormAccessor in its providers array. If this is intentional, this warning can be ignored.'\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Handle the provided action\n\t\taction();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormStateOptionsEntity.html":{"url":"interfaces/FormStateOptionsEntity.html","title":"interface - FormStateOptionsEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormStateOptionsEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/form-state-options.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            emitEvent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onlySelf\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emitEvent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitEvent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onlySelf\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onlySelf:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface FormStateOptionsEntity {\n\tonlySelf?: boolean;\n\temitEvent?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/HasObserversPipe.html":{"url":"pipes/HasObserversPipe.html","title":"pipe - HasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  HasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        hasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: EventEmitter<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/has-observers/has-observers.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        EventEmitter<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        HasObserversPipe\nThe HasObserversPipe will check if an Output property has observers.\nHow to use\nExample :\n  {{ somethingHasCompleted | hasObservers }}\nExample :@Component({\n    templateUrl: './my-component.component.html',\n    selector: 'my-component',\n})\nexport class MyComponent {\n    @Ouput() public somethingHasCompleted: EventEmitter = EventEmitter();\n}If a parent subscribes to the EventEmitter, hasObservers will return true\nExample :\n    \n\n    \n        import { Pipe, PipeTransform, EventEmitter } from '@angular/core';\n\n@Pipe({\n\tname: 'hasObservers',\n\tstandalone: true,\n})\nexport class HasObserversPipe implements PipeTransform {\n\tpublic transform(output: EventEmitter): boolean {\n\t\treturn output && output.observers.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IbanPipe.html":{"url":"pipes/IbanPipe.html","title":"pipe - IbanPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IbanPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        IBAN\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/iban/iban.pipe.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        IbanPipe\nThe IbanPipe will format an IBAN number.\nFor example\nBE62510007547061 will format to BE62 5100 0754 7061.\nHow to use\nExample :\n  {{ ibanNumber | IBAN }}\n\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n\tname: 'IBAN',\n\tstandalone: true,\n})\nexport class IbanPipe implements PipeTransform {\n\tpublic transform(value = ''): string {\n\t\tvalue = value.replace(/\\s/g, ''); // replace all spaces\n\n\t\tlet reformat = value.replace(/(.{4})/g, function (match) {\n\t\t\treturn match + ' '; // reformat into groups of 4 succeeded with a space\n\t\t});\n\n\t\treformat = reformat.trim(); // remove trailing space\n\n\t\treturn reformat;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourHolderComponent.html":{"url":"components/MockTourHolderComponent.html","title":"component - MockTourHolderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourHolderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-holder\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data$\n                            \n                            \n                                    Private\n                                    Readonly\n                                dataSourceSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                startTour\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        startTour\n                        \n                    \n                \n            \n            \n                \n                        \n                    startTour()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dataSourceSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject('Hello world!')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/mocks/tour-holder.component.mock.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { useMockDataDuringTour } from '../operators';\nimport { NgxTourService } from '../services';\n\n// Iben: This mock tour holder is used in the test to test the useMockDataDuringTour operator\n@Component({\n\tselector: 'mock-tour-holder',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourHolderComponent {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\tprivate readonly dataSourceSubject = new BehaviorSubject('Hello world!');\n\n\tpublic readonly data$ = this.dataSourceSubject\n\t\t.asObservable()\n\t\t.pipe(useMockDataDuringTour('World hello!'));\n\n\tpublic startTour() {\n\t\tthis.tourService.startTour([{ title: 'Mock', content: 'Mock' }]).subscribe();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourHolderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MockTourStepComponent.html":{"url":"components/MockTourStepComponent.html","title":"component - MockTourStepComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MockTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/mocks/tour-step.component.mock.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxTourStepComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                mock-tour-step-component\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:83\n\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:73\n\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:78\n\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:88\n\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:53\n\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:93\n\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxTourStepComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxTourStepComponent:68\n\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n    \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        document:keydown.escape\n                        \n                    \n                \n            \n            \n                \ndocument:keydown.escape()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:112\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:105\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxTourStepComponent\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxTourStepComponent:38\n\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:83\n\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:73\n\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:78\n\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:88\n\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:53\n\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:98\n\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:63\n\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:45\n\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:93\n\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:68\n\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:58\n\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:103\n\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                        \n                            \n                                Inherited from         NgxTourStepComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxTourStepComponent:33\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\n// Iben: This mock tour step component can be used where needed\n@Component({\n\tselector: 'mock-tour-step-component',\n\ttemplate: '',\n\tstandalone: true,\n})\nexport class MockTourStepComponent extends NgxTourStepComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'MockTourStepComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAbstractTableCellDirective.html":{"url":"directives/NgxAbstractTableCellDirective.html","title":"directive - NgxAbstractTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAbstractTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/cell.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        ngx-abstract-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                footerTemplate\n                            \n                            \n                                    Public\n                                headerTemplate\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:82\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:91\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:26\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:31\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:42\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:47\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:19\n                        \n                    \n\n            \n                \n                    The templates used to set in the table\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:52\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:36\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/cell.directive.ts:14\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, OutputEmitterRef, TemplateRef, input, output } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums/sort-direction.enum';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\n\n@Directive({\n\tselector: 'ngx-abstract-table-cell',\n\tstandalone: true,\n})\nexport class NgxAbstractTableCellDirective {\n\t/**\n\t * The current sortDirection of the cell\n\t */\n\tpublic sortDirection: NgxTableSortDirection | null = null;\n\n\t/**\n\t * The templates used to set in the table\n\t */\n\tpublic footerTemplate: TemplateRef;\n\tpublic headerTemplate: TemplateRef;\n\tpublic cellTemplate: TemplateRef;\n\n\t/**\n\t * An optional class that can be set for the cell\n\t */\n\tpublic cellClass: string;\n\n\t/**\n\t * The name of the column we want this cell to represent\n\t */\n\tpublic readonly column = input.required();\n\n\t/**\n\t * Whether or not the cell is sortable\n\t */\n\tpublic readonly sortable = input(false);\n\n\t/**\n\t * A tag that can be added to a column in the table, set according to the cypress best practices\n\t * See https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\t */\n\tpublic readonly cypressDataTags = input();\n\n\t/**\n\t * Whether the content of a cell is editable. By default, this is set to false\n\t */\n\tpublic readonly editable = input(false);\n\n\t/**\n\t * Emits the sortable event if a column is sortable\n\t */\n\tpublic sort: OutputEmitterRef = output();\n\n\t/**\n\t * Handles the sorting click events\n\t */\n\tpublic handleSort(): void {\n\t\t// Iben: Setup the sort direction\n\t\tlet newSortDirection = NgxTableSortDirection.ASCENDING;\n\n\t\t// Iben: If a an existing sorting direction exists, we switch based on the ones we have\n\t\tif (this.sortDirection) {\n\t\t\tnewSortDirection =\n\t\t\t\tthis.sortDirection === NgxTableSortDirection.ASCENDING\n\t\t\t\t\t? NgxTableSortDirection.DESCENDING\n\t\t\t\t\t: NgxTableSortDirection.ASCENDING;\n\t\t}\n\n\t\t// Iben: Set the internal sorting direction\n\t\tthis.setSortDirection(newSortDirection);\n\n\t\t// Iben: Emit the sorting event\n\t\tthis.sort.emit({\n\t\t\tdirection: this.sortDirection,\n\t\t\tcolumn: this.column(),\n\t\t});\n\t}\n\n\t/**\n\t * Resets the sort direction back to null\n\t */\n\tpublic resetSortDirection(): void {\n\t\tthis.sortDirection = null;\n\t}\n\n\t/**\n\t * Sets the sorting direction based on the provided direction\n\t *\n\t * @param direction - The provided direction\n\t */\n\tpublic setSortDirection(direction: NgxTableSortDirection): void {\n\t\tthis.sortDirection = direction;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleAbstractDragAndDropItemDirective.html":{"url":"directives/NgxAccessibleAbstractDragAndDropItemDirective.html","title":"directive - NgxAccessibleAbstractDragAndDropItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleAbstractDragAndDropItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDragAndDropAbstractDirective\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                itemId\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                markAsActive\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:18\n                        \n                    \n\n\n            \n                \n                         Marks the item as focussed and selected\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:41\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:54\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:45\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:47\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:31\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:20\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        itemId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop-item.directive.ts:13\n                        \n                    \n\n            \n                \n                    An unique id of the draggable item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:39\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDragAndDropAbstractDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDragAndDropAbstractDirective:15\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, Signal } from '@angular/core';\n\nimport { NgxHasFocusDragAndDropAbstractDirective } from './has-focus.directive';\n\n/**\n * An abstract class to avoid circular dependency with the ItemDirective and the HostDirective\n */\n@Directive()\nexport abstract class NgxAccessibleAbstractDragAndDropItemDirective extends NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * An unique id of the draggable item\n\t */\n\tabstract itemId: Signal;\n\n\t/**\n\t *  Marks the item as focussed and selected\n\t */\n\tabstract markAsActive(): void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAccessibleDragAndDropAbstractService.html":{"url":"classes/NgxAccessibleDragAndDropAbstractService.html","title":"class - NgxAccessibleDragAndDropAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAccessibleDragAndDropAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that is used to make drag and drop components accessible for assistive technologies\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                customMessages\n                            \n                            \n                                    Private\n                                    Readonly\n                                liveRegionService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setDragAndDropDescription\n                            \n                            \n                                    Public\n                                setMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    messageRecord\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        customMessages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:32\n                        \n                    \n\n            \n                \n                    A custom set of messages used for the drag and drop events.\n Please check the readme for more information on what is necessary to make these messages accessible.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        liveRegionService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     LiveAnnouncer\n\n                    \n                \n                \n                    \n                        Default value : inject(LiveAnnouncer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:20\n                        \n                    \n\n            \n                \n                    The live region service\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setDragAndDropDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDragAndDropDescription(parent: HTMLElement, description?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:119\n                        \n                    \n\n\n            \n                \n                        Adds a description to the drag and drop host explaining how the drag and drop functions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                parent\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe drag and drop host\n\n\n                                            \n                                        \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional description used to overwrite the default description\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setMessage(message: NgxAccessibleDragAndDropMessage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Sets a message to the live region\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            NgxAccessibleDragAndDropMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided message\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:25\n                                \n                            \n                    \n                        \n                                A method that passes the current language, can either be a string or an Observable\n\n\n                                \n                                    Returns :     string | Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        messageRecord\n                    \n                \n\n                \n                    \n                        getmessageRecord()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/drag-and-drop.service.ts:161\n                                \n                            \n                    \n                        \n                                Returns the custom message record or the default when no custom record was provided\n\n\n                                \n                                    Returns :         Record\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { inject } from '@angular/core';\nimport { filter, map, Observable, of, take, tap } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccessibleDragAndDropMessageRecords } from '../../const';\nimport {\n\tNgxAccessibleDragAndDropMessage,\n\tNgxAccessibleDragAndDropMessageRecord,\n} from '../../types';\nimport { hideElement } from '../../utils';\n\n/**\n * An abstract service that is used to make drag and drop components accessible for assistive technologies\n */\nexport abstract class NgxAccessibleDragAndDropAbstractService {\n\t/**\n\t * The live region service\n\t */\n\tprivate readonly liveRegionService: LiveAnnouncer = inject(LiveAnnouncer);\n\n\t/**\n\t * A method that passes the current language, can either be a string or an Observable\n\t */\n\tabstract get currentLanguage(): string | Observable;\n\n\t/**\n\t * A custom set of messages used for the drag and drop events.\n\t *\n\t *  Please check the readme for more information on what is necessary to make these messages accessible.\n\t */\n\tpublic customMessages: Record;\n\n\t/**\n\t * Sets a message to the live region\n\t *\n\t * @param message - The provided message\n\t */\n\tpublic setMessage(message: NgxAccessibleDragAndDropMessage): Observable {\n\t\t// Iben: If no language was set, we early exit\n\t\tif (!this.currentLanguage) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No language was provided, so no message could be set.'\n\t\t\t);\n\n\t\t\treturn of();\n\t\t}\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap((currentLanguage) => {\n\t\t\t\t// Iben: Fetch the necessary data\n\t\t\t\tconst { type, data } = message;\n\n\t\t\t\tlet result: string = this.messageRecord[currentLanguage][type];\n\n\t\t\t\t// Iben: If no message was found, we early exit and throw an error\n\t\t\t\tif (!result) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No message for the corresponding drag and drop event was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Replace the necessary substrings\n\t\t\t\tif (type === 'selected' || type === 'deselected' || type === 'cancelled') {\n\t\t\t\t\tresult = result.replace(\n\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\tdata.itemLabel || `${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t);\n\t\t\t\t} else if (type === 'moved') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#from}}`,\n\t\t\t\t\t\t\tdata.fromLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.from}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t`{{#to}}`,\n\t\t\t\t\t\t\tdata.toLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].container} ${data.to}`\n\t\t\t\t\t\t);\n\t\t\t\t} else if (type === 'reordered') {\n\t\t\t\t\tresult = result\n\t\t\t\t\t\t.replace(\n\t\t\t\t\t\t\t'{{#item}}',\n\t\t\t\t\t\t\tdata.itemLabel ||\n\t\t\t\t\t\t\t\t`${this.messageRecord[currentLanguage].item} ${data.item}`\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.replace(`{{#from}}`, data.from)\n\t\t\t\t\t\t.replace(`{{#to}}`, data.to);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Update the message in the live region\n\t\t\t\tthis.liveRegionService.announce(result);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Adds a description to the drag and drop host explaining how the drag and drop functions\n\t *\n\t * @param  parent - The drag and drop host\n\t * @param description - An optional description used to overwrite the default description\n\t */\n\tpublic setDragAndDropDescription(parent: HTMLElement, description?: string): Observable {\n\t\t// Iben: Create the description element and its id\n\t\tconst element: HTMLParagraphElement = document.createElement('p');\n\t\tconst id: string = uuid();\n\n\t\t// Iben: Take the current language to fetch the message\n\t\treturn (\n\t\t\ttypeof this.currentLanguage === 'string'\n\t\t\t\t? of(this.currentLanguage)\n\t\t\t\t: this.currentLanguage\n\t\t).pipe(\n\t\t\ttap((language: string) => {\n\t\t\t\t// Iben: Get the description text\n\t\t\t\tconst text = description || this.messageRecord[language].description;\n\n\t\t\t\t// Iben: If no description was found, we early exit and throw an error\n\t\t\t\tif (!text) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'NgxAccessibleDragAndDropAbstractService: No description for the drag and drop container was found.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Set the description and id of the element\n\t\t\t\telement.innerText = text;\n\t\t\t\telement.setAttribute('id', id);\n\n\t\t\t\t// Iben: Attach the element to the parent and update the aria id\n\t\t\t\tparent.appendChild(element);\n\t\t\t\tparent.setAttribute('aria-describedby', id);\n\n\t\t\t\t// Iben: Hide element\n\t\t\t\thideElement(element);\n\t\t\t}),\n\t\t\tmap(() => null)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the custom message record or the default when no custom record was provided\n\t */\n\tprivate get messageRecord(): Record {\n\t\treturn this.customMessages || NgxAccessibleDragAndDropMessageRecords;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropBaseMessage.html":{"url":"interfaces/NgxAccessibleDragAndDropBaseMessage.html","title":"interface - NgxAccessibleDragAndDropBaseMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropBaseMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     KeyType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     KeyType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropContainerDirective.html":{"url":"directives/NgxAccessibleDragAndDropContainerDirective.html","title":"directive - NgxAccessibleDragAndDropContainerDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropContainerDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropContainer]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropContainer\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                index\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:15\n                        \n                    \n\n            \n                \n                    The index of the container\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-container.directive.ts:20\n                        \n                    \n\n            \n                \n                    An optional label used in the event messages\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropContainer]',\n\texportAs: 'ngxAccessibleDragAndDropContainer',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropContainerDirective {\n\t/**\n\t * The index of the container\n\t */\n\tpublic readonly index = input.required({ alias: \"ngxAccessibleDragAndDropContainerIndex\" });\n\n\t/**\n\t * An optional label used in the event messages\n\t */\n\tpublic readonly label = input(undefined, { alias: \"ngxAccessibleDragAndDropContainerLabel\" });\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxAccessibleDragAndDropHostDirective.html":{"url":"directives/NgxAccessibleDragAndDropHostDirective.html","title":"directive - NgxAccessibleDragAndDropHostDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxAccessibleDragAndDropHostDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxAccessibleDragAndDropHost]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n                    \n                        exportAs\n                        ngxAccessibleDragAndDropHost\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                containers\n                            \n                            \n                                    Public\n                                    Readonly\n                                description\n                            \n                            \n                                    Private\n                                    Readonly\n                                dragAndDropService\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                items\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getContainer\n                            \n                            \n                                    Public\n                                markAsActive\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                registerDragAndDropItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getContainer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getContainer(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:51\n                        \n                    \n\n\n            \n                \n                        Returns the container based on the provided index\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the container\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxAccessibleDragAndDropContainerDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAsActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsActive(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:42\n                        \n                    \n\n\n            \n                \n                        Mark a specific drag and drop item as active\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the drag and drop item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerDragAndDropItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccessibleAbstractDragAndDropItemDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        containers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:30\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop containers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:35\n                        \n                    \n\n            \n                \n                    An optional description describing how the drag and drop works.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dragAndDropService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAccessibleDragAndDropAbstractService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/drag-and-drop/drag-and-drop-host.directive.ts:25\n                        \n                    \n\n            \n                \n                    A list of all the drag and drop items\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, AfterViewInit, inject, input, contentChildren } from '@angular/core';\n\nimport {\n\tNgxAccessibleAbstractDragAndDropItemDirective,\n\tNgxAccessibleDragAndDropAbstractService,\n} from '../../abstracts';\n\nimport { NgxAccessibleDragAndDropContainerDirective } from './drag-and-drop-container.directive';\n\n/**\n * A directive to handle accessible drag and drop flows. This directive is meant to be placed on the host of the drag and drop container(s).\n */\n@Directive({\n\tselector: '[ngxAccessibleDragAndDropHost]',\n\texportAs: 'ngxAccessibleDragAndDropHost',\n\tstandalone: true,\n})\nexport class NgxAccessibleDragAndDropHostDirective implements AfterViewInit {\n\tprivate readonly dragAndDropService = inject(NgxAccessibleDragAndDropAbstractService);\n\treadonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * A list of all the drag and drop items\n\t */\n\tpublic items: Record = {};\n\n\t/**\n\t * A list of all the drag and drop containers\n\t */\n\tpublic readonly containers = contentChildren(NgxAccessibleDragAndDropContainerDirective, { descendants: true });\n\n\t/**\n\t * An optional description describing how the drag and drop works.\n\t */\n\tpublic readonly description = input(undefined, { alias: \"ngxAccessibleDragAndDropHostDescription\" });\n\n\t/**\n\t * Mark a specific drag and drop item as active\n\t *\n\t * @param  id - The id of the drag and drop item\n\t */\n\tpublic markAsActive(id: string): void {\n\t\tthis.items[id].markAsActive();\n\t}\n\n\t/**\n\t * Returns the container based on the provided index\n\t *\n\t * @param index - The index of the container\n\t */\n\tpublic getContainer(index: number): NgxAccessibleDragAndDropContainerDirective {\n\t\treturn this.containers().find((container) => container.index() === index);\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Add the description tag\n\t\tthis.dragAndDropService\n\t\t\t.setDragAndDropDescription(this.elementRef.nativeElement, this.description())\n\t\t\t.subscribe();\n\t}\n\n\tpublic registerDragAndDropItem(item: NgxAccessibleAbstractDragAndDropItemDirective): void {\n\t\tthis.items[item.itemId()] = item;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMessageRecord.html":{"url":"interfaces/NgxAccessibleDragAndDropMessageRecord.html","title":"interface - NgxAccessibleDragAndDropMessageRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMessageRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cancelled\n                                        \n                                \n                                \n                                        \n                                            container\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            deselected\n                                        \n                                \n                                \n                                        \n                                            item\n                                        \n                                \n                                \n                                        \n                                            moved\n                                        \n                                \n                                \n                                        \n                                            reordered\n                                        \n                                \n                                \n                                        \n                                            selected\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancelled:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        container\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        container:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        deselected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deselected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        moved\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        moved:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reordered\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reordered:         NgxAccessibleDragAndDropFromToMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAccessibleDragAndDropFromToMessage\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:     template literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     template literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAccessibleDragAndDropMoveEvent.html":{"url":"interfaces/NgxAccessibleDragAndDropMoveEvent.html","title":"interface - NgxAccessibleDragAndDropMoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAccessibleDragAndDropMoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/drag-and-drop.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            newContainer\n                                        \n                                \n                                \n                                        \n                                            newIndex\n                                        \n                                \n                                \n                                        \n                                            previousContainer\n                                        \n                                \n                                \n                                        \n                                            previousIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        newContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousContainer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousContainer:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type NgxAccessibleDragAndDropFromToMessage =\n\t| `${string}{{#item}}${string}{{#to}}${string}{{#from}}${string}`\n\t| `${string}{{#item}}${string}{{#from}}${string}{{#to}}${string}`\n\t| `${string}{{#to}}${string}{{#item}}${string}{{#from}}${string}`\n\t| `${string}{{#to}}${string}{{#from}}${string}{{#item}}${string}`\n\t| `${string}{{#from}}${string}{{#item}}${string}{{#to}}${string}`\n\t| `${string}{{#from}}${string}{{#to}}${string}{{#item}}${string}`;\n\nexport interface NgxAccessibleDragAndDropMessageRecord {\n\tselected: `${string}{{#item}}${string}`;\n\tdeselected: `${string}{{#item}}${string}`;\n\treordered: NgxAccessibleDragAndDropFromToMessage;\n\tmoved: NgxAccessibleDragAndDropFromToMessage;\n\tcancelled: `${string}{{#item}}${string}`;\n\titem: string;\n\tcontainer: string;\n\tdescription: string;\n}\n\nexport type NgxAccessibleDragAndDropMoveType = 'reordered' | 'moved';\n\ninterface NgxAccessibleDragAndDropBaseMessage {\n\ttype: KeyType;\n\tdata: DataType;\n}\n\nexport type NgxAccessibleDragAndDropMessage =\n\t| NgxAccessibleDragAndDropBaseMessage\n\t| NgxAccessibleDragAndDropBaseMessage;\n\nexport interface NgxAccessibleDragAndDropMoveEvent {\n\tpreviousIndex: number;\n\tnewIndex: number;\n\tpreviousContainer: number;\n\tnewContainer: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionComponent.html":{"url":"components/NgxAccordionComponent.html","title":"component - NgxAccordionComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/accordion.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyedSubject\n                            \n                            \n                                    Private\n                                itemRegisteredSubject\n                            \n                            \n                                    Public\n                                items\n                            \n                            \n                                    Public\n                                open\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                moveFocus\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerItem\n                            \n                            \n                                    Public\n                                removeItem\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                open\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        open\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                            \n                        \n                \n                    \n                        Open the specific items in the accordion\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveFocus(id: string, direction: \"up\" | \"down\" | \"first\" | \"last\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Moves the focus to an accordion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the current item\n\n\n                                            \n                                        \n                                        \n                                                direction\n                                            \n                                                        \"up\" | \"down\" | \"first\" | \"last\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe direction we move in\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:128\n                        \n                    \n\n\n            \n                \n                        Handle the destroyed state\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:82\n                        \n                    \n\n\n            \n                \n                        Register an accordion item to the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(item: NgxAccordionItemComponent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:92\n                        \n                    \n\n\n            \n                \n                        Removes an accordion item from the container\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            NgxAccordionItemComponent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn accordion item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:38\n                        \n                    \n\n            \n                \n                    A subject to hold the destroyed event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        itemRegisteredSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold a registered event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionItemComponent[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:43\n                        \n                    \n\n            \n                \n                    A list of all accordion items\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/accordion.component.ts:48\n                        \n                    \n\n            \n                \n                    Open the specific items in the accordion\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n\tChangeDetectionStrategy,\n\tComponent,\n\teffect,\n\tinput,\n\tInputSignal,\n\tOnDestroy,\n} from '@angular/core';\nimport { Subject, take, tap } from 'rxjs';\n\nimport { NgxAccordionOpenBehavior } from '../../types';\n\nimport { NgxAccordionItemComponent } from './item/accordion-item.component';\n\n/**\n * A WCAG/ARIA compliant implementation of the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion',\n\ttemplate: '',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-accordion',\n\t\trole: 'region',\n\t},\n})\nexport class NgxAccordionComponent implements OnDestroy {\n\t/**\n\t * A subject to hold a registered event\n\t */\n\tprivate itemRegisteredSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to hold the destroyed event\n\t */\n\tprivate destroyedSubject: Subject = new Subject();\n\n\t/**\n\t * A list of all accordion items\n\t */\n\tpublic items: NgxAccordionItemComponent[] = [];\n\n\t/**\n\t * Open the specific items in the accordion\n\t */\n\tpublic open: InputSignal = input();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tconst open = this.open();\n\n\t\t\tthis.itemRegisteredSubject.pipe(\n\t\t\t\ttake(1),\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Use a setTimeOut so we wait an extra tick\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t// Iben: Open all items\n\t\t\t\t\t\tif (open === 'all') {\n\t\t\t\t\t\t\tthis.items.forEach((item) => item.updateAccordionItemState(true));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Iben: Open specific items\n\t\t\t\t\t\t\tconst indexes =\n\t\t\t\t\t\t\t\topen === 'first' ? [0] : Array.isArray(open) ? open : [open];\n\n\t\t\t\t\t\t\tindexes.forEach((index) => {\n\t\t\t\t\t\t\t\tthis.items[index]?.updateAccordionItemState(true);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Register an accordion item to the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic registerItem(item: NgxAccordionItemComponent): void {\n\t\tthis.itemRegisteredSubject.next();\n\t\tthis.items.push(item);\n\t}\n\n\t/**\n\t * Removes an accordion item from the container\n\t *\n\t * @param item - An accordion item\n\t */\n\tpublic removeItem(item: NgxAccordionItemComponent): void {\n\t\t// Iben: Get the index of the item\n\t\tconst index = this.items.findIndex(({ id }) => id === item.id);\n\n\t\t// Iben: If no item was found, we early exit\n\t\tif (index === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Remove the item\n\t\tthis.items = [...this.items.slice(0, index), ...this.items.slice(index + 1)];\n\t}\n\n\t/**\n\t * Moves the focus to an accordion\n\t *\n\t * @param  id - The id of the current item\n\t * @param  direction - The direction we move in\n\t */\n\tpublic moveFocus(id: string, direction: 'up' | 'down' | 'first' | 'last') {\n\t\t// Iben: If we go to the first or last accordion, we don't need to find the index\n\t\tif (direction === 'first' || direction === 'last') {\n\t\t\tthis.items[direction === 'first' ? 0 : this.items.length - 1].focus();\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Find the index and move to the next\n\t\tconst index = this.items.findIndex((item) => id === item.id);\n\n\t\tthis.items[direction === 'down' ? index + 1 : index - 1]?.focus();\n\t}\n\n\t/**\n\t * Handle the destroyed state\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyedSubject.next();\n\t\tthis.destroyedSubject.complete();\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxAccordionItemComponent.html":{"url":"components/NgxAccordionItemComponent.html","title":"component - NgxAccordionItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxAccordionItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        A WCAG/ARIA compliant implementation of an item in the accordion pattern.\nhttps://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                AfterViewInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-accordion-item\n            \n\n\n            \n                imports\n                \n                            NgTemplateOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./accordion-item.component.html\n            \n\n\n\n            \n                styleUrl\n                ./accordion-item.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                contentTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                detailsElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                disabled\n                            \n                            \n                                    Private\n                                hasFocus\n                            \n                            \n                                    Public\n                                    Readonly\n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Public\n                                    Readonly\n                                summaryElement\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                arrowDown\n                            \n                            \n                                    \n                                arrowUp\n                            \n                            \n                                    \n                                end\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Private\n                                handleWhenFocussed\n                            \n                            \n                                    \n                                home\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Public\n                                setFocus\n                            \n                            \n                                    Public\n                                updateAccordionItemState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                disabled\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        disabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                            \n                        \n                \n                    \n                        Whether the accordion item is disabled\n\n                    \n                \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowDown\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowDown(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.ArrowUp\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nkeydown.ArrowUp(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.End\n                        \n                    \n                \n            \n            \n                \nkeydown.End()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        keydown.Home\n                        \n                    \n                \n            \n            \n                \nkeydown.Home()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                \n            \n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowDown(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item below the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        arrowUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    arrowUp(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:67\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the accordion item above the current one\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        end\n                        \n                    \n                \n            \n            \n                \n                        \n                    end()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the last accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:137\n                        \n                    \n\n\n            \n                \n                        Set the focus on the summary item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:193\n                        \n                    \n\n\n            \n                \n                        Only perform an action when the item has focus\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        home\n                        \n                    \n                \n            \n            \n                \n                        \n                    home()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:89\n                        \n                    \n\n\n            \n                \n                        Moves the focus to the first accordion item\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:160\n                        \n                    \n\n\n            \n                \n                        Listen to the default HTML events of the details object\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:184\n                        \n                    \n\n\n            \n                \n                        Remove the item from its parent when destroyed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:153\n                        \n                    \n\n\n            \n                \n                        Register the item to its parent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:146\n                        \n                    \n\n\n            \n                \n                        Set the focus state of the accordion item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the item has focus\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        updateAccordionItemState\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateAccordionItemState(isOpen: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:127\n                        \n                    \n\n\n            \n                \n                        Updates the current open/closed state of the accordion item, regardless of the disabled state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isOpen\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        contentTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:57\n                        \n                    \n\n            \n                \n                    The template for the content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        detailsElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('details')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:47\n                        \n                    \n\n            \n                \n                    The details element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        disabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:107\n                        \n                    \n\n            \n                \n                    Whether the accordion item is disabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:122\n                        \n                    \n\n            \n                \n                    Whether the accordion item is focussed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('headerTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:62\n                        \n                    \n\n            \n                \n                    The template for the header\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : uuid()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:112\n                        \n                    \n\n            \n                \n                    The id of the accordion item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:117\n                        \n                    \n\n            \n                \n                    Whether the accordion item is open\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxAccordionComponent\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxAccordionComponent)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        summaryElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('summary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/accordion/item/accordion-item.component.ts:52\n                        \n                    \n\n            \n                \n                    The summary element\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgTemplateOutlet } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  HostListener,\n  inject,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  TemplateRef,\n  input,\n  viewChild,\n  contentChild,\n  WritableSignal,\n  signal\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxAccordionComponent } from '../accordion.component';\n\n/**\n * A WCAG/ARIA compliant implementation of an item in the accordion pattern.\n *\n * https://www.w3.org/WAI/ARIA/apg/patterns/accordion/\n */\n@Component({\n\tselector: 'ngx-accordion-item',\n\ttemplateUrl: './accordion-item.component.html',\n\tstyleUrl: './accordion-item.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\timports: [NgTemplateOutlet],\n\thost: {\n\t\tclass: 'ngx-accordion-item',\n\t},\n})\nexport class NgxAccordionItemComponent implements OnInit, AfterViewInit, OnDestroy {\n\tprivate readonly parent: NgxAccordionComponent = inject(NgxAccordionComponent);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * The details element\n\t */\n\tpublic readonly detailsElement = viewChild('details');\n\n\t/**\n\t * The summary element\n\t */\n\tpublic readonly summaryElement = viewChild('summary');\n\n\t/**\n\t * The template for the content\n\t */\n\tpublic readonly contentTemplate = contentChild>('contentTmpl');\n\n\t/**\n\t * The template for the header\n\t */\n\tpublic readonly headerTemplate = contentChild>('headerTmpl');\n\n\t/**\n\t * Moves the focus to the accordion item above the current one\n\t */\n\t@HostListener('keydown.ArrowUp', ['$event']) arrowUp(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'up');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the accordion item below the current one\n\t */\n\t@HostListener('keydown.ArrowDown', ['$event']) arrowDown(event: Event) {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopImmediatePropagation();\n\t\t\tthis.parent.moveFocus(this.id, 'down');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the first accordion item\n\t */\n\t@HostListener('keydown.Home') home() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'first');\n\t\t});\n\t}\n\n\t/**\n\t * Moves the focus to the last accordion item\n\t */\n\t@HostListener('keydown.End') end() {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.parent.moveFocus(this.id, 'last');\n\t\t});\n\t}\n\n\t/**\n\t * Whether the accordion item is disabled\n\t */\n\tpublic readonly disabled = input(false);\n\n\t/**\n\t * The id of the accordion item\n\t */\n\tpublic readonly id: string = uuid();\n\n\t/**\n\t * Whether the accordion item is open\n\t */\n\tpublic isOpen: WritableSignal = signal(false);\n\n\t/**\n\t * Whether the accordion item is focussed\n\t */\n\tprivate hasFocus: WritableSignal = signal(false);\n\n\t/**\n\t * Updates the current open/closed state of the accordion item, regardless of the disabled state\n\t */\n\tpublic updateAccordionItemState(isOpen: boolean): void {\n\t\t// Iben: Sets the item to open and updates the parent state\n\t\tthis.isOpen.set(isOpen)\n\n\t\t// Iben: Trigger the visual changes\n\t\tthis.cdRef.detectChanges();\n\t}\n\t/**\n\t * Set the focus on the summary item\n\t */\n\tpublic focus() {\n\t\tthis.summaryElement()?.nativeElement.focus();\n\t}\n\n\t/**\n\t * Set the focus state of the accordion item\n\t *\n\t * @param hasFocus - Whether the item has focus\n\t */\n\tpublic setFocus(hasFocus: boolean) {\n\t\tthis.hasFocus.set(hasFocus);\n\t}\n\n\t/**\n\t * Register the item to its parent\n\t */\n\tpublic ngOnInit(): void {\n\t\tthis.parent.registerItem(this);\n\t}\n\n\t/**\n\t * Listen to the default HTML events of the details object\n\t */\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If for some reason no accordion item is found, we return\n\t\tconst detailsElement = this.detailsElement();\n\t\tif (!detailsElement?.nativeElement) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Prevent the accordion from being opened if it is disabled\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'click', (event: Event) => {\n\t\t\tif (this.disabled()) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Listen to the open state of details and update the internal one\n\t\tthis.renderer.listen(detailsElement.nativeElement, 'toggle', (event: ToggleEvent) => {\n\t\t\tthis.updateAccordionItemState(event.newState === 'open');\n\t\t});\n\t}\n\n\t/**\n\t * Remove the item from its parent when destroyed\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.parent.removeItem(this);\n\t}\n\n\t/**\n\t * Only perform an action when the item has focus\n\t *\n\t * @param  action - The provided action\n\t */\n\tprivate handleWhenFocussed(action: () => void) {\n\t\t// Iben: Early exit if there's no focus\n\t\tif (!this.hasFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Perform the action\n\t\taction();\n\t}\n}\n\n    \n\n    \n        \n\t\n\t\t\n\t\n\n\t\n\t\t\n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t\t\t\t\t\t\t\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxAccordionItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxAriaSortPipe.html":{"url":"pipes/NgxAriaSortPipe.html","title":"pipe - NgxAriaSortPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxAriaSortPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxAriaSort\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/aria-sort/aria-sort.pipe.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     \"none\" | \"ascending\" | \"descending\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from '../../components';\nimport { NgxTableSortEvent } from '../../types';\n\n\n@Pipe({\n\tname: 'ngxAriaSort',\n\tstandalone: true,\n})\nexport class NgxAriaSortPipe implements PipeTransform {\n\ttransform(value: {\n\t\tcurrentSorting: NgxTableSortEvent;\n\t\tcell: NgxAbstractTableCellDirective;\n\t}): 'none' | 'ascending' | 'descending' {\n\t\tconst { cell } = value;\n\n\t\tif (!cell || !cell.sortDirection) {\n\t\t\treturn 'none';\n\t\t}\n\n\t\treturn cell.sortDirection.toLocaleLowerCase() as 'ascending' | 'descending';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxAuthenticatedHttpClient.html":{"url":"injectables/NgxAuthenticatedHttpClient.html","title":"injectable - NgxAuthenticatedHttpClient","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxAuthenticatedHttpClient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                download\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Private\n                                handleUrl\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:99\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a DELETE request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Constructs a GET request tailored to downloading to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(url: string, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:41\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a GET request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUrl(url: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Adds a base-url to every request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe url of the request\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                        \n                    patch(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:166\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PATCH request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n            \n                \n                        \n                    post(url: string, body: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:120\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a POST request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(url: string, body?: any, params?, withCredentials: boolean, context?: HttpContext)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:143\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Constructs a PUT request to the provided API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe url of the API\n\n\n                                            \n                                        \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe body we wish to send\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional set of params we wish to send to the API\n\n\n                                            \n                                        \n                                        \n                                                withCredentials\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether the call is made by an authenticated user, by default true\n\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                        HttpContext\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn optional HTTPContext\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/services/authenticated-http-client/authenticated-http-client.service.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport clean from 'obj-clean';\nimport { map, Observable } from 'rxjs';\n\nimport { NgxAuthenticationUrlHandlerToken } from '../../tokens';\nimport { NgxAuthenticatedHttpClientConfiguration } from '../../types';\n\n/**\n * An opinionated wrapper of the HttpClient providing easy ways to make authenticated and unauthenticated calls\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxAuthenticatedHttpClient {\n\tprivate readonly httpClient = inject(HttpClient);\n\n\tprivate baseUrl: string;\n\n\tconstructor() {\n\t\tconst baseUrlHandler = inject(NgxAuthenticationUrlHandlerToken);\n\n\t\t// Iben: Setup the base url\n\t\tthis.baseUrl = baseUrlHandler ? baseUrlHandler() : '';\n\t}\n\n\t/**\n\t * Adds a base-url to every request\n\t * @param {string} url - The url of the request\n\t */\n\tprivate handleUrl(url: string): string {\n\t\treturn `${this.baseUrl}/${url}`;\n\t}\n\n\t/**\n\t * Constructs a GET request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic get(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.get(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ withCredentials, params, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a GET request tailored to downloading to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic download(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient\n\t\t\t.get(\n\t\t\t\tthis.handleUrl(url),\n\t\t\t\tclean({\n\t\t\t\t\twithCredentials,\n\t\t\t\t\tparams,\n\t\t\t\t\tresponseType: 'blob',\n\t\t\t\t\tobserve: 'response',\n\t\t\t\t\tcontext,\n\t\t\t\t}) as Parameters[1]\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((response: HttpResponse) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tfileType: response.headers.get('content-disposition').split('.')[1],\n\t\t\t\t\t\tblob: response.body as Blob,\n\t\t\t\t\t};\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\t/**\n\t * Constructs a DELETE request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic delete(\n\t\turl: string,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.delete(\n\t\t\tthis.handleUrl(url),\n\t\t\tclean({ params, withCredentials, context }) as Parameters[1]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a POST request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic post(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.post(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PUT request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic put(\n\t\turl: string,\n\t\tbody?: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.put(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n\n\t/**\n\t * Constructs a PATCH request to the provided API\n\t *\n\t * @param  url - The url of the API\n\t * @param body - The body we wish to send\n\t * @param params - An optional set of params we wish to send to the API\n\t * @param withCredentials - Whether the call is made by an authenticated user, by default true\n\t * @param context - An optional HTTPContext\n\t */\n\tpublic patch(\n\t\turl: string,\n\t\tbody: any,\n\t\tparams?: Parameters[1]['params'],\n\t\twithCredentials: boolean = true,\n\t\tcontext?: HttpContext\n\t): Observable {\n\t\treturn this.httpClient.patch(\n\t\t\tthis.handleUrl(url),\n\t\t\tbody,\n\t\t\tclean({ params, withCredentials, context }) as Parameters[2]\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedHttpClientConfiguration.html":{"url":"interfaces/NgxAuthenticatedHttpClientConfiguration.html","title":"interface - NgxAuthenticatedHttpClientConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedHttpClientConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            authenticatedCallHandler\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            baseUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            interceptors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authenticatedCallHandler\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authenticatedCallHandler:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        baseUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseUrl:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interceptors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interceptors:     HttpInterceptorFn[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HttpInterceptorFn[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional list of interceptors that will be provided to the HttpClient\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticatedRoute.html":{"url":"interfaces/NgxAuthenticatedRoute.html","title":"interface - NgxAuthenticatedRoute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticatedRoute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authenticated-route.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n\n            \n\n            \n                Extends\n            \n            \n                        Route\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Route } from '@angular/router';\n\n/**\n * An interface for the routes used in an application that has uses the NgxAuthenticationAbstractService\n */\nexport interface NgxAuthenticatedRoute extends Route {\n\tdata?: {\n\t\t/**\n\t\t * The features for the NgxHasFeatureGuard\n\t\t */\n\t\tfeature?: FeatureType | FeatureType[];\n\t\t/**\n\t\t * Whether all features should be provided, by default true, for the NgxHasFeatureGuard\n\t\t */\n\t\tshouldHaveAllFeatures?: boolean;\n\t\t/**\n\t\t * The permissions for the NgxHasPermissionGuard\n\t\t */\n\t\tpermission?: PermissionType | PermissionType[];\n\t\t/**\n\t\t * Whether all permissions should be provided, by default true, for the NgxHasPermissionGuard\n\t\t */\n\t\tshouldHaveAllPermissions?: boolean;\n\t\t/**\n\t\t * Whether the user should be authenticated, for the NgxIsAuthenticatedGuard\n\t\t */\n\t\tshouldBeAuthenticated?: boolean;\n\t\t/**\n\t\t * The location to redirect to if one of the guards conditions isn't met\n\t\t */\n\t\tredirect?: string[];\n\t\t/**\n\t\t * Remaining additional properties\n\t\t */\n\t\t[key: string]: unknown;\n\t};\n}\n\nexport type NgxAuthenticatedRoutes = NgxAuthenticatedRoute[];\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxAuthenticationAbstractService.html":{"url":"classes/NgxAuthenticationAbstractService.html","title":"class - NgxAuthenticationAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxAuthenticationAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/abstracts/authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationResponseSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                authenticationStatusSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                globalFeaturesSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasAuthenticated$\n                            \n                            \n                                    Public\n                                    Readonly\n                                isAuthenticated$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                getAuthenticationResponse\n                            \n                            \n                                    Private\n                                getSession\n                            \n                            \n                                    Public\n                                hasFeature\n                            \n                            \n                                    Public\n                                hasPermission\n                            \n                            \n                                    Public\n                                setGlobalFeatures\n                            \n                            \n                                    Public\n                                signIn\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signInUser\n                            \n                            \n                                    Public\n                                signOut\n                            \n                            \n                                    Protected\n                                    Abstract\n                                signOutUser\n                            \n                            \n                                    Protected\n                                storeAuthenticationResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    user$\n                                \n                                \n                                    session$\n                                \n                                \n                                    metadata$\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationResponseSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to store the authentication response if no other state implementation was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationStatusSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject('unset')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:40\n                        \n                    \n\n            \n                \n                    A subject to store whether we've authenticated already\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        globalFeaturesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject[]>([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:46\n                        \n                    \n\n            \n                \n                    A subject to store global features that are available for all users, regardless of their authenticated state\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:53\n                        \n                    \n\n            \n                \n                    Whether an authentication attempt has been made\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:61\n                        \n                    \n\n            \n                \n                    Whether the user is authenticated\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthenticationResponse()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:96\n                        \n                    \n\n\n            \n                \n                        Returns the authentication response from the state\n\n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Returns a session or an empty session depending on the authenticated state\n\n\n                        \n                            Returns :     Observable<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasFeature\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasFeature(requiredFeatures: NgxAuthenticationResponseFeature[], shouldHaveAllFeatures: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:177\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required features.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredFeatures\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required features\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllFeatures\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all features in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasPermission(requiredPermissions, shouldHaveAllPermissions: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:211\n                        \n                    \n\n\n            \n                \n                        Returns whether the user has the required permissions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                requiredPermissions\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nAn array of required permissions\n\n\n                                            \n                                        \n                                        \n                                                shouldHaveAllPermissions\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nWhether all permissions in the array are required, by default true\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setGlobalFeatures\n                        \n                    \n                \n            \n            \n                \n                        \n                    setGlobalFeatures(features: NgxAuthenticationResponseFeature[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:199\n                        \n                    \n\n\n            \n                \n                        Sets a set of global features that are always present, regardless of the authenticated state of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                features\n                                            \n                                                            NgxAuthenticationResponseFeature[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of features\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                        \n                    signIn(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:138\n                        \n                    \n\n\n            \n                \n                        Signs in a user and stores the authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signInUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signInUser(signInData: SignInDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:71\n                        \n                    \n\n\n            \n                \n                        The call required to sign in a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signInData\n                                            \n                                                            SignInDataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed to sign in a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        signOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOut(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Signs out a user and removes the stored authentication response\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        signOutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    signOutUser(signoutDataType?: SignoutDataType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:80\n                        \n                    \n\n\n            \n                \n                        The call required to sign out a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                signoutDataType\n                                            \n                                                            SignoutDataType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional data needed to sign out a user\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        storeAuthenticationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeAuthenticationResponse(response: AuthenticationResponseType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Stores the authentication response in the state\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                        AuthenticationResponseType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authentication response\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        user$\n                    \n                \n\n                \n                    \n                        getuser$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:103\n                                \n                            \n                    \n                        \n                                The authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        session$\n                    \n                \n\n                \n                    \n                        getsession$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:114\n                                \n                            \n                    \n                        \n                                The session of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        metadata$\n                    \n                \n\n                \n                    \n                        getmetadata$()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/authentication/src/lib/abstracts/authentication.service.ts:125\n                                \n                            \n                    \n                        \n                                The metadata of the authenticated user\n\n\n                                \n                                    Returns :     Observable<>\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { AuthenticationResponse } from '@ibenvandeveire/types-authentication';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tObservable,\n\tof,\n\tswitchMap,\n\ttap,\n} from 'rxjs';\n\nimport { NgxAuthenticationResponseFeature, NgxAuthenticationStatus } from '../types';\n\n/**\n * An abstract service used by the directives, guards and other components of @ibenvandeveire/ngx-auth\n *\n * @template AuthenticationResponseType - The type of authentication response\n * @template SignInDataType - The data type used to sign in a user\n * @template SignoutDataType - The data type used to sign out a user\n * @template SignOutResponseType - The data type you get when signing out a user\n */\nexport abstract class NgxAuthenticationAbstractService = AuthenticationResponse,\n\tSignInDataType = any,\n\tSignoutDataType = any,\n\tSignOutResponseType = void,\n> {\n\t/**\n\t * A subject to store the authentication response if no other state implementation was provided\n\t */\n\tprivate readonly authenticationResponseSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to store whether we've authenticated already\n\t */\n\tprivate readonly authenticationStatusSubject: BehaviorSubject =\n\t\tnew BehaviorSubject('unset');\n\n\t/**\n\t * A subject to store global features that are available for all users, regardless of their authenticated state\n\t */\n\tprivate readonly globalFeaturesSubject: BehaviorSubject[]\n\t> = new BehaviorSubject[]>([]);\n\n\t/**\n\t * Whether an authentication attempt has been made\n\t */\n\tpublic readonly hasAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status !== 'unset')\n\t);\n\n\t/**\n\t * Whether the user is authenticated\n\t */\n\tpublic readonly isAuthenticated$: Observable = this.authenticationStatusSubject.pipe(\n\t\tdistinctUntilChanged(),\n\t\tmap((status) => status === 'signed-in')\n\t);\n\n\t/**\n\t * The call required to sign in a user\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tprotected abstract signInUser(\n\t\tsignInData: SignInDataType\n\t): Observable;\n\n\t/**\n\t * The call required to sign out a user\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a user\n\t */\n\tprotected abstract signOutUser(\n\t\tsignoutDataType?: SignoutDataType\n\t): Observable;\n\n\t/**\n\t * Stores the authentication response in the state\n\t *\n\t * @param response - The authentication response\n\t */\n\tprotected storeAuthenticationResponse(response: AuthenticationResponseType): void {\n\t\tthis.authenticationResponseSubject.next(response);\n\t}\n\n\t/**\n\t * Returns the authentication response from the state\n\t */\n\tprotected getAuthenticationResponse(): Observable {\n\t\treturn this.authenticationResponseSubject.asObservable();\n\t}\n\n\t/**\n\t * The authenticated user\n\t */\n\tpublic get user$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap((response) => response.user),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The session of the authenticated user\n\t */\n\tpublic get session$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ session }: AuthenticationResponseType) => session),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * The metadata of the authenticated user\n\t */\n\tpublic get metadata$(): Observable {\n\t\treturn this.getAuthenticationResponse().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ metadata }: AuthenticationResponseType) => metadata),\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Signs in a user and stores the authentication response\n\t *\n\t * @param signInData - The data needed to sign in a user\n\t */\n\tpublic signIn(signInData: SignInDataType): Observable {\n\t\t// Iben: Perform the call to sign in a user\n\t\treturn this.signInUser(signInData).pipe(\n\t\t\ttap((response: AuthenticationResponseType) => {\n\t\t\t\t// Iben: Set the user as signed in\n\t\t\t\tthis.authenticationStatusSubject.next('signed-in');\n\n\t\t\t\t// Iben: Store the authentication response\n\t\t\t\tthis.storeAuthenticationResponse(response);\n\t\t\t}),\n\t\t\t// Iben: Convert to void\n\t\t\tmap(() => undefined)\n\t\t);\n\t}\n\n\t/**\n\t * Signs out a user and removes the stored authentication response\n\t *\n\t * @param signoutDataType - Optional data needed to sign out a use\n\t */\n\tpublic signOut(signoutDataType?: SignoutDataType): Observable {\n\t\t// Iben: Perform the call to sign out a user\n\t\treturn this.signOutUser(signoutDataType).pipe(\n\t\t\ttap(() => {\n\t\t\t\t// Iben: Set the user as signed out\n\t\t\t\tthis.authenticationStatusSubject.next('signed-out');\n\n\t\t\t\t// Iben: Remove the stored authentication response\n\t\t\t\tthis.storeAuthenticationResponse(undefined);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns whether the user has the required features.\n\t *\n\t * @param requiredFeatures - An array of required features\n\t * @param shouldHaveAllFeatures - Whether all features in the array are required, by default true\n\t */\n\tpublic hasFeature(\n\t\trequiredFeatures: NgxAuthenticationResponseFeature[],\n\t\tshouldHaveAllFeatures: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn combineLatest([this.getSession(), this.globalFeaturesSubject.asObservable()]).pipe(\n\t\t\tmap(([{ features }, globalFeatures]) => {\n\t\t\t\tconst sessionFeatures = new Set([...(features || []), ...(globalFeatures || [])]);\n\t\t\t\t// Iben: Return whether the user has the required features\n\t\t\t\t// We cast to strings here to make the typing work\n\t\t\t\treturn shouldHaveAllFeatures\n\t\t\t\t\t? requiredFeatures.every((feature) => sessionFeatures.has(`${feature}`))\n\t\t\t\t\t: requiredFeatures.some((feature) => sessionFeatures.has(`${feature}`));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Sets a set of global features that are always present, regardless of the authenticated state of the user\n\t *\n\t * @param  features - A list of features\n\t */\n\tpublic setGlobalFeatures(\n\t\tfeatures: NgxAuthenticationResponseFeature[]\n\t): void {\n\t\tthis.globalFeaturesSubject.next(features);\n\t}\n\n\t/**\n\t * Returns whether the user has the required permissions.\n\t *\n\t * @param requiredPermissions - An array of required permissions\n\t * @param shouldHaveAllPermissions - Whether all permissions in the array are required, by default true\n\t */\n\tpublic hasPermission(\n\t\trequiredPermissions: AuthenticationResponseType['session']['permissions'],\n\t\tshouldHaveAllPermissions: boolean = true\n\t): Observable {\n\t\t// Iben: Get the session\n\t\treturn this.getSession().pipe(\n\t\t\tfilter(Boolean),\n\t\t\tmap(({ permissions }) => {\n\t\t\t\tconst sessionPermissions = new Set([...permissions]);\n\n\t\t\t\t// Iben: Return whether the user has the required permissions\n\t\t\t\treturn shouldHaveAllPermissions\n\t\t\t\t\t? requiredPermissions.every((permission) => sessionPermissions.has(permission))\n\t\t\t\t\t: requiredPermissions.some((permission) => sessionPermissions.has(permission));\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Returns a session or an empty session depending on the authenticated state\n\t */\n\tprivate getSession(): Observable {\n\t\treturn this.isAuthenticated$.pipe(\n\t\t\tswitchMap((isAuthenticated) => {\n\t\t\t\t// Iben: If the user is authenticated, we return the session, if not, we return an empty version for the hasPermission and hasFeature methods\n\t\t\t\t// This ensures we always get a response\n\t\t\t\treturn isAuthenticated\n\t\t\t\t\t? this.session$\n\t\t\t\t\t: of({\n\t\t\t\t\t\t\tfeatures: [],\n\t\t\t\t\t\t\tpermissions: [],\n\t\t\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxAuthenticationConfiguration.html":{"url":"interfaces/NgxAuthenticationConfiguration.html","title":"interface - NgxAuthenticationConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxAuthenticationConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/types/authentication-configuration.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration of the authentication handlers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            httpClientConfiguration\n                                        \n                                \n                                \n                                        \n                                            service\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        httpClientConfiguration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        httpClientConfiguration:         NgxAuthenticatedHttpClientConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxAuthenticatedHttpClientConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        service\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        service:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The provided implementation of the NgxAuthenticationAbstractService\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpInterceptorFn, HttpRequest } from '@angular/common/http';\nimport { Type } from '@angular/core';\n\nimport { NgxAuthenticationAbstractService } from '../abstracts';\n\n/**\n * The configuration of the authentication handlers\n */\nexport interface NgxAuthenticationConfiguration {\n\t/**\n\t * The provided implementation of the NgxAuthenticationAbstractService\n\t */\n\tservice: Type;\n\t/**\n\t * An optional set of configuration to provide when the NgxAuthenticatedHttpClient needs to be used\n\t */\n\thttpClientConfiguration?: NgxAuthenticatedHttpClientConfiguration;\n}\n\nexport interface NgxAuthenticatedHttpClientConfiguration {\n\t/**\n\t * An optional list of interceptors that will be provided to the HttpClient\n\t */\n\tinterceptors?: HttpInterceptorFn[];\n\t/**\n\t * A base url generator function that will be run at injection time used by any request made by the NgxAuthenticatedHttpClient\n\t */\n\tbaseUrl?: () => string;\n\t/**\n\t * An optional handler for each authenticated API request made by the NgxAuthenticatedHttpClient\n\t */\n\tauthenticatedCallHandler?: (request: HttpRequest) => HttpRequest;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxBroadcastChannelService.html":{"url":"injectables/NgxBroadcastChannelService.html","title":"injectable - NgxBroadcastChannelService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxBroadcastChannelService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\nFor more information:\nhttps://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                broadcastChannel\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeChannel\n                            \n                            \n                                    Public\n                                initChannel\n                            \n                            \n                                    Public\n                                postMessage\n                            \n                            \n                                    Public\n                                selectChannelMessageErrors\n                            \n                            \n                                    Public\n                                selectChannelMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeChannel(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:55\n                        \n                    \n\n\n            \n                \n                        closeChannel\nThe closeChannel method closes a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    initChannel(...args: ConstructorParameters<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:29\n                        \n                    \n\n\n            \n                \n                        initChannel\nThe initChannel method initializes a new BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ConstructorParameters<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe arguments to pass to the BroadcastChannel constructor.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        postMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    postMessage(channelName: string, message: MessageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:72\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        postMessage\nThe postMessage method sends a message to a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                        MessageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe payload to send through the channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessageErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessageErrors(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessageErrors\nThe selectChannelMessageErrors method subscribes to the messageerror (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The messageerror event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectChannelMessages\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectChannelMessages(channelName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    MessageType\n                            \n                        \n                    \n\n            \n                \n                        selectChannelMessages\nThe selectChannelMessages method subscribes to the message (bc.onmessage) event of a selected BroadcastChannel instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                channelName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the Broadcast Channel.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable - The message event of the channel wrapped in an observable.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        broadcastChannel\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:20\n                        \n                    \n\n            \n                \n                    A record holding all the broadcast channels\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/broadcast-channel/broadcast-channel.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { EMPTY, fromEvent, Observable } from 'rxjs';\n\n/**\n * A service that wraps the BroadCastChannel API and provides an Observable based implementation to the channel messages.\n *\n * For more information:\n * https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxBroadcastChannelService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record holding all the broadcast channels\n\t */\n\tprivate broadcastChannel: Record = {};\n\n\t/**\n\t * initChannel\n\t *\n\t * The initChannel method initializes a new BroadcastChannel instance.\n\t *\n\t * @param args{ConstructorParameters} - The arguments to pass to the BroadcastChannel constructor.\n\t */\n\tpublic initChannel(...args: ConstructorParameters): void {\n\t\t// Iben: Only run when in browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\tconst [channelName] = args;\n\n\t\t\tif (!channelName) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'NgxUtils: There was an attempt to initialize a BroadcastChannel without providing a name.'\n\t\t\t\t);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this.broadcastChannel[channelName]) {\n\t\t\t\tthis.broadcastChannel[channelName] = new BroadcastChannel(...args);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * closeChannel\n\t *\n\t * The closeChannel method closes a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t */\n\tpublic closeChannel(channelName: string): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].close();\n\t\tdelete this.broadcastChannel[channelName];\n\t}\n\n\t/**\n\t * postMessage\n\t *\n\t * The postMessage method sends a message to a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @param message{any} - The payload to send through the channel.\n\t */\n\tpublic postMessage(channelName: string, message: MessageType): void {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxUtils: There was an attempt to post a message to a channel without providing a name or the selected channel does not exist. The included message was:',\n\t\t\t\tmessage\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.broadcastChannel[channelName].postMessage(message);\n\t}\n\n\t/**\n\t * selectChannelMessages\n\t *\n\t * The selectChannelMessages method subscribes to the `message` (bc.onmessage) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The message event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessages(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's messages without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(this.broadcastChannel[channelName], 'message');\n\t}\n\n\t/**\n\t * selectChannelMessageErrors\n\t *\n\t * The selectChannelMessageErrors method subscribes to the `messageerror` (bc.onmessageerror) event of a selected BroadcastChannel instance.\n\t *\n\t * @param channelName{string} - The name of the Broadcast Channel.\n\t * @returns Observable - The messageerror event of the channel wrapped in an observable.\n\t */\n\tpublic selectChannelMessageErrors(\n\t\tchannelName: string\n\t): Observable> {\n\t\tif (!channelName || !this.broadcastChannel[channelName]) {\n\t\t\tconsole.error(\n\t\t\t\t\"NgxUtils: There was an attempt to select a BroadcastChannel's message errors without providing a name or the selected channel does not exist.\"\n\t\t\t);\n\n\t\t\treturn EMPTY;\n\t\t}\n\n\t\treturn fromEvent>(\n\t\t\tthis.broadcastChannel[channelName],\n\t\t\t'messageerror'\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxButtonConfiguration.html":{"url":"interfaces/NgxButtonConfiguration.html","title":"interface - NgxButtonConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxButtonConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/button.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The default configuration of the button\nloading - An optional component used for the loading state\nicon - An optional component used for the icon\niconPosition - The optional default position of the icon, by default left\nlabelWrapper - The optional default HTML element used to wrap the button label, by default span\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iconPosition\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelWrapper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iconPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iconPosition:         NgxButtonIconPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxButtonIconPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelWrapper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelWrapper:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\n/**\n * The priority of the button\n */\nexport type NgxButtonPriority = 'primary' | 'secondary' | 'tertiary' | 'danger';\n\n/**\n * The type of the button\n */\nexport type NgxButtonType = 'regular' | 'fab' | 'text' | 'outline';\n\n/**\n * The position of the icon in the button\n */\nexport type NgxButtonIconPosition = 'left' | 'right';\n\n/**\n * The width of the button\n */\nexport type NgxButtonWidth = 'full' | 'fit';\n\n/**\n * Whether the text and icon or only the icon needs to be shown\n */\nexport type NgxButtonDisplayType = 'icon' | 'text' | 'both';\n\n/**\n * The default configuration of the button\n *\n * loading - An optional component used for the loading state\n * icon - An optional component used for the icon\n * iconPosition - The optional default position of the icon, by default `left`\n * labelWrapper - The optional default HTML element used to wrap the button label, by default `span`\n */\nexport interface NgxButtonConfiguration {\n\tloading?: Type;\n\ticon?: Type;\n\ticonPosition?: NgxButtonIconPosition;\n\tlabelWrapper?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxButtonDirective.html":{"url":"directives/NgxButtonDirective.html","title":"directive - NgxButtonDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxButtonDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/button/button.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds the classic button states, priority, loading and icon handling\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxButton]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                buttonClasses\n                            \n                            \n                                    Public\n                                buttonType\n                            \n                            \n                                    Public\n                                buttonWidth\n                            \n                            \n                                    Protected\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                display\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                icon\n                            \n                            \n                                    Protected\n                                iconComponent\n                            \n                            \n                                    Protected\n                                iconElement\n                            \n                            \n                                    Public\n                                iconPosition\n                            \n                            \n                                    Public\n                                loading\n                            \n                            \n                                    Protected\n                                loadingComponent\n                            \n                            \n                                    Public\n                                loadingData\n                            \n                            \n                                    Protected\n                                    Readonly\n                                nativeElement\n                            \n                            \n                                    Public\n                                priority\n                            \n                            \n                                    Protected\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleIcon\n                            \n                            \n                                    Private\n                                handleLoading\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                icon\n                            \n                            \n                                loading\n                            \n                            \n                                loadingData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:130\n                            \n                        \n                \n                    \n                        An optional icon we wish to display alongside the button text\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loading\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:100\n                            \n                        \n                \n                    \n                        Whether the button is currently loading\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        loadingData\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:105\n                            \n                        \n                \n                    \n                        Optional loading data\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleIcon\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleIcon()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:188\n                        \n                    \n\n\n            \n                \n                        Adds or removes an icon\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleLoading\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLoading()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:164\n                        \n                    \n\n\n            \n                \n                        Adds or removes the loading component\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:139\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        buttonClasses\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\t// Iben: Inserts the loading component when needed\n\t\tthis.handleLoading();\n\n\t\treturn `\n    ngx-button\n    ngx-button-${this.buttonType()}\n    ngx-button-${this.priority()}\n    ngx-button-${this.buttonWidth()}\n    ${this.display() !== 'both' ? `ngx-button-${this.display()}-only ` : ''}\n    ${this.loading() ? 'ngx-button-loading ' : ''}\n    ${this.icon() ? `ngx-button-icon-${this.iconPosition()}` : ''}`;\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:80\n                        \n                    \n\n            \n                \n                    The classes of the button generated by its configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buttonType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('regular')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:110\n                        \n                    \n\n            \n                \n                    Whether the button is a regular, outline, text or fab button. By default, this is regular.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        buttonWidth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('fit')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:125\n                        \n                    \n\n            \n                \n                    The width of the button, either full or fit. By default, this is fit.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxButtonConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxButtonConfigurationToken, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:61\n                        \n                    \n\n            \n                \n                    An optional set of configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('both')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:120\n                        \n                    \n\n            \n                \n                    Whether the button has to show only the icon, the text or both. By default, this is both.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tElementRef\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:44\n                        \n                    \n\n            \n                \n                    An instance of the elementRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:130\n                        \n                    \n\n            \n                \n                    An optional icon we wish to display alongside the button text\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        iconComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:73\n                        \n                    \n\n            \n                \n                    The icon component in case we did configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        iconElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:68\n                        \n                    \n\n            \n                \n                    The icon element in case we did not configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        iconPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input(\n\t\tthis.configuration?.iconPosition || 'left'\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:135\n                        \n                    \n\n            \n                \n                    The position of the icon when provided, by default this is Left unless overwritten in the configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loading\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:100\n                        \n                    \n\n            \n                \n                    Whether the button is currently loading\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        loadingComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadingData\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:105\n                        \n                    \n\n            \n                \n                    Optional loading data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        nativeElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.elementRef.nativeElement\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:51\n                        \n                    \n\n            \n                \n                    An instance of the NativeElement\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('primary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:115\n                        \n                    \n\n            \n                \n                    Whether the button has primary, secondary, tertiary or danger priority. By default, this is primary.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:56\n                        \n                    \n\n            \n                \n                    An instance of the renderer\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/button/button.directive.ts:39\n                        \n                    \n\n            \n                \n                    An instance of the viewContainer\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tComponentRef,\n\tcomputed,\n\tDirective,\n\tElementRef,\n\tinject,\n\tinput,\n\tInputSignal,\n\tOnInit,\n\tRenderer2,\n\tSignal,\n\tViewContainerRef,\n} from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxButtonConfigurationToken } from '../../tokens';\nimport {\n\tNgxButtonConfiguration,\n\tNgxButtonDisplayType,\n\tNgxButtonIconPosition,\n\tNgxButtonPriority,\n\tNgxButtonType,\n\tNgxButtonWidth,\n} from '../../types';\n\n/**\n * A directive that adds the classic button states, priority, loading and icon handling\n */\n@Directive({\n\tselector: '[ngxButton]',\n\thost: {\n\t\t'[attr.class]': 'buttonClasses()',\n\t},\n})\nexport class NgxButtonDirective implements OnInit {\n\t/**\n\t * An instance of the viewContainer\n\t */\n\tprotected readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n\t/**\n\t * An instance of the elementRef\n\t */\n\tprotected readonly elementRef: ElementRef = inject(\n\t\tElementRef\n\t);\n\n\t/**\n\t * An instance of the NativeElement\n\t */\n\tprotected readonly nativeElement = this.elementRef.nativeElement;\n\n\t/**\n\t * An instance of the renderer\n\t */\n\tprotected readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * An optional set of configuration\n\t */\n\tprotected readonly configuration: NgxButtonConfiguration = inject(NgxButtonConfigurationToken, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t * The icon element in case we did not configure an icon component\n\t */\n\tprotected iconElement: HTMLElement;\n\n\t/**\n\t * The icon component in case we did configure an icon component\n\t */\n\tprotected iconComponent: ComponentRef;\n\n\tprotected loadingComponent: ComponentRef;\n\n\t/**\n\t * The classes of the button generated by its configuration\n\t */\n\tprotected buttonClasses: Signal = computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\t// Iben: Inserts the loading component when needed\n\t\tthis.handleLoading();\n\n\t\treturn `\n    ngx-button\n    ngx-button-${this.buttonType()}\n    ngx-button-${this.priority()}\n    ngx-button-${this.buttonWidth()}\n    ${this.display() !== 'both' ? `ngx-button-${this.display()}-only ` : ''}\n    ${this.loading() ? 'ngx-button-loading ' : ''}\n    ${this.icon() ? `ngx-button-icon-${this.iconPosition()}` : ''}`;\n\t});\n\n\t/**\n\t * Whether the button is currently loading\n\t */\n\tpublic loading: InputSignal = input(false);\n\n\t/**\n\t * Optional loading data\n\t */\n\tpublic loadingData: InputSignal = input();\n\n\t/**\n\t * Whether the button is a regular, outline, text or fab button. By default, this is regular.\n\t */\n\tpublic buttonType: InputSignal = input('regular');\n\n\t/**\n\t * Whether the button has primary, secondary, tertiary or danger priority. By default, this is primary.\n\t */\n\tpublic priority: InputSignal = input('primary');\n\n\t/**\n\t * Whether the button has to show only the icon, the text or both. By default, this is both.\n\t */\n\tpublic display: InputSignal = input('both');\n\n\t/**\n\t * The width of the button, either full or fit. By default, this is fit.\n\t */\n\tpublic buttonWidth: InputSignal = input('fit');\n\n\t/**\n\t * An optional icon we wish to display alongside the button text\n\t */\n\tpublic icon: InputSignal = input();\n\n\t/**\n\t * The position of the icon when provided, by default this is Left unless overwritten in the configuration\n\t */\n\tpublic iconPosition: InputSignal = input(\n\t\tthis.configuration?.iconPosition || 'left'\n\t);\n\n\tngOnInit() {\n\t\t// Iben: Wrap the base text in an element\n\t\tconst wrapperElement: HTMLSpanElement = this.renderer.createElement(\n\t\t\tthis.configuration?.labelWrapper || 'span'\n\t\t);\n\n\t\t// Iben: Append all the child nodes\n\t\tthis.nativeElement.childNodes.forEach((node) => {\n\t\t\tthis.renderer.appendChild(wrapperElement, node);\n\t\t});\n\n\t\tthis.renderer.setAttribute(wrapperElement, 'class', 'ngx-button-label');\n\n\t\t// Iben: Remove all the nodes\n\t\tthis.nativeElement.childNodes.forEach((node) => {\n\t\t\tthis.renderer.removeChild(wrapperElement, node);\n\t\t});\n\n\t\t// Iben: Remove the current innerHtml and replace it with a span element\n\t\tthis.renderer.appendChild(this.nativeElement, wrapperElement);\n\t}\n\n\t/**\n\t * Adds or removes the loading component\n\t */\n\tprivate handleLoading(): void {\n\t\t// Iben: If the loading state is on and a loading component is provided we add it\n\t\tif (this.loading() && this.configuration?.loading) {\n\t\t\t// Iben: Create the loading component and set its data\n\t\t\tthis.loadingComponent = this.viewContainer.createComponent(this.configuration.loading);\n\t\t\tthis.loadingComponent.setInput('data', this.loadingData());\n\n\t\t\t// Iben: Add the loading component to the button\n\t\t\tthis.renderer.appendChild(\n\t\t\t\tthis.nativeElement,\n\t\t\t\tthis.loadingComponent.instance.elementRef.nativeElement\n\t\t\t);\n\t\t} else {\n\t\t\t// Iben: If the loading has stopped and a loading component is present, remove it\n\t\t\tif (!this.loading() && this.loadingComponent) {\n\t\t\t\tthis.loadingComponent.destroy();\n\t\t\t\tthis.loadingComponent = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds or removes an icon\n\t */\n\tprivate handleIcon(): void {\n\t\t// Iben: Check if we need to add an icon\n\t\tif (this.icon()) {\n\t\t\t// Iben: Check if the button already has an icon, if not, add it\n\t\t\tif (!this.iconElement && !this.iconComponent) {\n\t\t\t\t// Iben: If no icon component exists, we create a regular i element\n\t\t\t\tif (!this.configuration?.icon) {\n\t\t\t\t\t// Iben: Create a new icon element\n\t\t\t\t\tthis.iconElement = this.renderer.createElement('i');\n\t\t\t\t\tthis.iconElement.className = `ngx-button-icon ${this.icon()}`;\n\t\t\t\t} else {\n\t\t\t\t\t// Iben: Create new component and add the icon\n\t\t\t\t\tthis.iconComponent =\n\t\t\t\t\t\tthis.viewContainer.createComponent(\n\t\t\t\t\t\t\tthis.configuration.icon,\n\t\t\t\t\t\t\t{ index: 0 }\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.iconComponent.setInput('data', this.icon());\n\t\t\t\t\tthis.renderer.addClass(\n\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t'ngx-button-icon'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Add the icon depending on whether we want to add it on the left or the right\n\t\t\t\tthis.iconPosition() === 'left'\n\t\t\t\t\t? this.renderer.insertBefore(\n\t\t\t\t\t\t\tthis.nativeElement,\n\t\t\t\t\t\t\tthis.iconElement ||\n\t\t\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t\tthis.nativeElement.firstChild\n\t\t\t\t\t  )\n\t\t\t\t\t: this.renderer.appendChild(\n\t\t\t\t\t\t\tthis.nativeElement,\n\t\t\t\t\t\t\tthis.iconElement || this.iconComponent.instance.elementRef.nativeElement\n\t\t\t\t\t  );\n\t\t\t}\n\t\t}\n\t\t// Iben: If an icon already exists and we no longer have an icon presented, we remove it\n\t\telse if (this.iconElement || this.iconComponent) {\n\t\t\tif (!this.configuration?.icon) {\n\t\t\t\tthis.renderer.removeChild(this.nativeElement, this.iconElement);\n\t\t\t\tthis.iconElement = undefined;\n\t\t\t} else {\n\t\t\t\tthis.iconComponent?.destroy();\n\t\t\t\tthis.iconComponent = undefined;\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxConfigurableLayoutItemComponent.html":{"url":"components/NgxConfigurableLayoutItemComponent.html","title":"component - NgxConfigurableLayoutItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxConfigurableLayoutItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts\n\n\n\n    \n        Description\n    \n    \n        The layout item pairs with the  container.\nThis component will in itself not be rendered. The key provided in this component\nwill need to be provided in the [keys] input or the formControl of the layout container\nas well. The order in which they are provided there, will define the order in which\nthe items will be rendered.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-configurable-layout-item\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n            \n                templateUrl\n                ./configurable-layout-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                key\n                            \n                            \n                                    Public\n                                    Readonly\n                                label\n                            \n                            \n                                    Public\n                                    Readonly\n                                template\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                key\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        key\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                            \n                        \n                \n                    \n                        The unique key of the layout item.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                            \n                        \n                \n                    \n                        An optional label for the layout item used for WCAG purposes.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        key\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:19\n                        \n                    \n\n            \n                \n                    The unique key of the layout item.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        label\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:24\n                        \n                    \n\n            \n                \n                    An optional label for the layout item used for WCAG purposes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/configurable-layout-item/configurable-layout-item.component.ts:29\n                        \n                    \n\n            \n                \n                    The template reference of the;\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, TemplateRef, input, viewChild } from '@angular/core';\n\n/**\n * The layout item pairs with the `` container.\n * This component will in itself not be rendered. The key provided in this component\n * will need to be provided in the `[keys]` input or the `formControl` of the layout container\n * as well. The order in which they are provided there, will define the order in which\n * the items will be rendered.\n */\n@Component({\n\tselector: 'ngx-configurable-layout-item',\n\ttemplateUrl: './configurable-layout-item.component.html',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemComponent {\n\t/**\n\t * The unique key of the layout item.\n\t */\n\tpublic readonly key = input.required();\n\n\t/**\n\t * An optional label for the layout item used for WCAG purposes.\n\t */\n\tpublic readonly label = input();\n\n\t/**\n\t * The template reference of the;\n\t */\n\tpublic readonly template = viewChild>('contentTmpl');\n}\n\n    \n\n    \n        \n\t\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxConfigurableLayoutItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemDropEvent.html":{"url":"interfaces/NgxConfigurableLayoutItemDropEvent.html","title":"interface - NgxConfigurableLayoutItemDropEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemDropEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentGrid\n                                        \n                                \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                        \n                                            eventType\n                                        \n                                \n                                \n                                        \n                                            showInactive\n                                        \n                                \n                                \n                                        \n                                            targetRowIndex\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentGrid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentGrid:         NgxConfigurableLayoutGrid\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutGrid\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         NgxConfigurableLayoutItemEntity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxConfigurableLayoutItemEntity\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        eventType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        eventType:     \"sorting\" | \"moving\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"sorting\" | \"moving\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showInactive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showInactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetRowIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetRowIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxConfigurableLayoutItemEntity.html":{"url":"interfaces/NgxConfigurableLayoutItemEntity.html","title":"interface - NgxConfigurableLayoutItemEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxConfigurableLayoutItemEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/configurable-layout.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            key\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxConfigurableLayoutItemSizeOption = 'fit-content' | 'fill' | 'equal';\n\nexport type NgxConfigurableLayoutType = 'static' | 'editable';\n\nexport interface NgxConfigurableLayoutItemEntity {\n\tkey: string;\n\tisActive: boolean;\n\tdisabled?: boolean;\n}\n\nexport type NgxConfigurableLayoutGrid = NgxConfigurableLayoutItemEntity[][];\n\nexport interface NgxConfigurableLayoutItemDropEvent {\n\tcurrentGrid: NgxConfigurableLayoutGrid;\n\teventType: 'sorting' | 'moving';\n\telement: NgxConfigurableLayoutItemEntity;\n\tshowInactive: boolean;\n\ttargetRowIndex: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxConfigurableLayoutItemSizePipe.html":{"url":"pipes/NgxConfigurableLayoutItemSizePipe.html","title":"pipe - NgxConfigurableLayoutItemSizePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxConfigurableLayoutItemSizePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxConfigurableLayoutItemSize\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(undefined: literal type, itemSize: NgxConfigurableLayoutItemSizeOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/item-size/item-size.pipe.ts:17\n                        \n                    \n\n\n            \n                \n                        Returns the needed styling for the ngx-configurable-layout component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t}\n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                itemSize\n                                            \n                                                            NgxConfigurableLayoutItemSizeOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe itemSize used by the layout\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxConfigurableLayoutItemEntity, NgxConfigurableLayoutItemSizeOption } from '../../types';\n\n@Pipe({\n\tname: 'ngxConfigurableLayoutItemSize',\n\tstandalone: true,\n})\nexport class NgxConfigurableLayoutItemSizePipe implements PipeTransform {\n\t/**\n\t * Returns the needed styling for the ngx-configurable-layout component\n\t *\n\t * @param keys - The keys used in the grid\n\t * @param showInactive - Whether we want to show inactive items\n\t * @param itemSize - The itemSize used by the layout\n\t */\n\ttransform(\n\t\t{\n\t\t\tkeys,\n\t\t\tshowInactive,\n\t\t}: { keys: NgxConfigurableLayoutItemEntity[][]; showInactive: boolean } = {\n\t\t\tkeys: null,\n\t\t\tshowInactive: true,\n\t\t},\n\t\titemSize: NgxConfigurableLayoutItemSizeOption\n\t): Record {\n\t\t// Iben: If non data source is provided or if the itemSize is 'fill',\n\t\t// we can use the default grid size which will result in filling up the available grid space.\n\t\tif (!keys || itemSize === 'fill') {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Iben: If itemSize is 'fit-content', the columns will be based on the content of the template\n\t\tif (itemSize === 'fit-content') {\n\t\t\treturn {\n\t\t\t\t'grid-auto-columns': 'max-content',\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If itemSize is 'equal', all items in the grid need to be of equal size.\n\t\t// For this, we grab the row with the largest amount of items, which will define the amount of columns\n\t\tconst longestRow = Math.max(\n\t\t\t...[...keys].map((item) => {\n\t\t\t\treturn item.filter((key) => {\n\t\t\t\t\tif (!showInactive) {\n\t\t\t\t\t\treturn key.isActive;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\t\t\t\t}).length;\n\t\t\t})\n\t\t);\n\n\t\treturn {\n\t\t\t'grid-template-columns': `repeat(${longestRow}, minmax(0, 1fr))`,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookie.html":{"url":"interfaces/NgxCookie.html","title":"interface - NgxCookie","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            domain\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresAfterDays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            path\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sameSite\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useLocalStorage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        domain\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        domain:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAfterDays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAfterDays:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sameSite\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sameSite:     \"Lax\" | \"Strict\" | \"None\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Lax\" | \"Strict\" | \"None\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useLocalStorage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useLocalStorage:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieChangedEvent.html":{"url":"interfaces/NgxCookieChangedEvent.html","title":"interface - NgxCookieChangedEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieChangedEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxCookieEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            changedCategories\n                                        \n                                \n                                \n                                        \n                                            changedServices\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        changedCategories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedCategories:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        changedServices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        changedServices:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieConfiguration.html":{"url":"interfaces/NgxCookieConfiguration.html","title":"interface - NgxCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClearCookies\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            autoShow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cookie\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            guiOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideFromBots\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lazyHtmlGeneration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            manageScriptTags\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revision\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            root\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClearCookies\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClearCookies:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoShow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoShow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:         NgxCookie\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxCookie\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        guiOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        guiOptions:     GuiOptions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     GuiOptions\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideFromBots\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideFromBots:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lazyHtmlGeneration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lazyHtmlGeneration:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        manageScriptTags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        manageScriptTags:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"opt-in\" | \"opt-out\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"opt-in\" | \"opt-out\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revision\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revision:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        root\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        root:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieEvent.html":{"url":"interfaces/NgxCookieEvent.html","title":"interface - NgxCookieEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cookie\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cookie\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cookie:     CookieValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     CookieValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieLanguageConfiguration.html":{"url":"interfaces/NgxCookieLanguageConfiguration.html","title":"interface - NgxCookieLanguageConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieLanguageConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoDetect\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rtl\n                                        \n                                \n                                \n                                        \n                                            translations\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoDetect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoDetect:     \"document\" | \"browser\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"document\" | \"browser\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rtl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rtl:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translations:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Category, CookieValue, GuiOptions, Translation } from 'vanilla-cookieconsent';\n\nexport type NgxCookieCategories = Record;\n\nexport interface NgxCookieLanguageConfiguration {\n\tdefault: string;\n\tautoDetect?: 'document' | 'browser';\n\trtl?: string | string[];\n\ttranslations: {\n\t\t[locale: string]: Translation | string | (() => Translation) | (() => Promise);\n\t};\n}\n\nexport interface NgxCookie {\n\tname?: string;\n\tdomain?: string;\n\tpath?: string;\n\texpiresAfterDays?: number | ((acceptType: string) => number);\n\tsameSite?: 'Lax' | 'Strict' | 'None';\n\tuseLocalStorage?: boolean;\n}\n\nexport interface NgxCookieConfiguration {\n\troot?: string;\n\tmode?: 'opt-in' | 'opt-out';\n\tautoShow?: boolean;\n\trevision?: number;\n\tmanageScriptTags?: boolean;\n\tautoClearCookies?: boolean;\n\thideFromBots?: boolean;\n\tlazyHtmlGeneration?: boolean;\n\tcookie?: NgxCookie;\n\tguiOptions?: GuiOptions;\n}\n\nexport interface NgxCookieEvent {\n\tcookie: CookieValue;\n}\n\nexport interface NgxCookieChangedEvent extends NgxCookieEvent {\n\tchangedCategories: string[];\n\tchangedServices: {\n\t\t[key: string]: string[];\n\t};\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxCookieService.html":{"url":"injectables/NgxCookieService.html","title":"injectable - NgxCookieService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxCookieService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/services/cookie/cookie.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                cookiesChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsentChanged$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentChangedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                cookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                cookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                firstCookiesConsented$\n                            \n                            \n                                    Private\n                                    Readonly\n                                firstCookiesConsentedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                modalVisible$\n                            \n                            \n                                    Private\n                                    Readonly\n                                modalVisibleSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                acceptCategory\n                            \n                            \n                                    Public\n                                acceptService\n                            \n                            \n                                    Public\n                                getCookie\n                            \n                            \n                                    Public\n                                getCookieObservable\n                            \n                            \n                                    Public\n                                hasAcceptedCategory\n                            \n                            \n                                    Public\n                                hasAcceptedService\n                            \n                            \n                                    Public\n                                removeCookie\n                            \n                            \n                                    Public\n                                setCookie\n                            \n                            \n                                    Public\n                                setupCookiesHandler\n                            \n                            \n                                    Public\n                                showModal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the categories\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        acceptService\n                        \n                    \n                \n            \n            \n                \n                        \n                    acceptService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Accept a category of cookies\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:229\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getCookieObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCookieObservable(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:238\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Get a cookie as an observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nName of the cookie\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedCategory(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:166\n                        \n                    \n\n\n            \n                \n                        Whether a certain category of cookies was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasAcceptedService\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasAcceptedService(category: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:194\n                        \n                    \n\n\n            \n                \n                        Whether a certain service within a category was accepted\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the category\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the service\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeCookie(cookie: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:277\n                        \n                    \n\n\n            \n                \n                        Remove a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to remove\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCookie\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCookie(cookie: NgxCookieValue)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:256\n                        \n                    \n\n\n            \n                \n                        Set a cookie\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cookie\n                                            \n                                                            NgxCookieValue\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cookie we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setupCookiesHandler\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupCookiesHandler(categories: NgxCookieCategories, language: NgxCookieLanguageConfiguration, configuration?: NgxCookieConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Sets up the CookieConsent.\nFor more information of on this configuration, check the documentation\nhttps://cookieconsent.orestbida.com/essential/getting-started.html\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                categories\n                                            \n                                                            NgxCookieCategories\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe categories of cookies\n\n\n                                            \n                                        \n                                        \n                                                language\n                                            \n                                                            NgxCookieLanguageConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe language settings of the cookies\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxCookieConfiguration\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set configuration settings\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showModal\n                        \n                    \n                \n            \n            \n                \n                        \n                    showModal()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:220\n                        \n                    \n\n\n            \n                \n                        Show the cookie modal\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:86\n                        \n                    \n\n            \n                \n                    Emits every time the set cookies have been changed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject>\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:53\n                        \n                    \n\n            \n                \n                    Subject to hold the cookiesChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsentChanged$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentChangedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:75\n                        \n                    \n\n            \n                \n                    An event triggered when the user modifies their preferences and only if consent has already been provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:41\n                        \n                    \n\n            \n                \n                    Subject to hold the consentChanged event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.cookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:69\n                        \n                    \n\n            \n                \n                    An event triggering the choice of consent on every page load.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:36\n                        \n                    \n\n            \n                \n                    Subject to hold the onConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        firstCookiesConsented$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.firstCookiesConsentedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:63\n                        \n                    \n\n            \n                \n                    An event triggered only the very first time that the user expresses their choice of consent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        firstCookiesConsentedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:31\n                        \n                    \n\n            \n                \n                    Subject to hold the onFirstConsent event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        modalVisible$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.modalVisibleSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:81\n                        \n                    \n\n            \n                \n                    Whether the cookies modal is currently visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        modalVisibleSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tfalse\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:46\n                        \n                    \n\n            \n                \n                    Subject to hold the modalVisible event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/services/cookie/cookie.service.ts:58\n                        \n                    \n\n            \n                \n                    Instance of the window service\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport {\n\tBehaviorSubject,\n\tObservable,\n\tSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tmap,\n\tstartWith,\n} from 'rxjs';\nimport * as CookieConsent from 'vanilla-cookieconsent';\n\nimport {\n\tNgxCookieCategories,\n\tNgxCookieChangedEvent,\n\tNgxCookieConfiguration,\n\tNgxCookieEvent,\n\tNgxCookieLanguageConfiguration,\n\tNgxCookieValue,\n} from '../../types';\n\n/**\n * A service that implements the CookieConsent from https://cookieconsent.orestbida.com and provides the necessary Observables to handle this setup.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxCookieService {\n\t/**\n\t * Subject to hold the onFirstConsent event\n\t */\n\tprivate readonly firstCookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the onConsent event\n\t */\n\tprivate readonly cookiesConsentedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the consentChanged event\n\t */\n\tprivate readonly cookiesConsentChangedSubject: Subject = new Subject();\n\n\t/**\n\t * Subject to hold the modalVisible event\n\t */\n\tprivate readonly modalVisibleSubject: BehaviorSubject = new BehaviorSubject(\n\t\tfalse\n\t);\n\n\t/**\n\t * Subject to hold the cookiesChanged event\n\t */\n\tprivate readonly cookiesChangedSubject: Subject> = new Subject();\n\n\t/**\n\t * Instance of the window service\n\t */\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * An event triggered only the very first time that the user expresses their choice of consent\n\t */\n\tpublic readonly firstCookiesConsented$: Observable =\n\t\tthis.firstCookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggering the choice of consent on every page load.\n\t */\n\tpublic readonly cookiesConsented$: Observable =\n\t\tthis.cookiesConsentedSubject.asObservable();\n\n\t/**\n\t * An event triggered when the user modifies their preferences and only if consent has already been provided.\n\t */\n\tpublic readonly cookiesConsentChanged$: Observable =\n\t\tthis.cookiesConsentChangedSubject.asObservable();\n\n\t/**\n\t * Whether the cookies modal is currently visible\n\t */\n\tpublic readonly modalVisible$: Observable = this.modalVisibleSubject.asObservable();\n\n\t/**\n\t * Emits every time the set cookies have been changed\n\t */\n\tpublic readonly cookiesChanged$: Observable> =\n\t\tthis.cookiesChangedSubject.asObservable();\n\n\t/**\n\t * Sets up the CookieConsent.\n\t *\n\t * For more information of on this configuration, check the documentation\n\t * https://cookieconsent.orestbida.com/essential/getting-started.html\n\t *\n\t * @param categories - The categories of cookies\n\t * @param language - The language settings of the cookies\n\t * @param configuration - An optional set configuration settings\n\t */\n\tpublic setupCookiesHandler(\n\t\tcategories: NgxCookieCategories,\n\t\tlanguage: NgxCookieLanguageConfiguration,\n\t\tconfiguration?: NgxCookieConfiguration\n\t): void {\n\t\t// Iben: If we're not in the browser, we early exit, so server-side rendering can be enabled\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If no categories were provided, we early exit and throw an error, as the cookie preference cannot be shown without.\n\t\tif (!categories || Object.keys(categories).length === 0) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxCookies: No categories were provided for the cookie handler. At least one category is required.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Setup the onFirstConsent listener\n\t\tconst onFirstConsent = (event) => {\n\t\t\tthis.firstCookiesConsentedSubject.next(event);\n\t\t};\n\t\tonFirstConsent.bind(this);\n\n\t\t// Iben: Setup the onConsent listener\n\t\tconst onConsent = (event) => {\n\t\t\tthis.cookiesConsentedSubject.next(event);\n\t\t};\n\t\tonConsent.bind(this);\n\n\t\t// Iben: Setup the onChange listener\n\t\tconst onChange = (event) => {\n\t\t\tthis.cookiesConsentChangedSubject.next(event);\n\t\t};\n\t\tonChange.bind(this);\n\n\t\t// Iben: Setup the onModalShow listener\n\t\tconst onModalShow = () => {\n\t\t\tthis.modalVisibleSubject.next(true);\n\t\t};\n\t\tonModalShow.bind(this);\n\n\t\t// Iben: Setup the onModalHide listener\n\t\tconst onModalHide = () => {\n\t\t\tthis.modalVisibleSubject.next(false);\n\t\t};\n\t\tonModalHide.bind(this);\n\n\t\t// Iben: Run the CookieConsent handler\n\t\tCookieConsent.run({\n\t\t\t...(configuration || {}),\n\t\t\tonFirstConsent,\n\t\t\tonConsent,\n\t\t\tonChange,\n\t\t\tonModalHide,\n\t\t\tonModalShow,\n\t\t\tcategories,\n\t\t\tlanguage,\n\t\t});\n\t}\n\n\t/**\n\t * Whether a certain category of cookies was accepted\n\t *\n\t * @param name - The name of the category\n\t */\n\tpublic hasAcceptedCategory(name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the category was accepted\n\t\t\t\treturn CookieConsent.acceptedCategory(name);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param name - The name of the categories\n\t */\n\tpublic acceptCategory(name: string): void {\n\t\tCookieConsent.acceptCategory(name);\n\t}\n\n\t/**\n\t * Whether a certain service within a category was accepted\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic hasAcceptedService(category: string, name: string): Observable {\n\t\t// Iben: Return every time the cookie consent has changed\n\t\treturn combineLatest([\n\t\t\tthis.cookiesConsented$.pipe(startWith(undefined)),\n\t\t\tthis.cookiesConsentChanged$.pipe(startWith(undefined)),\n\t\t]).pipe(\n\t\t\tmap(() => {\n\t\t\t\t// Iben: Check if the service within the provided category was accepted\n\t\t\t\treturn CookieConsent.acceptedService(name, category);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Accept a category of cookies\n\t *\n\t * @param category - The name of the category\n\t * @param name - The name of the service\n\t */\n\tpublic acceptService(category: string, name: string): void {\n\t\tCookieConsent.acceptService(name, category);\n\t}\n\n\t/**\n\t * Show the cookie modal\n\t */\n\tpublic showModal(): void {\n\t\tCookieConsent.show(true);\n\t}\n\n\t/**\n\t * Get a cookie\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookie(cookie: string): DataType | undefined {\n\t\treturn (CookieConsent.getCookie('data') || {})[cookie];\n\t}\n\n\t/**\n\t * Get a cookie as an observable\n\t *\n\t * @param cookie - Name of the cookie\n\t */\n\tpublic getCookieObservable(cookie: string): Observable {\n\t\t// Iben: Return every time the set cookies are changed\n\t\treturn this.cookiesChanged$.pipe(\n\t\t\tstartWith(CookieConsent.getCookie('data') || {}),\n\t\t\t// Iben: Get the cookie value\n\t\t\tmap(() => {\n\t\t\t\treturn this.getCookie(cookie);\n\t\t\t}),\n\t\t\t// Iben: As the cookiesChanged event emits every time all cookies are rest, we check if the cookie value was really changed\n\t\t\tdistinctUntilChanged()\n\t\t);\n\t}\n\n\t/**\n\t * Set a cookie\n\t *\n\t * @param cookie - The cookie we wish to set\n\t */\n\tpublic setCookie(cookie: NgxCookieValue): void {\n\t\t// Iben: Set the cookie\n\t\tconst isSet = CookieConsent.setCookieData({\n\t\t\tvalue: { [cookie.name]: cookie.value },\n\t\t\tmode: 'update',\n\t\t});\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n\n\t/**\n\t * Remove a cookie\n\t *\n\t * @param cookie - The cookie we wish to remove\n\t */\n\tpublic removeCookie(cookie: string): void {\n\t\t// Iben: Get the current cookies\n\t\tconst currentCookies = CookieConsent.getCookie('data') || {};\n\n\t\t// Iben: Remove the cookie from the currently set cookies\n\t\tconst { [cookie]: _removedValue, ...value } = currentCookies;\n\n\t\t// Iben: Remove the cookie from the cookies holder\n\t\tconst isSet = CookieConsent.setCookieData({ value, mode: 'overwrite' });\n\n\t\t// Iben: If the cookie was not set, we return\n\t\tif (!isSet) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Update the subject so we can notify listeners\n\t\tthis.cookiesChangedSubject.next(CookieConsent.getCookie('data'));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxCookieValue.html":{"url":"interfaces/NgxCookieValue.html","title":"interface - NgxCookieValue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxCookieValue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/set-cookie.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxCookieValue {\n\tname: string;\n\tvalue: DataType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCookiesFallBackComponent.html":{"url":"directives/NgxCookiesFallBackComponent.html","title":"directive - NgxCookiesFallBackComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCookiesFallBackComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                cookies\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/abstracts/cookie-fallback/cookie-fallback.component.ts:13\n                        \n                    \n\n            \n                \n                    The cookies that were required to show the original content\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\n\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n *An abstract component that can optionally be used as a fallback to content that depends on accepted cookies\n */\n@Directive()\nexport abstract class NgxCookiesFallBackComponent {\n\t/**\n\t * The cookies that were required to show the original content\n\t */\n\treadonly cookies = input([]);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxCurrencyTableCellComponent.html":{"url":"components/NgxCurrencyTableCellComponent.html","title":"component - NgxCurrencyTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxCurrencyTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/currency-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxCurrencyTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-currency-cell\n            \n\n\n            \n                imports\n                \n                            CurrencyPipe\n                \n            \n\n\n\n            \n                template\n                \n\t{{ item | currency: currency() }}\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                currency\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-currency-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:49\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a currency cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:44\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('EUR')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/currency-cell.component.ts:25\n                        \n                    \n\n            \n                \n                    The ISO 4217 format of the provided amount, by default EUR\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:38\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:32\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { CurrencyPipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-currency-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxCurrencyTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t{{ item | currency: currency() }}\n\t\t\n\t`,\n\timports: [CurrencyPipe],\n})\nexport class NgxCurrencyTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) format of the provided amount, by default `EUR`\n\t */\n\tpublic readonly currency = input('EUR');\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true }) public override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a currency cell\n\t */\n\tpublic override cellClass: string = 'ngx-currency-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t{{ item | currency: currency() }}\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxCurrencyTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxCypressTagDirective.html":{"url":"directives/NgxCypressTagDirective.html","title":"directive - NgxCypressTagDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxCypressTagDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts\n        \n\n\n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [cypressTag]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cypressTag\n                            \n                            \n                                    Public\n                                tag\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                cypressTag\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        cypressTag\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                            \n                        \n                \n                    \n                        Sets the tag for Cypress\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cypressTag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:25\n                        \n                    \n\n            \n                \n                    Sets the tag for Cypress\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        tag\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/directives/cypress-tag/cypress-tag.directive.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tcomputed,\n\tDirective,\n\tinput,\n\tInputSignal,\n\tSignal,\n} from '@angular/core';\nimport { get } from 'lodash';\n\n@Directive({\n\tselector: '[cypressTag]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.data-cy]': 'tag()',\n\t},\n})\nexport class NgxCypressTagDirective {\n\tpublic tag: Signal = computed(() => {\n\t\treturn get({}, this.cypressTag());\n\t});\n\n\t/**\n\t * Sets the tag for Cypress\n\t */\n\tpublic cypressTag: InputSignal = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxDateTableCellComponent.html":{"url":"components/NgxDateTableCellComponent.html","title":"component - NgxDateTableCellComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxDateTableCellComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/cell/date-cell.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxAbstractTableCellDirective\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxDateTableCellComponent,\n}\n                \n            \n\n\n            \n                selector\n                ngx-table-date-cell\n            \n\n\n            \n                imports\n                \n                            DatePipe\n                                NgxTableGetPipe\n                \n            \n\n\n\n            \n                template\n                \n\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\n\t\t{{ rowItem | date : format() }}\n\t\n\t} @else {\n\t{{ emptyLabel() }}\n\t} } @else { @if (item) {\n\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t} @else {\n\t{{ emptyLabel() }}\n\t} }\n\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                cellClass\n                            \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                emptyLabel\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                format\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                    Readonly\n                                itemKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                rowKey\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                itemKey\n                            \n                            \n                                rowKey\n                            \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        itemKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                            \n                        \n                \n                    \n                        In case the date is nested in an object, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        rowKey\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                            \n                        \n                \n                    \n                        In case the date is nested in the row, we can provide a key to fetch it\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ngx-date-table-cell'\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:77\n\n                        \n                    \n\n            \n                \n                    A generic class to indicate that this is a date cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('cellTmpl', {static: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:72\n\n                        \n                    \n\n            \n                \n                    ViewChild that represents the cell template\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        emptyLabel\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('Empty date')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:42\n                        \n                    \n\n            \n                \n                    The label to display when date is invalid or empty\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:65\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('dd/MM/yyyy')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:37\n                        \n                    \n\n            \n                \n                    The format of the provided date, by default dd/MM/yyyy\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:59\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        itemKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:47\n                        \n                    \n\n            \n                \n                    In case the date is nested in an object, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        rowKey\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/cell/date-cell.component.ts:52\n                        \n                    \n\n            \n                \n                    In case the date is nested in the row, we can provide a key to fetch it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { DatePipe } from '@angular/common';\nimport { Component, ContentChild, TemplateRef, ViewChild, input } from '@angular/core';\n\nimport { NgxTableGetPipe } from '../../pipes/get-pipe/get.pipe';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Component({\n\tselector: 'ngx-table-date-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxDateTableCellComponent,\n\t\t},\n\t],\n\ttemplate: `\n\t\t\n\t\t\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\n\t\t\t\n\t\t\t\t{{ rowItem | date : format() }}\n\t\t\t\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} } @else { @if (item) {\n\t\t\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\n\t\t\t} @else {\n\t\t\t{{ emptyLabel() }}\n\t\t\t} }\n\t\t\n\t`,\n\timports: [DatePipe, NgxTableGetPipe],\n})\nexport class NgxDateTableCellComponent extends NgxAbstractTableCellDirective {\n\t/**\n\t * The format of the provided date, by default `dd/MM/yyyy`\n\t */\n\tpublic readonly format = input('dd/MM/yyyy');\n\n\t/**\n\t * The label to display when date is invalid or empty\n\t */\n\tpublic readonly emptyLabel = input('Empty date');\n\n\t/**\n\t * In case the date is nested in an object, we can provide a key to fetch it\n\t */\n\tpublic readonly itemKey = input();\n\n\t/**\n\t * In case the date is nested in the row, we can provide a key to fetch it\n\t */\n\tpublic readonly rowKey = input();\n\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n\n\t/**\n\t * ViewChild that represents the cell template\n\t */\n\n\t@ViewChild('cellTmpl', { static: true })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\n\t/**\n\t * A generic class to indicate that this is a date cell\n\t */\n\tpublic override cellClass: string = 'ngx-date-table-cell';\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t@if (rowKey()) { @if (row | getProp: rowKey(); as rowItem) {\t\t\t{{ rowItem | date : format() }}\t\t} @else {\t{{ emptyLabel() }}\t} } @else { @if (item) {\t{{ (itemKey() ? item[itemKey()] : item) | date : format() }}\t} @else {\t{{ emptyLabel() }}\t} }\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxDateTableCellComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentComponent.html":{"url":"directives/NgxDisplayContentComponent.html","title":"directive - NgxDisplayContentComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:13\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:13\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/display-content/display-content.component.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, inject, input } from '@angular/core';\n\n/**\n * An abstract class to use when implementing custom fallbacks for the NgxDisplayContentDirective\n */\n@Directive()\nexport abstract class NgxDisplayContentComponent {\n\tpublic elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t * An optional data input to provide data to the fallback components. This property is typed as any.\n\t */\n\treadonly data = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxDisplayContentConfiguration.html":{"url":"interfaces/NgxDisplayContentConfiguration.html","title":"interface - NgxDisplayContentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxDisplayContentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/display-content.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideWhenNoTemplateProvided\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            listenToOnlineStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:         NgxDisplayContentComponentConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxDisplayContentComponentConfiguration\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideWhenNoTemplateProvided\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideWhenNoTemplateProvided:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        listenToOnlineStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        listenToOnlineStatus:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { TemplateRef, Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\nexport type NgxDisplayContentStatus = 'loading' | 'error' | 'offline';\n\nexport type NgxDisplayContentAriaLive = 'polite' | 'assertive' | 'off';\n\ntype NgxDisplayContentRecord = Partial>;\n\nexport type NgxDisplayContentConditions = NgxDisplayContentRecord;\n\nexport type NgxDisplayContentComponentConfiguration = NgxDisplayContentRecord\n>;\n\nexport type NgxDisplayContentOverrideConfiguration = NgxDisplayContentRecord;\n\tdata?: any;\n}>;\n\nexport interface NgxDisplayContentConfiguration {\n\tcomponents: NgxDisplayContentComponentConfiguration;\n\thideWhenNoTemplateProvided?: boolean;\n\tlistenToOnlineStatus?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxDisplayContentDirective.html":{"url":"directives/NgxDisplayContentDirective.html","title":"directive - NgxDisplayContentDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxDisplayContentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [displayContent]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                conditions\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                displayContent\n                            \n                            \n                                    Readonly\n                                displayContentAriaLive\n                            \n                            \n                                    Public\n                                displayContentConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineService\n                            \n                            \n                                    Private\n                                overrideConfiguration\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                updateViewSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderInitialTemplate\n                            \n                            \n                                    Private\n                                renderTemplate\n                            \n                            \n                                    Private\n                                setAriaBusyTag\n                            \n                            \n                                    Private\n                                setAriaLiveTag\n                            \n                            \n                                    Private\n                                updateConditions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                displayContent\n                            \n                            \n                                displayContentConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        displayContent\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                            \n                        \n                \n                    \n                        Renders the item or a default fallback based on the provided conditions\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        displayContentConfiguration\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                            \n                        \n                \n                    \n                        Override the existing configuration with custom configuration\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:118\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:168\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderInitialTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderInitialTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:214\n                        \n                    \n\n\n            \n                \n                        Renders the initial template\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderTemplate(status: NgxDisplayContentStatus, component: Type)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:179\n                        \n                    \n\n\n            \n                \n                        Renders the provided component or template\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                status\n                                            \n                                                            NgxDisplayContentStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe status we're handling\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we're wishing to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaBusyTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaBusyTag(isLoading: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:277\n                        \n                    \n\n\n            \n                \n                        Sets the aria-busy tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isLoading\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of the item\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setAriaLiveTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAriaLiveTag(value: \"polite\" | \"assertive\" | \"off\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:237\n                        \n                    \n\n\n            \n                \n                        Sets the aria-live tag of the item\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        \"polite\" | \"assertive\" | \"off\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe value we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateConditions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateConditions(conditions: NgxDisplayContentConditions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:223\n                        \n                    \n\n\n            \n                \n                        Updates the conditions\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                conditions\n                                            \n                                                            NgxDisplayContentConditions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe conditions we want to merge with the current set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        conditions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentConditions\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:63\n                        \n                    \n\n            \n                \n                    Holds the conditions we use to render the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxDisplayContentConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:68\n                        \n                    \n\n            \n                \n                    Renders the item or a default fallback based on the provided conditions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        displayContentAriaLive\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input('polite')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:81\n                        \n                    \n\n            \n                \n                    The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\nhttps://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        displayContentConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:73\n                        \n                    \n\n            \n                \n                    Override the existing configuration with custom configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:48\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxOnlineService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overrideConfiguration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxDisplayContentOverrideConfiguration\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:58\n                        \n                    \n\n            \n                \n                    Holds an optional override configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        updateViewSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:53\n                        \n                    \n\n            \n                \n                    A subject to know when we need to update the view\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/display-content.directive.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tDirective,\n\tElementRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, distinctUntilChanged, takeUntil, tap } from 'rxjs';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxOnlineService } from '../../services';\nimport { NgxDisplayContentConfigurationToken } from '../../tokens';\nimport {\n\tNgxDisplayContentAriaLive,\n\tNgxDisplayContentConditions,\n\tNgxDisplayContentConfiguration,\n\tNgxDisplayContentOverrideConfiguration,\n\tNgxDisplayContentStatus,\n} from '../../types';\n\n/**\n * NgxDisplayContentDirective handles whether content should be shown based on a loading, error or offline condition by using provided default components or a provided override template\n */\n@Directive({\n\tselector: '[displayContent]',\n\tstandalone: true,\n})\nexport class NgxDisplayContentDirective implements AfterViewInit, OnDestroy {\n\tprivate readonly elementRef = inject(ElementRef);\n\tprivate readonly templateRef = inject>(TemplateRef);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\tprivate readonly viewContainer = inject(ViewContainerRef);\n\tprivate readonly onlineService = inject(NgxOnlineService);\n\tprivate readonly configuration = inject(\n\t\tNgxDisplayContentConfigurationToken\n\t);\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * A subject to know when we need to update the view\n\t */\n\tprivate readonly updateViewSubject: Subject = new Subject();\n\n\t/**\n\t * Holds an optional override configuration\n\t */\n\tprivate overrideConfiguration: NgxDisplayContentOverrideConfiguration = {};\n\n\t/**\n\t * Holds the conditions we use to render the component\n\t */\n\tprivate conditions: NgxDisplayContentConditions = {};\n\n\t/**\n\t * Renders the item or a default fallback based on the provided conditions\n\t */\n\tpublic displayContent: InputSignal = input.required();\n\n\t/**\n\t * Override the existing configuration with custom configuration\n\t */\n\tpublic displayContentConfiguration: InputSignal =\n\t\tinput();\n\n\t/**\n\t * The aria-live label we wish to provide to the parent element. By default, this is 'polite'.\n\t *\n\t * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions\n\t */\n\treadonly displayContentAriaLive = input('polite');\n\n\tconstructor() {\n\t\t// Iben: If we want to listen to the online status, we set up a listener to the status of the application\n\t\tif (this.configuration.listenToOnlineStatus) {\n\t\t\tthis.onlineService.online$\n\t\t\t\t.pipe(\n\t\t\t\t\tdistinctUntilChanged(),\n\t\t\t\t\ttap((online) => {\n\t\t\t\t\t\t// Iben: Update the conditions with the new status\n\t\t\t\t\t\tthis.updateConditions({ offline: !online });\n\n\t\t\t\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\t\t\t\tthis.updateViewSubject.next();\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject)\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the conditions\n\t\t\tthis.updateConditions(this.displayContent() || {});\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\n\t\teffect(() => {\n\t\t\t// Iben: Update the override configuration\n\t\t\tthis.overrideConfiguration = this.displayContentConfiguration() || {};\n\n\t\t\t// Iben: Notify that the view needs to be updated\n\t\t\tthis.updateViewSubject.next();\n\t\t});\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Set the aria-live and aria-busy tag of the parent\n\t\tthis.setAriaLiveTag(this.displayContentAriaLive());\n\n\t\t// Iben: Listen to whenever we need to update the view and act accordingly\n\t\tthis.updateViewSubject\n\t\t\t.asObservable()\n\t\t\t.pipe(\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Clear the current view container\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Update the busy tag\n\t\t\t\t\tthis.setAriaBusyTag(this.conditions.loading);\n\n\t\t\t\t\t// Iben: If we're offline, we render the offline component or template\n\t\t\t\t\tif (this.conditions.offline) {\n\t\t\t\t\t\tthis.renderTemplate('offline', this.configuration.components.offline);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we're loading, we render the loading component or template\n\t\t\t\t\tif (this.conditions.loading) {\n\t\t\t\t\t\tthis.renderTemplate('loading', this.configuration.components.loading);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Iben: If we've encountered an error, we render the error component or template\n\t\t\t\t\tif (this.conditions.error) {\n\t\t\t\t\t\tthis.renderTemplate('error', this.configuration.components.error);\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: Render the initial template\n\t\t\t\t\tthis.renderInitialTemplate();\n\t\t\t\t}),\n\t\t\t\t// Iben: We add a second tap here, so the detectChanges gets run after each outcome we did earlier\n\t\t\t\ttap(() => {\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush component\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Run the initial content check\n\t\tthis.updateViewSubject.next();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n\n\t/**\n\t * Renders the provided component or template\n\t *\n\t * @param  status - The status we're handling\n\t * @param  component - The component we're wishing to render\n\t */\n\tprivate renderTemplate(\n\t\tstatus: NgxDisplayContentStatus,\n\t\tcomponent: Type\n\t): void {\n\t\t// Iben: If an override for this template exists, we render the override template and early exit\n\t\tif (this.overrideConfiguration[status]?.template) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.overrideConfiguration[status]?.template);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided, we render this component and pass along the provided data and early exit\n\t\tif (component) {\n\t\t\t// Iben: Render the component\n\t\t\tconst componentRef =\n\t\t\t\tthis.viewContainer.createComponent(component);\n\n\t\t\t// Iben: Pass the data\n\t\t\tcomponentRef.setInput('data', this.overrideConfiguration[status]?.data);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If we need to hide the template when no template was provided, we early exit\n\t\tif (this.configuration.hideWhenNoTemplateProvided) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case we don't need to hide the initial template, we render it\n\t\tthis.renderInitialTemplate();\n\t}\n\n\t/**\n\t * Renders the initial template\n\t */\n\tprivate renderInitialTemplate(): void {\n\t\tthis.viewContainer.createEmbeddedView(this.templateRef);\n\t}\n\n\t/**\n\t * Updates the conditions\n\t *\n\t * @param conditions - The conditions we want to merge with the current set\n\t */\n\tprivate updateConditions(conditions: NgxDisplayContentConditions): void {\n\t\t// Iben: Update the conditions, but use a merge so that the online status can be preserved\n\t\tif (conditions) {\n\t\t\tthis.conditions = {\n\t\t\t\t...this.conditions,\n\t\t\t\t...conditions,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Sets the aria-live tag of the item\n\t * @param  value - The value we wish to set\n\t */\n\tprivate setAriaLiveTag(value: 'polite' | 'assertive' | 'off'): void {\n\t\t// Iben: Get the parent element and early exit if it isn't found\n\t\tconst parentElement: HTMLElement = this.elementRef.nativeElement.parentElement;\n\n\t\tif (!parentElement) {\n\t\t\t// Iben:\n\t\t\tconsole.error(\n\t\t\t\t'NgxLayout: No parent element was found for NgxDisplayContentDirective. Because of that, the correct aria-live label could not be set.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the value is assertive then we always set it, as it has the highest priority\n\t\tif (value === 'assertive') {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Fetch the current aria-live label. If none were found, set it automatically\n\t\tconst currentValue = parentElement.getAttribute('aria-live');\n\n\t\tif (!currentValue) {\n\t\t\tparentElement.setAttribute('aria-live', value);\n\t\t}\n\n\t\t// Iben: If the current value is assertive or if the values are the same, we early exit\n\t\tif (currentValue === 'assertive' || currentValue === value) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Set the value\n\t\tparentElement.setAttribute('aria-live', value);\n\t}\n\n\t/**\n\t * Sets the aria-busy tag of the item\n\t * @param  isLoading - The loading state of the item\n\t */\n\tprivate setAriaBusyTag(isLoading: boolean): void {\n\t\tthis.elementRef.nativeElement.parentElement?.setAttribute('aria-busy', `${isLoading}`);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorAbstractComponent.html":{"url":"directives/NgxFormsErrorAbstractComponent.html","title":"directive - NgxFormsErrorAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                errorKeys\n                            \n                            \n                                    Public\n                                    Readonly\n                                errors\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                            \n                        \n                \n                    \n                        The error object provided by the control\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:17\n                        \n                    \n\n            \n                \n                    The error object provided by the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errorKeys\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:13\n                        \n                    \n\n            \n                \n                    An array of error keys that can be rendered\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        errors\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/error/error.component.abstract.ts:9\n                        \n                    \n\n            \n                \n                    An array of error messages that can be rendered\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input } from '@angular/core';\nimport { ValidationErrors } from '@angular/forms';\n\n@Directive()\nexport class NgxFormsErrorAbstractComponent {\n\t/**\n\t * An array of error messages that can be rendered\n\t */\n\tpublic readonly errors = input.required();\n\t/**\n\t * An array of error keys that can be rendered\n\t */\n\tpublic readonly errorKeys = input.required();\n\t/**\n\t * The error object provided by the control\n\t */\n\tpublic readonly data = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxFormsErrorConfigurationOptions.html":{"url":"interfaces/NgxFormsErrorConfigurationOptions.html","title":"interface - NgxFormsErrorConfigurationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxFormsErrorConfigurationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/interfaces/errors.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the ngx-errors directive\n errors - A record with the error key and the corresponding message we wish to show\n showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n component - An optional component to provide, which will be used to render the error. If not provided,\n                it will render a p-tag with class ngx-forms-error\n show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            errors\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            show\n                                        \n                                \n                                \n                                        \n                                            showWhen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        show\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        show:         NgxFormsErrorShowSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowSettings\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showWhen:         NgxFormsErrorShowWhenSettings\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxFormsErrorShowWhenSettings\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxFormsErrorAbstractComponent } from '../abstracts';\n\nexport type NgxFormsErrorShowWhenSettings = 'touched' | 'dirty';\nexport type NgxFormsErrorShowSettings = 'all' | number;\n\n/**\n * Configuration for the ngx-errors directive\n *\n *  errors - A record with the error key and the corresponding message we wish to show\n *  showWhen - A setting to know when an error has to be shown. Either 'touched' or 'dirty'\n *  component - An optional component to provide, which will be used to render the error. If not provided,\n * \t\t\t\tit will render a p-tag with class `ngx-forms-error`\n *  show - The amount of errors we wish to show at once. By default, only one error is shown at a time.\n */\nexport interface NgxFormsErrorConfigurationOptions {\n\terrors: Record;\n\tshowWhen: NgxFormsErrorShowWhenSettings;\n\tcomponent?: Type;\n\tshow?: NgxFormsErrorShowSettings;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxFormsErrorsDirective.html":{"url":"directives/NgxFormsErrorsDirective.html","title":"directive - NgxFormsErrorsDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxFormsErrorsDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/directives/errors/errors.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxFormsErrors]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                abstractControl\n                            \n                            \n                                    Protected\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Public\n                                    Readonly\n                                control\n                            \n                            \n                                    Protected\n                                    Readonly\n                                destroyRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                errorComponent\n                            \n                            \n                                    Private\n                                errorsElement\n                            \n                            \n                                    Protected\n                                    Readonly\n                                formGroupDirective\n                            \n                            \n                                    Protected\n                                    Readonly\n                                formNameDirective\n                            \n                            \n                                    Protected\n                                hasErrors\n                            \n                            \n                                    Protected\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Private\n                                template\n                            \n                            \n                                    Protected\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getErrors\n                            \n                            \n                                    Private\n                                handleComponentRender\n                            \n                            \n                                    Private\n                                handleNoComponentFlow\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:122\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getErrors\n                        \n                    \n                \n            \n            \n                \n                        \n                    getErrors(data: ValidationErrors)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:280\n                        \n                    \n\n\n            \n                \n                        Returns the errors based on the provided settings\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        ValidationErrors\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe error data we wish to use\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleComponentRender\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleComponentRender(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:206\n                        \n                    \n\n\n            \n                \n                        Renders a provided custom component underneath the input component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleNoComponentFlow\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleNoComponentFlow(shouldShow: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:243\n                        \n                    \n\n\n            \n                \n                        Renders a p tag underneath the input component when no custom component was provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                shouldShow\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether the error should be shown\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:129\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        abstractControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbstractControl\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:100\n                        \n                    \n\n            \n                \n                    The AbstractControl we wish to listen to when using the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:80\n                        \n                    \n\n            \n                \n                     An instance of the ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:115\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to add error data to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorConfigurationOptions\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:52\n                        \n                    \n\n            \n                \n                     The optional global configuration used form the NgxFormsError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(undefined, {\n\t\talias: 'ngxFormsErrors',\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:120\n                        \n                    \n\n            \n                \n                    A reference to a control or a string reference to the control\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DestroyRef\n\n                    \n                \n                \n                    \n                        Default value : inject(DestroyRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:85\n                        \n                    \n\n            \n                \n                     An instance of the DestroyRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:65\n                        \n                    \n\n            \n                \n                     An instance of the ElementRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxFormsErrorAbstractComponent\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:110\n                        \n                    \n\n            \n                \n                    The component to which the error data is added\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        errorsElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:105\n                        \n                    \n\n            \n                \n                    The p element we add to the dom when no component is provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        formGroupDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupDirective, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:40\n                        \n                    \n\n            \n                \n                     An optional instance of the FormGroup directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        formNameDirective\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroupName\n\n                    \n                \n                \n                    \n                        Default value : inject(FormGroupName, { optional: true })\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:47\n                        \n                    \n\n            \n                \n                     An optional instance of the FormGroupName directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:90\n                        \n                    \n\n            \n                \n                     Whether the control has errors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:70\n                        \n                    \n\n            \n                \n                     An instance of Renderer2\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        template\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:95\n                        \n                    \n\n            \n                \n                     The actual template of the input element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:75\n                        \n                    \n\n            \n                \n                     An instance of the TemplateRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/directives/errors/errors.directive.ts:60\n                        \n                    \n\n            \n                \n                     An instance of the ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tComponentRef,\n\tDirective,\n\tElementRef,\n\tinject,\n\tRenderer2,\n\tTemplateRef,\n\tViewContainerRef,\n\tinput,\n\tDestroyRef,\n\tWritableSignal,\n\tsignal,\n\tcomputed,\n\tSignal,\n} from '@angular/core';\nimport { takeUntilDestroyed } from '@angular/core/rxjs-interop';\nimport {\n\tAbstractControl,\n\tFormGroupDirective,\n\tFormGroupName,\n\tValidationErrors,\n} from '@angular/forms';\nimport { combineLatest, startWith, tap } from 'rxjs';\n\nimport { NgxFormsErrorAbstractComponent } from '../../abstracts';\nimport { NgxFormsErrorConfigurationOptions } from '../../interfaces';\nimport { NgxFormsErrorsConfigurationToken } from '../../tokens';\nimport { touchedEventListener } from '../../utils';\n\n@Directive({\n\tselector: '[ngxFormsErrors]',\n\tstandalone: true,\n})\nexport class NgxFormsErrorsDirective implements AfterViewInit {\n\t/**\n\t *  An optional instance of the FormGroup directive\n\t */\n\tprotected readonly formGroupDirective: FormGroupDirective = inject(FormGroupDirective, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t *  An optional instance of the FormGroupName directive\n\t */\n\tprotected readonly formNameDirective: FormGroupName = inject(FormGroupName, { optional: true });\n\n\t/**\n\t *  The optional global configuration used form the NgxFormsError\n\t */\n\tprivate readonly config: NgxFormsErrorConfigurationOptions = inject(\n\t\tNgxFormsErrorsConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t *  An instance of the ViewContainerRef\n\t */\n\tprotected readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n\t/**\n\t *  An instance of the ElementRef\n\t */\n\tprotected readonly elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t *  An instance of Renderer2\n\t */\n\tprotected readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t *  An instance of the TemplateRef\n\t */\n\tprotected readonly templateRef: TemplateRef = inject(TemplateRef);\n\n\t/**\n\t *  An instance of the ChangeDetectorRef\n\t */\n\tprotected readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\n\t/**\n\t *  An instance of the DestroyRef\n\t */\n\tprotected readonly destroyRef: DestroyRef = inject(DestroyRef);\n\n\t/**\n\t *  Whether the control has errors\n\t */\n\tprotected hasErrors: WritableSignal = signal(false);\n\n\t/**\n\t *  The actual template of the input element\n\t */\n\tprivate template: TemplateRef;\n\n\t/**\n\t * The AbstractControl we wish to listen to when using the directive\n\t */\n\tprivate abstractControl: AbstractControl;\n\n\t/**\n\t * The p element we add to the dom when no component is provided\n\t */\n\tprivate errorsElement: any;\n\n\t/**\n\t * The component to which the error data is added\n\t */\n\tprivate errorComponent: NgxFormsErrorAbstractComponent;\n\n\t/**\n\t * The ref of the component we wish to add error data to\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * A reference to a control or a string reference to the control\n\t */\n\tpublic readonly control = input(undefined, {\n\t\talias: 'ngxFormsErrors',\n\t});\n\n\tconstructor() {\n\t\t// Iben: Set the current template ref at constructor time so we actually have the provided template (as done in the *ngIf directive)\n\t\tthis.template = this.templateRef;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Render the actual input so that it is always visible\n\t\tthis.viewContainer.clear();\n\t\tthis.viewContainer.createEmbeddedView(this.template);\n\n\t\t// Iben: If no control was provided, we early exit and log an error\n\t\tconst control = this.control();\n\t\tif (!control) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the control is a string, we check the parent to find the actual control.\n\t\t// If not, we use the provided control\n\t\tif (typeof control === 'string') {\n\t\t\tthis.abstractControl = this.formGroupDirective\n\t\t\t\t? this.formGroupDirective.form.get(control)\n\t\t\t\t: this.formNameDirective?.control.get(control);\n\t\t} else {\n\t\t\tthis.abstractControl = control;\n\t\t}\n\n\t\t// Iben: If no control was found, we early exit and log an error\n\t\tif (!this.abstractControl) {\n\t\t\tconsole.error('NgxForms: No control was provided to the NgxFormsErrorDirective');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Listen to the value changes, status changes and the touched changes of the control\n\t\tcombineLatest([\n\t\t\tthis.abstractControl.valueChanges.pipe(startWith(this.abstractControl.value)),\n\t\t\ttouchedEventListener(this.abstractControl),\n\t\t\tthis.abstractControl.statusChanges.pipe(startWith(this.abstractControl.status)),\n\t\t])\n\t\t\t.pipe(\n\t\t\t\ttap(([, touched]) => {\n\t\t\t\t\t// Iben: Check whether we should show the error based on the provided config\n\t\t\t\t\tthis.hasErrors.set(\n\t\t\t\t\t\tthis.abstractControl.invalid &&\n\t\t\t\t\t\t\t(this.config.showWhen === 'touched'\n\t\t\t\t\t\t\t\t? touched\n\t\t\t\t\t\t\t\t: this.abstractControl.dirty)\n\t\t\t\t\t);\n\n\t\t\t\t\t// Iben: Set the errors class if needed\n\t\t\t\t\tthis.hasErrors()\n\t\t\t\t\t\t? this.renderer.addClass(\n\t\t\t\t\t\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement),\n\t\t\t\t\t\t\t\t'ngx-forms-errors-invalid'\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: this.renderer.removeClass(\n\t\t\t\t\t\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement),\n\t\t\t\t\t\t\t\t'ngx-forms-errors-invalid'\n\t\t\t\t\t\t  );\n\n\t\t\t\t\t// Iben: Show the error based on whether or not a component was provided\n\t\t\t\t\tif (!this.config.component) {\n\t\t\t\t\t\tthis.handleNoComponentFlow(this.hasErrors());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.handleComponentRender(this.hasErrors());\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so this works with (nested) OnPush components\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed(this.destroyRef)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Renders a provided custom component underneath the input component\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleComponentRender(shouldShow: boolean) {\n\t\t// Iben: If the error should not be shown, we check if there's already an error component and destroy it if needed\n\t\tif (!shouldShow) {\n\t\t\tif (this.errorComponent) {\n\t\t\t\tthis.componentRef.destroy();\n\t\t\t\tthis.componentRef = undefined;\n\t\t\t\tthis.errorComponent = undefined;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\tif (this.componentRef) {\n\t\t\tthis.componentRef.destroy();\n\t\t\tthis.componentRef = undefined;\n\t\t}\n\n\t\t// Iben: Add the new component to the view\n\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\tthis.config.component\n\t\t);\n\t\tthis.errorComponent = this.componentRef.instance;\n\n\t\t// Iben: Set the data of the error component\n\t\tconst { errors, errorKeys, data } = this.getErrors(this.abstractControl.errors);\n\n\t\tthis.componentRef.setInput('errors', errors);\n\t\tthis.componentRef.setInput('errorKeys', errorKeys);\n\t\tthis.componentRef.setInput('data', data);\n\t}\n\n\t/**\n\t * Renders a p tag underneath the input component when no custom component was provided\n\t *\n\t * @param shouldShow - Whether the error should be shown\n\t */\n\tprivate handleNoComponentFlow(shouldShow: boolean) {\n\t\t// Iben: We remove the current errors so that we always have a new element to work with\n\t\tif (this.errorsElement) {\n\t\t\tthis.renderer.removeChild(this.elementRef.nativeElement.parentNode, this.errorsElement);\n\n\t\t\tthis.errorsElement = null;\n\t\t}\n\n\t\t// Iben: Early exit in case there's no error to show\n\t\tif (!shouldShow) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Create a new error paragraph\n\t\tthis.errorsElement = this.renderer.createElement('p');\n\t\tthis.renderer.setAttribute(this.errorsElement, 'class', 'ngx-forms-error');\n\n\t\t// Iben: Set the errors based on the keys\n\t\tthis.renderer.setProperty(\n\t\t\tthis.errorsElement,\n\t\t\t'innerHTML',\n\t\t\tthis.getErrors(this.abstractControl.errors).errors.join(', ')\n\t\t);\n\n\t\t// Iben: insert the paragraph underneath the input component\n\t\tthis.renderer.insertBefore(\n\t\t\tthis.elementRef.nativeElement.parentNode,\n\t\t\tthis.errorsElement,\n\t\t\tthis.renderer.nextSibling(this.elementRef.nativeElement)\n\t\t);\n\t}\n\n\t/**\n\t * Returns the errors based on the provided settings\n\t *\n\t * @param data - The error data we wish to use\n\t */\n\tprivate getErrors(data: ValidationErrors): {\n\t\terrors: string[];\n\t\tdata: ValidationErrors;\n\t\terrorKeys: string[];\n\t} {\n\t\t// Iben: Early exit in case the errors object is null\n\t\tif (!data) {\n\t\t\treturn {\n\t\t\t\terrors: [],\n\t\t\t\tdata: null,\n\t\t\t\terrorKeys: [],\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If the config is set to all, we always show all errors\n\t\tif (this.config.show === 'all') {\n\t\t\treturn {\n\t\t\t\terrors: Object.keys(data).map((key) => this.config.errors[key]),\n\t\t\t\terrorKeys: Object.keys(data),\n\t\t\t\tdata,\n\t\t\t};\n\t\t}\n\n\t\t// Iben: If no limit is provided, we default to a single error\n\t\tconst limit = this.config.show === undefined ? 1 : this.config.show;\n\n\t\t// Iben: Slice the errors based on the provided limit\n\t\treturn {\n\t\t\terrors: Object.keys(data)\n\t\t\t\t.map((key) => this.config.errors[key])\n\t\t\t\t.slice(0, limit),\n\t\t\terrorKeys: Object.keys(data).slice(0, limit),\n\t\t\tdata,\n\t\t};\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxHasCookieConfiguration.html":{"url":"interfaces/NgxHasCookieConfiguration.html","title":"interface - NgxHasCookieConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxHasCookieConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/types/has-cookie-configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            services\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxHasCookieConfiguration {\n\tcategory: string;\n\tservices?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasCookieDirective.html":{"url":"directives/NgxHasCookieDirective.html","title":"directive - NgxHasCookieDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasCookieDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hasCookie]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                component\n                            \n                            \n                                    Private\n                                componentRef\n                            \n                            \n                                    Private\n                                cookies\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Public\n                                hasCookie\n                            \n                            \n                                    Public\n                                hasCookieElse\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxCookieService\n                            \n                            \n                                    Private\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                renderElseTemplate\n                            \n                            \n                                    Private\n                                renderThenTemplate\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hasCookie\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hasCookie\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                            \n                        \n                \n                    \n                        A cookie or list of cookies the item should have\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:148\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:89\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderElseTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderElseTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:168\n                        \n                    \n\n\n            \n                \n                        Render the fallbackTemplate or fallBackComponent\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        renderThenTemplate\n                        \n                    \n                \n            \n            \n                \n                        \n                    renderThenTemplate()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:158\n                        \n                    \n\n\n            \n                \n                        Render the template on which the directive is set\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:96\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        component\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        componentRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:54\n                        \n                    \n\n            \n                \n                    The ref of the component we wish to render as a fallback\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cookies\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxHasCookieConfiguration[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:59\n                        \n                    \n\n            \n                \n                    The list of cookies we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:34\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookie\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:64\n                        \n                    \n\n            \n                \n                    A cookie or list of cookies the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasCookieElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:70\n                        \n                    \n\n            \n                \n                    The else template in case the cookie is not accepted\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxCookieService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxCookieService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxCookieService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : inject(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:48\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/cookies/src/lib/directives/has-cookie/has-cookie.directive.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tComponentRef,\n\tDirective,\n\tTemplateRef,\n\tType,\n\tViewContainerRef,\n\tOnDestroy,\n\tinject,\n\teffect,\n\tinput,\n\tInputSignal,\n} from '@angular/core';\nimport { flatten } from 'lodash';\nimport { Subject, tap, takeUntil, combineLatest, map } from 'rxjs';\n\nimport { NgxCookiesFallBackComponent } from '../../abstracts';\nimport { NgxCookieService } from '../../services';\nimport { NgxCookiesFallbackComponentToken } from '../../tokens';\nimport { NgxHasCookieConfiguration } from '../../types';\n\n/**\n * A structural directive that provides a way to render UI elements based on whether a (set of) cookie(s) have been accepted by the user.\n */\n@Directive({\n\tselector: '[hasCookie]',\n\tstandalone: true,\n})\nexport class NgxHasCookieDirective implements OnDestroy {\n\t//TODO: Iben: Replace this with the OnDestroyComponent flow once we have a shared lib\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\tprivate readonly templateRef: TemplateRef = inject(TemplateRef);\n\tprivate viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\tprivate readonly ngxCookieService: NgxCookieService = inject(NgxCookieService);\n\tprivate readonly cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\tprivate readonly component: Type = inject(\n\t\tNgxCookiesFallbackComponentToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\n\t/**\n\t * The ref of the component we wish to render as a fallback\n\t */\n\tprivate componentRef: ComponentRef;\n\n\t/**\n\t * The list of cookies we need to check\n\t */\n\tprivate cookies: NgxHasCookieConfiguration[] = [];\n\n\t/**\n\t * A cookie or list of cookies the item should have\n\t */\n\tpublic hasCookie: InputSignal =\n\t\tinput.required();\n\n\t/**\n\t * The else template in case the cookie is not accepted\n\t */\n\tpublic hasCookieElse: InputSignal> = input>();\n\n\tconstructor() {\n\t\tthis.thenTemplateRef = this.templateRef;\n\n\t\teffect(() => {\n\t\t\tconst value = this.hasCookie();\n\t\t\tthis.cookies = Array.isArray(value) ? value : [value];\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tif (this.hasCookieElse()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tcombineLatest(\n\t\t\t// Iben Check for each cookie if it is accepted\n\t\t\tthis.cookies.map((cookie) => {\n\t\t\t\t// Iben: If no specific services were provided, we can just check the category\n\t\t\t\tif (!cookie.services) {\n\t\t\t\t\treturn this.ngxCookieService.hasAcceptedCategory(cookie.category);\n\t\t\t\t}\n\n\t\t\t\t// Iben: If specific services were provided, we can just check each individual category\n\t\t\t\treturn combineLatest(\n\t\t\t\t\tcookie.services.map((service) => {\n\t\t\t\t\t\treturn this.ngxCookieService.hasAcceptedService(cookie.category, service);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})\n\t\t)\n\t\t\t.pipe(\n\t\t\t\tmap((hasCookies) => {\n\t\t\t\t\treturn flatten(hasCookies).every((hasCookie) => hasCookie);\n\t\t\t\t}),\n\t\t\t\ttap((hasCookie) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: If there already is a component, destroy it so it can update correctly\n\t\t\t\t\tif (this.componentRef) {\n\t\t\t\t\t\tthis.componentRef.destroy();\n\t\t\t\t\t\tthis.componentRef = undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\thasCookie ? this.renderThenTemplate() : this.renderElseTemplate();\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n\n\t/**\n\t * Render the template on which the directive is set\n\t */\n\tprivate renderThenTemplate(): void {\n\t\t// Iben: If a thenTemplateRef is provided, render the template\n\t\tif (this.thenTemplateRef) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.thenTemplateRef);\n\t\t}\n\t}\n\n\t/**\n\t * Render the fallbackTemplate or fallBackComponent\n\t */\n\tprivate renderElseTemplate(): void {\n\t\t// Iben: If a custom template ref was provided, render the template and early exit\n\t\tif (this.hasCookieElse()) {\n\t\t\tthis.viewContainer.createEmbeddedView(this.hasCookieElse());\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If a component was provided as a fallback, we render that\n\t\tif (this.component) {\n\t\t\t// Iben: Render the provided component\n\t\t\tthis.componentRef = this.viewContainer.createComponent(\n\t\t\t\tthis.component\n\t\t\t);\n\n\t\t\t// Iben: Set the cookies of the component\n\t\t\tthis.componentRef.setInput('cookies', this.cookies);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFeatureDirective.html":{"url":"directives/NgxHasFeatureDirective.html","title":"directive - NgxHasFeatureDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFeatureDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required feature(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasFeature]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Private\n                                feature\n                            \n                            \n                                    Public\n                                ngxHasFeature\n                            \n                            \n                                    Public\n                                ngxHasFeatureElse\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                    Public\n                                ngxHasFeatureShouldHaveFeature\n                            \n                            \n                                    Private\n                                shouldHaveAllFeatures\n                            \n                            \n                                    Private\n                                shouldHaveFeature\n                            \n                            \n                                templateRef\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasFeature\n                            \n                            \n                                ngxHasFeatureElse\n                            \n                            \n                                ngxHasFeatureShouldHaveAllFeatures\n                            \n                            \n                                ngxHasFeatureShouldHaveFeature\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                            \n                        \n                \n                    \n                        A feature or list of features the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                            \n                        \n                \n                    \n                        The else template in case the feature is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveAllFeatures\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                            \n                        \n                \n                    \n                        Whether all features should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasFeatureShouldHaveFeature\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                            \n                        \n                \n                    \n                        Whether the feature should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:175\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:116\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:41\n                        \n                    \n\n            \n                \n                    The provided AuthenticationService implementation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:47\n                        \n                    \n\n            \n                \n                    The provided ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:52\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        feature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FeatureType | FeatureType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:65\n                        \n                    \n\n            \n                \n                    The (list of) feature(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:80\n                        \n                    \n\n            \n                \n                    A feature or list of features the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:85\n                        \n                    \n\n            \n                \n                    The else template in case the feature is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:95\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasFeatureShouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:90\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllFeatures\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:75\n                        \n                    \n\n            \n                \n                    Whether all features should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the feature should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:33\n                        \n                    \n\n            \n                \n                    The provided template ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:57\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-feature/has-feature.directive.ts:37\n                        \n                    \n\n            \n                \n                    The provided ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required feature(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasFeature]',\n})\nexport class NgxHasFeatureDirective implements OnDestroy {\n\t/**\n\t * The provided template ref\n\t */\n\ttemplateRef = inject>(TemplateRef);\n\t/**\n\t * The provided ViewContainerRef\n\t */\n\tprivate viewContainer = inject(ViewContainerRef);\n\t/**\n\t * The provided AuthenticationService implementation\n\t */\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\t/**\n\t * The provided ChangeDetectorRef\n\t */\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) feature(s) we need to check\n\t */\n\tprivate feature: FeatureType | FeatureType[] = [];\n\n\t/**\n\t * Whether the feature should be enabled\n\t */\n\tprivate shouldHaveFeature: boolean = true;\n\n\t/**\n\t * Whether all features should be enabled\n\t */\n\tprivate shouldHaveAllFeatures: boolean = true;\n\n\t/**\n\t * A feature or list of features the item should have\n\t */\n\tpublic ngxHasFeature: InputSignal = input();\n\n\t/**\n\t * The else template in case the feature is not enabled\n\t */\n\tpublic ngxHasFeatureElse: InputSignal> = input();\n\n\t/**\n\t * Whether the feature should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveFeature: InputSignal = input();\n\n\t/**\n\t * Whether all features should be enabled, by default this is true\n\t */\n\tpublic ngxHasFeatureShouldHaveAllFeatures: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = this.templateRef;\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllFeatures = this.ngxHasFeatureShouldHaveAllFeatures();\n\t\t\tthis.shouldHaveFeature = this.ngxHasFeatureShouldHaveFeature();\n\t\t\tthis.feature = this.ngxHasFeature();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasFeatureElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasFeature(convertToArray(this.feature), this.shouldHaveAllFeatures)\n\t\t\t.pipe(\n\t\t\t\ttap((hasFeature) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHaveFeature ? hasFeature : !hasFeature;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasFeaturePipe.html":{"url":"pipes/NgxHasFeaturePipe.html","title":"pipe - NgxHasFeaturePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasFeaturePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) feature(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasFeature\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:88\n                        \n                    \n\n\n            \n                \n                        Dispose of the feature observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:40\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:64\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasFeature observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasFeature observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(feature: FeatureType | FeatureType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:53\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a feature is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                feature\n                                            \n                                                        FeatureType | FeatureType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided feature\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:31\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:22\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasFeature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-feature/has-feature.pipe.ts:26\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the feature is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) feature(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasFeature',\n\tpure: false,\n})\nexport class NgxHasFeaturePipe implements PipeTransform, OnDestroy {\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the feature is provided\n\t */\n\tprivate hasFeature: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a feature is provided for the environment\n\t *\n\t * @param feature - The provided feature\n\t */\n\tpublic transform(feature: FeatureType | FeatureType[]): boolean {\n\t\tthis.subscribe(this.authenticationService.hasFeature(convertToArray(feature)));\n\n\t\treturn this.hasFeature;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasFeature observable\n\t *\n\t * @param observable - The hasFeature observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasFeature = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the feature observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDirective.html":{"url":"directives/NgxHasFocusDirective.html","title":"directive - NgxHasFocusDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:34\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:25\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:18\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/has-focus-action/has-focus.directive.ts:13\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener } from '@angular/core';\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') setFocus() {\n\t\tthis.hasFocus = true;\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') removeFocus() {\n\t\tthis.hasFocus = false;\n\t}\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n\n\t/**\n   * Returns when the item has been focussed on\n   */\n  public isFocussedOn(): boolean {\n\t\treturn this.hasFocus;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasFocusDragAndDropAbstractDirective.html":{"url":"directives/NgxHasFocusDragAndDropAbstractDirective.html","title":"directive - NgxHasFocusDragAndDropAbstractDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasFocusDragAndDropAbstractDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract directive used as a base to handle focussed base actions\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                    Optional\n                                onBlur\n                            \n                            \n                                    Public\n                                    Optional\n                                onFocus\n                            \n                            \n                                    \n                                    Public\n                                removeFocus\n                            \n                            \n                                    \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:54\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    onBlur()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFocus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:31\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:20\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject( ElementRef )\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/drag-and-drop/has-focus.directive.ts:15\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, inject } from '@angular/core';\n\n//TODO: Iben: Move this copy to a shared lib once we have figured out how to handle that.\n\n/**\n * An abstract directive used as a base to handle focussed base actions\n */\n@Directive({\n\tstandalone: true,\n})\nexport abstract class NgxHasFocusDragAndDropAbstractDirective {\n\t/**\n\t * Whether the current element is focussed\n\t */\n\tprotected hasFocus: boolean = false;\n\n\t/**\n\t * Set the hasFocus flag\n\t */\n\t@HostListener('focus') public setFocus(): void {\n\t\tthis.hasFocus = true;\n\n\t\tif (this.onFocus) {\n\t\t\tthis.onFocus();\n\t\t}\n\t}\n\n\t/**\n\t * Remove the hasFocus flag\n\t */\n\t@HostListener('blur') public removeFocus() {\n\t\tthis.hasFocus = false;\n\n\t\tif (this.onBlur) {\n\t\t\tthis.onBlur();\n\t\t}\n\t}\n\n  public readonly elementRef: ElementRef = inject( ElementRef );\n\n\tpublic focus(): void {\n\t\tthis.elementRef.nativeElement.focus();\n\t}\n\n\tpublic onBlur?(): void;\n\n\tpublic onFocus?(): void;\n\n\t/**\n\t * Execute an action when the element has focussed\n\t *\n\t * @param action - The provided action\n\t */\n\tpublic handleWhenFocussed(action: () => void): void {\n\t\tif (this.hasFocus) {\n\t\t\taction();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxHasPermissionDirective.html":{"url":"directives/NgxHasPermissionDirective.html","title":"directive - NgxHasPermissionDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxHasPermissionDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the required permissions(s) are provided.\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxHasPermission]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxHasPermission\n                            \n                            \n                                    Public\n                                ngxHasPermissionElse\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                    Public\n                                ngxHasPermissionShouldHavePermission\n                            \n                            \n                                    Private\n                                permission\n                            \n                            \n                                    Private\n                                shouldHaveAllPermissions\n                            \n                            \n                                    Private\n                                shouldHavePermission\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxHasPermission\n                            \n                            \n                                ngxHasPermissionElse\n                            \n                            \n                                ngxHasPermissionShouldHaveAllPermissions\n                            \n                            \n                                ngxHasPermissionShouldHavePermission\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxHasPermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                            \n                        \n                \n                    \n                        A permission or list of permissions the item should have\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                            \n                        \n                \n                    \n                        The else template in case the permission is not enabled\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHaveAllPermissions\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                            \n                        \n                \n                    \n                        Whether all permissions should be enabled, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxHasPermissionShouldHavePermission\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                            \n                        \n                \n                    \n                        Whether the permission should be enabled, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:167\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:103\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:110\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:39\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:67\n                        \n                    \n\n            \n                \n                    A permission or list of permissions the item should have\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:72\n                        \n                    \n\n            \n                \n                    The else template in case the permission is not enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:82\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxHasPermissionShouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:77\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        permission\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PermissionType | PermissionType[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:52\n                        \n                    \n\n            \n                \n                    The (list of) permission(s) we need to check\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHaveAllPermissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:62\n                        \n                    \n\n            \n                \n                    Whether all permissions should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldHavePermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:57\n                        \n                    \n\n            \n                \n                    Whether the permission should be enabled\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:44\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/has-permission/has-permission.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A directive that will render a part of the template based on whether the required permissions(s) are provided.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n//TODO: Iben: Implement Cypress/PlayWright tests\n@Directive({\n\tselector: '[ngxHasPermission]',\n})\nexport class NgxHasPermissionDirective implements OnDestroy {\n\tprivate viewContainer = inject(ViewContainerRef);\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The (list of) permission(s) we need to check\n\t */\n\tprivate permission: PermissionType | PermissionType[] = [];\n\n\t/**\n\t * Whether the permission should be enabled\n\t */\n\tprivate shouldHavePermission: boolean = true;\n\n\t/**\n\t * Whether all permissions should be enabled\n\t */\n\tprivate shouldHaveAllPermissions: boolean = true;\n\n\t/**\n\t * A permission or list of permissions the item should have\n\t */\n\tpublic ngxHasPermission: InputSignal = input();\n\n\t/**\n\t * The else template in case the permission is not enabled\n\t */\n\tpublic ngxHasPermissionElse: InputSignal> = input();\n\n\t/**\n\t * Whether the permission should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHavePermission: InputSignal = input();\n\n\t/**\n\t * Whether all permissions should be enabled, by default this is true\n\t */\n\tpublic ngxHasPermissionShouldHaveAllPermissions: InputSignal = input();\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldHaveAllPermissions = this.ngxHasPermissionShouldHaveAllPermissions();\n\t\t\tthis.shouldHavePermission = this.ngxHasPermissionShouldHavePermission();\n\t\t\tthis.permission = this.ngxHasPermission();\n\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxHasPermissionElse();\n\t\t\tthis.elseViewRef = null;\n\t\t});\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService\n\t\t\t.hasPermission(\n\t\t\t\tconvertToArray(this.permission),\n\t\t\t\tthis.shouldHaveAllPermissions\n\t\t\t)\n\t\t\t.pipe(\n\t\t\t\ttap((hasPermission) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.shouldHavePermission\n\t\t\t\t\t\t? hasPermission\n\t\t\t\t\t\t: !hasPermission;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxHasPermissionPipe.html":{"url":"pipes/NgxHasPermissionPipe.html","title":"pipe - NgxHasPermissionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxHasPermissionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) permission(s) has been provided\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxHasPermission\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:92\n                        \n                    \n\n\n            \n                \n                        Dispose of the permission observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:68\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the hasPermission observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hasPermission observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(permission: PermissionType | PermissionType[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:55\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a permission is provided for the environment\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                permission\n                                            \n                                                        PermissionType | PermissionType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided permission\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxAuthenticationServiceToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:33\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:24\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasPermission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/pipes/has-permission/has-permission.pipe.ts:28\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the permission is provided\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\nimport { convertToArray } from '../../utils';\n\n/**\n * A pipe that returns whether a (list of) permission(s) has been provided\n */\n@Pipe({\n\tname: 'ngxHasPermission',\n\tpure: false,\n})\nexport class NgxHasPermissionPipe\n\timplements PipeTransform, OnDestroy\n{\n\tprivate readonly authenticationService = inject(NgxAuthenticationServiceToken);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the permission is provided\n\t */\n\tprivate hasPermission: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a permission is provided for the environment\n\t *\n\t * @param permission - The provided permission\n\t */\n\tpublic transform(permission: PermissionType | PermissionType[]): boolean {\n\t\tthis.subscribe(\n\t\t\tthis.authenticationService.hasPermission(convertToArray(permission))\n\t\t);\n\n\t\treturn this.hasPermission;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the hasPermission observable\n\t *\n\t * @param observable - The hasPermission observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.hasPermission = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the permission observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nAbstractService.html":{"url":"classes/NgxI18nAbstractService.html","title":"class - NgxI18nAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service used to fetch the current language\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/abstracts/i18n-service.abstract.ts:9\n                                \n                            \n                    \n                        \n                                A method to return the current language\n\n\n                                \n                                    Returns :     Language\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        export abstract class NgxI18nAbstractService {\n\n\t/**\n   * A method to return the current language\n   */\n  public abstract get currentLanguage(): Language;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxI18nConfiguration.html":{"url":"interfaces/NgxI18nConfiguration.html","title":"interface - NgxI18nConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxI18nConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/i18n.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration we can pass to the translation system\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            availableLanguages\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cacheBust\n                                        \n                                \n                                \n                                        \n                                            defaultAssetPaths\n                                        \n                                \n                                \n                                        \n                                            defaultLanguage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            languageRouteParam\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        availableLanguages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        availableLanguages:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A list of languages the application has translations for\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cacheBust\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cacheBust:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The cache busting parameter to append to the translation file requests.\nThis can be useful when you want to force the browser to fetch the latest\nversion of the translation files by appending this value to the v query\nparameter.\nWhen not provided, no query parameter will be added to the request.\nExample :`?v=1` when `cacheBust: '' + 1`\n`?v=1.0.0` when `cacheBust: '1.0.0'`\n`?v=1743428073628` when `cacheBust: String(Date.now())`\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultAssetPaths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultAssetPaths:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A list of default translation files we want to load in if we don't provide a custom loader\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultLanguage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultLanguage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The default language the application should be in\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        languageRouteParam\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        languageRouteParam:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The param name we use for the language, by default this is language\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface NgxI18nConfiguration {\n\t/**\n\t * The default language the application should be in\n\t */\n\tdefaultLanguage: string;\n\t/**\n\t * A list of languages the application has translations for\n\t */\n\tavailableLanguages?: string[];\n\t/**\n\t * A list of default translation files we want to load in if we don't provide a custom loader\n\t */\n\tdefaultAssetPaths: string[];\n\t/**\n\t * The param name we use for the language, by default this is `language`\n\t */\n\tlanguageRouteParam?: string;\n\t/**\n\t * The cache busting parameter to append to the translation file requests.\n\t * This can be useful when you want to force the browser to fetch the latest\n\t * version of the translation files by appending this value to the `v` query\n\t * parameter.\n\t *\n\t * When not provided, no query parameter will be added to the request.\n\t *\n\t * @example\n\t * `?v=1` when `cacheBust: '' + 1`\n\t * `?v=1.0.0` when `cacheBust: '1.0.0'`\n\t * `?v=1743428073628` when `cacheBust: String(Date.now())`\n\t */\n\tcacheBust?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxI18nEmptyComponent.html":{"url":"components/NgxI18nEmptyComponent.html","title":"component - NgxI18nEmptyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxI18nEmptyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/i18n/src/lib/components/empty-component/empty.component.ts\n\n\n\n    \n        Description\n    \n    \n        This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-i18n-empty\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n/**\n * This is an empty dummy component that can be used in combination with the NgxI18nSetLanguageGuard when needed\n */\n@Component({\n\tselector: 'ngx-i18n-empty',\n\tstandalone: true,\n\ttemplate: '',\n})\nexport class NgxI18nEmptyComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxI18nEmptyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nLoadingService.html":{"url":"injectables/NgxI18nLoadingService.html","title":"injectable - NgxI18nLoadingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nLoadingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that holds whether there currently are translation files being loaded into the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                translationLoaderActionsSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsFailed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsFailedSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                translationsLoaded$\n                            \n                            \n                                    Private\n                                translationsLoading\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addLoadedTranslations\n                            \n                            \n                                    Public\n                                dispatchTranslationLoaderAction\n                            \n                            \n                                    Public\n                                getTranslations\n                            \n                            \n                                    Public\n                                loadTranslations\n                            \n                            \n                                    Public\n                                markTranslationsLoadedAsFailed\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        addLoadedTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLoadedTranslations(translations: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Add loaded translations to the loaded translations record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                translations\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly loaded translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dispatchTranslationLoaderAction\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Dispatch the loading state of a set of translations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            TranslationLoaderActionEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe loading state of a set of translations\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslations()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Fetches all the currently loaded translations\n\n\n                        \n                            Returns :     Record\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        loadTranslations\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadTranslations(paths: string, observable: Observable<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paths\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe paths of we're loading translations for\n\n\n                                            \n                                        \n                                        \n                                                observable\n                                            \n                                                        Observable<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe translations loading observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Record>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markTranslationsLoadedAsFailed\n                        \n                    \n                \n            \n            \n                \n                        \n                    markTranslationsLoadedAsFailed()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Mark the loading of the translations as failed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoaderActionsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsFailed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.translationsFailedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsFailedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translationsLoaded$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        translationsLoading\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject>({})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.service.ts:21\n                        \n                    \n\n            \n                \n                    A subject to store all the currently loaded translation files in\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { scan, map, shareReplay } from 'rxjs/operators';\n\nimport { TranslationLoaderActionEntity } from './i18n-loading.types';\n\n/**\n * A service that holds whether there currently are translation files being loaded into the application\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxI18nLoadingService {\n\t// Iben: Keep a subject to store all the translation loading actions\n\tprivate readonly translationLoaderActionsSubject$ =\n\t\tnew Subject();\n\n\t/**\n\t * A subject to store all the currently loaded translation files in\n\t */\n\tprivate readonly translationsSubject$ = new BehaviorSubject>({});\n\n\tprivate readonly translationsFailedSubject$ = new BehaviorSubject(false);\n\n\tprivate translationsLoading: Record> = {};\n\n\t// Iben: Check if all translations actions have completed\n\tpublic readonly translationsLoaded$ = this.translationLoaderActionsSubject$.pipe(\n\t\t// Iben: Hold a list of all actions and only add those that have a loading state\n\t\t// If the action is not loading, remove it from the actions array\n\t\tscan((actions: string[], action: TranslationLoaderActionEntity) => {\n\t\t\treturn action.state === 'LOADING'\n\t\t\t\t? actions.concat(action.id)\n\t\t\t\t: actions.filter((actionFromResult) => actionFromResult !== action.id);\n\t\t}, []),\n\t\t// Iben: If no more actions are loading, we return true\n\t\tmap((result) => result.length === 0)\n\t);\n\n\tpublic readonly translationsFailed$: Observable =\n\t\tthis.translationsFailedSubject$.asObservable();\n\n\t/**\n\t * Dispatch the loading state of a set of translations\n\t *\n\t * @param action - The loading state of a set of translations\n\t */\n\tpublic dispatchTranslationLoaderAction(action: TranslationLoaderActionEntity) {\n\t\tthis.translationLoaderActionsSubject$.next(action);\n\t}\n\n\t/**\n\t * Add loaded translations to the loaded translations record\n\t *\n\t * @param translations - The newly loaded translations\n\t */\n\tpublic addLoadedTranslations(translations: Record) {\n\t\tthis.translationsSubject$.next({\n\t\t\t...this.translationsSubject$.getValue(),\n\t\t\t...translations,\n\t\t});\n\t}\n\n\t/**\n\t * Fetches all the currently loaded translations\n\t */\n\tpublic getTranslations(): Record {\n\t\treturn this.translationsSubject$.getValue();\n\t}\n\n\t/**\n\t * Groups all the requests for a series of paths and ensures we only have a single observable to subscribe to\n\t *\n\t * @param paths - The paths of we're loading translations for\n\t * @param observable - The translations loading observable\n\t */\n\tpublic loadTranslations(paths: string, observable: Observable) {\n\t\t// Iben: If loading of the translations has not been added to the array yet, we set it so we return a single observable\n\t\tif (!this.translationsLoading[paths]) {\n\t\t\t// Iben: Add shareReplay so the result is passed over each subscription\n\t\t\tthis.translationsLoading[paths] = observable.pipe(shareReplay());\n\t\t}\n\n\t\t// Iben: Return the observable\n\t\treturn this.translationsLoading[paths];\n\t}\n\n\t/**\n\t * Mark the loading of the translations as failed\n\t */\n\tpublic markTranslationsLoadedAsFailed() {\n\t\tconsole.error(\n\t\t\t'@ibenvandeveire/ngx-i18n - NgxI18nLoadingService: Something went wrong whilst fetching the translations.'\n\t\t);\n\n\t\tthis.translationsFailedSubject$.next(false);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxI18nMultiTranslationHttpLoader.html":{"url":"classes/NgxI18nMultiTranslationHttpLoader.html","title":"class - NgxI18nMultiTranslationHttpLoader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxI18nMultiTranslationHttpLoader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts\n        \n\n\n            \n                Description\n            \n            \n                A loader that allows to load in multiple translation JSON files at the same time\n\n            \n\n\n            \n                Implements\n            \n            \n                        TranslateLoader\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                config\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpBackend\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationLoadingService\n                            \n                            \n                                    Private\n                                    Readonly\n                                translationsPaths\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:25\n                        \n                    \n\n            \n                \n                    The configuration for the NgxI18nModule.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpBackend\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpBackend\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpBackend)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:30\n                        \n                    \n\n            \n                \n                    Instance of the httpBackend\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:19\n                        \n                    \n\n            \n                \n                    The instance of the translation loading service\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        translationsPaths\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nTranslationPathsToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:35\n                        \n                    \n\n            \n                \n                    The translation paths\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/loader/multi-translation/multi-translation.loader.ts:42\n                        \n                    \n\n\n            \n                \n                        Fetches the provided translation files and saves them to the translation store\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currently used language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpBackend, HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { deepmerge } from 'deepmerge-ts';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nLoadingService } from '../../services';\nimport { NgxI18nConfigurationToken, NgxI18nTranslationPathsToken } from '../../tokens';\n\n/**\n * A loader that allows to load in multiple translation JSON files at the same time\n */\nexport class NgxI18nMultiTranslationHttpLoader implements TranslateLoader {\n\t/**\n\t * The instance of the translation loading service\n\t */\n\tprivate readonly translationLoadingService: NgxI18nLoadingService =\n\t\tinject(NgxI18nLoadingService);\n\n\t/**\n\t * The configuration for the NgxI18nModule.\n\t */\n\tprivate readonly config: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\t/**\n\t * Instance of the httpBackend\n\t */\n\tprivate readonly httpBackend: HttpBackend = inject(HttpBackend);\n\n\t/**\n\t * The translation paths\n\t */\n\tprivate readonly translationsPaths: string[] = inject(NgxI18nTranslationPathsToken);\n\n\t/**\n\t * Fetches the provided translation files and saves them to the translation store\n\t *\n\t * @param  lang - The currently used language\n\t */\n\tpublic getTranslation(lang: string): Observable {\n\t\t// Iben: Fetch the currently existing translations, so we can see if they already exist in the loading service\n\t\tconst availableTranslations = this.translationLoadingService.getTranslations();\n\n\t\t// Iben: Convert the translation paths to a combination of calls to get the translations or from the translations store\n\t\tconst requestedTranslations = this.translationsPaths.map((path) => {\n\t\t\tconst fromStore = Boolean(availableTranslations[path]);\n\t\t\tif (fromStore) {\n\t\t\t\t// Iben: If the translations came from the store, mark them as such\n\t\t\t\treturn of({\n\t\t\t\t\ttranslations: availableTranslations[path],\n\t\t\t\t\tfromStore,\n\t\t\t\t\tpath,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Iben: If the translations aren't available in the store, we fetch them from the server\n\t\t\t\t// Wouter: When provided, add a cache busting param so that each request is fetched from the server instead of the browser cache\n\t\t\t\tconst fetchPath = `${path}${lang}.json${\n\t\t\t\t\tthis.config.cacheBust ? '?v=' + this.config.cacheBust : ''\n\t\t\t\t}`;\n\n\t\t\t\treturn new HttpClient(this.httpBackend).get(fetchPath).pipe(\n\t\t\t\t\t// Iben: Map this to an object so we can track which results corresponds with which path\n\t\t\t\t\tmap((translations) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttranslations,\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t\t// Iben: In case the translation is not loaded, we log an error\n\t\t\t\t\tcatchError((res) => {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t'@ibenvandeveire/ngx-i18n - MultiTranslationLoader: Something went wrong for the following translation file:',\n\t\t\t\t\t\t\tfetchPath\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconsole.error(res.message);\n\n\t\t\t\t\t\t// Iben: If we get a not-authorized error from the server, we redirect to the resources not found page\n\t\t\t\t\t\tif (res.status === 401) {\n\t\t\t\t\t\t\tthis.translationLoadingService.markTranslationsLoadedAsFailed();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Return a translation loaded object so the translations service isn't broken\n\t\t\t\t\t\treturn of({\n\t\t\t\t\t\t\ttranslations: {},\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tfromStore,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Join all the requests and merge them\n\t\treturn this.translationLoadingService.loadTranslations(\n\t\t\tthis.translationsPaths.toString(),\n\t\t\tforkJoin(requestedTranslations).pipe(\n\t\t\t\ttap((translations) => {\n\t\t\t\t\t// Iben: Filter out the newly requested translations, and add them to the loaded translations store\n\t\t\t\t\tthis.translationLoadingService.addLoadedTranslations(\n\t\t\t\t\t\ttranslations\n\t\t\t\t\t\t\t.filter((translation) => !translation.fromStore)\n\t\t\t\t\t\t\t.reduce((previous, next) => {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t\t[next.path]: next.translations,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}, {})\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\t// Iben: Merge all the translations in a single object for the translation service\n\t\t\t\tmap((response) => deepmerge(...response.map((item) => item.translations)))\n\t\t\t)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nRootService.html":{"url":"injectables/NgxI18nRootService.html","title":"injectable - NgxI18nRootService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nRootService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The single root instance of the translation service, in charge of holding the current language, the available languages and allows for the language to be changed.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                availableLanguages$\n                            \n                            \n                                    Private\n                                    Readonly\n                                availableLanguagesSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentLanguage$\n                            \n                            \n                                    Private\n                                    Readonly\n                                currentLanguageSubject\n                            \n                            \n                                    Public\n                                defaultLanguage\n                            \n                            \n                                    Public\n                                languageRouteParam\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getNewLanguage\n                            \n                            \n                                    Public\n                                initializeLanguage\n                            \n                            \n                                    Public\n                                setAvailableLanguages\n                            \n                            \n                                    Public\n                                setCurrentLanguage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:53\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getNewLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNewLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe newly proposed language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initializeLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeLanguage()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Sets the initial language of the application when no language is set yet.\nIf a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setAvailableLanguages\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAvailableLanguages(languages: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Set the list of available languages\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                languages\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe list of available languages\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setCurrentLanguage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setCurrentLanguage(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        availableLanguages$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0))\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:41\n                        \n                    \n\n            \n                \n                    The available languages\nOnly emits once the list contains at least one language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        availableLanguagesSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:34\n                        \n                    \n\n            \n                \n                    A subject to hold the available languages\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:17\n                        \n                    \n\n            \n                \n                    Instance of the configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentLanguage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentLanguageSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:65\n                        \n                    \n\n            \n                \n                    The current language of the application, as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        currentLanguageSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:27\n                        \n                    \n\n            \n                \n                    A subject to hold the current language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        defaultLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:48\n                        \n                    \n\n            \n                \n                    The default language of the application\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        languageRouteParam\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:53\n                        \n                    \n\n            \n                \n                    The route param we use to set the language, by default this is language\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:22\n                        \n                    \n\n            \n                \n                    Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/root-i18n/root-i18n.service.ts:71\n                                \n                            \n                    \n                        \n                                The current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, filter, Observable } from 'rxjs';\n\nimport { NgxI18nConfiguration } from '../../i18n.types';\nimport { NgxI18nConfigurationToken } from '../../tokens';\n\n//TODO: Iben: Once we have a shared lib we should replace the storage and the browser approaches with their corresponding implementations\n/**\n * The single root instance of the translation service, in charge of holding the current language, the available languages and allows for the language to be changed.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxI18nRootService {\n\t/**\n\t * Instance of the configuration\n\t */\n\tprivate readonly configuration: NgxI18nConfiguration = inject(NgxI18nConfigurationToken);\n\n\t/**\n\t * Instance of the @ibenvandeveire/ngx-core NgxWindowService\n\t */\n\tprivate readonly windowsService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject to hold the current language\n\t */\n\tprivate readonly currentLanguageSubject: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\t/**\n\t * A subject to hold the available languages\n\t */\n\tprivate readonly availableLanguagesSubject: BehaviorSubject = new BehaviorSubject([]);\n\n\t/**\n\t * The available languages\n\t *\n\t * Only emits once the list contains at least one language\n\t */\n\tpublic readonly availableLanguages$: Observable = this.availableLanguagesSubject\n\t\t.asObservable()\n\t\t.pipe(filter((languages) => languages?.length > 0));\n\n\t/**\n\t * The default language of the application\n\t */\n\tpublic defaultLanguage: string;\n\n\t/**\n\t * The route param we use to set the language, by default this is `language`\n\t */\n\tpublic languageRouteParam: string;\n\n\tconstructor() {\n\t\t// Iben: Set the initial values so that we can refer to the services as the source of truth\n\t\tthis.defaultLanguage = this.configuration.defaultLanguage;\n\t\tthis.languageRouteParam = this.configuration.languageRouteParam || 'language';\n\t\tthis.availableLanguagesSubject.next(this.configuration.availableLanguages || []);\n\t}\n\n\t/**\n\t * The current language of the application, as an Observable\n\t */\n\tpublic readonly currentLanguage$: Observable =\n\t\tthis.currentLanguageSubject.asObservable();\n\n\t/**\n\t * The current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.currentLanguageSubject.getValue();\n\t}\n\n\t/**\n\t * Sets the current language of the application and saves it to the local storage. Returns true if the language was set\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setCurrentLanguage(language: string): void {\n\t\t// Iben: get the new language\n\t\tconst newLanguage = this.getNewLanguage(language);\n\n\t\t// Iben: Save the current language to the localStorage when we're in the browser\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlocalStorage.setItem('ngx-i18n-language', newLanguage);\n\t\t});\n\n\t\t// Iben: Update the subject\n\t\tthis.currentLanguageSubject.next(newLanguage);\n\t}\n\n\t/**\n\t * Sets the initial language of the application when no language is set yet.\n\t *\n\t * If a previous language was set in the local storage, said language is used. If not, the default language gets used.\n\t */\n\tpublic initializeLanguage(): void {\n\t\t// Iben: If the current language already exists, we early exit\n\t\tif (this.currentLanguage) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the current language does not exist, we check if it exists in the local storage, if not, we use the default config\n\t\tlet language = this.defaultLanguage;\n\n\t\tthis.windowsService.runInBrowser(() => {\n\t\t\tlanguage = localStorage.getItem('ngx-i18n-language') || this.defaultLanguage;\n\t\t});\n\n\t\t// Iben: We set the new language\n\t\tthis.setCurrentLanguage(language);\n\t}\n\n\t/**\n\t * Set the list of available languages\n\t *\n\t * @param languages - The list of available languages\n\t */\n\tpublic setAvailableLanguages(languages: string[]): void {\n\t\tthis.availableLanguagesSubject.next(languages);\n\t}\n\n\t/**\n\t * Checks if the newly proposed language can be set, if not we return either the current language or the default language\n\t *\n\t * @param {string} language - The newly proposed language\n\t */\n\tprivate getNewLanguage(language: string): string {\n\t\t// Iben: Save the currently being set language\n\t\tlet newLanguage = language;\n\n\t\t// Iben: Check if the new language is part of the available languages\n\t\tif (!this.availableLanguagesSubject.getValue().includes(language)) {\n\t\t\t// Iben: If a language is set that's not part of the available languages, we return a warn\n\t\t\tconsole.warn(\n\t\t\t\t`NgxI18n: A language, ${language}, was attempted to be set that was not part of the available languages (${this.availableLanguagesSubject\n\t\t\t\t\t.getValue()\n\t\t\t\t\t.join(', ')})`\n\t\t\t);\n\n\t\t\t// Iben: If there is already a language set, we early exit and keep the remaining language\n\t\t\tif (this.currentLanguage) {\n\t\t\t\treturn this.currentLanguage;\n\t\t\t}\n\n\t\t\t// Iben: If no language exists, we use the default language\n\t\t\tnewLanguage = this.defaultLanguage;\n\t\t}\n\n\t\treturn newLanguage;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nService.html":{"url":"injectables/NgxI18nService.html","title":"injectable - NgxI18nService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n/i18n.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that holds the translations for an individual feature. Multiple instances of this service will exist throughout your application.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                rootI18nService\n                            \n                            \n                                    Public\n                                setLanguage\n                            \n                            \n                                    Public\n                                    Readonly\n                                translateService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getTranslation\n                            \n                            \n                                    Public\n                                getTranslationObservable\n                            \n                            \n                                    Public\n                                initI18n\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    currentLanguage\n                                \n                                \n                                    availableLanguages\n                                \n                                \n                                    defaultLanguage\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslation\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslation(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns an instant translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getTranslationObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTranslationObservable(key: string, params?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:87\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TranslationType\n                            \n                        \n                    \n\n            \n                \n                        Returns a observable based translation based on a provided key and params\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the translation\n\n\n                                            \n                                        \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional set of params\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        initI18n\n                        \n                    \n                \n            \n            \n                \n                        \n                    initI18n(language: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Initializes the translations based on the provided language\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                language\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided language\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        rootI18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nRootService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nRootService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:21\n                        \n                    \n\n            \n                \n                    Instance of the NgxI8nRootService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLanguage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:65\n                        \n                    \n\n            \n                \n                    Set the current language of the application\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    language\n                                                    \n                                                            \nThe provided language\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        translateService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TranslateService\n\n                    \n                \n                \n                    \n                        Default value : inject(TranslateService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:16\n                        \n                    \n\n            \n                \n                    Instance of the ngx-translate TranslateService\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        currentLanguage\n                    \n                \n\n                \n                    \n                        getcurrentLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:26\n                                \n                            \n                    \n                        \n                                Returns the current language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        availableLanguages\n                    \n                \n\n                \n                    \n                        getavailableLanguages()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:33\n                                \n                            \n                    \n                        \n                                Returns the available languages of the application\n\n\n                                \n                                    Returns :     string[]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultLanguage\n                    \n                \n\n                \n                    \n                        getdefaultLanguage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/i18n/src/lib/services/i18n/i18n.service.ts:40\n                                \n                            \n                    \n                        \n                                Returns the default language of the application\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable } from 'rxjs';\n\nimport { NgxI18nAbstractService } from '../../abstracts';\nimport { NgxI18nRootService } from '../root-i18n/root-i18n.service';\n\n/**\n * A service that holds the translations for an individual feature. Multiple instances of this service will exist throughout your application.\n */\n@Injectable()\nexport class NgxI18nService implements NgxI18nAbstractService {\n\t/**\n\t * Instance of the ngx-translate TranslateService\n\t */\n\tpublic readonly translateService: TranslateService = inject(TranslateService);\n\n\t/**\n\t * Instance of the NgxI8nRootService\n\t */\n\tprivate readonly rootI18nService: NgxI18nRootService = inject(NgxI18nRootService);\n\n\t/**\n\t * Returns the current language of the application\n\t */\n\tpublic get currentLanguage(): string {\n\t\treturn this.rootI18nService.currentLanguage;\n\t}\n\n\t/**\n\t * Returns the available languages of the application\n\t */\n\tpublic get availableLanguages(): string[] {\n\t\treturn this.translateService.getLangs() as string[];\n\t}\n\n\t/**\n\t * Returns the default language of the application\n\t */\n\tpublic get defaultLanguage(): string {\n\t\treturn this.translateService.getFallbackLang();\n\t}\n\n\t/**\n\t * Initializes the translations based on the provided language\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic initI18n(language: string): Observable {\n\t\t// Iben: If the language is provided, set it in the root service\n\t\tif (language) {\n\t\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\t}\n\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\n\t\treturn this.translateService.reloadLang(language);\n\t}\n\n\t/**\n\t * Set the current language of the application\n\t *\n\t * @param language - The provided language\n\t */\n\tpublic setLanguage = (language: string): void => {\n\t\tthis.rootI18nService.setCurrentLanguage(language);\n\t\tthis.translateService.use(this.rootI18nService.currentLanguage);\n\t};\n\n\t/**\n\t * Returns an instant translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslation(key: string, params?: any): string {\n\t\treturn this.translateService.instant(key, params);\n\t}\n\n\t// Denis: Set the default to string but allow for others.\n\t/**\n\t * Returns a observable based translation based on a provided key and params\n\t *\n\t * @param key - The key of the translation\n\t * @param params - An optional set of params\n\t */\n\tpublic getTranslationObservable(\n\t\tkey: string,\n\t\tparams?: any\n\t): Observable {\n\t\treturn this.translateService.get(key, params);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxI18nTranslationLoaderResolver.html":{"url":"injectables/NgxI18nTranslationLoaderResolver.html","title":"injectable - NgxI18nTranslationLoaderResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxI18nTranslationLoaderResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts\n        \n\n\n            \n                Description\n            \n            \n                This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\nIt is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                i18nLoadingService\n                            \n                            \n                                    Private\n                                    Readonly\n                                i18nService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                resolve\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resolve\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolve()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nLoadingService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nLoadingService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nLoadingService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:20\n                        \n                    \n\n            \n                \n                    The NgxI18nLoadingService instance\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        i18nService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxI18nService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxI18nService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/i18n/src/lib/resolvers/i18n/i18n.resolver.ts:16\n                        \n                    \n\n            \n                \n                    The NgxI18nService instance\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { finalize, map, Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxI18nLoadingService, NgxI18nService } from '../../services';\n\n/**\n * This NgxI18nTranslationLoaderResolver will make sure that the translations are loaded from the moment you route to a detail module\n * It is essential you put this resolver at the root of your modules, whether it be lazy loaded through the guard or calling the resolver in the constructor\n */\n@Injectable()\nexport class NgxI18nTranslationLoaderResolver {\n\t/**\n\t * The NgxI18nService instance\n\t */\n\tprivate readonly i18nService: NgxI18nService = inject(NgxI18nService);\n\t/**\n\t * The NgxI18nLoadingService instance\n\t */\n\tprivate readonly i18nLoadingService: NgxI18nLoadingService = inject(NgxI18nLoadingService);\n\n\tpublic resolve(): Observable {\n\t\t// Iben: Generate an id for the translations we're about to load\n\t\tconst id = uuid();\n\n\t\t// Iben: Dispatch to the loader service that we're about to load a set of translations\n\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADING' });\n\n\t\t// Iben: This will reload the translations, and fetch the newly needed lazy loaded translations\n\t\treturn this.i18nService.initI18n(this.i18nService.currentLanguage).pipe(\n\t\t\t// Iben: Map to true for the guard\n\t\t\tmap(() => true),\n\t\t\tfinalize(() => {\n\t\t\t\t// Iben: Dispatch to the loader service that the translations have been loaded\n\t\t\t\tthis.i18nLoadingService.dispatchTranslationLoaderAction({ id, state: 'LOADED' });\n\t\t\t})\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerBase.html":{"url":"interfaces/NgxImageMarkerBase.html","title":"interface - NgxImageMarkerBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            close\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        close\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        close:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxImageMarkerComponent.html":{"url":"components/NgxImageMarkerComponent.html","title":"component - NgxImageMarkerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxImageMarkerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component wrapper for MarkerJs views\nhttps://markerjs.com/\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n                OnChanges\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-image-marker\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n            \n                styleUrl\n                ./image-marker.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                canEdit\n                            \n                            \n                                    Private\n                                currentMarker\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentZoomLevel\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                image\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageDescription\n                            \n                            \n                                    Public\n                                    Readonly\n                                imageElement\n                            \n                            \n                                    Private\n                                    Readonly\n                                imageMarkerService\n                            \n                            \n                                    Public\n                                markerClicked\n                            \n                            \n                                    Private\n                                    Readonly\n                                markerDestroyedSubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                markerTypes\n                            \n                            \n                                    Public\n                                    Readonly\n                                startState\n                            \n                            \n                                    Public\n                                stateUpdated\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                            \n                                    Public\n                                    Readonly\n                                zoomLevels\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createMarker\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                canEdit\n                            \n                            \n                                currentZoomLevel\n                            \n                            \n                                image\n                            \n                            \n                                imageDescription\n                            \n                            \n                                markerTypes\n                            \n                            \n                                startState\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                markerClicked\n                            \n                            \n                                stateUpdated\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        canEdit\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                            \n                        \n                \n                    \n                        Whether we can edit the view, by default this is true\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentZoomLevel\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                            \n                        \n                \n                    \n                        An optional current zoom level\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        image\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                            \n                        \n                \n                    \n                        The url to the image we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        imageDescription\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                            \n                        \n                \n                    \n                        A WCAG/WAI-ARIA compliant description of the image\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        markerTypes\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                            \n                        \n                \n                    \n                        An optional record of types of Markerjs markers we wish to render\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        startState\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                            \n                        \n                \n                    \n                        The start data we wish to render\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        markerClicked\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                            \n                        \n                \n                    \n                        Emits when a marker is clicked when the view is in readonly mode\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stateUpdated\n                    \n                \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                            \n                        \n                \n                    \n                        Emits when the state has been updated\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarker()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:149\n                        \n                    \n\n\n            \n                \n                        Creates a MarkerJs view based on the provided configuration\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:137\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        canEdit\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:84\n                        \n                    \n\n            \n                \n                    Whether we can edit the view, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentMarker\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarker\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:54\n                        \n                    \n\n            \n                \n                    The currently created marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentZoomLevel\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:89\n                        \n                    \n\n            \n                \n                    An optional current zoom level\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        image\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:69\n                        \n                    \n\n            \n                \n                    The url to the image we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageDescription\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:74\n                        \n                    \n\n            \n                \n                    A WCAG/WAI-ARIA compliant description of the image\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        imageElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild('imageElement')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:64\n                        \n                    \n\n            \n                \n                    The rendered image element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imageMarkerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxImageMarkerService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxImageMarkerService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markerClicked\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:109\n                        \n                    \n\n            \n                \n                    Emits when a marker is clicked when the view is in readonly mode\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markerDestroyedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:59\n                        \n                    \n\n            \n                \n                    A subject holding the destroy state of the marker\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        markerTypes\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:99\n                        \n                    \n\n            \n                \n                    An optional record of types of Markerjs markers we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        startState\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:79\n                        \n                    \n\n            \n                \n                    The start data we wish to render\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        stateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:104\n                        \n                    \n\n            \n                \n                    Emits when the state has been updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        zoomLevels\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/image-marker/image-marker.component.ts:94\n                        \n                    \n\n            \n                \n                    An optional amount of times we can zoom in and out\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  inject,\n  OnChanges,\n  OnDestroy,\n  input,\n  OutputEmitterRef,\n  output,\n  viewChild\n} from '@angular/core';\nimport { NgxWindowService, simpleChangeHasChanged } from '@ibenvandeveire/ngx-core';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxImageMarkerService } from '../../services';\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerState,\n\tNgxImageMarkerTypes,\n} from '../../types';\n\n/**\n * A component wrapper for MarkerJs views\n *\n * https://markerjs.com/\n */\n\n// TODO: Iben: Once we figured out how we'll share the FormAccessors with other packages, we should make this a ControlValueAccessor\n@Component({\n\tselector: 'ngx-image-marker',\n\ttemplate: ``,\n\tstyleUrl: './image-marker.component.scss',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-image-marker',\n\t},\n})\nexport class NgxImageMarkerComponent implements AfterViewInit, OnChanges, OnDestroy {\n\tprivate readonly imageMarkerService: NgxImageMarkerService = inject(NgxImageMarkerService);\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\tprivate readonly elementRef: ElementRef = inject(ElementRef);\n\n\t/**\n\t * The currently created marker\n\t */\n\tprivate currentMarker: NgxImageMarker;\n\n\t/**\n\t * A subject holding the destroy state of the marker\n\t */\n\tprivate readonly markerDestroyedSubject: Subject = new Subject();\n\n\t/**\n\t * The rendered image element\n\t */\n\tpublic readonly imageElement = viewChild('imageElement');\n\n\t/**\n\t * The url to the image we wish to render\n\t */\n\tpublic readonly image = input.required();\n\n\t/**\n\t * A WCAG/WAI-ARIA compliant description of the image\n\t */\n\tpublic readonly imageDescription = input.required();\n\n\t/**\n\t * The start data we wish to render\n\t */\n\tpublic readonly startState = input();\n\n\t/**\n\t * Whether we can edit the view, by default this is true\n\t */\n\tpublic readonly canEdit = input(true);\n\n\t/**\n\t * An optional current zoom level\n\t */\n\tpublic readonly currentZoomLevel = input();\n\n\t/**\n\t * An optional amount of times we can zoom in and out\n\t */\n\tpublic readonly zoomLevels = input();\n\n\t/**\n\t * An optional record of types of Markerjs markers we wish to render\n\t */\n\tpublic readonly markerTypes = input();\n\n\t/**\n\t * Emits when the state has been updated\n\t */\n\tpublic stateUpdated: OutputEmitterRef = output();\n\n\t/**\n\t * Emits when a marker is clicked when the view is in readonly mode\n\t */\n\tpublic markerClicked: OutputEmitterRef = output();\n\n\tngAfterViewInit(): void {\n\t\t// Iben: Create the initial marker\n\t\tthis.createMarker();\n\t}\n\n\tngOnChanges(changes: any): void {\n\t\t// Iben: If no marker exists or if the image has not rendered, early exit\n\t\tif (!this.currentMarker || !this.imageElement()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Check if there are changes to the state or the configuration when there is a marker\n\t\tconst hasChanges =\n\t\t\tthis.currentMarker &&\n\t\t\t(simpleChangeHasChanged(changes.startState) ||\n\t\t\t\tsimpleChangeHasChanged(changes.canEdit) ||\n\t\t\t\tsimpleChangeHasChanged(changes.markerTypes) ||\n\t\t\t\tsimpleChangeHasChanged(changes.currentZoomLevel) ||\n\t\t\t\tsimpleChangeHasChanged(changes.zoomLevels));\n\n\t\t// Iben: Recreate the marker whenever the configuration is adjusted\n\t\tif (!this.currentMarker || hasChanges) {\n\t\t\tthis.createMarker();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close the marker\n\t\tthis.currentMarker.close();\n\n\t\t// Iben: Complete the destroy subject\n\t\tthis.markerDestroyedSubject.next();\n\t\tthis.markerDestroyedSubject.complete();\n\t}\n\n\t/**\n\t * Creates a MarkerJs view based on the provided configuration\n\t */\n\tprivate createMarker() {\n\t\t// Iben: Only create the image when we're in the browser\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Iben: Close the existing marker if needed\n\t\t\tif (this.currentMarker) {\n\t\t\t\tthis.currentMarker.close();\n\t\t\t\tthis.markerDestroyedSubject.next();\n\t\t\t}\n\n\t\t\t// Iben: Create a new marker view based on the provided configuration\n\t\t\tconst currentZoomLevel = this.currentZoomLevel();\n\t\t\tconst zoomLevels = this.zoomLevels();\n\t\t\tthis.currentMarker = this.imageMarkerService.createImageMarker(\n\t\t\t\tthis.imageElement().nativeElement,\n\t\t\t\tthis.elementRef.nativeElement,\n\t\t\t\t{\n\t\t\t\t\tmode: this.canEdit() ? 'edit' : 'view',\n\t\t\t\t\tallowZoom: true,\n\t\t\t\t\tdefaultState: this.startState() || undefined,\n\t\t\t\t\tmarkerTypes: this.markerTypes(),\n\t\t\t\t\tzoom:\n\t\t\t\t\t\tcurrentZoomLevel !== undefined && zoomLevels\n\t\t\t\t\t\t\t? { current: currentZoomLevel, levels: zoomLevels }\n\t\t\t\t\t\t\t: undefined,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Iben: Listen to the valueChanges based on the provided type.\n\t\t\tif (this.currentMarker.mode === 'edit') {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.stateUpdated.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t} else {\n\t\t\t\tthis.currentMarker.valueChanges\n\t\t\t\t\t.pipe(\n\t\t\t\t\t\ttap((value) => {\n\t\t\t\t\t\t\tthis.markerClicked.emit(value);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttakeUntil(this.markerDestroyedSubject)\n\t\t\t\t\t)\n\t\t\t\t\t.subscribe();\n\t\t\t}\n\t\t});\n\t}\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxImageMarkerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerConfiguration.html":{"url":"interfaces/NgxImageMarkerConfiguration.html","title":"interface - NgxImageMarkerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for the marker view\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowClear\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowZoom\n                                        \n                                \n                                \n                                        \n                                            defaultState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            markerTypes\n                                        \n                                \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zoom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowClear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowClear:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether clearing the marker view is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowZoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowZoom:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether zooming in is allowed, by default false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultState:         NgxImageMarkerState\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerState\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state the view has to start from\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        markerTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        markerTypes:         NgxImageMarkerTypes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxImageMarkerTypes\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default all\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \"view\" | \"edit\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"view\" | \"edit\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the record is readonly or not\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoom:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerEdit.html":{"url":"interfaces/NgxImageMarkerEdit.html","title":"interface - NgxImageMarkerEdit","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerEdit\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxImageMarkerService.html":{"url":"injectables/NgxImageMarkerService.html","title":"injectable - NgxImageMarkerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxImageMarkerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\nhttps://markerjs.com/\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                markers\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createImageMakerEdit\n                            \n                            \n                                    Public\n                                createImageMarker\n                            \n                            \n                                    Private\n                                createMarkerClickedListener\n                            \n                            \n                                    Private\n                                createMarkerValueChanges\n                            \n                            \n                                    Private\n                                createReadonlyImageMarker\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createImageMakerEdit\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMakerEdit(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Creates an editable marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerEdit\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImageMarker(image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Create an image with markers\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarker\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerClickedListener\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerClickedListener(marker: MarkerView)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Listen to the marker clicks in the readonly view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerView\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createMarkerValueChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMarkerValueChanges(marker: MarkerArea)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:188\n                        \n                    \n\n\n            \n                \n                        Listen to the value changes in the editable view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                marker\n                                            \n                                                        MarkerArea\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe marker view\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createReadonlyImageMarker\n                        \n                    \n                \n            \n            \n                \n                        \n                    createReadonlyImageMarker(id: string, image: HTMLImageElement | HTMLElement, rootTarget: HTMLElement, configuration: NgxImageMarkerConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Creates a readonly marker view\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                        HTMLImageElement | HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe image element we wish to draw markers on\n\n\n                                            \n                                        \n                                        \n                                                rootTarget\n                                            \n                                                        HTMLElement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we render the image in\n\n\n                                            \n                                        \n                                        \n                                                configuration\n                                            \n                                                            NgxImageMarkerConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration we wish to pass to the image markers\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxImageMarkerView\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:221\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        markers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:31\n                        \n                    \n\n            \n                \n                    A record with all markers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/image-marker/image-marker.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { MarkerView } from 'markerjs-live';\nimport { MarkerArea, MarkerAreaState } from 'markerjs2';\nimport { Observable, Subject } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport {\n\tNgxImageMarker,\n\tNgxImageMarkerConfiguration,\n\tNgxImageMarkerEdit,\n\tNgxImageMarkerItem,\n\tNgxImageMarkerView,\n} from '../../types';\n\n/**\n * A service that serves as a wrapper for MarkerJs2 and MarkerJs-live\n *\n * https://markerjs.com/\n */\n// TODO: Iben: To avoid essentially only testing a mocked version of this package, we need to test this through Cypress/Playwrite/... tests\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxImageMarkerService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record with all markers\n\t */\n\tprivate readonly markers: Record = {};\n\n\t/**\n\t * Create an image with markers\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tpublic createImageMarker(\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarker {\n\t\t// Iben: Return undefined if we're not in the browser\n\t\tif (!this.windowService.isBrowser) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Create an id for the marker\n\t\tconst id = uuid();\n\n\t\t// Iben: Depending on the provided mode, we create a edit view or a non editable view\n\t\treturn configuration.mode === 'edit'\n\t\t\t? this.createImageMakerEdit(id, image, rootTarget, configuration)\n\t\t\t: this.createReadonlyImageMarker(id, image, rootTarget, configuration);\n\t}\n\n\t/**\n\t * Creates a readonly marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createReadonlyImageMarker(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerView {\n\t\t// Iben: Create the new marker view\n\t\tconst marker = new MarkerView(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular marker view\n\t\tconst result: NgxImageMarkerView = {\n\t\t\tmode: 'view',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('select', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerClickedListener(marker),\n\t\t};\n\n\t\t// Iben: Create a clicked listener for the currently clicked item\n\t\tthis.createMarkerClickedListener(marker);\n\n\t\t// Iben: If custom marker types were provided, set them as the available types\n\t\tif (configuration.markerTypes?.view) {\n\t\t\tmarker.availableMarkerTypes = configuration.markerTypes.view;\n\t\t}\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show(configuration.defaultState);\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Creates an editable marker view\n\t *\n\t * @param image - The image element we wish to draw markers on\n\t * @param rootTarget - The element we render the image in\n\t * @param configuration - The configuration we wish to pass to the image markers\n\t */\n\tprivate createImageMakerEdit(\n\t\tid: string,\n\t\timage: HTMLImageElement | HTMLElement,\n\t\trootTarget: HTMLElement,\n\t\tconfiguration: NgxImageMarkerConfiguration\n\t): NgxImageMarkerEdit {\n\t\t// Iben: Create a new marker view\n\t\tconst marker = new MarkerArea(image);\n\n\t\t// Iben: Set the root element so the marker layer is rendered in the same element\n\t\tmarker.targetRoot = rootTarget;\n\n\t\t// Iben: Create the Angular based view\n\t\tconst result: NgxImageMarkerEdit = {\n\t\t\tmode: 'edit',\n\t\t\tclose: (() => {\n\t\t\t\t// Iben: Remove the event listener and close the marker\n\t\t\t\tmarker.removeEventListener('statechange', () => {});\n\t\t\t\tmarker.close();\n\n\t\t\t\t// Iben: Remove the marker from the record\n\t\t\t\tthis.markers[id] = undefined;\n\t\t\t}).bind(this),\n\t\t\tvalueChanges: this.createMarkerValueChanges(marker),\n\t\t};\n\n\t\t// Iben: Set the configuration settings\n\t\t// These can later on be extended when needed\n\t\tmarker.uiStyleSettings.zoomButtonVisible = configuration.allowZoom;\n\t\tmarker.uiStyleSettings.zoomOutButtonVisible = configuration.allowZoom;\n\t\tmarker.zoomSteps = configuration.zoom?.levels || [1, 2, 3, 4];\n\t\tmarker.zoomLevel = configuration.zoom?.current ?? 1;\n\t\tmarker.uiStyleSettings.clearButtonVisible = configuration.allowClear;\n\n\t\t// Iben: Set the available marker types\n\t\tmarker.availableMarkerTypes =\n\t\t\t(configuration.markerTypes?.edit as any) || marker.ALL_MARKER_TYPES;\n\n\t\t// Iben: Set the class names of the items\n\t\tmarker.uiStyleSettings.notesAreaStyleClassName = 'ngx-image-marker-notes-area';\n\t\tmarker.uiStyleSettings.toolbarStyleColorsClassName = 'ngx-image-marker-toolbar';\n\t\tmarker.uiStyleSettings.toolboxStyleColorsClassName = 'ngx-image-marker-toolbox';\n\t\tmarker.uiStyleSettings.toolbarButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button';\n\t\tmarker.uiStyleSettings.toolbarActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbar-button-active';\n\t\tmarker.uiStyleSettings.toolboxButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button';\n\t\tmarker.uiStyleSettings.toolboxActiveButtonStyleColorsClassName =\n\t\t\t'ngx-image-marker-toolbox-button-active';\n\n\t\t// Iben: Show the marker once all settings are set\n\t\tmarker.show();\n\n\t\t// Iben: If there was state before, set it accordingly\n\t\tif (configuration.defaultState) {\n\t\t\tmarker.restoreState(configuration.defaultState);\n\t\t}\n\n\t\t// Iben: Add the marker to the record\n\t\tthis.markers[id] = result;\n\n\t\t// Iben: Return the Angular view\n\t\treturn result;\n\t}\n\n\t/**\n\t * Listen to the value changes in the editable view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerValueChanges(marker: MarkerArea): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a new item was added to the marker view\n\t\tmarker.addEventListener('statechange', (event) => {\n\t\t\tvalueChanges.next(event?.markerArea?.getState());\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\t/**\n\t * Listen to the marker clicks in the readonly view\n\t *\n\t * @param {MarkerArea} marker - The marker view\n\t */\n\tprivate createMarkerClickedListener(marker: MarkerView): Observable {\n\t\t// Iben: Setup valueChanges\n\t\tconst valueChanges = new Subject();\n\n\t\t// Iben: Update the subject whenever a marker was clicked\n\t\tmarker.addEventListener('select', (_, marker) => {\n\t\t\tvalueChanges.next(marker);\n\t\t});\n\n\t\t// Iben: Return changes observable\n\t\t// This Observable gets closed in the NgxImageMarkerComponent and therefor do not require a takeUntil here\n\t\treturn valueChanges.asObservable();\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Close all existing markers, removing the listeners where needed\n\t\tObject.values(this.markers)\n\t\t\t.filter(Boolean)\n\t\t\t.forEach((marker) => {\n\t\t\t\tmarker.close();\n\t\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerTypes.html":{"url":"interfaces/NgxImageMarkerTypes.html","title":"interface - NgxImageMarkerTypes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerTypes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A record with the marker types we wish to show, both for the view and the edit mode\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edit\n                                        \n                                \n                                \n                                        \n                                            view\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edit:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        view\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        view:     ()[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ()[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxImageMarkerView.html":{"url":"interfaces/NgxImageMarkerView.html","title":"interface - NgxImageMarkerView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxImageMarkerView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/image-marker.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxImageMarkerBase\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mode\n                                        \n                                \n                                \n                                        \n                                            valueChanges\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        valueChanges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        valueChanges:     Observable\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Observable\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { MarkerBase as ViewMarkerBase } from 'markerjs-live';\nimport { MarkerAreaState, MarkerBase } from 'markerjs2';\nimport { Observable } from 'rxjs';\n\n/**\n * The state of the marker view\n */\nexport type NgxImageMarkerState = MarkerAreaState;\n\n/**\n * A marker on the marker view\n */\nexport type NgxImageMarkerItem = MarkerBase;\n\n/**\n * A record with the marker types we wish to show, both for the view and the edit mode\n */\nexport interface NgxImageMarkerTypes {\n\tedit: (typeof MarkerBase)[];\n\tview: (typeof ViewMarkerBase)[];\n}\n\n/**\n * Configuration for the marker view\n */\nexport interface NgxImageMarkerConfiguration {\n\t/**\n\t * Whether the record is readonly or not\n\t */\n\tmode: 'view' | 'edit';\n\t/**\n\t * The state the view has to start from\n\t */\n\tdefaultState: NgxImageMarkerState;\n\t/**\n\t * Whether zooming in is allowed, by default false\n\t */\n\tallowZoom?: boolean;\n\t/**\n\t * Whether clearing the marker view is allowed, by default false\n\t */\n\tallowClear?: boolean;\n\t/**\n\t * An optional set of allowed marker types, by default all\n\t */\n\tmarkerTypes?: NgxImageMarkerTypes;\n\n\t/**\n\t * An optional set of allowed marker types, by default the levels are [1,2,3,4] and the current zoom is 1\n\t */\n\tzoom?: {\n\t\tlevels: number[];\n\t\tcurrent: number;\n\t};\n}\n\ninterface NgxImageMarkerBase {\n\tmode: 'view' | 'edit';\n\tclose: () => void;\n}\n\nexport interface NgxImageMarkerView extends NgxImageMarkerBase {\n\tmode: 'view';\n\tvalueChanges: Observable;\n}\n\nexport interface NgxImageMarkerEdit extends NgxImageMarkerBase {\n\tmode: 'edit';\n\tvalueChanges: Observable;\n}\n\n/**\n * An Angular wrapper for markerjs views\n */\nexport type NgxImageMarker = NgxImageMarkerEdit | NgxImageMarkerView;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxIsAuthenticatedDirective.html":{"url":"directives/NgxIsAuthenticatedDirective.html","title":"directive - NgxIsAuthenticatedDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxIsAuthenticatedDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on whether the user is authenticated.\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxIsAuthenticated]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authenticationService\n                            \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxIsAuthenticated\n                            \n                            \n                                    Public\n                                ngxIsAuthenticatedElse\n                            \n                            \n                                    Private\n                                shouldBeAuthenticated\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxIsAuthenticated\n                            \n                            \n                                ngxIsAuthenticatedElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticated\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                            \n                        \n                \n                    \n                        Whether the user has to be authenticated\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxIsAuthenticatedElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:125\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authenticationService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(\n\t\tNgxAuthenticationServiceToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:35\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:70\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxIsAuthenticatedElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:74\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldBeAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:48\n                        \n                    \n\n            \n                \n                    Whether the user has to be authenticated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:40\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/authentication/src/lib/directives/is-authenticated/is-authenticated.directive.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxAuthenticationAbstractService } from '../../abstracts';\nimport { NgxAuthenticationServiceToken } from '../../tokens';\n\n/**\n *  * A directive that will render a part of the template based on whether the user is authenticated.\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxIsAuthenticated]',\n})\nexport class NgxIsAuthenticatedDirective implements OnDestroy {\n\tprivate readonly authenticationService = inject(\n\t\tNgxAuthenticationServiceToken\n\t);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tprivate shouldBeAuthenticated: boolean = true;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tthis.shouldBeAuthenticated = this.ngxIsAuthenticated();\n\t\t\tthis.updateView();\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxIsAuthenticatedElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Whether the user has to be authenticated\n\t */\n\tpublic ngxIsAuthenticated: InputSignal = input();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxIsAuthenticatedElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.authenticationService.isAuthenticated$\n\t\t\t.pipe(\n\t\t\t\ttap((isAuthenticated) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(isAuthenticated && this.shouldBeAuthenticated) ||\n\t\t\t\t\t\t(!isAuthenticated && !this.shouldBeAuthenticated)\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxLinkConfiguration.html":{"url":"interfaces/NgxLinkConfiguration.html","title":"interface - NgxLinkConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxLinkConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/link.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The default configuration of the link\nloading - An optional component used for the loading state\nicon - An optional component used for the icon\niconPosition - The optional default position of the icon, by default left\nlabelWrapper - The optional default HTML element used to wrap the button link, by default span\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iconPosition\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelWrapper\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iconPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iconPosition:         NgxLinkIconPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxLinkIconPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelWrapper\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelWrapper:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../abstracts';\n\n/**\n * The priority of the link\n */\nexport type NgxLinkPriority = 'primary' | 'secondary' | 'tertiary' | 'danger';\n\n/**\n * The position of the icon in the button\n */\nexport type NgxLinkIconPosition = 'left' | 'right';\n\n/**\n * The type of the link\n */\nexport type NgxLinkType = 'text' | 'icon' | 'button';\n\n/**\n * The context of the link\n */\nexport type NgxLinkContext = 'navigation' | 'breadcrumb' | 'anchor' | 'form' | 'footer';\n\n/**\n * Whether the link is an internal link or external link\n */\nexport type NgxLinkDestination = 'internal' | 'external';\n\n/**\n * The default configuration of the link\n *\n * loading - An optional component used for the loading state\n * icon - An optional component used for the icon\n * iconPosition - The optional default position of the icon, by default `left`\n * labelWrapper - The optional default HTML element used to wrap the button link, by default `span`\n */\nexport interface NgxLinkConfiguration {\n\tloading?: Type;\n\ticon?: Type;\n\ticonPosition?: NgxLinkIconPosition;\n\tlabelWrapper?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxLinkDirective.html":{"url":"directives/NgxLinkDirective.html","title":"directive - NgxLinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxLinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/link/link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds the classic link types, priority, context, destination and icon handling\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxLink]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                classes\n                            \n                            \n                                    Protected\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                    Readonly\n                                context\n                            \n                            \n                                    Public\n                                    Readonly\n                                destination\n                            \n                            \n                                    Protected\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                icon\n                            \n                            \n                                    Protected\n                                iconComponent\n                            \n                            \n                                    Protected\n                                iconElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                iconPosition\n                            \n                            \n                                    Public\n                                    Readonly\n                                linkType\n                            \n                            \n                                    Protected\n                                    Readonly\n                                nativeElement\n                            \n                            \n                                    Public\n                                    Readonly\n                                priority\n                            \n                            \n                                    Protected\n                                    Readonly\n                                renderer\n                            \n                            \n                                    Protected\n                                    Readonly\n                                target\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleIcon\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                context\n                            \n                            \n                                icon\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        context\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:112\n                            \n                        \n                \n                    \n                        The context in which the link is used, by default undefined.\nThe options are navigation, breadcrumb, anchor, form and footer.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        icon\n                    \n                \n                \n                    \n                        Type :     InputSignal<>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:131\n                            \n                        \n                \n                    \n                        An optional icon we wish to show\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleIcon\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleIcon()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:165\n                        \n                    \n\n\n            \n                \n                        Adds or removes an icon\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:140\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        classes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\treturn `\n    ngx-link\n    ngx-link-${this.linkType()}\n    ngx-link-${this.priority()}\n    ngx-link-${this.destination()}\n    ${this.context() ? `ngx-link-${this.context()}` : ''}\n    ${this.icon() ? 'ngx-link-with-icon' : ''}\n    `;\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:79\n                        \n                    \n\n            \n                \n                    The classes we set to the link\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxLinkConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxLinkConfigurationToken, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:62\n                        \n                    \n\n            \n                \n                    An optional set of configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:112\n                        \n                    \n\n            \n                \n                    The context in which the link is used, by default undefined.\nThe options are navigation, breadcrumb, anchor, form and footer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        destination\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('internal')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:126\n                        \n                    \n\n            \n                \n                    The destination of the link, by default internal.\nThe options are internal and external.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tElementRef\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:45\n                        \n                    \n\n            \n                \n                    An instance of the elementRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        icon\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal<>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:131\n                        \n                    \n\n            \n                \n                    An optional icon we wish to show\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        iconComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ComponentRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:74\n                        \n                    \n\n            \n                \n                    The icon component in case we did configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        iconElement\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HTMLElement\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:69\n                        \n                    \n\n            \n                \n                    The icon element in case we did not configure an icon component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        iconPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('left')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:138\n                        \n                    \n\n            \n                \n                    The position of the icon when provided, by default this is left unless overwritten in the configuration\nThe options are left and right.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        linkType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('text')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:105\n                        \n                    \n\n            \n                \n                    The visual type of the link, by default text.\nThe options are text, button and icon.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        nativeElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.elementRef.nativeElement\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:52\n                        \n                    \n\n            \n                \n                    An instance of the NativeElement\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                \n                    \n                        Default value : input('primary')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:119\n                        \n                    \n\n            \n                \n                    The priority the link, by default primary.\nThe options are primary, secondary, tertiary and danger.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        renderer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Renderer2\n\n                    \n                \n                \n                    \n                        Default value : inject(Renderer2)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:57\n                        \n                    \n\n            \n                \n                    An instance of the renderer\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() =>\n\t\tthis.destination() === 'internal' ? '_self' : '_blank'\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:96\n                        \n                    \n\n            \n                \n                    The target calculated based on the destination\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ViewContainerRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/link/link.directive.ts:40\n                        \n                    \n\n            \n                \n                    An instance of the viewContainer\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tComponentRef,\n\tcomputed,\n\tDirective,\n\tElementRef,\n\tinject,\n\tinput,\n\tInputSignal,\n\tOnInit,\n\tRenderer2,\n\tSignal,\n\tViewContainerRef,\n} from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../abstracts';\nimport { NgxLinkConfigurationToken } from '../../tokens';\nimport {\n\tNgxLinkConfiguration,\n\tNgxLinkContext,\n\tNgxLinkDestination,\n\tNgxLinkIconPosition,\n\tNgxLinkPriority,\n\tNgxLinkType,\n} from '../../types';\n\n/**\n * A directive that adds the classic link types, priority, context, destination and icon handling\n */\n@Directive({\n\tselector: '[ngxLink]',\n\thost: {\n\t\t'[attr.class]': 'classes()',\n\t\t'[attr.target]': 'target()',\n\t},\n})\nexport class NgxLinkDirective implements OnInit {\n\t/**\n\t * An instance of the viewContainer\n\t */\n\tprotected readonly viewContainer: ViewContainerRef = inject(ViewContainerRef);\n\n\t/**\n\t * An instance of the elementRef\n\t */\n\tprotected readonly elementRef: ElementRef = inject(\n\t\tElementRef\n\t);\n\n\t/**\n\t * An instance of the NativeElement\n\t */\n\tprotected readonly nativeElement = this.elementRef.nativeElement;\n\n\t/**\n\t * An instance of the renderer\n\t */\n\tprotected readonly renderer: Renderer2 = inject(Renderer2);\n\n\t/**\n\t * An optional set of configuration\n\t */\n\tprotected readonly configuration: NgxLinkConfiguration = inject(NgxLinkConfigurationToken, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t * The icon element in case we did not configure an icon component\n\t */\n\tprotected iconElement: HTMLElement;\n\n\t/**\n\t * The icon component in case we did configure an icon component\n\t */\n\tprotected iconComponent: ComponentRef;\n\n\t/**\n\t * The classes we set to the link\n\t */\n\tprotected readonly classes: Signal = computed(() => {\n\t\t// Iben: Inserts the icon\n\t\tthis.handleIcon();\n\n\t\treturn `\n    ngx-link\n    ngx-link-${this.linkType()}\n    ngx-link-${this.priority()}\n    ngx-link-${this.destination()}\n    ${this.context() ? `ngx-link-${this.context()}` : ''}\n    ${this.icon() ? 'ngx-link-with-icon' : ''}\n    `;\n\t});\n\n\t/**\n\t * The target calculated based on the destination\n\t */\n\tprotected readonly target: Signal = computed(() =>\n\t\tthis.destination() === 'internal' ? '_self' : '_blank'\n\t);\n\n\t/**\n\t * The visual type of the link, by default `text`.\n\t *\n\t * The options are `text`, `button` and `icon`.\n\t */\n\tpublic readonly linkType: InputSignal = input('text');\n\n\t/**\n\t * The context in which the link is used, by default undefined.\n\t *\n\t * The options are `navigation`, `breadcrumb`, `anchor`, `form` and `footer`.\n\t */\n\tpublic readonly context: InputSignal = input();\n\n\t/**\n\t * The priority the link, by default `primary`.\n\t *\n\t * The options are `primary`, `secondary`, `tertiary` and `danger`.\n\t */\n\tpublic readonly priority: InputSignal = input('primary');\n\n\t/**\n\t * The destination of the link, by default `internal`.\n\t *\n\t * The options are `internal` and `external`.\n\t */\n\tpublic readonly destination: InputSignal = input('internal');\n\n\t/**\n\t * An optional icon we wish to show\n\t */\n\tpublic readonly icon: InputSignal = input();\n\n\t/**\n\t * The position of the icon when provided, by default this is `left` unless overwritten in the configuration\n\t *\n\t * The options are `left` and `right`.\n\t */\n\tpublic readonly iconPosition: InputSignal = input('left');\n\n\tngOnInit(): void {\n\t\t// Iben: Wrap the base text in an element\n\t\tconst wrapperElement: HTMLSpanElement = this.renderer.createElement(\n\t\t\tthis.configuration?.labelWrapper || 'span'\n\t\t);\n\n\t\t// Iben: Append all the child nodes\n\t\tthis.nativeElement.childNodes.forEach((node) => {\n\t\t\tthis.renderer.appendChild(wrapperElement, node);\n\t\t});\n\n\t\tthis.renderer.setAttribute(wrapperElement, 'class', 'ngx-link-label');\n\n\t\t// Iben: Remove all the nodes\n\t\tthis.nativeElement.childNodes.forEach((node) => {\n\t\t\tthis.renderer.removeChild(wrapperElement, node);\n\t\t});\n\n\t\t// Iben: Remove the current innerHtml and replace it with a span element\n\t\tthis.renderer.appendChild(this.nativeElement, wrapperElement);\n\t}\n\n\t/**\n\t * Adds or removes an icon\n\t */\n\tprivate handleIcon(): void {\n\t\t// Iben: Check if we need to add an icon\n\t\tif (this.icon()) {\n\t\t\t// Iben: Check if the link already has an icon, if not, add it\n\t\t\tif (!this.iconElement && !this.iconComponent) {\n\t\t\t\t// Iben: If no icon component exists, we create a regular i element\n\t\t\t\tif (!this.configuration?.icon) {\n\t\t\t\t\t// Iben: Create a new icon element\n\t\t\t\t\tthis.iconElement = this.renderer.createElement('i');\n\t\t\t\t\tthis.iconElement.className = `ngx-link-icon ${this.icon()}`;\n\t\t\t\t} else {\n\t\t\t\t\t// Iben: Create new component and add the icon\n\t\t\t\t\tthis.iconComponent =\n\t\t\t\t\t\tthis.viewContainer.createComponent(\n\t\t\t\t\t\t\tthis.configuration.icon,\n\t\t\t\t\t\t\t{ index: 0 }\n\t\t\t\t\t\t);\n\t\t\t\t\tthis.iconComponent.setInput('data', this.icon());\n\t\t\t\t\tthis.renderer.addClass(\n\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t'ngx-link-icon'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Add the icon depending on whether we want to add it on the left or the right\n\t\t\t\tthis.iconPosition() === 'left'\n\t\t\t\t\t? this.renderer.insertBefore(\n\t\t\t\t\t\t\tthis.nativeElement,\n\t\t\t\t\t\t\tthis.iconElement ||\n\t\t\t\t\t\t\t\tthis.iconComponent.instance.elementRef.nativeElement,\n\t\t\t\t\t\t\tthis.nativeElement.firstChild\n\t\t\t\t\t  )\n\t\t\t\t\t: this.renderer.appendChild(\n\t\t\t\t\t\t\tthis.nativeElement,\n\t\t\t\t\t\t\tthis.iconElement || this.iconComponent.instance.elementRef.nativeElement\n\t\t\t\t\t  );\n\t\t\t}\n\t\t}\n\t\t// Iben: If an icon already exists and we no longer have an icon presented, we remove it\n\t\telse if (this.iconElement || this.iconComponent) {\n\t\t\tif (!this.configuration?.icon) {\n\t\t\t\tthis.renderer.removeChild(this.nativeElement, this.iconElement);\n\t\t\t\tthis.iconElement = undefined;\n\t\t\t} else {\n\t\t\t\tthis.iconComponent?.destroy();\n\t\t\t\tthis.iconComponent = undefined;\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxMatchesQueryPipe.html":{"url":"pipes/NgxMatchesQueryPipe.html","title":"pipe - NgxMatchesQueryPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxMatchesQueryPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that returns whether a (list of) query(s) have been matched\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxMatchesQuery\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:86\n                        \n                    \n\n\n            \n                \n                        Dispose of the matchesQuery observable when existing\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                        \n                    subscribe(observable: Observable)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:62\n                        \n                    \n\n\n            \n                \n                        Handles the changeDetection, latest value and dispose of the matchesQuery observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                observable\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe matchesQuery observable\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(query: string | string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:51\n                        \n                    \n\n\n            \n                \n                        Returns whether or not a query is matched\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided query\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        changeDetectorRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ChangeDetectorRef | null\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:29\n                        \n                    \n\n            \n                \n                    Instance of the change detector ref, implemented like this according to the async pipe implementation\nhttps://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:20\n                        \n                    \n\n            \n                \n                    Subject to hold the destroyed state of the current observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        matchesQuery\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:24\n                        \n                    \n\n            \n                \n                    The latest value of the Observable, whether or not the query is matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMediaQueryService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMediaQueryService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/pipes/matches-query/matches-query.pipe.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { ChangeDetectorRef, OnDestroy, Pipe, PipeTransform, inject } from '@angular/core';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxMediaQueryService } from '../../services';\n\n/**\n * A pipe that returns whether a (list of) query(s) have been matched\n */\n@Pipe({\n\tname: 'ngxMatchesQuery',\n\tpure: false,\n})\nexport class NgxMatchesQueryPipe implements PipeTransform, OnDestroy {\n\tprivate readonly mediaService: NgxMediaQueryService = inject(NgxMediaQueryService);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * Subject to hold the destroyed state of the current observable\n\t */\n\tprivate destroyed$: Subject;\n\t/**\n\t * The latest value of the Observable, whether or not the query is matched\n\t */\n\tprivate matchesQuery: boolean;\n\t/**\n\t * Instance of the change detector ref, implemented like this according to the async pipe implementation\n\t * https://github.com/angular/angular/blob/main/packages/common/src/pipes/async_pipe.ts\n\t */\n\tprivate changeDetectorRef: ChangeDetectorRef | null;\n\n\tconstructor() {\n\t\tconst cdRef = this.cdRef;\n\n\t\t// Iben: Use instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = cdRef;\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Call the dispose when the component is destroyed so we have no running subscriptions left\n\t\tthis.dispose();\n\n\t\t// Iben: Clear instance of cdRef like this to prevent memory leaks (see Angular async Pipe implementation)\n\t\tthis.changeDetectorRef = null;\n\t}\n\n\t/**\n\t * Returns whether or not a query is matched\n\t *\n\t * @param query - The provided query\n\t */\n\tpublic transform(query: string | string[]): boolean {\n\t\tthis.subscribe(this.mediaService.matchesQuery(query));\n\n\t\treturn this.matchesQuery;\n\t}\n\n\t/**\n\t * Handles the changeDetection, latest value and dispose of the matchesQuery observable\n\t *\n\t * @param observable - The matchesQuery observable\n\t */\n\tprivate subscribe(observable: Observable): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new destroyed subject to handle the destruction when needed\n\t\tthis.destroyed$ = new Subject();\n\n\t\tobservable\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: Update the latest value when it a new value is provided\n\t\t\t\t\tthis.matchesQuery = value;\n\n\t\t\t\t\t// Iben: Mark the component as ready for check\n\t\t\t\t\tthis.changeDetectorRef.markForCheck();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose of the matchesQuery observable when existing\n\t */\n\tprivate dispose(): void {\n\t\t// Iben: In case there's a destroyed, we have an observable and we destroy the subscription and reset the observable\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxMediaQuery.html":{"url":"interfaces/NgxMediaQuery.html","title":"interface - NgxMediaQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxMediaQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/media-query.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            query\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        query\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        query:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface NgxMediaQuery {\n\tid: string;\n\tquery: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxMediaQueryDirective.html":{"url":"directives/NgxMediaQueryDirective.html","title":"directive - NgxMediaQueryDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxMediaQueryDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that will render a part of the template based on whether the current screen size matches the provided query\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxMediaQuery]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Protected\n                                destroyed$\n                            \n                            \n                                    Protected\n                                elseTemplateRef\n                            \n                            \n                                    Protected\n                                elseViewRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                mediaQueryService\n                            \n                            \n                                    Public\n                                ngxMediaQuery\n                            \n                            \n                                    Public\n                                ngxMediaQueryElse\n                            \n                            \n                                    Public\n                                ngxMediaQueryShouldMatch\n                            \n                            \n                                    Protected\n                                    Readonly\n                                templateRef\n                            \n                            \n                                    Protected\n                                thenTemplateRef\n                            \n                            \n                                    Protected\n                                thenViewRef\n                            \n                            \n                                    Protected\n                                    Readonly\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxMediaQuery\n                            \n                            \n                                ngxMediaQueryElse\n                            \n                            \n                                ngxMediaQueryShouldMatch\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxMediaQuery\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:58\n                            \n                        \n                \n                    \n                        The query it should match\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxMediaQueryElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:63\n                            \n                        \n                \n                    \n                        The else template in case the query isn't matched\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxMediaQueryShouldMatch\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                            \n                        \n                \n                    \n                        Whether the query should be matched, by default this is true\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:151\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:97\n                        \n                    \n\n\n            \n                \n                        Updates the view and hides/renders the template as needed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:40\n                        \n                    \n\n            \n                \n                    The provided ChangeDetectorRef\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:45\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        mediaQueryService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMediaQueryService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMediaQueryService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQuery\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:58\n                        \n                    \n\n            \n                \n                    The query it should match\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQueryElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:63\n                        \n                    \n\n            \n                \n                    The else template in case the query isn't matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxMediaQueryShouldMatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:68\n                        \n                    \n\n            \n                \n                    Whether the query should be matched, by default this is true\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        templateRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(TemplateRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:31\n                        \n                    \n\n            \n                \n                    The provided template ref\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:50\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef<> | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/media-query/media-query.directive.ts:35\n                        \n                    \n\n            \n                \n                    The provided ViewContainerRef\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tChangeDetectorRef,\n\tDirective,\n\tEmbeddedViewRef,\n\tinject,\n\tinput,\n\tInputSignal,\n\tTemplateRef,\n\tViewContainerRef,\n\tOnDestroy,\n} from '@angular/core';\nimport { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';\nimport { Subject, tap, takeUntil, combineLatest } from 'rxjs';\n\nimport { NgxMediaQueryService } from '../../services';\n\n/**\n * A directive that will render a part of the template based on whether the current screen size matches the provided query\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n\n@Directive({\n\tselector: '[ngxMediaQuery]',\n})\nexport class NgxMediaQueryDirective implements OnDestroy {\n\tprotected readonly mediaQueryService: NgxMediaQueryService = inject(NgxMediaQueryService);\n\t/**\n\t * The provided template ref\n\t */\n\tprotected readonly templateRef = inject>(TemplateRef);\n\t/**\n\t * The provided ViewContainerRef\n\t */\n\tprotected readonly viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The provided ChangeDetectorRef\n\t */\n\tprotected readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprotected destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprotected thenTemplateRef: TemplateRef | null = null;\n\tprotected thenViewRef: EmbeddedViewRef | null = null;\n\tprotected elseTemplateRef: TemplateRef | null = null;\n\tprotected elseViewRef: EmbeddedViewRef | null = null;\n\n\t/**\n\t * The query it should match\n\t */\n\tpublic ngxMediaQuery: InputSignal = input();\n\n\t/**\n\t * The else template in case the query isn't matched\n\t */\n\tpublic ngxMediaQueryElse: InputSignal> = input(undefined);\n\n\t/**\n\t * Whether the query should be matched, by default this is true\n\t */\n\tpublic ngxMediaQueryShouldMatch: InputSignal = input(true);\n\n\tconstructor() {\n\t\tconst templateRef = this.templateRef;\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\t// Iben: Listen to the changes and handle them accordingly\n\t\tcombineLatest([\n\t\t\ttoObservable(this.ngxMediaQuery),\n\t\t\ttoObservable(this.ngxMediaQueryElse),\n\t\t\ttoObservable(this.ngxMediaQueryShouldMatch),\n\t\t])\n\t\t\t.pipe(\n\t\t\t\ttap(() => {\n\t\t\t\t\tthis.updateView();\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\t/**\n\t * Updates the view and hides/renders the template as needed\n\t */\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.mediaQueryService\n\t\t\t.matchesQuery(this.ngxMediaQuery())\n\t\t\t.pipe(\n\t\t\t\ttap((matchesQuery) => {\n\t\t\t\t\t// Iben: Clear the current view\n\t\t\t\t\tthis.viewContainer.clear();\n\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tconst shouldRender: boolean = this.ngxMediaQueryShouldMatch()\n\t\t\t\t\t\t? matchesQuery\n\t\t\t\t\t\t: !matchesQuery;\n\n\t\t\t\t\t// Iben: Render the correct templates\n\t\t\t\t\tif (shouldRender) {\n\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\tthis.elseViewRef = null;\n\n\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Detect the changes so that the view gets updated\n\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMediaQueryService.html":{"url":"injectables/NgxMediaQueryService.html","title":"injectable - NgxMediaQueryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMediaQueryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/media-query/media-query.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that can be used to track media queries and their changes.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                currentQueryMatch\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentQueryMatch$\n                            \n                            \n                                    Private\n                                listeners\n                            \n                            \n                                    Private\n                                    Readonly\n                                mediaQueries\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matchesQuery\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:38\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        matchesQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    matchesQuery(id: string | string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Check if the query matches with the current screen size\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        string | string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the query we wish to match\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerQuery(value: NgxMediaQuery | NgxMediaQuery[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Registers one or multiple queries to listen to\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            NgxMediaQuery | NgxMediaQuery[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOne or multiple queries to register\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        currentQueryMatch\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tundefined\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:34\n                        \n                    \n\n            \n                \n                    The id of the current query match\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentQueryMatch$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentQueryMatch.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        listeners\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:28\n                        \n                    \n\n            \n                \n                    A record of all the registered listeners\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaQueries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMediaQuery[]\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMediaQueriesToken, {\n\t\toptional: true,\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:21\n                        \n                    \n\n            \n                \n                    An optional list of default mediaQueries we want to register at start time\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxWindowService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/media-query/media-query.service.ts:16\n                        \n                    \n\n            \n                \n                    An instance of the NgxWindowService\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, distinctUntilChanged, filter, map, Observable, throwError } from 'rxjs';\n\nimport { NgxMediaQueriesToken } from '../../tokens';\nimport { NgxMediaQuery } from '../../types';\n\n/**\n * A service that can be used to track media queries and their changes.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxMediaQueryService implements OnDestroy {\n\t/**\n\t * An instance of the NgxWindowService\n\t */\n\tprivate readonly windowService: NgxWindowService = inject(NgxWindowService);\n\n\t/**\n\t * An optional list of default mediaQueries we want to register at start time\n\t */\n\tprivate readonly mediaQueries: NgxMediaQuery[] = inject(NgxMediaQueriesToken, {\n\t\toptional: true,\n\t});\n\n\t/**\n\t * A record of all the registered listeners\n\t */\n\tprivate listeners: Record =\n\t\t{};\n\n\t/**\n\t * The id of the current query match\n\t */\n\tprivate readonly currentQueryMatch: BehaviorSubject = new BehaviorSubject(\n\t\tundefined\n\t);\n\n\tpublic readonly currentQueryMatch$: Observable = this.currentQueryMatch.asObservable();\n\n\tconstructor() {\n\t\t// Iben: Register the optionally provided standard queries\n\t\tthis.registerQuery(this.mediaQueries || []);\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Remove all the listeners\n\t\tObject.values(this.listeners).forEach(({ listener, mediaQueryList }) => {\n\t\t\tmediaQueryList.removeEventListener('change', listener);\n\t\t});\n\t}\n\n\t/**\n\t * Registers one or multiple queries to listen to\n\t *\n\t * @param value - One or multiple queries to register\n\t */\n\tpublic registerQuery(value: NgxMediaQuery | NgxMediaQuery[]): void {\n\t\t// Iben: Only run when we're in the browser\n\t\tthis.windowService.runInBrowser(({ browserWindow }) => {\n\t\t\t// Iben: Loop over all the queries\n\t\t\t(Array.isArray(value) ? value : [value]).forEach((item) => {\n\t\t\t\tconst { id, query } = item;\n\n\t\t\t\t// Iben: Early exit if a query already exists\n\t\t\t\tif (this.listeners[id]) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t'@ibenvandeveire/ngx-layout: NgxMediaQueryService: A query with this id already exists.'\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Match the query with the browser\n\t\t\t\tconst mediaQueryList = browserWindow.matchMedia(query);\n\n\t\t\t\t// Iben: Perform an initial check to see if the query matches\n\t\t\t\tif (mediaQueryList.matches) {\n\t\t\t\t\tthis.currentQueryMatch.next(id);\n\t\t\t\t}\n\n\t\t\t\t// Iben: Setup a listener to track the changes\n\t\t\t\tconst listener = (queryChangedEvent: MediaQueryListEvent) => {\n\t\t\t\t\tif (queryChangedEvent.matches) {\n\t\t\t\t\t\t// Iben: Emit the id of the query that has changed\n\t\t\t\t\t\tthis.currentQueryMatch.next(id);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Iben: Register the listener to the query\n\t\t\t\tmediaQueryList.addEventListener('change', listener);\n\n\t\t\t\t// Iben: Save the listener to remove it later\n\t\t\t\tthis.listeners[id] = {\n\t\t\t\t\tlistener,\n\t\t\t\t\tmediaQueryList,\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Check if the query matches with the current screen size\n\t *\n\t * @param id - The id of the query we wish to match\n\t */\n\tpublic matchesQuery(id: string | string[]): Observable {\n\t\tconst ids = Array.isArray(id) ? id : [id];\n\n\t\t// Iben: If the listener does not exist yet, throw an error\n\t\tif (ids.every((item) => !this.listeners[item])) {\n\t\t\treturn throwError(\n\t\t\t\t() =>\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t'@ibenvandeveire/ngx-layout: NgxMediaQueryService: No provided query matched with the provided ids.'\n\t\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Create a matching set\n\t\tconst matchingSet = new Set(ids);\n\n\t\t// Iben: Return whether the current screen size matches the query\n\t\treturn this.currentQueryMatch.pipe(\n\t\t\tfilter(Boolean),\n\t\t\tdistinctUntilChanged(),\n\t\t\tmap((query) => matchingSet.has(query))\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMediaQueryService-1.html":{"url":"injectables/NgxMediaQueryService-1.html","title":"injectable - NgxMediaQueryService-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMediaQueryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that can be used to track media queries and their changes. It exposes a method\nto register media queries, which takes an array of tuples with the id of the media query\nand the query itself. The service will then emit the id of the media query that has\nchanged when subscribed to the getMatchingQuery$ method.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                mediaQueryListenerMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryChangedSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryIdMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                queryListMap\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getMatchingQuery$\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                registerMediaQueries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getMatchingQuery$\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMatchingQuery$(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Pass the id of the query whose changes need to be listened to.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe id of the media query that should be checked.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits a boolean value whenever the requested media query changes.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:121\n                        \n                    \n\n\n            \n                \n                        Unregister all media query subscriptions from the service.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerMediaQueries\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerMediaQueries(...queries: [])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Register a list of media queries that need to be tracked by the service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                        []\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA list of media queries that should be registered with the service.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        mediaQueryListenerMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryChangedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ReplaySubject\n\n                    \n                \n                \n                    \n                        Default value : new ReplaySubject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that emits the id of the media query that has changed.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryIdMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:23\n                        \n                    \n\n            \n                \n                    A map of the registered media queries with their id.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        queryListMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:18\n                        \n                    \n\n            \n                \n                    A map of media queries that are registered with the service.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/media-query/mediaquery.service.ts:13\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { filter, map, Observable, ReplaySubject } from 'rxjs';\n\n/**\n * A service that can be used to track media queries and their changes. It exposes a method\n * to register media queries, which takes an array of tuples with the id of the media query\n * and the query itself. The service will then emit the id of the media query that has\n * changed when subscribed to the `getMatchingQuery$` method.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxMediaQueryService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A map of media queries that are registered with the service.\n\t */\n\tprivate readonly queryListMap: Map = new Map();\n\n\t/**\n\t * A map of the registered media queries with their id.\n\t */\n\tprivate readonly queryIdMap: Map = new Map();\n\n\t/*\n\t * A map of listeners that are registered with the service.\n\t * They are saved to be able to remove them when the service is destroyed.\n\t */\n\tprivate readonly mediaQueryListenerMap: Map void\n\t> = new Map();\n\n\t/**\n\t * A subject that emits the id of the media query that has changed.\n\t */\n\tprivate readonly queryChangedSubject: ReplaySubject = new ReplaySubject();\n\n\t/**\n\t * Register a list of media queries that need to be tracked by the service.\n\t *\n\t * @param queries - A list of media queries that should be registered with the service.\n\t */\n\tpublic registerMediaQueries(...queries: [id: string, query: string][]): void {\n\t\tthis.windowService.runInBrowser(({ browserWindow }) => {\n\t\t\tfor (const [id, query] of queries) {\n\t\t\t\t// Wouter: Warn if the id has already been registered.\n\t\t\t\tif (this.queryIdMap.get(id)) {\n\t\t\t\t\treturn console.warn(\n\t\t\t\t\t\t`NgxMediaQueryService: Media query with id '${id}' already exists and is defined by '${this.queryIdMap.get(\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t)}'`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: If the query has already been registered, throw an error to prevent duplicate subscriptions\n\t\t\t\tif ([...this.queryIdMap].some(([_, value]) => value === query)) {\n\t\t\t\t\tconst duplicateQuery = [...this.queryIdMap].find(\n\t\t\t\t\t\t([_, value]) => value === query\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`NgxMediaQueryService: Query of ['${id}', ${query}] already exists and is defined by ['${duplicateQuery[0]}', ${duplicateQuery[1]}]`\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Wouter: save the id and query\n\t\t\t\tthis.queryIdMap.set(id, query);\n\n\t\t\t\t// Wouter: For each query, create a MediaQueryList object\n\t\t\t\tconst matchedQuery = browserWindow.matchMedia(query);\n\n\t\t\t\t// Wouter: Save the query\n\t\t\t\tthis.queryListMap.set(id, matchedQuery);\n\n\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\tthis.queryChangedSubject.next(id);\n\n\t\t\t\t// Wouter: Create a listener for the query. This is done separately to be\n\t\t\t\t// able to remove the listener when the service is destroyed\n\t\t\t\tconst listener = (queryChangedEvent: MediaQueryListEvent) => {\n\t\t\t\t\tthis.queryListMap.set(id, queryChangedEvent.currentTarget as MediaQueryList);\n\n\t\t\t\t\t// Wouter: Emit the id of the query that has changed\n\t\t\t\t\tthis.queryChangedSubject.next(id);\n\t\t\t\t};\n\n\t\t\t\t// Wouter: Register the listener to the query\n\t\t\t\tmatchedQuery.addEventListener('change', listener);\n\n\t\t\t\t// Wouter: Save the listener\n\t\t\t\tthis.mediaQueryListenerMap.set(id, listener);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Pass the id of the query whose changes need to be listened to.\n\t *\n\t * @param id - The id of the media query that should be checked.\n\t * @returns An observable that emits a boolean value whenever the requested media query changes.\n\t */\n\tpublic getMatchingQuery$(id: string): Observable {\n\t\t// Wouter: Throw an error if the query has not been registered\n\t\tif (!this.queryIdMap.has(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`NgxMediaQueryService: No media query with id '${id}' has been registered. Please register the media query first using the 'registerMediaQueries' method.`\n\t\t\t);\n\t\t}\n\n\t\treturn this.queryChangedSubject.asObservable().pipe(\n\t\t\t// Wouter: Filter the query that has changed.\n\t\t\t// This will make sure only the [id] streams are triggered.\n\t\t\tfilter((queryId) => queryId === id),\n\t\t\tmap(() => this.queryListMap.get(id).matches)\n\t\t);\n\t}\n\n\t/**\n\t * Unregister all media query subscriptions from the service.\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.windowService.runInBrowser(() => {\n\t\t\t// Wouter: Remove all eventListeners\n\t\t\tfor (const [id, query] of this.queryListMap) {\n\t\t\t\tquery.removeEventListener('change', this.mediaQueryListenerMap.get(id));\n\t\t\t}\n\n\t\t\t// Wouter: Complete subscriptions\n\t\t\tthis.queryChangedSubject.next(null);\n\t\t\tthis.queryChangedSubject.complete();\n\n\t\t\t// Wouter: Clear maps\n\t\t\tthis.queryListMap.clear();\n\t\t\tthis.mediaQueryListenerMap.clear();\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxMobileLayoutBase.html":{"url":"interfaces/NgxMobileLayoutBase.html","title":"interface - NgxMobileLayoutBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxMobileLayoutBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/mobile-layout.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            aside\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            flyout\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            navigation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aside\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aside:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional aside we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        flyout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flyout:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional flyout we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The footer we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The header we wish to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        navigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        navigation:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional navigation we wish to render\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nexport type ComponentType = Type | null;\n\nexport interface ComponentRecord {\n\tdefault: ComponentType;\n\t[key: string]: ComponentType;\n}\n\nexport type NgxMobileLayoutItem = ComponentType | ComponentRecord;\n\ninterface NgxMobileLayoutBase {\n\t/**\n\t * The header we wish to render\n\t */\n\theader?: {\n\t\t/**\n\t\t * The center part of the header we wish to render\n\t\t */\n\t\tmain?: DataType;\n\t\t/**\n\t\t * The left part of the header we wish to render\n\t\t */\n\t\tleft?: DataType;\n\t\t/**\n\t\t * The right part of the header we wish to render\n\t\t */\n\t\tright?: DataType;\n\t};\n\t/**\n\t * An optional flyout we wish to render\n\t */\n\tflyout?: DataType;\n\t/**\n\t * An optional aside we wish to render\n\t */\n\taside?: DataType;\n\t/**\n\t * An optional navigation we wish to render\n\t */\n\tnavigation?: DataType;\n\t/**\n\t * The footer we wish to render\n\t */\n\tfooter?: DataType;\n}\n\n/**\n * A layout for the `NgxMobileLayoutService`\n */\nexport type NgxMobileLayout = NgxMobileLayoutBase;\n\n/**\n * A layout configuration for the `NgxMobileLayoutService`\n */\nexport type NgxMobileLayoutConfiguration = NgxMobileLayoutBase;\n\n/**\n * All possible elements of the mobile layout\n */\nexport type NgxMobileLayoutElements =\n\t| keyof Omit\n\t| `header.${keyof NgxMobileLayout['header']}`;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxMobileLayoutComponent.html":{"url":"components/NgxMobileLayoutComponent.html","title":"component - NgxMobileLayoutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxMobileLayoutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts\n\n\n\n    \n        Description\n    \n    \n        A component used to render a mobile-first layout\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-mobile-layout\n            \n\n\n            \n                imports\n                \n                            NgComponentOutlet\n                            NgTemplateOutlet\n                            RouterModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./mobile-layout.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                asideShown\n                            \n                            \n                                    Public\n                                    Readonly\n                                contentTemplate\n                            \n                            \n                                    Protected\n                                    Readonly\n                                flyoutShown\n                            \n                            \n                                    Protected\n                                layout\n                            \n                            \n                                    Protected\n                                    Readonly\n                                layoutService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        asideShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.layoutService.asideShown\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:36\n                        \n                    \n\n            \n                \n                    Whether the aside needs to be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        contentTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Default value : contentChild>('contentTmpl')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:41\n                        \n                    \n\n            \n                \n                    An optional template we can pass to replace the default routerOutlet\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        flyoutShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.layoutService.flyoutShown\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:31\n                        \n                    \n\n            \n                \n                    Whether the flyout needs to be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        layout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : toSignal(this.layoutService.layout$)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:26\n                        \n                    \n\n            \n                \n                    The currently displayed layout\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        layoutService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMobileLayoutService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMobileLayoutService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/components/mobile-layout/mobile-layout.component.ts:21\n                        \n                    \n\n            \n                \n                    The instance of the NgxMobileLayoutService\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgComponentOutlet, NgTemplateOutlet } from '@angular/common';\nimport { Component, contentChild, inject, OnInit, Signal, TemplateRef } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { RouterModule } from '@angular/router';\n\nimport { NgxMobileLayoutService } from '../../services';\nimport { NgxMobileLayout } from '../../types';\n\n/**\n * A component used to render a mobile-first layout\n */\n@Component({\n\tselector: 'ngx-mobile-layout',\n\timports: [NgComponentOutlet, NgTemplateOutlet, RouterModule],\n\ttemplateUrl: './mobile-layout.component.html',\n})\nexport class NgxMobileLayoutComponent implements OnInit {\n\t/**\n\t * The instance of the NgxMobileLayoutService\n\t */\n\tprotected readonly layoutService: NgxMobileLayoutService = inject(NgxMobileLayoutService);\n\n\t/**\n\t * The currently displayed layout\n\t */\n\tprotected layout: Signal = toSignal(this.layoutService.layout$);\n\n\t/**\n\t * Whether the flyout needs to be shown\n\t */\n\tprotected readonly flyoutShown: Signal = this.layoutService.flyoutShown;\n\n\t/**\n\t * Whether the aside needs to be shown\n\t */\n\tprotected readonly asideShown: Signal = this.layoutService.asideShown;\n\n\t/**\n\t * An optional template we can pass to replace the default routerOutlet\n\t */\n\tpublic readonly contentTemplate = contentChild>('contentTmpl');\n\n\tngOnInit(): void {\n\t\t// Iben: Sets up the initial layout if one was provided\n\t\tthis.layoutService.setUpInitialLayout();\n\t}\n}\n\n    \n\n    \n        @if(layout()) {\n\n\t@if(layout().header) {\n\t\n\t\t@if(layout().header.left) {\n\t\t\n\t\t}\n\t\t\n\n\t\t@if(layout().header.right) {\n\t\t\n\t\t}\n\t\n\t} @if(layout().navigation) {\n\t\n\t\t\n\t\n\t} @if(layout().aside && asideShown()) {\n\t\n\t\t\n\t\n\t}\n\n\t\n\t\t@if(contentTemplate()) {\n\t\t\n\t\t} @else {\n\t\t\n\t\t}\n\t\n\n\t@if(layout().flyout && flyoutShown()) {\n\t\n\t\t\n\t\n\t} @if(layout().footer) {\n\t\n\t\t\n\t\n\t}\n\n}\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '@if(layout()) {\t@if(layout().header) {\t\t\t@if(layout().header.left) {\t\t\t\t}\t\t\t\t@if(layout().header.right) {\t\t\t\t}\t\t} @if(layout().navigation) {\t\t\t\t\t} @if(layout().aside && asideShown()) {\t\t\t\t\t}\t\t\t@if(contentTemplate()) {\t\t\t\t} @else {\t\t\t\t}\t\t@if(layout().flyout && flyoutShown()) {\t\t\t\t\t} @if(layout().footer) {\t\t\t\t\t}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxMobileLayoutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxMobileLayoutService.html":{"url":"injectables/NgxMobileLayoutService.html","title":"injectable - NgxMobileLayoutService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxMobileLayoutService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The NgxMobileLayoutService allows us to configure an entire layout based on routing rather than on HTML. This allows for an easier use for mobile-first applications.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                asideShown\n                            \n                            \n                                    Protected\n                                    Readonly\n                                defaultLayout\n                            \n                            \n                                    Public\n                                flyoutShown\n                            \n                            \n                                    Protected\n                                    Readonly\n                                initialLayoutSet$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                initialLayoutSetSubject$\n                            \n                            \n                                    Public\n                                    Readonly\n                                layout$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                layoutSubject$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                mediaService\n                            \n                            \n                                    Protected\n                                showAside\n                            \n                            \n                                    Protected\n                                showFlyout\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                closeAside\n                            \n                            \n                                    Public\n                                closeFlyout\n                            \n                            \n                                    Private\n                                extractComponent\n                            \n                            \n                                    Private\n                                getComponent\n                            \n                            \n                                    Public\n                                hasElement\n                            \n                            \n                                    Public\n                                openAside\n                            \n                            \n                                    Public\n                                openFlyout\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setUpInitialLayout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeAside\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeAside()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Close the currently open aside\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        closeFlyout\n                        \n                    \n                \n            \n            \n                \n                        \n                    closeFlyout()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:183\n                        \n                    \n\n\n            \n                \n                        Close the currently open flyout\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractComponent(component: NgxMobileLayoutItem, query?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:253\n                        \n                    \n\n\n            \n                \n                        Extract the component based on the provided query\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                component\n                                            \n                                                            NgxMobileLayoutItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA component or component record\n\n\n                                            \n                                        \n                                        \n                                                query\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional query\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    getComponent(component: NgxMobileLayoutItem, fallback: NgxMobileLayoutItem)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:234\n                        \n                    \n\n\n            \n                \n                        Returns either the component or the fallback we wish to render\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                component\n                                            \n                                                            NgxMobileLayoutItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component\n\n\n                                            \n                                        \n                                        \n                                                fallback\n                                            \n                                                            NgxMobileLayoutItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe fallback\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxMobileLayoutItem\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasElement(element: NgxMobileLayoutElements)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:220\n                        \n                    \n\n\n            \n                \n                        Returns whether an element is defined in the layout\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                element\n                                            \n                                                            NgxMobileLayoutElements\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe element we wish to check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        openAside\n                        \n                    \n                \n            \n            \n                \n                        \n                    openAside()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:191\n                        \n                    \n\n\n            \n                \n                        Open a aside\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        openFlyout\n                        \n                    \n                \n            \n            \n                \n                        \n                    openFlyout(flyout?: ComponentType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Open a flyout\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                flyout\n                                            \n                                                            ComponentType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional flyout\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setLayout\n                        \n                    \n                \n            \n            \n                \n                        \n                    setLayout(layout: NgxMobileLayoutConfiguration)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Sets the provided layout for the\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                layout\n                                            \n                                                            NgxMobileLayoutConfiguration\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe layout we wish to set\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setUpInitialLayout\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpInitialLayout(markAsInitial: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:205\n                        \n                    \n\n\n            \n                \n                        Provides an initial layout if one was provided\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                markAsInitial\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        asideShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.showAside.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:103\n                        \n                    \n\n            \n                \n                    Whether the aside is visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        defaultLayout\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NgxMobileLayoutConfiguration | undefined\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxMobileLayoutConfigurationToken,\n\t\t{ optional: true }\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:52\n                        \n                    \n\n            \n                \n                    An optional default layout that was provided\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        flyoutShown\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.showFlyout.asReadonly()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:98\n                        \n                    \n\n            \n                \n                    Whether the flyout is visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        initialLayoutSet$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.initialLayoutSetSubject$\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:47\n                        \n                    \n\n            \n                \n                    Whether the initial layout has been set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        initialLayoutSetSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\n\t\tfalse\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:40\n                        \n                    \n\n            \n                \n                    A subject holding whether the initial layout has been set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        layout$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : combineLatest([\n\t\tthis.mediaService.currentQueryMatch$.pipe(distinctUntilChanged()),\n\t\tthis.layoutSubject$.asObservable().pipe(distinctUntilChanged(), filter(Boolean)),\n\t]).pipe(\n\t\tmap(([query, layout]) => {\n\t\t\treturn clean({\n\t\t\t\theader: {\n\t\t\t\t\tleft: this.extractComponent(layout.header.left, query),\n\t\t\t\t\tmain: this.extractComponent(layout.header.main, query),\n\t\t\t\t\tright: this.extractComponent(layout.header.right, query),\n\t\t\t\t},\n\t\t\t\tnavigation: this.extractComponent(layout.navigation, query),\n\t\t\t\tflyout: this.extractComponent(layout.flyout, query),\n\t\t\t\taside: this.extractComponent(layout.aside, query),\n\t\t\t\tfooter: this.extractComponent(layout.footer, query),\n\t\t\t}) as NgxMobileLayout;\n\t\t})\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:76\n                        \n                    \n\n            \n                \n                    The current layout of the application as an Observable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        layoutSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:60\n                        \n                    \n\n            \n                \n                    A subject holding the current layout of the application\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        mediaService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxMediaQueryService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxMediaQueryService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:35\n                        \n                    \n\n            \n                \n                    An instance of the NgxMediaQueryService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        showAside\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:71\n                        \n                    \n\n            \n                \n                    Whether the aside should be shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        showFlyout\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/mobile-layout/mobile-layout.service.ts:66\n                        \n                    \n\n            \n                \n                    Whether the flyout should be shown\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable, signal, Signal, WritableSignal } from '@angular/core';\nimport { get } from 'lodash';\nimport clean from 'obj-clean';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tObservable,\n\ttake,\n\ttap,\n} from 'rxjs';\n\nimport { NgxMobileLayoutConfigurationToken } from '../../tokens';\nimport {\n\tComponentType,\n\tNgxMobileLayout,\n\tNgxMobileLayoutConfiguration,\n\tNgxMobileLayoutElements,\n\tNgxMobileLayoutItem,\n} from '../../types';\nimport { NgxMediaQueryService } from '../media-query/media-query.service';\n\n/**\n * The `NgxMobileLayoutService` allows us to configure an entire layout based on routing rather than on HTML. This allows for an easier use for mobile-first applications.\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxMobileLayoutService {\n\t/**\n\t * An instance of the NgxMediaQueryService\n\t */\n\tprotected readonly mediaService: NgxMediaQueryService = inject(NgxMediaQueryService);\n\n\t/**\n\t * A subject holding whether the initial layout has been set\n\t */\n\tprotected readonly initialLayoutSetSubject$: BehaviorSubject = new BehaviorSubject(\n\t\tfalse\n\t);\n\n\t/**\n\t * Whether the initial layout has been set\n\t */\n\tprotected readonly initialLayoutSet$: Observable = this.initialLayoutSetSubject$;\n\n\t/**\n\t * An optional default layout that was provided\n\t */\n\tprotected readonly defaultLayout: NgxMobileLayoutConfiguration | undefined = inject(\n\t\tNgxMobileLayoutConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * A subject holding the current layout of the application\n\t */\n\tprotected readonly layoutSubject$: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * Whether the flyout should be shown\n\t */\n\tprotected showFlyout: WritableSignal = signal(false);\n\n\t/**\n\t * Whether the aside should be shown\n\t */\n\tprotected showAside: WritableSignal = signal(false);\n\n\t/**\n\t * The current layout of the application as an Observable\n\t */\n\tpublic readonly layout$: Observable = combineLatest([\n\t\tthis.mediaService.currentQueryMatch$.pipe(distinctUntilChanged()),\n\t\tthis.layoutSubject$.asObservable().pipe(distinctUntilChanged(), filter(Boolean)),\n\t]).pipe(\n\t\tmap(([query, layout]) => {\n\t\t\treturn clean({\n\t\t\t\theader: {\n\t\t\t\t\tleft: this.extractComponent(layout.header.left, query),\n\t\t\t\t\tmain: this.extractComponent(layout.header.main, query),\n\t\t\t\t\tright: this.extractComponent(layout.header.right, query),\n\t\t\t\t},\n\t\t\t\tnavigation: this.extractComponent(layout.navigation, query),\n\t\t\t\tflyout: this.extractComponent(layout.flyout, query),\n\t\t\t\taside: this.extractComponent(layout.aside, query),\n\t\t\t\tfooter: this.extractComponent(layout.footer, query),\n\t\t\t}) as NgxMobileLayout;\n\t\t})\n\t);\n\n\t/**\n\t * Whether the flyout is visible\n\t */\n\tpublic flyoutShown: Signal = this.showFlyout.asReadonly();\n\n\t/**\n\t * Whether the aside is visible\n\t */\n\tpublic asideShown: Signal = this.showAside.asReadonly();\n\n\t/**\n\t * Sets the provided layout for the\n\t *\n\t * @param layout - The layout we wish to set\n\t */\n\tpublic setLayout(layout: NgxMobileLayoutConfiguration): Observable {\n\t\t// Iben: To prevent timing issues, we wait until the initial layout has been set\n\t\treturn this.initialLayoutSet$.pipe(\n\t\t\tfilter(Boolean),\n\t\t\ttake(1),\n\t\t\ttap(() => {\n\t\t\t\t// Iben: If no default layout is provided, we set the layout as is\n\t\t\t\tif (!this.defaultLayout && layout) {\n\t\t\t\t\tthis.layoutSubject$.next(clean(layout) as NgxMobileLayoutConfiguration);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If layout is provided, we set the default layout\n\t\t\t\tif (!layout && this.defaultLayout) {\n\t\t\t\t\tthis.layoutSubject$.next(\n\t\t\t\t\t\tclean(this.defaultLayout) as NgxMobileLayoutConfiguration\n\t\t\t\t\t);\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If a default layout is provided, we want to only replace the layout elements that weren't part of the original default\n\t\t\t\tthis.layoutSubject$.next(\n\t\t\t\t\tclean({\n\t\t\t\t\t\theader: {\n\t\t\t\t\t\t\tleft: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.left,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.left\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tmain: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.main,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.main\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tright: this.getComponent(\n\t\t\t\t\t\t\t\tlayout.header?.right,\n\t\t\t\t\t\t\t\tthis.defaultLayout.header?.right\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnavigation: this.getComponent(\n\t\t\t\t\t\t\tlayout.navigation,\n\t\t\t\t\t\t\tthis.defaultLayout.navigation\n\t\t\t\t\t\t),\n\t\t\t\t\t\tflyout: this.getComponent(layout.footer, this.defaultLayout.flyout),\n\t\t\t\t\t\taside: this.getComponent(layout.aside, this.defaultLayout.aside),\n\t\t\t\t\t\tfooter: this.getComponent(layout.footer, this.defaultLayout.footer),\n\t\t\t\t\t}) as NgxMobileLayoutConfiguration\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Open a flyout\n\t *\n\t * @param flyout - An optional flyout\n\t */\n\tpublic openFlyout(flyout?: ComponentType): void {\n\t\t// Iben: Add the flyout if there wasn't one defined\n\t\tif (flyout) {\n\t\t\tthis.layoutSubject$.next({\n\t\t\t\t...this.layoutSubject$.getValue(),\n\t\t\t\tflyout,\n\t\t\t});\n\n\t\t\t// Iben: Make the flyout visible\n\t\t\tthis.showFlyout.set(true);\n\t\t}\n\t}\n\n\t/**\n\t * Close the currently open flyout\n\t */\n\tpublic closeFlyout(): void {\n\t\t// Iben: Make the flyout invisible\n\t\tthis.showFlyout.set(false);\n\t}\n\n\t/**\n\t * Open a aside\n\t */\n\tpublic openAside(): void {\n\t\tthis.showAside.set(true);\n\t}\n\n\t/**\n\t * Close the currently open aside\n\t */\n\tpublic closeAside(): void {\n\t\tthis.showAside.set(false);\n\t}\n\n\t/**\n\t * Provides an initial layout if one was provided\n\t */\n\tpublic setUpInitialLayout(markAsInitial: boolean = true): void {\n\t\t// Iben: Set initial layout\n\t\tthis.layoutSubject$.next(clean(this.defaultLayout) as NgxMobileLayoutConfiguration);\n\n\t\t// Iben: Mark the initial layout set as true\n\t\tif (markAsInitial) {\n\t\t\tthis.initialLayoutSetSubject$.next(true);\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether an element is defined in the layout\n\t *\n\t * @param element - The element we wish to check\n\t */\n\tpublic hasElement(element: NgxMobileLayoutElements): Observable {\n\t\treturn this.layout$.pipe(\n\t\t\tfilter(Boolean),\n\t\t\tdistinctUntilChanged(),\n\t\t\tmap((layout) => Boolean(get(layout, element)))\n\t\t);\n\t}\n\n\t/**\n\t * Returns either the component or the fallback we wish to render\n\t *\n\t * @param component - The component\n\t * @param fallback - The fallback\n\t */\n\tprivate getComponent(\n\t\tcomponent: NgxMobileLayoutItem,\n\t\tfallback: NgxMobileLayoutItem\n\t): NgxMobileLayoutItem {\n\t\t// Iben: If the component was explicitly set to `null`, we know we need to remove the current component and not fall back to the fallback\n\t\tif (component === null) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Either return the component, or the fallback\n\t\treturn component || fallback;\n\t}\n\n\t/**\n\t * Extract the component based on the provided query\n\t *\n\t * @param component - A component or component record\n\t * @param query - An optional query\n\t */\n\tprivate extractComponent(component: NgxMobileLayoutItem, query?: string): ComponentType {\n\t\t// Iben: If no component was provided, we early exit\n\t\tif (!component) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Iben: If a default property exists, we assume we are dealing with a record\n\t\tif (component['default']) {\n\t\t\t// Iben: Return the component matching the query or the default\n\t\t\treturn component[(query || 'default').toLowerCase()] || component['default'];\n\t\t}\n\n\t\t// Iben: Return the component as is\n\t\treturn component as ComponentType;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxModalAbstractComponent.html":{"url":"directives/NgxModalAbstractComponent.html","title":"directive - NgxModalAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxModalAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxModalService\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                action\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaDescribedBy\n                            \n                            \n                                    Public\n                                    Readonly\n                                ariaLabelledBy\n                            \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ariaDescribedBy\n                            \n                            \n                                ariaLabelledBy\n                            \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ariaDescribedBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40\n                            \n                        \n                \n                    \n                        An optional aria-describedBy property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ariaLabelledBy\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35\n                            \n                        \n                \n                    \n                        An optional aria-labelledby property\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45\n                            \n                        \n                \n                    \n                        Optional data that can be passed to the modal\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28\n                \n            \n\n\n            \n                \n                    Remove the modal on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:28\n                        \n                    \n\n\n            \n                \n                        Remove the modal on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:50\n                        \n                    \n\n            \n                \n                    An emitter that will emit an action we can later respond to\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaDescribedBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:40\n                        \n                    \n\n            \n                \n                    An optional aria-describedBy property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ariaLabelledBy\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:35\n                        \n                    \n\n            \n                \n                    An optional aria-labelledby property\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:56\n                        \n                    \n\n            \n                \n                    An emitter that will emit if the modal is closed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:45\n                        \n                    \n\n            \n                \n                    Optional data that can be passed to the modal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/modal/modal.abstract.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tDirective,\n\tElementRef,\n\tHostListener,\n\tOutputEmitterRef,\n\tinject,\n\tinput,\n\toutput,\n} from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nimport { NgxModalActionType } from '../../types';\n\n/**\n * An abstract for the NgxModalService\n */\n@Directive()\nexport class NgxModalAbstractComponent\n\timplements AfterViewInit\n{\n\tprivate readonly windowService = inject(NgxWindowService);\n\tprivate readonly elementRef = inject>(ElementRef);\n\n\t/**\n\t * Remove the modal on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.close.emit();\n\t}\n\n\t/**\n\t * An optional aria-labelledby property\n\t */\n\tpublic readonly ariaLabelledBy = input();\n\n\t/**\n\t * An optional aria-describedBy property\n\t */\n\tpublic readonly ariaDescribedBy = input();\n\n\t/**\n\t * Optional data that can be passed to the modal\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * An emitter that will emit an action we can later respond to\n\t */\n\tpublic action: OutputEmitterRef = output();\n\n\t/**\n\t * An emitter that will emit if the modal is closed\n\t */\n\t// eslint-disable-next-line @angular-eslint/no-output-native\n\tpublic close: OutputEmitterRef = output();\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If we are in the browser, check if either of the two accessibility labels are set\n\t\tconst ariaLabelledBy = this.ariaLabelledBy();\n\t\tconst ariaDescribedBy = this.ariaDescribedBy();\n\t\tif (this.windowService.isBrowser() && (ariaLabelledBy || ariaDescribedBy)) {\n\t\t\t// Iben: Find the element with the id and the parent\n\t\t\tconst element = document.getElementById(ariaLabelledBy || ariaDescribedBy);\n\t\t\tconst parent = this.elementRef.nativeElement;\n\n\t\t\t// Iben: If no corresponding element was found or if it isn't part of the modal, throw an error\n\t\t\tif (!element || !parent.contains(element)) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`@ibenvandeveire/ngx-inform - NgxModalAbstractComponent: The ${\n\t\t\t\t\t\tariaLabelledBy ? '\"aria-labelledBy\"' : 'aria-describedBy'\n\t\t\t\t\t} property was passed to the modal but no element with said id was found. Because of that, the necessary accessibility attributes could not be set. Please add an id with the value \"${\n\t\t\t\t\t\tariaLabelledBy || ariaDescribedBy\n\t\t\t\t\t}\" to an element of the modal.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelBaseOptions.html":{"url":"interfaces/NgxModalAriaLabelBaseOptions.html","title":"interface - NgxModalAriaLabelBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The label passed to the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that labels the modal.\nFrom the Mozilla docs:\nIt should reference brief text that provides the element with an accessible name.\n[...] a label describes the essence of an object.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelOptions.html":{"url":"interfaces/NgxModalAriaLabelOptions.html","title":"interface - NgxModalAriaLabelOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalAriaLabelledOptions.html":{"url":"interfaces/NgxModalAriaLabelledOptions.html","title":"interface - NgxModalAriaLabelledOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalAriaLabelledOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalAriaLabelBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            labelledById\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        labelledById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        labelledById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseConfiguration.html":{"url":"interfaces/NgxModalBaseConfiguration.html","title":"interface - NgxModalBaseConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            modals\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        modals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        modals:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The global modals that were configured in the root of the application.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalBaseOptions.html":{"url":"interfaces/NgxModalBaseOptions.html","title":"interface - NgxModalBaseOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalBaseOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            describedById\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\nThis property will take precedence over the type property.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        describedById\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        describedById:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The ID of the element that describes the dialog.\nFrom the Mozilla docs:\n[...] [it] lists the ids of the descriptions or elements providing more information\nthat the user might need.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClose:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The method that should be called when the modal is closed.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The name of a config object defined in the global config at the root of\nthe project.\nIf a component value is provided alongside a type in the local config, the\ncomponent value will take precedence.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalCDKModalConfiguration.html":{"url":"interfaces/NgxModalCDKModalConfiguration.html","title":"interface - NgxModalCDKModalConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalCDKModalConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            injector\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            restoreFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            viewContainerRef\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoFocus:     AutoFocusTarget | string | boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AutoFocusTarget | string | boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where (or whether) the dialog should focus after it is opened.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        injector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        injector:     Injector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Injector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                     The Injector used for the instantiation of the component to be attached.\nIf provided, takes precedence over the injector indirectly provided by\nthe ViewContainerRef. This will allow for host-service injection to\nthe component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        restoreFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        restoreFocus:     boolean | string | HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | string | HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the dialog should restore focus to the previously-focused element\nupon closing.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        viewContainerRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        viewContainerRef:     ViewContainerRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ViewContainerRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Where the attached component should live in Angular's logical component tree.\nThis affects what is available for injection and the change detection order\nfor the component instantiated inside of the dialog. This does not affect\nwhere the dialog content will be rendered in the DOM.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentConfiguration.html":{"url":"interfaces/NgxModalComponentConfiguration.html","title":"interface - NgxModalComponentConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component that should be rendered as the modal. This component must extend the\nNgxModalAbstractComponent.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The data that will be passed to the modal. This data will be accessible in the\nprovided component.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalComponentOptions.html":{"url":"interfaces/NgxModalComponentOptions.html","title":"interface - NgxModalComponentOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalComponentOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         NgxModalRole\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxModalRole\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The role that should be applied to the modal.\nIf the role is set to alertdialog, the modal indicates an alert or a message that\nrequires user interaction (e.g. a dismiss / proceed dialog).\nIf the role is set to dialog, the modal indicates a dialog that requires user\nattention, but no interaction. (e.g. an advertisement).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalGlobalCDKConfiguration.html":{"url":"interfaces/NgxModalGlobalCDKConfiguration.html","title":"interface - NgxModalGlobalCDKConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalGlobalCDKConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            closeOnNavigation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            direction\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasBackdrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            panelClass\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClose:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close when an event is fired.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        closeOnNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closeOnNavigation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal should close on navigation.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:     Direction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Direction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The direction of the modal.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasBackdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasBackdrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the modal has a backdrop.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        panelClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        panelClass:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The class that should be applied to the modal.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxModalService.html":{"url":"injectables/NgxModalService.html","title":"injectable - NgxModalService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxModalService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/modal/modal.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogService\n                            \n                            \n                                    Public\n                                    Readonly\n                                hasActiveModal$\n                            \n                            \n                                    Private\n                                hasModalSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Private\n                                createModalComponent\n                            \n                            \n                                    Private\n                                getValue\n                            \n                            \n                                    Private\n                                hasRequiredDescription\n                            \n                            \n                                    Public\n                                open\n                            \n                            \n                                    Private\n                                runARIAChecks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                        \n                    close(onClose?: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Closes the currently active modal\n\n@param onClose - An optional onClose function\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                onClose\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional onClose function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createModalComponent\n                        \n                    \n                \n            \n            \n                \n                        \n                    createModalComponent(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:177\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Creates the modal component\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxModalAbstractComponent\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getValue(configurationValue: any, optionsValue: any, defaultValue: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:244\n                        \n                    \n\n\n            \n                \n                        Returns a value based on whether one of the overwrites is defined\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                configurationValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on configuration level\n\n\n                                            \n                                        \n                                        \n                                                optionsValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe overwrite on options level\n\n\n                                            \n                                        \n                                        \n                                                defaultValue\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe default value if no overwrite was defined\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasRequiredDescription\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasRequiredDescription(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:222\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if the description is provided when the role requires it\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        open\n                        \n                    \n                \n            \n            \n                \n                        \n                    open(options: NgxModalOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:49\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Opens a modal based on the provided options\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe modal options\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        runARIAChecks\n                        \n                    \n                \n            \n            \n                \n                        \n                    runARIAChecks(options: NgxModalOptions, component: Type>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:146\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ActionType\n                            \n                        \n                    \n\n            \n                \n                        Checks if all the necessary preconditions are met\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            NgxModalOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe options of the modal\n\n\n                                            \n                                        \n                                        \n                                                component\n                                            \n                                                            Type>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe component we wish to render\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Dialog)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        hasActiveModal$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.hasModalSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:42\n                        \n                    \n\n            \n                \n                    An observable that keeps track of whether a modal is currently active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasModalSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/modal/modal.service.ts:37\n                        \n                    \n\n            \n                \n                    A subject that keeps track of whether a modal is currently active\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Dialog } from '@angular/cdk/dialog';\nimport { Injectable, Type, inject } from '@angular/core';\nimport { outputToObservable } from '@angular/core/rxjs-interop';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tfilter,\n\tmap,\n\tNEVER,\n\tObservable,\n\tstartWith,\n\ttakeUntil,\n\ttap,\n} from 'rxjs';\n\nimport { NgxModalAbstractComponent } from '../../abstracts';\nimport { NgxModalConfigurationToken } from '../../tokens';\nimport { NgxModalActionType, NgxModalConfiguration, NgxModalOptions } from '../../types';\n\n/**\n * A wrapper service to Angular CDK Dialog that provides a WCAG/ARIA compliant implementation of modals\n *\n * @export\n * @class NgxModalService\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxModalService {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tprivate readonly configuration = inject(NgxModalConfigurationToken, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly dialogService = inject(Dialog);\n\n\t/**\n\t * A subject that keeps track of whether a modal is currently active\n\t */\n\tprivate hasModalSubject: BehaviorSubject = new BehaviorSubject(false);\n\n\t/**\n\t * An observable that keeps track of whether a modal is currently active.\n\t */\n\tpublic readonly hasActiveModal$: Observable = this.hasModalSubject.asObservable();\n\n\t/**\n\t * Opens a modal based on the provided options\n\t *\n\t * @param {NgxModalOptions} options - The modal options\n\t */\n\tpublic open(\n\t\toptions: NgxModalOptions\n\t): Observable {\n\t\t// Iben: If a previous modal is still active, we early exit.\n\t\tif (this.hasModalSubject.value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxInform: An active modal is currently displayed, close the active modal before opening a new one'\n\t\t\t);\n\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Declare the modal as active\n\t\tthis.hasModalSubject.next(true);\n\n\t\t// Iben: Fetch the type of component we wish to show\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\t\tconst component: Type> =\n\t\t\toptions.component ||\n\t\t\t(configuration.component as Type>);\n\n\t\t// Iben: Check if all the correct parameters are set and return NEVER when they're not correctly set\n\t\tif (!this.runARIAChecks(options, component)) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: Render the modal\n\t\tconst modal = this.createModalComponent(options, component);\n\n\t\t// Iben: Return the modal action\n\t\treturn combineLatest([\n\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\toutputToObservable(modal.action).pipe(startWith(undefined)),\n\t\t\toutputToObservable(modal.close).pipe(\n\t\t\t\t// Iben: Map so we can keep the emit value void, but can work with the filter later down the line\n\t\t\t\tmap(() => 'NgxModalClose'),\n\t\t\t\t// Iben: Set the start value to undefined so both actions at least emit once\n\t\t\t\tstartWith(undefined)\n\t\t\t),\n\t\t]).pipe(\n\t\t\t// Iben: Only emit if one of the two actions actually has an emit\n\t\t\tfilter(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn Boolean(action) || Boolean(closed);\n\t\t\t}),\n\t\t\tmap(([action, closed]: [ActionType, 'NgxModalClose']) => {\n\t\t\t\treturn closed || action;\n\t\t\t}),\n\t\t\ttap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\t// Iben: If the autoClose is specifically set to false, we early exit unless we're running in a close event\n\t\t\t\tif (\n\t\t\t\t\taction !== 'NgxModalClose' &&\n\t\t\t\t\t((options.autoClose !== undefined && options.autoClose === false) ||\n\t\t\t\t\t\t(configuration?.autoClose !== undefined &&\n\t\t\t\t\t\t\tconfiguration.autoClose === false))\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Iben: Close the modal\n\t\t\t\tthis.close(options.onClose);\n\t\t\t}),\n\t\t\t// Iben: Map the action back to the ActionType\n\t\t\tmap((action: ActionType | 'NgxModalClose') => {\n\t\t\t\treturn action === 'NgxModalClose' ? undefined : (action as ActionType);\n\t\t\t}),\n\t\t\t// Wouter: Unsubscribe wen no modal is open\n\t\t\ttakeUntil(this.hasModalSubject.pipe(filter((hasModal) => !hasModal)))\n\t\t);\n\t}\n\n\t/**\n\t * Closes the currently active modal\n\t *\n\t * * @param onClose - An optional onClose function\n\t */\n\tpublic close(onClose?: () => void): void {\n\t\t// Wouter: The setTimeout delay is needed, so that the `open` method can emit before its subscription end gets triggered\n\t\tsetTimeout(() => {\n\t\t\t// Iben: Close the modal\n\t\t\tthis.dialogService.closeAll();\n\n\t\t\t// Iben: Mark the modal as closed\n\t\t\tthis.hasModalSubject.next(false);\n\n\t\t\t// Iben: Run an optional onClose function\n\t\t\tif (onClose) {\n\t\t\t\tonClose();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Checks if all the necessary preconditions are met\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate runARIAChecks(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): boolean {\n\t\t// Iben: If no component was found, we return NEVER and throw an error\n\t\tif (!component) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxModalService: No component was provided or found in the configuration to render.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Iben: If no description was provided when required, we return NEVER and throw an error\n\t\tif (!this.hasRequiredDescription(options)) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxModalService: The role of the modal was set to \"alertdialog\" but no \"describedById\" was provided.'\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Creates the modal component\n\t *\n\t * @param options - The options of the modal\n\t * @param  component - The component we wish to render\n\t */\n\tprivate createModalComponent(\n\t\toptions: NgxModalOptions,\n\t\tcomponent: Type>\n\t): NgxModalAbstractComponent {\n\t\tconst configuration = this.configuration?.modals?.[options.type];\n\n\t\t// Iben: Create the modal and render it\n\t\tconst dialogRef = this.dialogService.open(component, {\n\t\t\trole: configuration?.role || options.role,\n\t\t\tariaLabel: options.label,\n\t\t\tariaLabelledBy: options.labelledById,\n\t\t\tariaDescribedBy: options.describedById,\n\t\t\tdisableClose: true,\n\t\t\trestoreFocus: this.getValue(undefined, options.restoreFocus, true),\n\t\t\tautoFocus: this.getValue(undefined, options.autoFocus, true),\n\t\t\tviewContainerRef: options.viewContainerRef,\n\t\t\tdirection: configuration?.direction || options.direction,\n\t\t\thasBackdrop: this.getValue(configuration?.hasBackdrop, options.hasBackdrop, true),\n\t\t\tpanelClass: this.getValue(configuration?.panelClass, options.panelClass, []),\n\t\t\tcloseOnNavigation: this.getValue(\n\t\t\t\tconfiguration?.closeOnNavigation,\n\t\t\t\toptions.closeOnNavigation,\n\t\t\t\ttrue\n\t\t\t),\n\t\t\tcloseOnDestroy: true,\n\t\t\tcloseOnOverlayDetachments: true,\n\t\t});\n\t\tconst modal = dialogRef.componentInstance;\n\n\t\t// Iben: Set the data of the modal\n\t\tdialogRef.componentRef.setInput(\n\t\t\t'data',\n\t\t\tthis.getValue(configuration?.data, options.data, undefined)\n\t\t);\n\t\tdialogRef.componentRef.setInput('ariaDescribedBy', options.describedById);\n\t\tdialogRef.componentRef.setInput('ariaLabelledBy', options.labelledById);\n\n\t\treturn modal;\n\t}\n\n\t/**\n\t * Checks if the description is provided when the role requires it\n\t *\n\t * @param options - The options of the modal\n\t */\n\tprivate hasRequiredDescription(\n\t\toptions: NgxModalOptions\n\t): boolean {\n\t\t// Iben: If the options has provided a default type, we check based on the configuration role\n\t\tif (options.type) {\n\t\t\tconst configuration = this.configuration?.modals[options.type];\n\n\t\t\treturn !(configuration.role === 'alertdialog' && !options.describedById);\n\t\t}\n\n\t\t//  Iben: Check based on the options role\n\t\treturn !(options.role === 'alertdialog' && !options.describedById);\n\t}\n\n\t/**\n\t * Returns a value based on whether one of the overwrites is defined\n\t *\n\t * @private\n\t * @param configurationValue - The overwrite on configuration level\n\t * @param optionsValue - The overwrite on options level\n\t * @param defaultValue - The default value if no overwrite was defined\n\t */\n\tprivate getValue(configurationValue: any, optionsValue: any, defaultValue: any): any {\n\t\tif (configurationValue === undefined && optionsValue === undefined) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\tif (optionsValue !== undefined) {\n\t\t\treturn optionsValue;\n\t\t}\n\n\t\treturn configurationValue;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxModalTypeOptions.html":{"url":"interfaces/NgxModalTypeOptions.html","title":"interface - NgxModalTypeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxModalTypeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/modal.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxModalBaseOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Direction } from '@angular/cdk/bidi';\nimport { AutoFocusTarget } from '@angular/cdk/dialog';\nimport { Injector, Type, ViewContainerRef } from '@angular/core';\n\nimport { NgxModalAbstractComponent } from '../abstracts';\n\nexport type NgxModalRole = 'dialog' | 'alertdialog';\n\n/**\n * The type of action that should be emitted by the modal.\n */\nexport type NgxModalActionType =\n\t| StringType\n\t| { type: StringType; data: EmitDataType };\n\n// Aria configuration\ninterface NgxModalAriaLabelBaseOptions {\n\t/**\n\t * The label passed to the modal.\n\t */\n\tlabel?: string;\n\t/**\n\t * The ID of the element that labels the modal.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-labelledby):\n\t *\n\t * *It should reference brief text that provides the element with an accessible name.\n\t * [...] a label describes the essence of an object.*\n\t */\n\tlabelledById?: string;\n}\n\ninterface NgxModalAriaLabelOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel: string;\n\tlabelledById?: undefined;\n}\n\ninterface NgxModalAriaLabelledOptions extends NgxModalAriaLabelBaseOptions {\n\tlabel?: undefined;\n\tlabelledById: string;\n}\ntype NgxModalLabelAriaOptions = NgxModalAriaLabelOptions | NgxModalAriaLabelledOptions;\n\n// CDKDialog configuration\n\ninterface NgxModalGlobalCDKConfiguration {\n\t/**\n\t * Whether the modal should close on navigation.\n\t */\n\tcloseOnNavigation?: boolean;\n\t/**\n\t * The direction of the modal.\n\t */\n\tdirection?: Direction;\n\t/**\n\t * Whether the modal has a backdrop.\n\t */\n\thasBackdrop?: boolean;\n\t/**\n\t * The class that should be applied to the modal.\n\t */\n\tpanelClass?: string | string[];\n\t/**\n\t * Whether the modal should close when an event is fired.\n\t */\n\tautoClose?: boolean;\n}\n\ninterface NgxModalCDKModalConfiguration {\n\t/**\n\t *  The Injector used for the instantiation of the component to be attached.\n\t * If provided, takes precedence over the injector indirectly provided by\n\t * the ViewContainerRef. This will allow for host-service injection to\n\t * the component.\n\t */\n\tinjector?: Injector;\n\t/**\n\t * Where the attached component should live in Angular's logical component tree.\n\t * This affects what is available for injection and the change detection order\n\t * for the component instantiated inside of the dialog. This does not affect\n\t * where the dialog content will be rendered in the DOM.\n\t */\n\tviewContainerRef?: ViewContainerRef;\n\t/**\n\t * Whether the dialog should restore focus to the previously-focused element\n\t * upon closing.\n\t */\n\trestoreFocus?: boolean | string | HTMLElement;\n\t/**\n\t * Where (or whether) the dialog should focus after it is opened.\n\t */\n\tautoFocus?: AutoFocusTarget | string | boolean;\n}\n\n// Global configuration\n\nexport interface NgxModalComponentConfiguration {\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t */\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n}\n\ninterface NgxModalBaseConfiguration {\n\t/**\n\t * The global modals that were configured in the root of the application.\n\t */\n\tmodals?: Record & NgxModalGlobalCDKConfiguration\n\t>;\n}\n\nexport type NgxModalConfiguration = NgxModalBaseConfiguration & NgxModalGlobalCDKConfiguration;\n\n// Modal options\ninterface NgxModalBaseOptions {\n\t/**\n\t * The name of a config object defined in the global config at the root of\n\t * the project.\n\t *\n\t * If a `component` value is provided alongside a `type` in the local config, the\n\t * `component` value will take precedence.\n\t */\n\ttype?: string;\n\t/**\n\t * The component that should be rendered as the modal. This component must extend the\n\t * [`NgxModalAbstractComponent`](../abstracts/modal/modal.abstract.component.ts).\n\t *\n\t * This property will take precedence over the `type` property.\n\t */\n\tcomponent?: Type>;\n\t/**\n\t * The data that will be passed to the modal. This data will be accessible in the\n\t * provided component.\n\t */\n\tdata?: DataType;\n\t/**\n\t * The method that should be called when the modal is closed.\n\t */\n\tonClose?: () => void;\n\t/**\n\t * The ID of the element that describes the dialog.\n\t * From the [Mozilla docs](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-describedby):\n\t *\n\t * *[...] [it] lists the ids of the descriptions or elements providing more information\n\t * that the user might need.*\n\t */\n\tdescribedById?: string;\n}\n\ninterface NgxModalTypeOptions\n\textends NgxModalBaseOptions {\n\ttype: string;\n\tcomponent?: undefined;\n\trole?: undefined;\n}\n\ninterface NgxModalComponentOptions\n\textends NgxModalBaseOptions {\n\ttype?: undefined;\n\tcomponent: Type>;\n\t/**\n\t * The role that should be applied to the modal.\n\t *\n\t * If the role is set to `alertdialog`, the modal indicates an alert or a message that\n\t * requires user interaction (e.g. a dismiss / proceed dialog).\n\t * If the role is set to `dialog`, the modal indicates a dialog that requires user\n\t * attention, but no interaction. (e.g. an advertisement).\n\t */\n\trole: NgxModalRole;\n}\n\nexport type NgxModalOptions =\n\t| (NgxModalTypeOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration)\n\t| (NgxModalComponentOptions &\n\t\t\tNgxModalLabelAriaOptions &\n\t\t\tNgxModalGlobalCDKConfiguration &\n\t\t\tNgxModalCDKModalConfiguration);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxOnlineService.html":{"url":"injectables/NgxOnlineService.html","title":"injectable - NgxOnlineService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxOnlineService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/services/online-service/online.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides the currently online status of the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Public\n                                    Readonly\n                                online$\n                            \n                            \n                                    Private\n                                    Readonly\n                                onlineSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:20\n                        \n                    \n\n            \n                \n                    A subject to handle the destroyed flow\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        online$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.onlineSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:25\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onlineSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:15\n                        \n                    \n\n            \n                \n                    A subject that emits whenever the application is on or offline\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/services/online-service/online.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { Observable, Subject, fromEvent, takeUntil, tap } from 'rxjs';\n\n/**\n * A service that provides the currently online status of the application\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxOnlineService implements OnDestroy {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A subject that emits whenever the application is on or offline\n\t */\n\tprivate readonly onlineSubject: Subject = new Subject();\n\n\t/**\n\t * A subject to handle the destroyed flow\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the application is on or offline\n\t */\n\tpublic readonly online$: Observable = this.onlineSubject.asObservable();\n\n\tconstructor() {\n\t\t// Iben: When we're in the browser, listen to the online and offline status of the application\n\t\tif (this.windowService.isBrowser()) {\n\t\t\t// Iben: Handle the on and offline status of the application\n\t\t\tfromEvent(window, 'online')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(true);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\n\t\t\tfromEvent(window, 'offline')\n\t\t\t\t.pipe(\n\t\t\t\t\ttap(() => {\n\t\t\t\t\t\tthis.onlineSubject.next(false);\n\t\t\t\t\t}),\n\t\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t\t)\n\t\t\t\t.subscribe();\n\t\t}\n\t}\n\n\tngOnDestroy(): void {\n\t\t// Iben: Complete the destroyed subject\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxQueryParamFormSyncComponent.html":{"url":"directives/NgxQueryParamFormSyncComponent.html","title":"directive - NgxQueryParamFormSyncComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxQueryParamFormSyncComponent\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Public\n                                form\n                            \n                            \n                                    Protected\n                                queryParams$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                route\n                            \n                            \n                                    Protected\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearData\n                            \n                            \n                                    Protected\n                                    Abstract\n                                    Optional\n                                handleDataChanges\n                            \n                            \n                                    Protected\n                                    Abstract\n                                initForm\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    Protected\n                                    Optional\n                                scrambleParams\n                            \n                            \n                                    Private\n                                setDataInRoute\n                            \n                            \n                                    Protected\n                                    Optional\n                                unscrambleParams\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearData\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearData()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:110\n                        \n                    \n\n\n            \n                \n                        Clears the data in the form\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                            Optional\n                        handleDataChanges\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleDataChanges(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:161\n                        \n                    \n\n\n            \n                \n                        An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\nThis method is useful in case you wish to save your currently selected data to a global state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data provided by the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        initForm\n                        \n                    \n                \n            \n            \n                \n                        \n                    initForm()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:152\n                        \n                    \n\n\n            \n                \n                        A method that that will provide a form that will be used to store the current data\n\n\n                        \n                            Returns :     FormType\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:100\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        scrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:168\n                        \n                    \n\n\n            \n                \n                        An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to set in the route\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setDataInRoute\n                        \n                    \n                \n            \n            \n                \n                        \n                    setDataInRoute(data: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:119\n                        \n                    \n\n\n            \n                \n                        Sets the provided data in the route, so the filtered view can be shared by url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided data\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Optional\n                        unscrambleParams\n                        \n                    \n                \n            \n            \n                \n                        \n                    unscrambleParams(params: QueryParamsType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:174\n                        \n                    \n\n\n            \n                \n                        An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        QueryParamsType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided params we wish to patch in the form\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     QueryParamsType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormType\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:25\n                        \n                    \n\n            \n                \n                    The form in which we will save the queryParam data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        queryParams$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable>\n\n                    \n                \n                \n                    \n                        Default value : this.route\n\t\t.queryParams as Observable>\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:30\n                        \n                    \n\n            \n                \n                    The query params we wish to form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        route\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ActivatedRoute)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/abstracts/query-param-form-sync/query-param-form-sync.component.abstract.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n    \n        NgxQueryParamFormSyncComponent\nThe NgxQueryParamFormSyncComponent allows you to sync queryParams with a form provided in the component.\nAn ideal use-case for this component is filtered views that keep the selected filters in queryParams. This abstraction ensures that both the visual filters and the url stay in sync. This way the url can be shared, and the view will be filtered as shared.\nMethods\nWhen implementing the NgxQueryParamFormSyncComponent, there is only one method that requires implementation, being the initForm method. This method should return a form that will be used to store the queryParams in the component.\nThe component also provides a clearData method that will automatically clear the form.\nOptional methods\nOptionally, you want to interact with the changes in the form, like dispatching the data to a store. By implementing the optional handleDataChanges method, you can listen to these changes and handle them accordingly. It is very important to not subscribe to an Observable in this method, as it within itself is already used within a subscription.\nSometimes, certain data cannot be put in the queryParams without being scrambled first. This can be useful in situations in which some of the items in the queryParams are protected by GDPR, but you still wish to be able to share the url to a filtered view. In order to handle these situations, we provide the optional methods scrambleParams and the unscrambleParams, in which you can provide an implementation to scramble these items before sending them to the url.\nExample\nExample :import { scrambler, unscrambler } from 'ngx-random-package';\n\ninterface Filters {\n    searchQuery: string;\n    sorting: string;\n}\n\ninterface FiltersForm {\n    searchQuery: FormControl;\n    sorting: FormControl;\n}\n\n@Component({\n    selector: 'table-view',\n    templateUrl: './survey.component.html',\n})\nexport class TableViewComponent extends NgxQueryParamFormSyncComponent\n> {\n    constructor(\n        readonly route: ActivatedRoute,\n        readonly router: Router,\n        readonly storeService: NgxStoreService\n    ) {\n        super(route, router);\n    }\n\n    initForm(): FormGroup {\n        return new FormGroup({\n            searchQuery: new FormControl(),\n            sorting: new FormControl(),\n        });\n    }\n\n    handleDataChanges(value: Filters) {\n        this.storeService.setFilters(value);\n    }\n\n    scrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: scrambler(value.sorting),\n        };\n    }\n\n    unscrambleParams(value: Filters) {\n        return {\n            ...value,\n            sorting: unscrambler(value.sorting),\n        };\n    }\n}\n    \n\n    \n        import { Directive, OnDestroy, OnInit, inject } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable, Subject, filter, take, takeUntil, tap } from 'rxjs';\n\nexport type StringifiedQueryParamsType = {\n\t[key in keyof QueryParamsType]: string;\n};\n\n@Directive()\nexport abstract class NgxQueryParamFormSyncComponent\n\timplements OnInit, OnDestroy\n{\n\tprotected readonly route = inject(ActivatedRoute);\n\tprotected readonly router = inject(Router);\n\n\tprotected readonly destroyed$: Subject = new Subject();\n\n\t/**\n\t * The form in which we will save the queryParam data\n\t */\n\tpublic form: FormType;\n\n\t/**\n\t * The query params we wish to form\n\t */\n\tprotected queryParams$: Observable> = this.route\n\t\t.queryParams as Observable>;\n\n\tpublic ngOnInit(): void {\n\t\t//Iben: Warn the user if one of the two methods isn't provided\n\t\tif (\n\t\t\t(!this.scrambleParams && this.unscrambleParams) ||\n\t\t\t(this.scrambleParams && !this.unscrambleParams)\n\t\t) {\n\t\t\tconsole.error(\n\t\t\t\t`NgxUtils: NgxQueryParamFormSyncComponent detected the use of the parameter scrambling but is missing an implementation for the ${\n\t\t\t\t\tthis.scrambleParams ? 'unscrambleParams' : 'scrambleParams'\n\t\t\t\t} method. Please provide this method in order for this flow to work correctly.`\n\t\t\t);\n\t\t}\n\n\t\t// Iben: Setup the form for the data\n\t\tthis.form = this.initForm();\n\n\t\t// Iben: Listen to the form changes\n\t\tthis.form.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Update the route params\n\t\t\t\t\tthis.setDataInRoute(data);\n\n\t\t\t\t\t// Iben: Handle the route data changes\n\t\t\t\t\tif (this.handleDataChanges) {\n\t\t\t\t\t\tthis.handleDataChanges(data);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the initial query param update so we can set the data in the form if we navigate to a link with the params\n\t\tthis.queryParams$\n\t\t\t.pipe(\n\t\t\t\ttake(1),\n\t\t\t\tfilter(Boolean),\n\t\t\t\ttap((data) => {\n\t\t\t\t\t// Iben: Convert the route data properties to the actual data\n\t\t\t\t\tlet value: QueryParamsType = Object.keys(data || {}).reduce(\n\t\t\t\t\t\t(previous, current) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...previous,\n\t\t\t\t\t\t\t\t[current]: data[current] ? JSON.parse(data[current]) : undefined,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as QueryParamsType;\n\n\t\t\t\t\t// Iben: In case the unscrambleParams method is provided, we unscramble the data\n\t\t\t\t\tif (this.unscrambleParams) {\n\t\t\t\t\t\tvalue = this.unscrambleParams(value);\n\t\t\t\t\t}\n\n\t\t\t\t\t//Iben: If the entire object is empty, we early exit and do not set the form\n\t\t\t\t\tif (Object.keys(value).length === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: Set the current form value\n\t\t\t\t\tthis.form.setValue(value);\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.destroyed$.next();\n\t\tthis.destroyed$.complete();\n\n\t\tthis.clearData();\n\t}\n\n\t/**\n\t * Clears the data in the form\n\t */\n\tpublic clearData(): void {\n\t\tthis.form.reset();\n\t}\n\n\t/**\n\t * Sets the provided data in the route, so the filtered view can be shared by url\n\t *\n\t * @param  data - The provided data\n\t */\n\tprivate setDataInRoute(data: QueryParamsType): void {\n\t\t// Iben: If no data was provided, we simply unset the current params\n\t\tif (Object.keys(data || {}).length === 0) {\n\t\t\tthis.router.navigate([], {\n\t\t\t\trelativeTo: this.route,\n\t\t\t\tqueryParams: {},\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case a scrambleParams function was provided, we scramble the params first\n\t\tconst parsedData = this.scrambleParams ? this.scrambleParams(data) : data;\n\n\t\t// Iben: Stringify all properties of the data\n\t\tconst queryParams = Object.keys(parsedData || {}).reduce((previous, current) => {\n\t\t\treturn {\n\t\t\t\t...previous,\n\t\t\t\t[current]: JSON.stringify(parsedData[current]),\n\t\t\t};\n\t\t}, {});\n\n\t\t// Iben: Add the queryParams to the route\n\t\tthis.router.navigate([], {\n\t\t\trelativeTo: this.route,\n\t\t\tqueryParamsHandling: 'merge',\n\t\t\tqueryParams,\n\t\t});\n\t}\n\n\t/**\n\t * A method that that will provide a form that will be used to store the current data\n\t */\n\tprotected abstract initForm(): FormType;\n\n\t/**\n\t * An optional method that will handle what happens when the data have been updated. Do NOT subscribe to an Observable in this method.\n\t *\n\t * This method is useful in case you wish to save your currently selected data to a global state.\n\t *\n\t * @param data - The data provided by the form\n\t */\n\tprotected abstract handleDataChanges?(data: QueryParamsType): void;\n\n\t/**\n\t * An optional method to scramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to set in the route\n\t */\n\tprotected scrambleParams?(params: QueryParamsType): QueryParamsType;\n\t/**\n\t * An optional method to unscramble the parameters if needed, so no data gets added into the route that shouldn't be shared\n\t *\n\t * @param params - The provided params we wish to patch in the form\n\t */\n\tprotected unscrambleParams?(params: QueryParamsType): QueryParamsType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsConfigurationElement.html":{"url":"interfaces/NgxReplaceElementsConfigurationElement.html","title":"interface - NgxReplaceElementsConfigurationElement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsConfigurationElement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            element\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includeInnerHtml\n                                        \n                                \n                                \n                                        \n                                            selector\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        element\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        element:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeInnerHtml\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includeInnerHtml:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selector\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selector:         NgxReplaceElementsSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxReplaceElementsSelector\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxReplaceElementsItem.html":{"url":"interfaces/NgxReplaceElementsItem.html","title":"interface - NgxReplaceElementsItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxReplaceElementsItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/replace-elements.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            elementId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Record | string>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record | string>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type NgxReplaceElementsSelector = `${string}{{id}}${string}`;\n\nexport interface NgxReplaceElementsConfigurationElement {\n\telement: string;\n\tselector: NgxReplaceElementsSelector;\n\tincludeInnerHtml?: boolean;\n}\n\nexport type NgxReplaceElementsConfiguration = Record;\n\nexport interface NgxReplaceElementsItem {\n\tid: string;\n\telementId: string;\n\tdata?: Record, string>;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxReplaceElementsPipe.html":{"url":"pipes/NgxReplaceElementsPipe.html","title":"pipe - NgxReplaceElementsPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxReplaceElementsPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe that allows to replace text elements with a WebComponent\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxReplaceElements\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string, items: NgxReplaceElementsItem[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:24\n                        \n                    \n\n\n            \n                \n                        Replaces all matches of a specific selector with provided WebComponents\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe original string value\n\n\n                                            \n                                        \n                                        \n                                                items\n                                            \n                                                            NgxReplaceElementsItem[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe items we wish to replace\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SafeHtml\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxReplaceElementsConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sanitizer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(DomSanitizer)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/pipes/replace-elements/replace-elements.pipe.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n    \n        ngxReplaceElements\nThe ngxReplaceElements pipe will provide a way to transform a string that contains one or more parts that need an Angular component by taking advantage of Angular web components.\nThis can be useful in combination with translation strings that require in-app links or WYSIWYG content from an external source.\nHow to use\nSet up\nThe pipe requires a couple of things to be provided before it can be used.\nFirst, create a component that will be used to replace your target:\nExample :@Component({\n    selector: 'link',\n    template: '',\n})\nexport class LinkComponent {\n    // Keep in mind that Angular's innerHTML & outerHTML will convert attributes to lower casing.\n    // This input property will need to be lowercased to make this work.\n    public link: InputSignal: input();\n}Then register it as a web component in your app.component.ts:\nExample :@Component({\n    //...\n})\nexport class AppComponent {\n    constructor(\n        // ...\n        private readonly windowService: NgxWindowService,\n        private readonly injector: Injector\n    ) {\n        // Note that we are using our NgxWindowService (ngx-core) to avoid SSR issues.\n        if (this.windowService.isBrowser) {\n            const linkComponent = createCustomElement(LinkComponent, { injector: this.injector });\n\n            customElements.define('ngx-link', linkComponent);\n        }\n    }\n}Lastly set up the global config in your root provider array:\nExample :providers: [\n    //...\n    provideNgxReplaceElementsConfiguration({\n        link: {\n            element: 'ngx-link',\n            selector: 'a[data-link-id={{id}}]',\n            includeInnerHtml: true,\n        },\n        image: {\n            element: 'ngx-image',\n            selector: 'img[data-link-id={{id}}]',\n        },\n    }),\n];For each element we want to register, we define the WebComponent name using the element property. In order to be able to select an item to replace later on in the text, we create a selector. This selector should always include a part to identify the id, being {{id}}.\nIf we wish to use the original innerText of the element whilst replacing, we can do so by setting includeInnerHtml to true.\nUsing the pipe\nWhen the web component is set up, you can start using the pipe.\nFirst set up anchors in your input string:\nExample :\"This is a text with a link.\"The someUniqueId will be used by the pipe to find and replace your link element so make sure that each anchor within your translation has a unique identifier.\nWithin the template you can now provide the string and transform it like this:\nExample :Whilst id refers to the id in the string, elementId refers to the element we have configured in the configuration.\nThe data property can be used to set the inputs of our provided WebComponent. We once again want to stress that due to the nature of WebComponents, these properties can only have lowercase keys.\n\n    \n\n    \n        import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { NgxReplaceElementsConfigurationToken } from '../../tokens';\nimport { NgxReplaceElementsConfiguration, NgxReplaceElementsItem } from '../../types';\n\n/**\n * A pipe that allows to replace text elements with a WebComponent\n */\n@Pipe({\n\tname: 'ngxReplaceElements',\n\tstandalone: true,\n})\nexport class NgxReplaceElementsPipe implements PipeTransform {\n\tprivate readonly configuration = inject(NgxReplaceElementsConfigurationToken);\n\tprivate readonly sanitizer = inject(DomSanitizer);\n\n\t/**\n\t * Replaces all matches of a specific selector with provided WebComponents\n\t *\n\t * @param value - The original string value\n\t * @param items - The items we wish to replace\n\t */\n\ttransform(value: string, items: NgxReplaceElementsItem[]): SafeHtml {\n\t\t// Iben: If the value isn't a string we early exit and warn the user\n\t\tif (typeof value !== 'string') {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxReplaceElements: A non string-value was provided to the NgxReplaceElementsPipe'\n\t\t\t);\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no items were provided to replace, we just return the value\n\t\tif (!items || items.length === 0) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: set up a new instance of the DOMParser and parse the value as text/html.\n\t\t// This will return a Document which we can work with to find/replace elements.\n\t\tconst parser: DOMParser = new DOMParser();\n\t\tconst body: Document = parser.parseFromString(value, 'text/html');\n\n\t\t// Iben: Loop over all items we wish to replace\n\t\titems.forEach((item) => {\n\t\t\t// Iben: Get the selector and the element we want to replace the target with\n\t\t\tconst { selector, element, includeInnerHtml } = this.configuration[item.elementId];\n\n\t\t\t// Iben: Select the target\n\t\t\tconst target: HTMLElement = body.querySelector(selector.replace('{{id}}', item.id));\n\n\t\t\t// Iben: If no target was found, early exit\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Create a new element within the Document based on the provided selector.\n\t\t\t// The selector can be any native or custom web component (not an Angular component).\n\t\t\t// Keep in mind that the element will need to have a lowercase input prop for the reference.\n\t\t\tconst replacement: HTMLElement = body.createElement(element);\n\n\t\t\t// Iben: If the item included data, we set these attributes\n\t\t\tif (item.data) {\n\t\t\t\tObject.entries(item.data).forEach(([key, value]) => {\n\t\t\t\t\treplacement.setAttribute(key, value);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: Copy the innerHtml of the target element to the new element if needed.\n      if (includeInnerHtml) {\n\t\t\treplacement.innerHTML = target.innerHTML;\n\t\t}\n\n\t\t\t// Iben: Replace the target with the new element within the Document.\n\t\t\ttarget.replaceWith(replacement);\n\t\t});\n\n\t\t// Iben: sanitize the document and mark it as trusted HTML before returning it to the template.\n\t\treturn this.sanitizer.bypassSecurityTrustHtml(body.documentElement.innerHTML);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxSaveOnExitAbstractService.html":{"url":"classes/NgxSaveOnExitAbstractService.html","title":"class - NgxSaveOnExitAbstractService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxSaveOnExitAbstractService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                bypassSaveOnExit\n                            \n                            \n                                    Public\n                                    Abstract\n                                handleDirtyState\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        bypassSaveOnExit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:15\n                        \n                    \n\n            \n                \n                    An optional method that, if implemented, provides the ability to bypass the guard\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        handleDirtyState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.service.abstract.ts:10\n                        \n                    \n\n            \n                \n                    Take action when the component is dirty\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxSaveOnExitComponent } from './save-on-exit.component.abstract';\n\nexport abstract class NgxSaveOnExitAbstractService {\n\t/**\n\t * Take action when the component is dirty\n\t */\n\tpublic abstract handleDirtyState: (component: NgxSaveOnExitComponent) => Observable;\n\n\t/**\n\t * An optional method that, if implemented, provides the ability to bypass the guard\n\t */\n\tpublic bypassSaveOnExit?: (\n\t\tcurrentRoute: ActivatedRouteSnapshot,\n\t\tnextState: RouterStateSnapshot\n\t) => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxSaveOnExitComponent.html":{"url":"directives/NgxSaveOnExitComponent.html","title":"directive - NgxSaveOnExitComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxSaveOnExitComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                allowBeforeUnloadHandler\n                            \n                            \n                                    Public\n                                    Readonly\n                                destroyed$\n                            \n                            \n                                    Private\n                                    Readonly\n                                destroyedSubject$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                handleUnloadEvent\n                            \n                            \n                                    Public\n                                    Abstract\n                                isDirty\n                            \n                            \n                                    Public\n                                    Abstract\n                                isValid\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:beforeunload\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            window:beforeunload\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                \n            \n\n\n            \n                \n                    Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe unload event from the browser\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        handleUnloadEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleUnloadEvent(event: BeforeUnloadEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:beforeunload', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:12\n                        \n                    \n\n\n            \n                \n                        Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        BeforeUnloadEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unload event from the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isDirty\n                        \n                    \n                \n            \n            \n                \n                        \n                    isDirty()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:38\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is dirty\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        isValid\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValid()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:43\n                        \n                    \n\n\n            \n                \n                        Return whether or not the component is valid\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        allowBeforeUnloadHandler\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:33\n                        \n                    \n\n            \n                \n                    Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\nIf set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.destroyedSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:27\n                        \n                    \n\n            \n                \n                    An observable that emits the onDestroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        destroyedSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/forms/src/lib/abstracts/save-on-exit/save-on-exit.component.abstract.ts:22\n                        \n                    \n\n            \n                \n                    A subject to handle the onDestroy flow\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive()\nexport abstract class NgxSaveOnExitComponent implements OnDestroy {\n\t/**\n\t * Handles the unload event of the browser and will warn the user that the application prevented the user from closing the browser\n\t *\n\t * @param event - The unload event from the browser\n\t */\n\t@HostListener('window:beforeunload', ['$event'])\n\thandleUnloadEvent(event: BeforeUnloadEvent) {\n\t\t// Iben: If the component is dirty, we prevent the browser from closing the window or tab\n\t\tif (this.allowBeforeUnloadHandler && this.isDirty()) {\n\t\t\tevent.returnValue = true;\n\t\t}\n\t}\n\n\t/**\n\t * A subject to handle the onDestroy flow\n\t */\n\tprivate readonly destroyedSubject$ = new Subject();\n\n\t/**\n\t * An observable that emits the onDestroy event\n\t */\n\tpublic readonly destroyed$ = this.destroyedSubject$.asObservable();\n\n\t/**\n\t * Whether or not the beforeUnload event should be intercepted or not. By default, this behavior is set to false\n\t * If set to true, closing a tab or the browser will be interrupted and a message will be displayed\n\t */\n\tpublic readonly allowBeforeUnloadHandler: boolean = false;\n\n\t/**\n\t * Return whether or not the component is dirty\n\t */\n\tpublic abstract isDirty(): boolean;\n\n\t/**\n\t * Return whether or not the component is valid\n\t */\n\tpublic abstract isValid(): boolean;\n\n\tngOnDestroy() {\n\t\t// Iben: Emit if the component gets destroyed\n\t\tthis.destroyedSubject$.next(undefined);\n\t\tthis.destroyedSubject$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxSignalStoreService.html":{"url":"injectables/NgxSignalStoreService.html","title":"injectable - NgxSignalStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxSignalStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/abstracts/store.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract service that can be used to store handle a NgxSignalStore\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Abstract\n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxSignalStore\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:13\n                        \n                    \n\n            \n                \n                    The store we preserve the state in\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/signal/abstracts/store.service.ts:18\n                                \n                            \n                    \n                        \n                                Returns a read only version of the state\n\n\n                                \n                                    Returns :         NgxSignalStoreViewState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { NgxSignalStore, NgxSignalStoreState, NgxSignalStoreViewState } from '../types';\n\n/**\n * An abstract service that can be used to store handle a NgxSignalStore\n */\n@Injectable()\nexport abstract class NgxSignalStoreService {\n\t/**\n\t * The store we preserve the state in\n\t */\n\tprotected abstract store: NgxSignalStore;\n\n\t/**\n\t * Returns a read only version of the state\n\t */\n\tpublic get state(): NgxSignalStoreViewState {\n\t\t// Iben: If no initial created store was passed to the service, we early exit\n\t\tif (!this.store) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-store: No created store was provided to the NgxSignalStoreService in the constructor, so no state could be generated.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the store\n\t\treturn this.store;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSlice.html":{"url":"interfaces/NgxSignalStoreSlice.html","title":"interface - NgxSignalStoreSlice","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSlice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Data of an individual slice within an NgxSignalStore\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            loading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSliceArrayMethods.html":{"url":"interfaces/NgxSignalStoreSliceArrayMethods.html","title":"interface - NgxSignalStoreSliceArrayMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSliceArrayMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                Extra methods that are available in the store for array slices\n\n            \n\n            \n                Extends\n            \n            \n                            NgxSignalStoreSliceBaseMethods\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            add\n                                        \n                                \n                                \n                                        \n                                            prepend\n                                        \n                                \n                                \n                                        \n                                            remove\n                                        \n                                \n                                \n                                        \n                                            update\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        add\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        add:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prepend\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prepend:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remove\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        remove:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        update\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        update:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxSignalStoreSliceBaseMethods.html":{"url":"interfaces/NgxSignalStoreSliceBaseMethods.html","title":"interface - NgxSignalStoreSliceBaseMethods","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxSignalStoreSliceBaseMethods\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/signal/types/signal-store.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The methods that are available in the store for all slices\n\n            \n\n            \n                Extends\n            \n            \n                        MethodsDictionary\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            reset\n                                        \n                                \n                                \n                                        \n                                            set\n                                        \n                                \n                                \n                                        \n                                            setError\n                                        \n                                \n                                \n                                        \n                                            setLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reset:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        set:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setLoading:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Signal } from '@angular/core';\nimport { SignalStoreFeature } from '@ngrx/signals';\nimport { MethodsDictionary } from 'node_modules/@ngrx/signals/src/signal-store-models';\n\nimport {\n\tArrayElementType,\n\tNgxSignalStoreSelectFunction,\n\tNgxSignalStoreSliceArrayGenerator,\n\tNgxSignalStoreSliceGenerator,\n} from './signal-store-generator.types';\n\n/**\n * Data of an individual slice within an NgxSignalStore\n * @template DataType - The type of the data, by default unknown\n */\nexport interface NgxSignalStoreSlice {\n\tdata: DataType;\n\tloading: boolean;\n\terror: boolean;\n}\n\n/**\n * The configuration to setup a slice in the NgxSignalStore\n */\nexport type NgxSignalStoreConfiguration = {\n\t[Key in keyof StateType]: NgxSignalStoreSliceConfiguration\n\t>;\n};\n\n/**\n * The configuration of a slice in the NgxSignalStore\n */\ntype NgxSignalStoreSliceConfiguration = DataType extends unknown[]\n\t? DataType extends { id: string | number }[]\n\t\t? {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t  }\n\t\t: {\n\t\t\t\tgenerator: NgxSignalStoreSliceArrayGenerator;\n\t\t\t\tinitialData?: DataType;\n\t\t\t\tselectId: NgxSignalStoreSelectFunction;\n\t\t  }\n\t: DataType extends string | boolean | number | object\n\t? {\n\t\t\tgenerator: NgxSignalStoreSliceGenerator;\n\t\t\tinitialData?: DataType;\n\t  }\n\t: any;\n\n/**\n * The state of a store\n */\nexport type NgxSignalStoreState = Record;\n\n/**\n * Extracts the data type out of a NgxSignalStoreSlice\n */\ntype NgxSignalStoreSliceDataType = Type extends NgxSignalStoreSlice\n\t? DataType\n\t: never;\n\n/**\n * The methods that are available in the store\n */\ntype NgxSignalStoreSliceMethods = [DataType] extends [unknown[]]\n\t? NgxSignalStoreSliceArrayMethods\n\t: NgxSignalStoreSliceBaseMethods;\n\n/**\n * The methods that are available in the store for all slices\n */\nexport interface NgxSignalStoreSliceBaseMethods extends MethodsDictionary {\n\tset: (data: DataType extends [never] ? boolean : DataType) => void;\n\treset: () => void;\n\tclear: () => void;\n\tsetError: (error: boolean) => void;\n\tsetLoading: (loading: boolean) => void;\n}\n\n/**\n * Extra methods that are available in the store for array slices\n */\nexport interface NgxSignalStoreSliceArrayMethods\n\textends NgxSignalStoreSliceBaseMethods {\n\tadd: (data: DataType | ArrayElementType) => void;\n\tprepend: (data: DataType | ArrayElementType) => void;\n\tupdate: (data: ArrayElementType) => void;\n\tremove: (data: ArrayElementType) => void;\n}\n\n/**\n * The methods that are available to the dispatchDataToSignalStore method\n */\nexport type NgxSignalStoreDispatchActions = keyof Omit,\n\t'reset' | 'clear' | 'setError' | 'setLoading'\n>;\n\n/**\n * A record of the NgxSignalStore slices\n */\nexport type NgxSignalStoreRecord = {\n\t[Key in keyof StateType]: SignalStoreFeature>;\n\t\tprops: undefined;\n\t\tmethods: NgxSignalStoreSliceMethods>;\n\t}>;\n};\n\n/**\n * A readonly version of the NgxSignalStore\n */\nexport type NgxSignalStoreViewState = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t};\n};\n\n/**\n * A writable version of the NgxSignalStore\n */\nexport type NgxSignalStore = {\n\t[Key in keyof StateType]: {\n\t\tdata: Signal>;\n\t\tloading: Signal;\n\t\terror: Signal;\n\t} & NgxSignalStoreSliceMethods>;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorage.html":{"url":"interfaces/NgxStorage.html","title":"interface - NgxStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            clear\n                                        \n                                \n                                \n                                        \n                                            getItem\n                                        \n                                \n                                \n                                        \n                                            getItemObservable\n                                        \n                                \n                                \n                                        \n                                            removeItem\n                                        \n                                \n                                \n                                        \n                                            setItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        clear\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clear:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemObservable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemObservable:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        removeItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        setItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        setItem:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageBaseEvent.html":{"url":"interfaces/NgxStorageBaseEvent.html","title":"interface - NgxStorageBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            storage\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        storage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        storage:         NgxStorageType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStorageType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"set\" | \"clear\" | \"remove\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"set\" | \"clear\" | \"remove\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageClearEvent.html":{"url":"interfaces/NgxStorageClearEvent.html","title":"interface - NgxStorageClearEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageClearEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageRemoveEvent.html":{"url":"interfaces/NgxStorageRemoveEvent.html","title":"interface - NgxStorageRemoveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageRemoveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStorageService.html":{"url":"injectables/NgxStorageService.html","title":"injectable - NgxStorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStorageService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/services/storage-service/storage.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                localStorageRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                sessionStorageRecord\n                            \n                            \n                                    Public\n                                    Readonly\n                                storageEvents$\n                            \n                            \n                                    Private\n                                    Readonly\n                                storageEventSubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                windowService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clearStorage\n                            \n                            \n                                    Private\n                                getItem\n                            \n                            \n                                    Private\n                                getItemObservable\n                            \n                            \n                                    Private\n                                parseValue\n                            \n                            \n                                    Private\n                                removeItem\n                            \n                            \n                                    Private\n                                setItem\n                            \n                            \n                                    Private\n                                setupStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    localStorage\n                                \n                                \n                                    sessionStorage\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:39\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clearStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearStorage(storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:214\n                        \n                    \n\n\n            \n                \n                        Clears the storage, completes all subjects and emits a clear event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to clear\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subjects\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageClearEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(key: string, storage: Storage)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:83\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getItemObservable\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItemObservable(key: string, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:93\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Returns an observable version of the storage value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the storage value\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage record\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:265\n                        \n                    \n\n\n            \n                \n                        Parses a string value from the storage to an actual value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided string value\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(key: string, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Remove an item from the storage and emit a remove event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage we wish to remove the item from\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe record with the subject\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe type of storage\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageRemoveEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    setItem(key: string, item: DataType, storage: Storage, record: NgxStorageRecord, type: NgxStorageType)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:122\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Sets an item in the storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe key of the item\n\n\n                                            \n                                        \n                                        \n                                                item\n                                            \n                                                            DataType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe item in the storage\n\n\n                                            \n                                        \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe storage in which we want to save the item\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe corresponding storage record\n\n\n                                            \n                                        \n                                        \n                                                type\n                                            \n                                                            NgxStorageType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     NgxStorageSetEvent | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setupStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    setupStorage(storage: Storage, record: NgxStorageRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:254\n                        \n                    \n\n\n            \n                \n                        Grabs the existing storage and updates the record\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                storage\n                                            \n                                                        Storage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe current state of the storage\n\n\n                                            \n                                        \n                                        \n                                                record\n                                            \n                                                            NgxStorageRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        localStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:29\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the localStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        sessionStorageRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxStorageRecord\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:25\n                        \n                    \n\n            \n                \n                    A record to hold the properties in the sessionStorage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        storageEvents$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.storageEventSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:38\n                        \n                    \n\n            \n                \n                    An observable that emits whenever the session- or the localStorage was updated\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        storageEventSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the events of the storage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        windowService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxWindowService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        localStorage\n                    \n                \n\n                \n                    \n                        getlocalStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:54\n                                \n                            \n                    \n                        \n                                A localStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sessionStorage\n                    \n                \n\n                \n                    \n                        getsessionStorage()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/utils/src/lib/services/storage-service/storage.service.ts:70\n                                \n                            \n                    \n                        \n                                A sessionStorage implementation using observables\n\n\n                                \n                                    Returns :         NgxStorage\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n    \n        NgxStorageService\nThe NgxStorageService provides a SSR proof Observable approach to both session- and localStorage. It allows for listing to change events on specific properties or on the entire storage.\nApproach\nIn order to provide an Observable based approach to both the session- and localStorage, the session provides a localStorage and a sessionStorage object that offer custom methods that will also emit to the corresponding Observables. Data that was set to the session- or localStorage on the window directly will not be represented in the Observable.\nOn top of an Observable based approach, the new localStorage and sessionStorage implementations will automatically parse the data to a string when saving it to the window session- or localStorage, and will return the parsed value back when calling either getItem or getItemObservable.\nThe service is also SSR proof, and will prevent any actions from occurring when not in the browser.\nProperties\nlocalStorage/sessionStorage\nThe localStorage and sessionStorage objects of the NgxStorageService provide an Observable based approach to storage.\nIf we want to get an item from the storage, we can either use getItem or getItemObservable if we want the real time value vs an Observable respectively.\nUsing setItem and removeItem will set and remove an item in/from the storage respectively, and will emit an event on the storageEvents$ Observable.\nWhen using clear, the entire storage will be cleared, the Observables that were fetched using getItemObservable will be completed and an event will be emitted on the storageEvents$ observable.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.localStorage.setItem('Hello', { world: true });\n        storageService.sessionStorage.setItem('Hello', { world: true });\n    }\n}storageEvents$\nThe storageEvents$ property is an Observable that will emit a NgxStorageEvent whenever the session- or localStorage was updated (set or remove) or cleared.\nExample :import { NgxStorageService } from '@ibenvandeveire/ngx-utils';\n\nexport class YourComponent {\n    constructor(private storageService: NgxStorageService) {\n        storageService.storageEvent$.subscribe(console.log);\n        // logs: {type: 'update', oldValue: undefined, newValue: {world: true}, key: 'Hello', storage: 'local'}\n        storageService.localStorage.setItem('Hello', { world: true });\n    }\n}\n    \n\n    \n        import { Injectable, inject } from '@angular/core';\nimport { NgxWindowService } from '@ibenvandeveire/ngx-core';\nimport { BehaviorSubject, NEVER, Observable, Subject } from 'rxjs';\n\nimport {\n\tNgxStorage,\n\tNgxStorageClearEvent,\n\tNgxStorageEvent,\n\tNgxStorageRecord,\n\tNgxStorageRemoveEvent,\n\tNgxStorageSetEvent,\n\tNgxStorageType,\n} from '../../types';\n\n/**\n * A service that provides a SSR-proof Observable based approach to the session- and localStorage.\n */\n@Injectable({ providedIn: 'root' })\nexport class NgxStorageService {\n\tprivate readonly windowService = inject(NgxWindowService);\n\n\t/**\n\t * A record to hold the properties in the sessionStorage\n\t */\n\tprivate readonly sessionStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A record to hold the properties in the localStorage\n\t */\n\tprivate readonly localStorageRecord: NgxStorageRecord = {};\n\t/**\n\t * A subject to hold the events of the storage\n\t */\n\tprivate readonly storageEventSubject: Subject = new Subject();\n\n\t/**\n\t * An observable that emits whenever the session- or the localStorage was updated\n\t */\n\tpublic readonly storageEvents$: Observable =\n\t\tthis.storageEventSubject.asObservable();\n\n\tconstructor() {\n\t\tconst windowService = this.windowService;\n\n\t\t// Iben: Get the initial values of the session and the local storage\n\t\twindowService.runInBrowser(() => {\n\t\t\tthis.setupStorage(sessionStorage, this.sessionStorageRecord);\n\t\t\tthis.setupStorage(localStorage, this.localStorageRecord);\n\t\t});\n\t}\n\n\t/**\n\t * A localStorage implementation using observables\n\t */\n\tpublic get localStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, localStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.localStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, localStorage, this.localStorageRecord, 'local'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, localStorage, this.localStorageRecord, 'local'),\n\t\t\tclear: () => this.clearStorage(localStorage, this.localStorageRecord, 'local'),\n\t\t};\n\t}\n\n\t/**\n\t * A sessionStorage implementation using observables\n\t */\n\tpublic get sessionStorage(): NgxStorage {\n\t\treturn {\n\t\t\tgetItem: (key: string) => this.getItem(key, sessionStorage),\n\t\t\tgetItemObservable: (key: string) =>\n\t\t\t\tthis.getItemObservable(key, this.sessionStorageRecord),\n\t\t\tremoveItem: (key: string) =>\n\t\t\t\tthis.removeItem(key, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tsetItem: (key: string, item: DataType) =>\n\t\t\t\tthis.setItem(key, item, sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t\tclear: () => this.clearStorage(sessionStorage, this.sessionStorageRecord, 'session'),\n\t\t};\n\t}\n\n\tprivate getItem(key: string, storage: Storage): DataType {\n\t\treturn this.parseValue(storage.getItem(key));\n\t}\n\n\t/**\n\t * Returns an observable version of the storage value\n\t *\n\t * @param key - The key of the storage value\n\t * @param record  - The storage record\n\t */\n\tprivate getItemObservable(\n\t\tkey: string,\n\t\trecord: NgxStorageRecord\n\t): Observable {\n\t\t// Iben: Return NEVER when not in browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn NEVER;\n\t\t}\n\n\t\t// Iben: If the subject already exists, we return the observable\n\t\tif (record[key]) {\n\t\t\treturn record[key].asObservable();\n\t\t}\n\n\t\t// Iben: If no subject exits, we create a new one\n\t\trecord[key] = new BehaviorSubject(undefined);\n\n\t\t// Iben: Return the observable\n\t\treturn this.getItemObservable(key, record);\n\t}\n\n\t/**\n\t * Sets an item in the storage\n\t *\n\t * @param key - The key of the item\n\t * @param item - The item in the storage\n\t * @param storage - The storage in which we want to save the item\n\t * @param record - The corresponding storage record\n\t */\n\tprivate setItem(\n\t\tkey: string,\n\t\titem: DataType,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageSetEvent | undefined {\n\t\t// Iben: Early exit when we're in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Check if there's already a subject for this item. If not, we create one\n\t\tlet subject = record[key];\n\n\t\tif (!subject) {\n\t\t\tsubject = new BehaviorSubject(undefined);\n\t\t\tstorage[key] = subject;\n\t\t}\n\n\t\t// Iben: Store the current value of the subject\n\t\tconst oldValue = subject.getValue();\n\n\t\t// Iben: Set the item in the storage\n\t\tstorage.setItem(key, typeof item === 'string' ? item : JSON.stringify(item));\n\n\t\t// Iben: Update the subject in the record\n\t\tsubject.next(item);\n\n\t\t// Iben: Create the storage event\n\t\tconst event: NgxStorageSetEvent = {\n\t\t\tkey,\n\t\t\tnewValue: item,\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\ttype: 'set',\n\t\t};\n\n\t\t// Iben: Emit the storage event\n\t\tthis.storageEventSubject.next(event);\n\n\t\t// Iben: Return the storage event\n\t\treturn event;\n\t}\n\n\t/**\n\t * Remove an item from the storage and emit a remove event\n\t *\n\t * @param  key - The key of the item\n\t * @param storage - The storage we wish to remove the item from\n\t * @param record - The record with the subject\n\t * @param type - The type of storage\n\t */\n\tprivate removeItem(\n\t\tkey: string,\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageRemoveEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Get the old item\n\t\tconst oldValue = this.parseValue(storage.getItem(key));\n\n\t\t// Iben: Remove the item from the storage\n\t\tstorage.removeItem(key);\n\n\t\t// Iben Update the subject if it exists\n\t\trecord[key]?.next(undefined);\n\n\t\t// Iben: Create the event and return and emit it\n\t\tconst event: NgxStorageRemoveEvent = {\n\t\t\toldValue,\n\t\t\tstorage: type,\n\t\t\tkey,\n\t\t\ttype: 'remove',\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\t\treturn event;\n\t}\n\n\t/**\n\t * Clears the storage, completes all subjects and emits a clear event\n\t *\n\t * @param storage - The storage we wish to clear\n\t * @param record - The record with the subjects\n\t * @param type - The type of storage\n\t */\n\tprivate clearStorage(\n\t\tstorage: Storage,\n\t\trecord: NgxStorageRecord,\n\t\ttype: NgxStorageType\n\t): NgxStorageClearEvent | undefined {\n\t\t// Iben: Early exit when we're not in the browser\n\t\tif (!this.windowService.isBrowser()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Clear the storage\n\t\tstorage.clear();\n\n\t\t// Iben: Clear the record and complete all subjects\n\t\tObject.entries(record).forEach(([key, subject]) => {\n\t\t\tsubject.next(undefined);\n\t\t\tsubject.complete();\n\n\t\t\trecord[key] = undefined;\n\t\t});\n\n\t\t// Iben: Create and emit event\n\t\tconst event: NgxStorageClearEvent = {\n\t\t\ttype: 'clear',\n\t\t\tstorage: type,\n\t\t};\n\n\t\tthis.storageEventSubject.next(event);\n\n\t\treturn event;\n\t}\n\n\t/**\n\t * Grabs the existing storage and updates the record\n\t *\n\t * @private\n\t * @param {Storage} storage - The current state of the storage\n\t * @param {NgxStorageRecord} record\n\t * @memberof NgxStorageService\n\t */\n\tprivate setupStorage(storage: Storage, record: NgxStorageRecord) {\n\t\tObject.entries(storage).forEach(([key, value]) => {\n\t\t\trecord[key] = new BehaviorSubject(this.parseValue(value));\n\t\t});\n\t}\n\n\t/**\n\t * Parses a string value from the storage to an actual value\n\t *\n\t * @param value - The provided string value\n\t */\n\tprivate parseValue(value: string): any {\n\t\t// Iben: If the value does not exist, return the value\n\t\tif (!value) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: If the value is either true or false, return a boolean version of the value\n\t\tif (value === 'true' || value === 'false') {\n\t\t\treturn value === 'true';\n\t\t}\n\n\t\t// Iben: If the value is a number, return the parsed number\n\t\tif (value.match(/^[0-9]*[,.]{0,1}[0-9]*$/)) {\n\t\t\treturn Number(value);\n\t\t}\n\n\t\t// Iben: If the value is an object, return the parsed object\n\t\tif (value.match(/{(.*:.*[,]{0,1})*}/)) {\n\t\t\treturn JSON.parse(value);\n\t\t}\n\n\t\t// Iben: Return the string value as is\n\t\treturn value;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStorageSetEvent.html":{"url":"interfaces/NgxStorageSetEvent.html","title":"interface - NgxStorageSetEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStorageSetEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/utils/src/lib/types/storage.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStorageBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            key\n                                        \n                                \n                                \n                                        \n                                            newValue\n                                        \n                                \n                                \n                                        \n                                            oldValue\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        key:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        newValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        newValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldValue:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BehaviorSubject, Observable } from 'rxjs';\n\nexport type NgxStorageRecord = Record>;\n\nexport type NgxStorageType = 'local' | 'session';\n\ninterface NgxStorageBaseEvent {\n\ttype: 'set' | 'clear' | 'remove';\n\tstorage: NgxStorageType;\n}\n\nexport interface NgxStorageSetEvent extends NgxStorageBaseEvent {\n\ttype: 'set';\n\tkey: string;\n\toldValue: DataType;\n\tnewValue: DataType;\n}\n\nexport interface NgxStorageClearEvent extends NgxStorageBaseEvent {\n\ttype: 'clear';\n}\n\nexport interface NgxStorageRemoveEvent extends NgxStorageBaseEvent {\n\ttype: 'remove';\n\tkey: string;\n\toldValue: DataType;\n}\n\nexport type NgxStorageEvent = NgxStorageClearEvent | NgxStorageSetEvent | NgxStorageRemoveEvent;\n\nexport interface NgxStorage {\n\tgetItem: (key: string) => DataType;\n\tgetItemObservable: (key: string) => Observable;\n\tremoveItem: (key: string) => NgxStorageRemoveEvent;\n\tsetItem: (key: string, item: DataType) => NgxStorageSetEvent;\n\tclear: () => NgxStorageClearEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxStore.html":{"url":"interfaces/NgxStore.html","title":"interface - NgxStore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxStore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                The typing of the store of all sub slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            actions\n                                        \n                                \n                                \n                                        \n                                            reducers\n                                        \n                                \n                                \n                                        \n                                            selectors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        actions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        actions:         NgxStoreActions\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreActions\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reducers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reducers:     ActionReducer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ActionReducer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectors:         NgxStoreSelectors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxStoreSelectors\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxStoreService.html":{"url":"injectables/NgxStoreService.html","title":"injectable - NgxStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/abstracts/store.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    state\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(selectors?: NgxStoreSelectors)\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        selectors\n                                                  \n                                                        \n                                                                        NgxStoreSelectors\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:69\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:42\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:13\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        state\n                    \n                \n\n                \n                    \n                        getstate()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/store/src/lib/rxjs/abstracts/store.service.ts:78\n                                \n                            \n                    \n                        \n                                An object that holds all the state selectors of the provided store slice.\nThe generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\n\n                                \n                                    Returns :         StoreState\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { Inject, inject, Injectable, Optional } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { NgxStoreSelectors, StoreFlowAssets, StoreState } from '../interfaces';\n\n@Injectable()\nexport class NgxStoreService {\n\t/**\n\t * A wrapper object for the store state selectors\n\t */\n\tprivate stateWrapper: StoreState;\n\n\tprotected readonly store: Store = inject(Store);\n\n\tconstructor(\n\t\t@Optional()\n\t\t@Inject('selectors')\n\t\tselectors?: NgxStoreSelectors\n\t) {\n\t\t// Iben: If the selectors are provided, we create an object that will create an object with selectors for each slice in the state\n\t\tif (selectors) {\n\t\t\tthis.stateWrapper = Object.keys(selectors).reduce((previous, key) => {\n\t\t\t\treturn {\n\t\t\t\t\t...previous,\n\t\t\t\t\t[`${key}$`]: this.selectFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Loading$`]: this.selectLoadingFromStore(selectors[key]),\n\t\t\t\t\t[`${key}Error$`]: this.selectErrorFromStore(selectors[key]),\n\t\t\t\t\t[`${key}ErrorMessage$`]: this.selectErrorMessageFromStore(selectors[key]),\n\t\t\t\t};\n\t\t\t}, {}) as StoreState;\n\t\t}\n\t}\n\n\t/**\n\t * Select the data of a store slice\n\t *\n\t * @template StoreItem - The interface of the selected item/items\n\t * @param selector - The selector object\n\t */\n\tpublic selectFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.select || selector.selectAll));\n\t}\n\n\t/**\n\t * Select the loading state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectLoadingFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.loading || selector.selectLoading));\n\t}\n\n\t/**\n\t * Select the error state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.error || selector.selectError));\n\t}\n\n\t/**\n\t * Select the error message state of a store slice\n\t *\n\t * @param selector - The selector object\n\t */\n\tpublic selectErrorMessageFromStore(selector: any): Observable {\n\t\treturn this.store.pipe(select(selector.errorMessage || selector.selectErrorMessage));\n\t}\n\n\t/**\n\t * An object that holds all the state selectors of the provided store slice.\n\t *\n\t * The generated selectors need to be provided to the constructor of the service in order for this object not to be undefined.\n\t */\n\tpublic get state(): StoreState {\n\t\t// Iben: If no selectors were provided, we throw an error informing the user\n\t\tif (!this.stateWrapper) {\n\t\t\tconsole.error(\n\t\t\t\t'NgxStore: No selectors were provided to the constructor of the NgxStoreService extender. Without it, the state object cannot be created and will result in an error.'\n\t\t\t);\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Return the stateWrapper\n\t\treturn this.stateWrapper;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableCellDirective.html":{"url":"directives/NgxTableCellDirective.html","title":"directive - NgxTableCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/cell/generic-cell.directive.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxAbstractTableCellDirective\n            \n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                {\n    provide: NgxAbstractTableCellDirective, useExisting: NgxTableCellDirective,\n}\n                            \n                        \n                    \n\n                    \n                        Selector\n                        ngx-table-cell\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    \n                                cellTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                footerTemplate\n                            \n                            \n                                    \n                                    Public\n                                    \n                                headerTemplate\n                            \n                            \n                                    Public\n                                cellClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                column\n                            \n                            \n                                    Public\n                                    Readonly\n                                cypressDataTags\n                            \n                            \n                                    Public\n                                    Readonly\n                                editable\n                            \n                            \n                                    Public\n                                sort\n                            \n                            \n                                    Public\n                                    Readonly\n                                sortable\n                            \n                            \n                                    Public\n                                sortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                handleSort\n                            \n                            \n                                    Public\n                                resetSortDirection\n                            \n                            \n                                    Public\n                                setSortDirection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                column\n                            \n                            \n                                cypressDataTags\n                            \n                            \n                                editable\n                            \n                            \n                                sortable\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        column\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:31\n\n                            \n                        \n                \n                    \n                        The name of the column we want this cell to represent\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        cypressDataTags\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:42\n\n                            \n                        \n                \n                    \n                        A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        editable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:47\n\n                            \n                        \n                \n                    \n                        Whether the content of a cell is editable. By default, this is set to false\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sortable\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                            \n                                \n                                    Inherited from         NgxAbstractTableCellDirective\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxAbstractTableCellDirective:36\n\n                            \n                        \n                \n                    \n                        Whether or not the cell is sortable\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleSort\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleSort()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:57\n\n                        \n                    \n\n\n            \n                \n                        Handles the sorting click events\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        resetSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    resetSortDirection()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:82\n\n                        \n                    \n\n\n            \n                \n                        Resets the sort direction back to null\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setSortDirection\n                        \n                    \n                \n            \n            \n                \n                        \n                    setSortDirection(direction: NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxAbstractTableCellDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:91\n\n                        \n                    \n\n\n            \n                \n                        Sets the sorting direction based on the provided direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        cellTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('cellTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:27\n\n                        \n                    \n\n            \n                \n                    A template for the body of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        footerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('footerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:33\n\n                        \n                    \n\n            \n                \n                    A template for the footer of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            \n                        headerTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ContentChild('headerTmpl', {static: false})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:21\n\n                        \n                    \n\n            \n                \n                    A template for the header of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cellClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:26\n\n                        \n                    \n\n            \n                \n                    An optional class that can be set for the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        column\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:31\n\n                        \n                    \n\n            \n                \n                    The name of the column we want this cell to represent\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        cypressDataTags\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:42\n\n                        \n                    \n\n            \n                \n                    A tag that can be added to a column in the table, set according to the cypress best practices\nSee https://docs.cypress.io/guides/references/best-practices#Selecting-Elements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        editable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:47\n\n                        \n                    \n\n            \n                \n                    Whether the content of a cell is editable. By default, this is set to false\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sort\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:52\n\n                        \n                    \n\n            \n                \n                    Emits the sortable event if a column is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        sortable\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:36\n\n                        \n                    \n\n            \n                \n                    Whether or not the cell is sortable\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sortDirection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTableSortDirection | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                        \n                            \n                                Inherited from         NgxAbstractTableCellDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxAbstractTableCellDirective:14\n\n                        \n                    \n\n            \n                \n                    The current sortDirection of the cell\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { ContentChild, Directive, TemplateRef } from '@angular/core';\n\nimport { NgxAbstractTableCellDirective } from './cell.directive';\n\n@Directive({\n\tselector: 'ngx-table-cell',\n\tproviders: [\n\t\t{\n\t\t\tprovide: NgxAbstractTableCellDirective,\n\t\t\tuseExisting: NgxTableCellDirective,\n\t\t},\n\t],\n\tstandalone: true,\n})\nexport class NgxTableCellDirective extends NgxAbstractTableCellDirective {\n\t/**\n\t * A template for the header of the cell\n\t */\n\n\t@ContentChild('headerTmpl', { static: false })\n\tpublic override headerTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the body of the cell\n\t */\n\n\t@ContentChild('cellTmpl', { static: false })\n\tpublic override cellTemplate: TemplateRef = undefined;\n\t/**\n\t * A template for the footer of the cell\n\t */\n\n\t@ContentChild('footerTmpl', { static: false })\n\tpublic override footerTemplate: TemplateRef = undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableConfiguration.html":{"url":"interfaces/NgxTableConfiguration.html","title":"interface - NgxTableConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/tokens/ngx-table-config.token.ts\n        \n\n\n            \n                Description\n            \n            \n                A configuration we can provide to set properties of the table globally\nshowDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\nngxTableClass - A default class that will be set on the ngx-table component itself\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nallowMultipleRowsOpen - Defines whether multiple rows can be open at once.\nshowOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\nshowSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\nemitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\nhideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\ncomponents - A set of components we can use as defaults for the loading, error and empty state of the\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            allowMultipleRowsOpen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            components\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emitValueOnSingleItem\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hideHeaderWhen\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            highlightKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ngxTableClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDetailRow\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showOpenRowState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showSelectedOpenRow\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowMultipleRowsOpen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowMultipleRowsOpen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emitValueOnSingleItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emitValueOnSingleItem:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideHeaderWhen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hideHeaderWhen:         HideHeaderRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HideHeaderRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        highlightKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ngxTableClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ngxTableClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDetailRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDetailRow:         ShowDetailRowOption\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ShowDetailRowOption\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showOpenRowState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showOpenRowState:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showSelectedOpenRow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showSelectedOpenRow:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken, Type } from '@angular/core';\n\nimport {\n\tNgxDisplayContentComponent,\n\tNgxTableOpenRowStateTemplateAbstractComponent,\n\tNgxTableSelectTemplateAbstractComponent,\n\tNgxTableSortTemplateAbstractComponent,\n} from '../abstracts';\n\ntype HideHeaderRowOptions = 'when-loading' | 'when-empty';\nexport type HideHeaderRowOption =\n\t| 'never'\n\t| [HideHeaderRowOptions]\n\t| [HideHeaderRowOptions, HideHeaderRowOptions];\nexport type ShowDetailRowOption = 'always' | 'on-click' | 'on-single-item';\n\n/**\n * A configuration we can provide to set properties of the table globally\n *\n * showDetailRow - Defines the default open behavior of detail rows. 'always' will open all rows by default, 'on-click' will only open them on click, 'on-single-item' will open the row on click and when there's only one item in the table.\n * ngxTableClass - A default class that will be set on the ngx-table component itself\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * allowMultipleRowsOpen - Defines whether multiple rows can be open at once.\n * showOpenRowState - Defines whether we always want to show the open-row state indicator for each table.\n * showSelectedOpenRow - Defines whether we want a class to be added to the currently opened row\n * emitValueOnSingleItem - Defines whether we want to emit the rowClicked when there's only one item in the table and the showDetailRow is set to 'on-single-item'\n * hideHeaderWhen - Defines whether we want to show the header when the table is empty or loading\n * components - A set of components we can use as defaults for the loading, error and empty state of the\n */\nexport interface NgxTableConfiguration {\n\tshowDetailRow?: ShowDetailRowOption;\n\tngxTableClass?: string;\n\tshowOpenRowState?: boolean;\n\tallowMultipleRowsOpen?: boolean;\n\thighlightKey?: string;\n\tshowSelectedOpenRow?: boolean;\n\temitValueOnSingleItem?: boolean;\n\thideHeaderWhen?: HideHeaderRowOption;\n\tcomponents?: {\n\t\tloading?: Type;\n\t\tempty?: Type;\n\t\tradio?: Type;\n\t\tcheckbox?: Type;\n\t\topenRowState?: Type;\n\t\tsort?: Type;\n\t};\n}\n\nexport const NgxTableConfigurationToken = new InjectionToken(\n\t'NgxTableConfiguration'\n);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableCypressDataTagsBase.html":{"url":"interfaces/NgxTableCypressDataTagsBase.html","title":"interface - NgxTableCypressDataTagsBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableCypressDataTagsBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cell\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footer\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            header\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cell\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cell:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        header\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        header:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableGetPipe.html":{"url":"pipes/NgxTableGetPipe.html","title":"pipe - NgxTableGetPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableGetPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns a value based on a provided path\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        getProp\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value, path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/get-pipe/get.pipe.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { get } from 'lodash';\n\n/**\n * This pipe returns a value based on a provided path\n *\n * @export\n * @class NgxTableGetPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'getProp',\n\tstandalone: true,\n})\nexport class NgxTableGetPipe implements PipeTransform {\n\tpublic transform(value: unknown, path: string): any {\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || Array.isArray(value) || value === null) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe encountered a value that was not an object and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn '';\n\t\t}\n\n\t\t// Iben: If no path was provided, we return the value and warn the user\n\t\tif (!path) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableGetPipe did not receive a path to a property and returned an empty string instead.'\n\t\t\t);\n\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Return the property\n\t\treturn get(value, path);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableHasObserversPipe.html":{"url":"pipes/NgxTableHasObserversPipe.html","title":"pipe - NgxTableHasObserversPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableHasObserversPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableHasObservers\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(output: OutputEmitterRef<>)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/has-observers/has-observers.pipe.ts:13\n                        \n                    \n\n\n            \n                \n                        Returns true in case an observer was set to an EventEmitter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                output\n                                            \n                                                        OutputEmitterRef<>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided EventEmitter\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe,PipeTransform,OutputEmitterRef } from '@angular/core';\n\n@Pipe({\n\tname: 'ngxTableHasObservers',\n\tstandalone: true,\n})\nexport class NgxTableHasObserversPipe implements PipeTransform {\n\t/**\n\t * Returns true in case an observer was set to an EventEmitter\n\t *\n\t * @param output - The provided EventEmitter\n\t */\n  public transform ( output: OutputEmitterRef ): boolean {\n\t\treturn output && output['listeners']?.length > 0;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableOpenRowStateTemplateAbstractComponent.html":{"url":"directives/NgxTableOpenRowStateTemplateAbstractComponent.html","title":"directive - NgxTableOpenRowStateTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableOpenRowStateTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                isOpen\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                            \n                                isOpen\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isOpen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                            \n                        \n                \n                    \n                        The current open state the component has to visualize\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                            \n                        \n                \n                    \n                        The row data\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:22\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isOpen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:12\n                        \n                    \n\n            \n                \n                    The current open state the component has to visualize\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/open-row-state-template.component.ts:17\n                        \n                    \n\n            \n                \n                    The row data\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default open row state template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableOpenRowStateTemplateAbstractComponent {\n\t/**\n\t * The current open state the component has to visualize\n\t */\n\tpublic isOpen: InputSignal = input();\n\n\t/**\n\t * The row data\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSelectTemplateAbstractComponent.html":{"url":"directives/NgxTableSelectTemplateAbstractComponent.html","title":"directive - NgxTableSelectTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSelectTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/select-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                control\n                            \n                            \n                                    Public\n                                index\n                            \n                            \n                                    Public\n                                row\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                control\n                            \n                            \n                                index\n                            \n                            \n                                row\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        control\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                            \n                        \n                \n                    \n                        The control we wish to pass to the input\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        index\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        row\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                            \n                        \n                \n                    \n                        The row that is visualized\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        control\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:13\n                        \n                    \n\n            \n                \n                    The control we wish to pass to the input\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:23\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/select-template.component.ts:18\n                        \n                    \n\n            \n                \n                    The row that is visualized\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default select template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSelectTemplateAbstractComponent {\n\t/**\n\t * The control we wish to pass to the input\n\t */\n\tpublic control: InputSignal> = input();\n\n\t/**\n\t * The row that is visualized\n\t */\n\tpublic row: InputSignal = input();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic index: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableShowHeaderPipe.html":{"url":"pipes/NgxTableShowHeaderPipe.html","title":"pipe - NgxTableShowHeaderPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableShowHeaderPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                This pipe returns whether we want to show the header\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableShowHeader\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: NgxTableShowHeaderRequirements, hideHeaderRowWhen: HideHeaderRowOption)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/show-header/show-header.pipe.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            NgxTableShowHeaderRequirements\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hideHeaderRowWhen\n                                            \n                                                            HideHeaderRowOption\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { HideHeaderRowOption } from '../../tokens';\nimport { NgxTableShowHeaderRequirements } from '../../types';\n\n/**\n * This pipe returns whether we want to show the header\n *\n * @export\n * @class NgxTableShowHeaderPipe\n * @implements {PipeTransform}\n */\n@Pipe({\n\tname: 'ngxTableShowHeader',\n\tstandalone: true,\n})\nexport class NgxTableShowHeaderPipe implements PipeTransform {\n\tpublic transform(\n\t\tvalue: NgxTableShowHeaderRequirements,\n\t\thideHeaderRowWhen: HideHeaderRowOption\n\t): boolean {\n\t\t// Iben: If we never want to hide the header row, we return true\n\t\tif (hideHeaderRowWhen === 'never') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Check if the value is not an object and return an empty string so the frontend doesn't break and warn the user\n\t\tif (typeof value !== 'object' || !value) {\n\t\t\tconsole.warn(\n\t\t\t\t'NgxTableShowHeaderPipe encountered a value that was not an object and showed the header.'\n\t\t\t);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Iben: Add to set for better performance\n\t\tconst options = new Set(hideHeaderRowWhen);\n\n\t\t// Iben: Check which cases need the header to be hidden, and then flip it\n\t\treturn !(\n\t\t\t(options.has('when-empty') && value.isEmpty) ||\n\t\t\t(options.has('when-loading') && value.isLoading)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableShowHeaderRequirements.html":{"url":"interfaces/NgxTableShowHeaderRequirements.html","title":"interface - NgxTableShowHeaderRequirements","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableShowHeaderRequirements\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/show-header-requirements.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isEmpty\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isEmpty\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isEmpty:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { RequireAtLeastOne } from './internal-helpers';\n\nexport interface NgxTableShowHeaderRequirements {\n\tisLoading: boolean;\n\tisEmpty: boolean;\n}\n\ninterface NgxTableCypressDataTagsBase {\n\theader?: string;\n\tcell?: string;\n\tfooter?: string;\n}\n\nexport type NgxTableCypressDataTags = RequireAtLeastOne;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTableSortEvent.html":{"url":"interfaces/NgxTableSortEvent.html","title":"interface - NgxTableSortEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTableSortEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/types/sort-event.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            direction\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:     ColumnKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ColumnKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        direction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        direction:         NgxTableSortDirection\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTableSortDirection\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NgxTableSortDirection } from '../enums/sort-direction.enum';\n\nexport interface NgxTableSortEvent {\n\tdirection: NgxTableSortDirection;\n\tcolumn: ColumnKey;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NgxTableSortIconPipe.html":{"url":"pipes/NgxTableSortIconPipe.html","title":"pipe - NgxTableSortIconPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NgxTableSortIconPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts\n        \n\n\n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        ngxTableSortIcon\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(direction: null | NgxTableSortDirection)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/pipes/sort-icon/sort-icon.pipe.ts:15\n                        \n                    \n\n\n            \n                \n                        Returns a icon based on the provided sort direction\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                            null | NgxTableSortDirection\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided sort direction\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n@Pipe({\n\tname: 'ngxTableSortIcon',\n\tstandalone: true,\n})\nexport class NgxTableSortIconPipe implements PipeTransform {\n\t/**\n\t * Returns a icon based on the provided sort direction\n\t *\n\t * @param direction - The provided sort direction\n\t */\n\tpublic transform(direction: null | NgxTableSortDirection): string {\n\t\tif (!direction) {\n\t\t\treturn '&equiv;';\n\t\t}\n\n\t\treturn direction === NgxTableSortDirection.ASCENDING ? '&uArr;' : '&dArr;';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTableSortTemplateAbstractComponent.html":{"url":"directives/NgxTableSortTemplateAbstractComponent.html","title":"directive - NgxTableSortTemplateAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTableSortTemplateAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                direction\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                direction\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        direction\n                    \n                \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                            \n                        \n                \n                    \n                        The current sort direction the component has to visualize\n\n                    \n                \n            \n        \n\n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        direction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/abstracts/table/sort-template.component.ts:14\n                        \n                    \n\n            \n                \n                    The current sort direction the component has to visualize\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, input, InputSignal} from '@angular/core';\n\nimport { NgxTableSortDirection } from '../../enums';\n\n/**\n * An abstract component provided for the NgxTableComponent, allowing to user to set a default sort template for all tables\n *\n */\n@Directive()\nexport abstract class NgxTableSortTemplateAbstractComponent {\n\t/**\n\t * The current sort direction the component has to visualize\n\t */\n\tpublic direction: InputSignal = input();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToast.html":{"url":"interfaces/NgxToast.html","title":"interface - NgxToast","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToast\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The interface for a toast in the NgxToastService\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            configuration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        configuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        configuration:         NgxToastConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxToastBundlerComponent.html":{"url":"directives/NgxToastBundlerComponent.html","title":"directive - NgxToastBundlerComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxToastBundlerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amount\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                showBundled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        amount\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:16\n                            \n                        \n                \n                    \n                        The amount of toasts that are left and currently not shown\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showBundled\n                        \n                    \n                \n            \n            \n                \n                        \n                    showBundled()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:21\n                        \n                    \n\n\n            \n                \n                        Shows all the toasts that were bundled\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:16\n                        \n                    \n\n            \n                \n                    The amount of toasts that are left and currently not shown\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast-bundler.component.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, inject, input, InputSignal } from '@angular/core';\n\nimport { NgxToastService } from '../../services';\n\n@Directive({\n\thost: {\n\t\t'attr.role': 'alert',\n\t},\n})\nexport abstract class NgxToastBundlerComponent {\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The amount of toasts that are left and currently not shown\n\t */\n\tpublic readonly amount: InputSignal = input.required();\n\n\t/**\n\t * Shows all the toasts that were bundled\n\t */\n\tpublic showBundled(): void {\n\t\tthis.toastService.showBundled();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxToastComponent.html":{"url":"directives/NgxToastComponent.html","title":"directive - NgxToastComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxToastComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/toast/toast.component.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toast\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                close\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                toast\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        toast\n                    \n                \n                \n                    \n                        Type :         InputSignal>\n\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20\n                            \n                        \n                \n                    \n                        The toast we wish to show\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        close\n                        \n                    \n                \n            \n            \n                \n                        \n                    close()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:30\n                        \n                    \n\n\n            \n                \n                        Removes the toast from the DOM after the animation is played\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toast\n                        \n                    \n                \n            \n                \n                    \n                        Type :         InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:20\n                        \n                    \n\n            \n                \n                    The toast we wish to show\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/toast/toast.component.ts:15\n                        \n                    \n\n            \n                \n                    Instance of the toast service\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { AfterViewInit, Directive, inject, input, InputSignal } from '@angular/core';\n\nimport { NgxToastService } from '../../services';\nimport { NgxToast } from '../../types';\n\n@Directive({\n\thost: {\n\t\t'attr.role': 'alert',\n\t},\n})\nexport abstract class NgxToastComponent implements AfterViewInit {\n\t/**\n\t * Instance of the toast service\n\t */\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The toast we wish to show\n\t */\n\tpublic toast: InputSignal> = input.required();\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Mark the toast as rendered so it can auto remove itself if need be\n\t\tthis.toastService.markAsRendered(this.toast());\n\t}\n\n\t/**\n\t * Removes the toast from the DOM after the animation is played\n\t */\n\tpublic close(): void {\n\t\tthis.toastService.removeToast(this.toast());\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastConfiguration.html":{"url":"interfaces/NgxToastConfiguration.html","title":"interface - NgxToastConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration for an individual toast\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasPriority\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoClose:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasPriority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasPriority:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxToastContainerComponent.html":{"url":"components/NgxToastContainerComponent.html","title":"component - NgxToastContainerComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxToastContainerComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n            \n                host\n                {}\n            \n\n\n\n\n\n\n            \n                selector\n                ngx-toast-container\n            \n\n\n            \n                imports\n                \n                            NgComponentOutlet\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./toast-container.component.html\n            \n\n\n\n            \n                styleUrl\n                ./toast-container.component.scss\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bundledComponent\n                            \n                            \n                                    Public\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                hasBundledToasts\n                            \n                            \n                                    Public\n                                toasts\n                            \n                            \n                                    Private\n                                    Readonly\n                                toastService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                setFocus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:52\n                        \n                    \n\n\n            \n                \n                        Set whether the element has focus\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bundledComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.bundledComponent\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:45\n                        \n                    \n\n            \n                \n                    A component that will display the amount of bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastDefaultConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxToastConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:28\n                        \n                    \n\n            \n                \n                    The default configuration provided for the toast\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasBundledToasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.hasBundledToasts\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:40\n                        \n                    \n\n            \n                \n                    Whether there are bundled toasts that aren't currently visible\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : this.toastService.toasts\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:35\n                        \n                    \n\n            \n                \n                    A list of toasts to display\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        toastService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastService\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxToastService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/components/toast-container/toast-container.component.ts:23\n                        \n                    \n\n            \n                \n                    The default configuration required for the toast\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { NgComponentOutlet } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject, Signal, Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent } from '../../abstracts';\nimport { NgxToastService } from '../../services';\nimport { NgxToastConfigurationToken } from '../../tokens';\nimport { NgxToast, NgxToastDefaultConfiguration } from '../../types';\n\n@Component({\n\tselector: 'ngx-toast-container',\n\ttemplateUrl: './toast-container.component.html',\n\tstyleUrl: './toast-container.component.scss',\n\timports: [NgComponentOutlet],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\thost: {\n\t\tclass: 'ngx-toast-container',\n\t},\n})\nexport class NgxToastContainerComponent {\n\t/**\n\t * The default configuration required for the toast\n\t */\n\tprivate readonly toastService: NgxToastService = inject(NgxToastService);\n\n\t/**\n\t * The default configuration provided for the toast\n\t */\n\tpublic readonly configuration: NgxToastDefaultConfiguration = inject(\n\t\tNgxToastConfigurationToken\n\t);\n\n\t/**\n\t * A list of toasts to display\n\t */\n\tpublic toasts: Signal = this.toastService.toasts;\n\n\t/**\n\t * Whether there are bundled toasts that aren't currently visible\n\t */\n\tpublic hasBundledToasts: Signal = this.toastService.hasBundledToasts;\n\n\t/**\n\t * A component that will display the amount of bundled toasts\n\t */\n\tpublic bundledComponent: Type = this.toastService.bundledComponent;\n\n\t/**\n\t * Set whether the element has focus\n\t *\n\t * @param hasFocus\n\t */\n\tpublic setFocus(hasFocus: boolean): void {\n\t\tthis.toastService.setFocus(hasFocus);\n\t}\n}\n\n    \n\n    \n        \n\t@for (toast of toasts(); track toast.id) {\n\t\n\t\t\n\t\n\t} @if(hasBundledToasts()) {\n\t\n\t\t\n\t\n\t}\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\t@for (toast of toasts(); track toast.id) {\t\t\t\t\t} @if(hasBundledToasts()) {\t\t\t\t\t}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxToastContainerComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastDefaultConfiguration.html":{"url":"interfaces/NgxToastDefaultConfiguration.html","title":"interface - NgxToastDefaultConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastDefaultConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration we wish to apply to every toast unless we override it\n\n            \n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxAmount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxTime\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxAmount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxAmount:         NgxToastMaxAmountConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastMaxAmountConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxToastPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToastPosition\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastEvent.html":{"url":"interfaces/NgxToastEvent.html","title":"interface - NgxToastEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                An event for when toasts are shown, updated or removed\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            toast\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        toast\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        toast:         NgxToast\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxToast\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \"add\" | \"remove\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"add\" | \"remove\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountBaseConfiguration.html":{"url":"interfaces/NgxToastMaxAmountBaseConfiguration.html","title":"interface - NgxToastMaxAmountBaseConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountBaseConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The base configuration for a toast setup with a max amount\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            amount\n                                        \n                                \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        amount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        amount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \"wait\" | \"ignore\" | \"bundle\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"wait\" | \"ignore\" | \"bundle\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountBundleConfiguration.html":{"url":"interfaces/NgxToastMaxAmountBundleConfiguration.html","title":"interface - NgxToastMaxAmountBundleConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountBundleConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration for a toast setup with a max amount that need to be bundled\n\n            \n\n            \n                Extends\n            \n            \n                            NgxToastMaxAmountBaseConfiguration\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxToastMaxAmountOtherConfiguration.html":{"url":"interfaces/NgxToastMaxAmountOtherConfiguration.html","title":"interface - NgxToastMaxAmountOtherConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxToastMaxAmountOtherConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/toast.types.ts\n        \n\n\n            \n                Description\n            \n            \n                The base configuration for a toast setup with a max amount that is not bundled\n\n            \n\n            \n                Extends\n            \n            \n                            NgxToastMaxAmountBaseConfiguration\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            strategy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        strategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        strategy:     \"wait\" | \"ignore\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"wait\" | \"ignore\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxToastBundlerComponent, NgxToastComponent } from '../abstracts';\n\n/**\n * The configuration for an individual toast\n */\nexport interface NgxToastConfiguration {\n\tautoClose?: boolean;\n\thasPriority?: boolean;\n\tcomponent?: Type;\n}\n\n/**\n * The position of a toast\n */\nexport type NgxToastPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n\n/**\n * The base configuration for a toast setup with a max amount\n */\ninterface NgxToastMaxAmountBaseConfiguration {\n\tamount: number;\n\tstrategy: 'wait' | 'ignore' | 'bundle';\n}\n\n/**\n * The configuration for a toast setup with a max amount that need to be bundled\n */\ninterface NgxToastMaxAmountBundleConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'bundle';\n\tcomponent: Type;\n}\n\n/**\n * The base configuration for a toast setup with a max amount that is not bundled\n */\ninterface NgxToastMaxAmountOtherConfiguration extends NgxToastMaxAmountBaseConfiguration {\n\tstrategy: 'wait' | 'ignore';\n}\n\n/**\n * The configuration for a toast setup with a max amount\n */\nexport type NgxToastMaxAmountConfiguration =\n\t| NgxToastMaxAmountBundleConfiguration\n\t| NgxToastMaxAmountOtherConfiguration;\n\n/**\n * The configuration we wish to apply to every toast unless we override it\n */\nexport interface NgxToastDefaultConfiguration extends Omit {\n\tcomponent: Type;\n\tposition: NgxToastPosition;\n\tmaxAmount?: NgxToastMaxAmountConfiguration;\n\tmaxTime?: number;\n}\n\n/**\n * The interface for a toast in the NgxToastService\n */\nexport interface NgxToast {\n\tid: string;\n\ttext: string;\n\tdata?: DataType;\n\tconfiguration?: NgxToastConfiguration;\n}\n\n/**\n * The interface needed to create a NgxToast\n */\nexport type NgxToastCreator = Omit, 'id' | 'toBeRemoved'>;\n\n/**\n * An event for when toasts are shown, updated or removed\n */\nexport interface NgxToastEvent {\n\ttoast: NgxToast;\n\ttype: 'add' | 'remove';\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxToastService.html":{"url":"injectables/NgxToastService.html","title":"injectable - NgxToastService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxToastService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/toast/toast.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service that acts as the single source of truth in the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                bundledComponent\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Public\n                                hasBundledToasts\n                            \n                            \n                                    Private\n                                isFocussed\n                            \n                            \n                                    Private\n                                queue$\n                            \n                            \n                                    Private\n                                showBundledToasts$\n                            \n                            \n                                    Private\n                                toastEvents$\n                            \n                            \n                                    Public\n                                toasts\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                markAsRendered\n                            \n                            \n                                    Public\n                                removeToast\n                            \n                            \n                                    Public\n                                setFocus\n                            \n                            \n                                    Public\n                                showBundled\n                            \n                            \n                                    Public\n                                showToast\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:96\n                            \n                        \n\n                \n                    \n                            Creates an instance of NgxToastService.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        markAsRendered\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAsRendered(toast: NgxToast)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:222\n                        \n                    \n\n\n            \n                \n                        Mark the toast as rendered, so that we can automatically remove it if needed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                toast\n                                            \n                                                            NgxToast\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe toast we wish to remove if needed\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeToast\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToast(toast: NgxToast)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Removes a toast based on the provided id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                toast\n                                            \n                                                            NgxToast\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe toast we wish to remove\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus(hasFocus: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:213\n                        \n                    \n\n\n            \n                \n                        Sets whether the list of toasts is currently being focussed on by the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hasFocus\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether or not it is being focussed\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showBundled\n                        \n                    \n                \n            \n            \n                \n                        \n                    showBundled()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:243\n                        \n                    \n\n\n            \n                \n                        Shows the bundled toasts in case there are\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showToast\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToast(data: NgxToastCreator | string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:155\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    DataType\n                            \n                        \n                    \n\n            \n                \n                        Displays a provided toast and returns the generated id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            NgxToastCreator | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data needed for the toast\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxToast\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        bundledComponent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Type\n\n                    \n                \n                \n                    \n                        Default value : this.configuration?.maxAmount?.['component']\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:95\n                        \n                    \n\n            \n                \n                    The component used to represent the bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxToastDefaultConfiguration\n\n                    \n                \n                \n                    \n                        Default value : inject(\n\t\tNgxToastConfigurationToken\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:37\n                        \n                    \n\n            \n                \n                    The default configuration required for the toast\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasBundledToasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Signal\n\n                    \n                \n                \n                    \n                        Default value : computed(() => {\n\t\tif (!this.configuration.maxAmount || this.configuration.maxAmount.strategy !== 'bundle') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.queue$.getValue().length - this.toasts().length;\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:84\n                        \n                    \n\n            \n                \n                    The amount of bundled toasts there are\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isFocussed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:59\n                        \n                    \n\n            \n                \n                    Whether the list of all toasts is focussed upon, either by focus or by hover\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        queue$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject([])\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:44\n                        \n                    \n\n            \n                \n                    The queue with all the toasts in it\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showBundledToasts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:54\n                        \n                    \n\n            \n                \n                    Whether we want to show the bundled toasts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toastEvents$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:49\n                        \n                    \n\n            \n                \n                    The toast event handler that will handle updates to the queue\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        toasts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Signal\n\n                    \n                \n                \n                    \n                        Default value : toSignal(\n\t\tcombineLatest([this.queue$, this.showBundledToasts$]).pipe(\n\t\t\tmap(([toasts, showBundled]) => {\n\t\t\t\t// Iben: Prevent duplicates\n\t\t\t\tconst result = uniqBy(toasts, (item) => item.id) || [];\n\n\t\t\t\t// Iben: If there is no max amount, we return the toasts as is\n\t\t\t\tif (!this.configuration.maxAmount || showBundled) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If the there is a max amount, we return the limited list\n\t\t\t\treturn result.slice(0, this.configuration.maxAmount.amount);\n\t\t\t})\n\t\t)\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/toast/toast.service.ts:64\n                        \n                    \n\n            \n                \n                    A list of all the currently visible toasts\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { computed, inject, Injectable, Signal, Type } from '@angular/core';\nimport { takeUntilDestroyed, toSignal } from '@angular/core/rxjs-interop';\nimport { uniqBy } from 'lodash';\nimport {\n\tBehaviorSubject,\n\tcombineLatest,\n\tconcatMap,\n\tdistinctUntilChanged,\n\tfilter,\n\tmap,\n\tof,\n\tSubject,\n\ttap,\n\twithLatestFrom,\n} from 'rxjs';\nimport { v7 as uuid } from 'uuid';\n\nimport { NgxToastBundlerComponent } from '../../abstracts';\nimport { NgxToastConfigurationToken } from '../../tokens';\nimport {\n\tNgxToast,\n\tNgxToastCreator,\n\tNgxToastDefaultConfiguration,\n\tNgxToastEvent,\n} from '../../types/toast.types';\n\n/**\n * A service that acts as the single source of truth in the application\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxToastService {\n\t/**\n\t * The default configuration required for the toast\n\t */\n\tprivate readonly configuration: NgxToastDefaultConfiguration = inject(\n\t\tNgxToastConfigurationToken\n\t);\n\n\t/**\n\t * The queue with all the toasts in it\n\t */\n\tprivate queue$: BehaviorSubject = new BehaviorSubject([]);\n\n\t/**\n\t * The toast event handler that will handle updates to the queue\n\t */\n\tprivate toastEvents$: Subject = new Subject();\n\n\t/**\n\t * Whether we want to show the bundled toasts\n\t */\n\tprivate showBundledToasts$: BehaviorSubject = new BehaviorSubject(false);\n\n\t/**\n\t * Whether the list of all toasts is focussed upon, either by focus or by hover\n\t */\n\tprivate isFocussed: boolean = false;\n\n\t/**\n\t * A list of all the currently visible toasts\n\t */\n\tpublic toasts: Signal = toSignal(\n\t\tcombineLatest([this.queue$, this.showBundledToasts$]).pipe(\n\t\t\tmap(([toasts, showBundled]) => {\n\t\t\t\t// Iben: Prevent duplicates\n\t\t\t\tconst result = uniqBy(toasts, (item) => item.id) || [];\n\n\t\t\t\t// Iben: If there is no max amount, we return the toasts as is\n\t\t\t\tif (!this.configuration.maxAmount || showBundled) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Iben: If the there is a max amount, we return the limited list\n\t\t\t\treturn result.slice(0, this.configuration.maxAmount.amount);\n\t\t\t})\n\t\t)\n\t);\n\n\t/**\n\t * The amount of bundled toasts there are\n\t */\n\tpublic hasBundledToasts: Signal = computed(() => {\n\t\tif (!this.configuration.maxAmount || this.configuration.maxAmount.strategy !== 'bundle') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this.queue$.getValue().length - this.toasts().length;\n\t});\n\n\t/**\n\t * The component used to represent the bundled toasts\n\t */\n\tpublic bundledComponent: Type =\n\t\tthis.configuration?.maxAmount?.['component'];\n\n\t/**\n\t * Creates an instance of NgxToastService.\n\t */\n\tconstructor() {\n\t\t// Iben: Subscribe to the toast events\n\t\tthis.toastEvents$\n\t\t\t.pipe(\n\t\t\t\t// Iben: Concatmap all the events so we will handle them one by one\n\t\t\t\tconcatMap((event) => {\n\t\t\t\t\t// Iben: Get the latest version of the queue\n\t\t\t\t\treturn of(event).pipe(\n\t\t\t\t\t\twithLatestFrom(this.queue$),\n\t\t\t\t\t\ttap(([{ toast, type }, queue]) => {\n\t\t\t\t\t\t\t// Iben: If we need to add the item to the queue, we add it based on its priority\n\t\t\t\t\t\t\tif (type === 'add') {\n\t\t\t\t\t\t\t\tthis.queue$.next(\n\t\t\t\t\t\t\t\t\ttoast.configuration?.hasPriority\n\t\t\t\t\t\t\t\t\t\t? [toast, ...queue]\n\t\t\t\t\t\t\t\t\t\t: [...queue, toast]\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Iben: Get the index of the toast we need to update or remove\n\t\t\t\t\t\t\tconst index = queue.findIndex(({ id }) => id === toast.id);\n\n\t\t\t\t\t\t\t// Iben: Remove the toast when needed\n\t\t\t\t\t\t\tthis.queue$.next([...queue.slice(0, index), ...queue.slice(index + 1)]);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t/**\n\t\t * Listens to the amount of items in the queue and resets the showBundledToasts accordingly\n\t\t */\n\t\tthis.queue$\n\t\t\t.pipe(\n\t\t\t\tmap((toasts) => toasts.length),\n\t\t\t\tdistinctUntilChanged(),\n\t\t\t\tfilter((length) => !length),\n\t\t\t\ttap(() => {\n\t\t\t\t\tthis.showBundledToasts$.next(false);\n\t\t\t\t}),\n\t\t\t\ttakeUntilDestroyed()\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Displays a provided toast and returns the generated id\n\t *\n\t * @param data - The data needed for the toast\n\t */\n\tpublic showToast(\n\t\tdata: NgxToastCreator | string\n\t): NgxToast {\n\t\t// Iben: Early exit if we reached\n\t\tif (\n\t\t\tthis.configuration.maxAmount &&\n\t\t\tthis.queue$.getValue().length === this.configuration.maxAmount.amount &&\n\t\t\tthis.configuration.maxAmount.strategy === 'ignore'\n\t\t) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Iben: Generate an id for the toast\n\t\tconst id = uuid();\n\t\tconst toast = { ...(typeof data === 'string' ? { text: data } : data), id };\n\n\t\t// Iben: Add the toast to the toast list\n\t\tthis.toastEvents$.next({\n\t\t\ttype: 'add',\n\t\t\ttoast: toast,\n\t\t});\n\n\t\t// Iben: Return the toast\n\t\treturn toast;\n\t}\n\n\t/**\n\t * Removes a toast based on the provided id\n\t *\n\t * @param toast - The toast we wish to remove\n\t */\n\tpublic removeToast(toast: NgxToast): void {\n\t\t// Iben: If the toast is no longer in the queue, because it was removed by the end user, we early exit\n\t\tif (!this.queue$.getValue().find(({ id }) => toast.id === id)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the toast list is currently being focussed on, we try again within 5 seconds\n\t\tif (this.isFocussed && (this.configuration.autoClose || toast.configuration?.autoClose)) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.removeToast(toast);\n\t\t\t}, 5000);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: If the toast list isn't focussed on, we remove it from the dom\n\t\tthis.toastEvents$.next({\n\t\t\ttoast,\n\t\t\ttype: 'remove',\n\t\t});\n\t}\n\n\t/**\n\t * Sets whether the list of toasts is currently being focussed on by the user\n\t *\n\t * @param hasFocus - Whether or not it is being focussed\n\t */\n\tpublic setFocus(hasFocus: boolean) {\n\t\tthis.isFocussed = hasFocus;\n\t}\n\n\t/**\n\t * Mark the toast as rendered, so that we can automatically remove it if needed\n\t *\n\t * @param toast - The toast we wish to remove if needed\n\t */\n\tpublic markAsRendered(toast: NgxToast): void {\n\t\t// Iben: If the toast isn't currently visible, we early exit\n\t\tif (!this.toasts().find(({ id }) => toast.id === id)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Check if we need to autoclose the toast and close it if it is set to true\n\t\tconst autoClose = toast.configuration?.autoClose || this.configuration.autoClose;\n\n\t\tif (autoClose === true || autoClose === undefined) {\n\t\t\tconst maxTime = this.configuration.maxTime || 5000;\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.removeToast(toast);\n\t\t\t}, maxTime);\n\t\t}\n\t}\n\n\t/**\n\t * Shows the bundled toasts in case there are\n\t */\n\tpublic showBundled(): void {\n\t\t// Iben: If the maxAmount strategy isn't bundle, we early exit as this method is then irrelevant\n\t\tif (this.configuration.maxAmount?.strategy !== 'bundle') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.showBundledToasts$.next(true);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipAbstractComponent.html":{"url":"directives/NgxTooltipAbstractComponent.html","title":"directive - NgxTooltipAbstractComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipAbstractComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract for the NgxTooltipDirective\n\n            \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                id\n                            \n                            \n                                    Private\n                                    Readonly\n                                ngxTooltipService\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    Public\n                                    Readonly\n                                positionClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                text\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                position\n                            \n                            \n                                positionClass\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        id\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                            \n                        \n                \n                    \n                        The id of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        position\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                            \n                        \n                \n                    \n                        The current position of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        positionClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                            \n                        \n                \n                    \n                        The position class of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        text\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                \n            \n\n\n            \n                \n                    Set tooltip as active\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                \n            \n\n\n            \n                \n                    Set the tooltip as inactive\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Set the tooltip as inactive\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Set tooltip as active\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        id\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:55\n                        \n                    \n\n            \n                \n                    The id of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        ngxTooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:60\n                        \n                    \n\n            \n                \n                    The current position of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        positionClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:47\n                        \n                    \n\n            \n                \n                    The position class of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        text\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tooltip/tooltip.abstract.component.ts:65\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostListener, inject, input } from '@angular/core';\n\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition, NgxTooltipPositionClass } from '../../types';\n\n/**\n * An abstract for the NgxTooltipDirective\n */\n@Directive({\n\thost: {\n\t\tid: 'id()',\n    class: 'positionClass()',\n    'attr.role': 'tooltip'\n\t},\n})\nexport abstract class NgxTooltipAbstractComponent {\n\tprivate readonly ngxTooltipService = inject(NgxTooltipService);\n\n\t/**\n\t * Set tooltip as active\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Set the tooltip as inactive\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.ngxTooltipService.setToolTipEvent({\n\t\t\tid: this.id(),\n\t\t\tsource: 'tooltip',\n\t\t\tactive: false,\n\t\t});\n\t}\n\n\t/**\n\t * The position class of the tooltip\n\t */\n\t/**\n\t * The position class of the tooltip\n\t */\n\tpublic readonly positionClass = input();\n\n\t/**\n\t * The id of the tooltip\n\t */\n\t/**\n\t * The id of the tooltip\n\t */\n\tpublic readonly id = input.required();\n\n\t/**\n\t * The current position of the tooltip\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly text = input.required();\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveElementEvent.html":{"url":"interfaces/NgxTooltipActiveElementEvent.html","title":"interface - NgxTooltipActiveElementEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveElementEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipActiveTooltipEvent.html":{"url":"interfaces/NgxTooltipActiveTooltipEvent.html","title":"interface - NgxTooltipActiveTooltipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipActiveTooltipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipBaseEvent.html":{"url":"interfaces/NgxTooltipBaseEvent.html","title":"interface - NgxTooltipBaseEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipBaseEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:     \"tooltip\" | \"element\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"tooltip\" | \"element\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipConfiguration.html":{"url":"interfaces/NgxTooltipConfiguration.html","title":"interface - NgxTooltipConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultPosition\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultPosition:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTooltipDirective.html":{"url":"directives/NgxTooltipDirective.html","title":"directive - NgxTooltipDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTooltipDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive that adds a ARIA compliant tooltip to a component\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTooltip]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltip\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipComponent\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipDisabled\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipId\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTooltipPosition\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onEscape\n                            \n                            \n                                    \n                                removeOnBlur\n                            \n                            \n                                    \n                                removeOnMouseOut\n                            \n                            \n                                    Private\n                                removeTooltip\n                            \n                            \n                                    \n                                showOnFocus\n                            \n                            \n                                    \n                                showOnMouseEnter\n                            \n                            \n                                    Private\n                                showTooltip\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTooltip\n                            \n                            \n                                ngxTooltipDisabled\n                            \n                            \n                                ngxTooltipPosition\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                blur\n                            \n                            \n                                document:keydown.escape\n                            \n                            \n                                focus\n                            \n                            \n                                mouseenter\n                            \n                            \n                                mouseleave\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTooltip\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                            \n                        \n                \n                    \n                        The text of the tooltip\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipDisabled\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                            \n                        \n                \n                    \n                        Prevent the tooltip from being shown, by default this is false.\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTooltipPosition\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                            \n                        \n                \n                    \n                        An optional position we can pass to tooltip, by default this is 'above'.\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                \n            \n\n\n            \n                \n                    Remove the tooltip on blur\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                \n            \n\n\n            \n                \n                    Remove the tooltip on escape pressed\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                \n            \n\n\n            \n                \n                    Show the tooltip on focus\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseenter\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                \n            \n\n\n            \n                \n                    Show the tooltip on hover\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseleave\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                \n            \n\n\n            \n                \n                    Remove the tooltip on leaving hover\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:57\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnBlur\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnBlur()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:50\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on blur\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeOnMouseOut\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeOnMouseOut()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseleave')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:43\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip on leaving hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        removeTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:114\n                        \n                    \n\n\n            \n                \n                        Remove the tooltip\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:36\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on focus\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        showOnMouseEnter\n                        \n                    \n                \n            \n            \n                \n                        \n                    showOnMouseEnter()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseenter')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:29\n                        \n                    \n\n\n            \n                \n                        Show the tooltip on hover\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showTooltip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showTooltip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:93\n                        \n                    \n\n\n            \n                \n                        Show the tooltip if it is not visible yet\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltip\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:72\n                        \n                    \n\n            \n                \n                    The text of the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipComponent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input>()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:77\n                        \n                    \n\n            \n                \n                    An optional component we can pass to replace the default configured component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:88\n                        \n                    \n\n            \n                \n                    Prevent the tooltip from being shown, by default this is false.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input(uuid())\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:67\n                        \n                    \n\n            \n                \n                    The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTooltipPosition\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:83\n                        \n                    \n\n            \n                \n                    An optional position we can pass to tooltip, by default this is 'above'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tooltip/tooltip.directive.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, Type, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTooltipAbstractComponent } from '../../abstracts';\nimport { NgxTooltipService } from '../../services';\nimport { NgxTooltipPosition } from '../../types';\n\n/**\n * A directive that adds a ARIA compliant tooltip to a component\n *\n * @export\n * @class NgxTooltipDirective\n */\n@Directive({\n\tselector: '[ngxTooltip]',\n\tstandalone: true,\n\thost: {\n\t\t'[attr.aria-describedby]': 'ngxTooltipId()',\n\t\ttabIndex: '0',\n\t},\n})\nexport class NgxTooltipDirective {\n\tprivate readonly tooltipService = inject(NgxTooltipService);\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * Show the tooltip on hover\n\t */\n\t@HostListener('mouseenter') showOnMouseEnter() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Show the tooltip on focus\n\t */\n\t@HostListener('focus') showOnFocus() {\n\t\tthis.showTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on leaving hover\n\t */\n\t@HostListener('mouseleave') removeOnMouseOut() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on blur\n\t */\n\t@HostListener('blur') removeOnBlur() {\n\t\tthis.removeTooltip();\n\t}\n\n\t/**\n\t * Remove the tooltip on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') onEscape() {\n\t\tthis.tooltipService.removeToolTip();\n\t}\n\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\t/**\n\t * The id of the tooltip, unique in the DOM, required for accessibility. By default, this is an autogenerated UUID.\n\t */\n\tpublic readonly ngxTooltipId = input(uuid());\n\n\t/**\n\t * The text of the tooltip\n\t */\n\tpublic readonly ngxTooltip = input.required();\n\n\t/**\n\t * An optional component we can pass to replace the default configured component\n\t */\n\tpublic readonly ngxTooltipComponent = input>();\n\n\t/**\n\t * An optional position we can pass to tooltip, by default this is 'above'.\n\t */\n\t// Iben: The default is set in the NgxTooltipService\n\tpublic readonly ngxTooltipPosition = input();\n\n\t/**\n\t * Prevent the tooltip from being shown, by default this is false.\n\t */\n\tpublic readonly ngxTooltipDisabled = input(false);\n\n\t/**\n\t * Show the tooltip if it is not visible yet\n\t */\n\tprivate showTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Show the tooltip\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\ttext: this.ngxTooltip(),\n\t\t\tposition: this.ngxTooltipPosition(),\n\t\t\tcomponent: this.ngxTooltipComponent(),\n\t\t\telementRef: this.elementRef,\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: true,\n\t\t});\n\t}\n\n\t/**\n\t * Remove the tooltip\n\t */\n\tprivate removeTooltip(): void {\n\t\t// Iben: Early exit when the tooltip is disabled\n\t\tif (this.ngxTooltipDisabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Emit a remove event\n\t\tthis.tooltipService.setToolTipEvent({\n\t\t\tid: this.ngxTooltipId(),\n\t\t\tsource: 'element',\n\t\t\tactive: false,\n\t\t});\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipInactiveEvent.html":{"url":"interfaces/NgxTooltipInactiveEvent.html","title":"interface - NgxTooltipInactiveEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipInactiveEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxTooltipBaseEvent\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTooltipItem.html":{"url":"interfaces/NgxTooltipItem.html","title":"interface - NgxTooltipItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTooltipItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tooltip.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            elementRef\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        elementRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        elementRef:     ElementRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ElementRef\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTooltipPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTooltipPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ElementRef, Type } from '@angular/core';\n\nimport { NgxTooltipAbstractComponent } from '../abstracts';\n\nexport type NgxTooltipPosition = 'above' | 'below' | 'left' | 'right';\n\nexport type NgxTooltipPositionClass = `ngx-tooltip-position-${NgxTooltipPosition}`;\n\nexport interface NgxTooltipConfiguration {\n\tcomponent: Type;\n\tdefaultPosition?: NgxTooltipPosition;\n}\n\nexport interface NgxTooltipItem {\n\ttext: string;\n\tid: string;\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n}\n\ninterface NgxTooltipBaseEvent {\n\tsource: 'tooltip' | 'element';\n\tid: string;\n\tactive: boolean;\n}\ninterface NgxTooltipInactiveEvent extends NgxTooltipBaseEvent {\n\tactive: false;\n}\ninterface NgxTooltipActiveElementEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'element';\n\telementRef: ElementRef;\n\tcomponent?: Type;\n\tposition?: NgxTooltipPosition;\n\ttext: string;\n}\n\ninterface NgxTooltipActiveTooltipEvent extends NgxTooltipBaseEvent {\n\tactive: true;\n\tsource: 'tooltip';\n}\n\nexport type NgxTooltipEvent =\n\t| NgxTooltipInactiveEvent\n\t| NgxTooltipActiveElementEvent\n\t| NgxTooltipActiveTooltipEvent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxTooltipService.html":{"url":"injectables/NgxTooltipService.html","title":"injectable - NgxTooltipService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxTooltipService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeTooltip\n                            \n                            \n                                    Private\n                                    Readonly\n                                configuration\n                            \n                            \n                                    Private\n                                    Readonly\n                                onDestroySubject\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayPositionBuilder\n                            \n                            \n                                    Private\n                                overlayRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                overlayService\n                            \n                            \n                                    Private\n                                    Readonly\n                                positionRecord\n                            \n                            \n                                    Private\n                                    Readonly\n                                tooltipEventsSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                removeToolTip\n                            \n                            \n                                    Public\n                                setToolTipEvent\n                            \n                            \n                                    Public\n                                showToolTip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:54\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Emit the destroy event\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeToolTip()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:169\n                        \n                    \n\n\n            \n                \n                        Removes the tooltip.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setToolTipEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    setToolTipEvent(event: NgxTooltipEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Dispatches the tooltip event to the subject\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NgxTooltipEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA tooltip event\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        showToolTip\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToolTip(tooltip: NgxTooltipItem)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Show a tooltip\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tooltip\n                                            \n                                                            NgxTooltipItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe configuration of the tooltip\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        activeTooltip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : undefined\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTooltipConfigurationToken)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        onDestroySubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:39\n                        \n                    \n\n            \n                \n                    A subject to hold the destroy event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayPositionBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(OverlayPositionBuilder)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OverlayRef\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:44\n                        \n                    \n\n            \n                \n                    The overlayRef used to attach the tooltip too\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        overlayService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        positionRecord\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t}\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:49\n                        \n                    \n\n            \n                \n                    The position record for the tooltip\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tooltipEventsSubject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(undefined)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/services/tooltip/tooltip.service.ts:33\n                        \n                    \n\n            \n                \n                    A subject to hold the tooltip events\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n\tConnectedPosition,\n\tOverlay,\n\tOverlayPositionBuilder,\n\tOverlayRef,\n} from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Injectable, OnDestroy, inject } from '@angular/core';\nimport { BehaviorSubject, pairwise, Subject, takeUntil, tap } from 'rxjs';\n\nimport { NgxTooltipConfigurationToken } from '../../tokens';\nimport {\n\tNgxTooltipConfiguration,\n\tNgxTooltipEvent,\n\tNgxTooltipItem,\n\tNgxTooltipPosition,\n} from '../../types';\n\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxTooltipService implements OnDestroy {\n\tprivate readonly configuration = inject(NgxTooltipConfigurationToken);\n\tprivate readonly overlayService = inject(Overlay);\n\tprivate readonly overlayPositionBuilder = inject(OverlayPositionBuilder);\n\n\t// Iben: The id of the active tooltip\n\tprivate activeTooltip: string = undefined;\n\n\t/**\n\t * A subject to hold the tooltip events\n\t */\n\tprivate readonly tooltipEventsSubject: BehaviorSubject =\n\t\tnew BehaviorSubject(undefined);\n\n\t/**\n\t * A subject to hold the destroy event\n\t */\n\tprivate readonly onDestroySubject: Subject = new Subject();\n\n\t/**\n\t * The overlayRef used to attach the tooltip too\n\t */\n\tprivate overlayRef: OverlayRef;\n\n\t/**\n\t * The position record for the tooltip\n\t */\n\tprivate readonly positionRecord: Record = {\n\t\tbelow: { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n\t\tabove: { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },\n\t\tleft: { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },\n\t\tright: { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },\n\t};\n\n\tconstructor() {\n\t\t// Iben: Listen to the tooltip events and handle accordingly\n\t\tthis.tooltipEventsSubject\n\t\t\t.pipe(\n\t\t\t\tpairwise(),\n\t\t\t\ttap(([previous, next]) => {\n\t\t\t\t\t// Iben: When we enter an element, we show the tooltip\n\t\t\t\t\tif (next.active && next.source === 'element') {\n\t\t\t\t\t\t// Iben: Check if we have a previous element, and if so, if we have to remove it\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tprevious &&\n\t\t\t\t\t\t\tthis.overlayRef?.hasAttached() &&\n\t\t\t\t\t\t\tthis.activeTooltip !== next.id\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Iben: Add the new tooltip\n\t\t\t\t\t\tconst { component, text, position, elementRef, id } = next;\n\n\t\t\t\t\t\tthis.showToolTip({\n\t\t\t\t\t\t\tcomponent: component,\n\t\t\t\t\t\t\ttext: text,\n\t\t\t\t\t\t\tposition: position,\n\t\t\t\t\t\t\telementRef: elementRef,\n\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: We do a check on previous here so we can continue safely in the upcoming checks\n\t\t\t\t\tif (!previous) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If we're entering a new element, we early exit\n\t\t\t\t\tif (previous.id !== next.id) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If the sources are the same, we check if we need to remove the tooltip\n\t\t\t\t\t// In this case we either leave the tooltip or leave the element\n\t\t\t\t\tif (previous.source === next.source) {\n\t\t\t\t\t\tif (!next.active) {\n\t\t\t\t\t\t\tthis.removeToolTip();\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Iben: If both actives are false (element => tooltip => outside or tooltip => element => outside), we remove the tooltip\n\t\t\t\t\tif (!next.active && !previous.active) {\n\t\t\t\t\t\tthis.removeToolTip();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.onDestroySubject.asObservable())\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Show a tooltip\n\t *\n\t * @param tooltip - The configuration of the tooltip\n\t */\n\tpublic showToolTip(tooltip: NgxTooltipItem): void {\n\t\t// Iben: If no tooltip was provided or if we already have a tooltip attached, we early exit\n\t\tif (!tooltip || this.overlayRef?.hasAttached()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Get the configuration of the tooltip\n\t\tconst { text, component, position, elementRef, id } = tooltip;\n\n\t\t// Iben: Set the active tooltip\n\t\tthis.activeTooltip = id;\n\n\t\t// Iben: Get the tooltip position. If no position was provided by the tooltip, we use the configured default, if none is configured we use 'above'\n\t\tconst tooltipPosition = position || this.configuration.defaultPosition || 'above';\n\n\t\t// Iben: If the previous overlayRef still exists, we remove it\n\t\tif (!this.overlayRef) {\n\t\t\tthis.overlayRef = this.overlayService.create({\n\t\t\t\t// Iben: Set the scroll strategy to reposition so that whenever the user scrolls, the tooltip is still near the element\n\t\t\t\tscrollStrategy: this.overlayService.scrollStrategies.reposition(),\n\t\t\t});\n\t\t}\n\n\t\t// Iben: Create the position of the overlay\n\t\tconst positionStrategy = this.overlayPositionBuilder\n\t\t\t.flexibleConnectedTo(elementRef)\n\t\t\t.withPositions([this.positionRecord[tooltipPosition]]);\n\n\t\t// Iben: Update the position of the current overlayRef\n\t\tthis.overlayRef.updatePositionStrategy(positionStrategy);\n\n\t\t// Iben: Create a new component portal\n\t\tconst tooltipPortal = new ComponentPortal(component || this.configuration.component);\n\n\t\t// Iben: Attach the tooltipPortal to the overlayRef\n    const tooltipRef = this.overlayRef.attach( tooltipPortal );\n\n\t\t// Iben: Pass the data to the component\n\t\ttooltipRef.setInput('text', text);\n\t\ttooltipRef.setInput('position', tooltipPosition);\n\t\ttooltipRef.setInput('positionClass', `ngx-tooltip-position-${tooltipPosition}`);\n\t\ttooltipRef.setInput('id', id);\n\t}\n\n\t/**\n\t * Removes the tooltip.\n\t */\n\tpublic removeToolTip(): void {\n\t\tif (this.activeTooltip) {\n\t\t\t// Iben: Unset the active tooltip\n\t\t\tthis.activeTooltip = undefined;\n\n\t\t\t// Iben: Remove the active tooltip from view\n\t\t\tthis.overlayRef.detach();\n\t\t}\n\t}\n\n\t/**\n\t * Dispatches the tooltip event to the subject\n\t *\n\t * @param event - A tooltip event\n\t */\n\tpublic setToolTipEvent(event: NgxTooltipEvent): void {\n\t\t// Iben: We add a delay so that the user can navigate between the tooltip and the element\n\t\tsetTimeout(\n\t\t\t() => {\n\t\t\t\tthis.tooltipEventsSubject.next(event);\n\t\t\t},\n\t\t\tevent.active ? 0 : 100\n\t\t);\n\t}\n\n\t/**\n\t * Emit the destroy event\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tthis.onDestroySubject.next();\n\t\tthis.onDestroySubject.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourBackdropClipEvent.html":{"url":"interfaces/NgxTourBackdropClipEvent.html","title":"interface - NgxTourBackdropClipEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourBackdropClipEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backdrop\n                                        \n                                \n                                \n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backdrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backdrop:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        item:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourItemDirective.html":{"url":"directives/NgxTourItemDirective.html","title":"directive - NgxTourItemDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourItemDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A directive to mark elements in the DOM to be highlighted during a tour\n\n            \n\n\n            \n                Implements\n            \n            \n                        AfterViewInit\n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [tourItem]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                cdRef\n                            \n                            \n                                    Readonly\n                                elementRef\n                            \n                            \n                                    \n                                    Public\n                                isActive\n                            \n                            \n                                    Public\n                                    Readonly\n                                tourItem\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Public\n                                setActive\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                tourItem\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class.ngx-tour-item-active\n                            \n                        \n                    \n                \n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    elementId\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        tourItem\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                            \n                        \n                \n                    \n                        The id of the item that corresponds with the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class.ngx-tour-item-active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:58\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        setActive\n                        \n                    \n                \n            \n            \n                \n                        \n                    setActive(isActive: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:33\n                        \n                    \n\n\n            \n                \n                        Mark an element as active or inactive\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isActive\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether or not the element should be active\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ChangeDetectorRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject>(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class.ngx-tour-item-active')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:21\n                        \n                    \n\n            \n                \n                    A class added to the currently active item\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        tourItem\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:26\n                        \n                    \n\n            \n                \n                    The id of the item that corresponds with the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n\n                \n                    \n                        getelementId()\n                    \n                \n                            \n                                \n                                    Defined in libs/angular/inform/src/lib/directives/tour-item/tour-item.directive.ts:44\n                                \n                            \n                    \n                        \n                                Returns the id of the element. Uses for the aria-details on the tour-item component\n\n\n                                \n                                    Returns :         string\n\n                                \n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Directive, ElementRef, HostBinding, OnDestroy, inject, input } from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\n\n/**\n * A directive to mark elements in the DOM to be highlighted during a tour\n */\n@Directive({\n\tselector: '[tourItem]',\n  standalone: true,\n})\nexport class NgxTourItemDirective implements AfterViewInit, OnDestroy {\n\treadonly elementRef = inject>(ElementRef);\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate readonly cdRef = inject(ChangeDetectorRef);\n\n\t/**\n\t * A class added to the currently active item\n\t */\n\t@HostBinding('class.ngx-tour-item-active') public isActive: boolean = false;\n\n\t/**\n\t * The id of the item that corresponds with the step\n\t */\n\tpublic readonly tourItem = input();\n\n\t/**\n\t * Mark an element as active or inactive\n\t *\n\t * @param isActive - Whether or not the element should be active\n\t */\n\tpublic setActive(isActive: boolean): void {\n\t\t// Iben: Mark the current item as active or inactive\n\t\tthis.isActive = isActive;\n\n\t\t// Iben: Detect the changes on the component\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Returns the id of the element. Uses for the `aria-details` on the tour-item component\n\t */\n\tpublic get elementId(): string {\n\t\treturn this.elementRef.nativeElement.getAttribute('id');\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: Register the element when rendered\n\t\tthis.tourService.registerElement(this);\n\n\t\t// Iben: Check if the element has an id, if not, give it a new id for accessibility\n\t\tif (!this.elementRef.nativeElement.getAttribute('id')) {\n\t\t\tthis.elementRef.nativeElement.setAttribute('id', uuid());\n\t\t}\n\t}\n\n\tpublic ngOnDestroy(): void {\n\t\t// Iben: Unregister the element when the element gets destroyed\n\t\tthis.tourService.unregisterElement(this.tourItem());\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourRouteOptions.html":{"url":"interfaces/NgxTourRouteOptions.html","title":"interface - NgxTourRouteOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourRouteOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            extras\n                                        \n                                \n                                \n                                        \n                                            route\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        extras\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extras:     NavigationExtras\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NavigationExtras\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        route\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        route:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourShowWhenDirective.html":{"url":"directives/NgxTourShowWhenDirective.html","title":"directive - NgxTourShowWhenDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourShowWhenDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                \nA directive that will render a part of the template based on the condition and the currently active tour\n\nBased upon *ngIf. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnDestroy\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTourShowWhen]\n                    \n\n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                destroyed$\n                            \n                            \n                                    Private\n                                elseTemplateRef\n                            \n                            \n                                    Private\n                                elseViewRef\n                            \n                            \n                                    Public\n                                ngxTourShowWhen\n                            \n                            \n                                    Public\n                                ngxTourShowWhenElse\n                            \n                            \n                                    Private\n                                thenTemplateRef\n                            \n                            \n                                    Private\n                                thenViewRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                            \n                                    Private\n                                viewContainer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dispose\n                            \n                            \n                                    Public\n                                ngOnDestroy\n                            \n                            \n                                    Private\n                                updateView\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTourShowWhen\n                            \n                            \n                                ngxTourShowWhenElse\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                            \n                        \n\n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTourShowWhen\n                    \n                \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                            \n                        \n                \n                    \n                        Under which condition the item should be shown whilst the tour is active\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTourShowWhenElse\n                    \n                \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                            \n                        \n                \n                    \n                        The else template in case the condition is not matched\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        dispose\n                        \n                    \n                \n            \n            \n                \n                        \n                    dispose()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:123\n                        \n                    \n\n\n            \n                \n                        Dispose the current subscription\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateView\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateView()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:74\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        destroyed$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:32\n                        \n                    \n\n            \n                \n                    The destroyed state of the directive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        elseViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhen\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:63\n                        \n                    \n\n            \n                \n                    Under which condition the item should be shown whilst the tour is active\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngxTourShowWhenElse\n                        \n                    \n                \n            \n                \n                    \n                        Type :     InputSignal>\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:68\n                        \n                    \n\n            \n                \n                    The else template in case the condition is not matched\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenTemplateRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TemplateRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:37\n                        \n                    \n\n            \n                \n                    The needed templateRefs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        thenViewRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     EmbeddedViewRef | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        viewContainer\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ViewContainerRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/directives/tour-show-when/tour-show-when.directive.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tDirective,\n\tEmbeddedViewRef,\n\tInputSignal,\n\tOnDestroy,\n\tTemplateRef,\n\tViewContainerRef,\n\teffect,\n\tinject,\n\tinput,\n} from '@angular/core';\nimport { combineLatest, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\n\nimport { NgxTourService } from '../../services';\n\n/**\n *  * A directive that will render a part of the template based on the condition and the currently active tour\n *\n * Based upon `*ngIf`. See https://github.com/angular/angular/blob/master/packages/common/src/directives/ng_if.ts\n */\n@Directive({\n\tselector: '[ngxTourShowWhen]',\n})\nexport class NgxTourShowWhenDirective implements OnDestroy {\n\tprivate readonly tourService = inject(NgxTourService);\n\tprivate viewContainer = inject(ViewContainerRef);\n\n\t/**\n\t * The destroyed state of the directive\n\t */\n\tprivate destroyed$: Subject;\n\n\t/**\n\t * The needed templateRefs\n\t */\n\tprivate thenTemplateRef: TemplateRef | null = null;\n\tprivate thenViewRef: EmbeddedViewRef | null = null;\n\tprivate elseTemplateRef: TemplateRef | null = null;\n\tprivate elseViewRef: EmbeddedViewRef | null = null;\n\n\tconstructor() {\n\t\tconst templateRef = inject>(TemplateRef);\n\n\t\tthis.thenTemplateRef = templateRef;\n\n\t\teffect(() => {\n\t\t\tif (this.ngxTourShowWhen()) {\n\t\t\t\tthis.updateView();\n\t\t\t}\n\t\t});\n\n\t\teffect(() => {\n\t\t\tthis.elseTemplateRef = this.ngxTourShowWhenElse();\n\t\t\tthis.elseViewRef = null;\n\t\t\tthis.updateView();\n\t\t});\n\t}\n\n\t/**\n\t * Under which condition the item should be shown whilst the tour is active\n\t */\n\tpublic ngxTourShowWhen: InputSignal =\n\t\tinput();\n\t/**\n\t * The else template in case the condition is not matched\n\t */\n\tpublic ngxTourShowWhenElse: InputSignal> = input();\n\n\tpublic ngOnDestroy(): void {\n\t\tthis.dispose();\n\t}\n\n\tprivate updateView(): void {\n\t\t// Iben: Dispose the current subscription\n\t\tthis.dispose();\n\n\t\t// Iben: Create a new onDestroyed handler\n\t\tthis.destroyed$ = new Subject();\n\n\t\t// Iben: Render the views based on the correct state\n\t\tthis.tourService.currentIndex$\n\t\t\t.pipe(\n\t\t\t\tdistinctUntilChanged(),\n        withLatestFrom( this.tourService.currentTour$ ),\n\t\t\t\ttap(([index, tour]) => {\n\t\t\t\t\t// Iben: Check if we should render the view\n\t\t\t\t\tif (\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenInactive' && index === undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'whenActive' && index !== undefined) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasPrevious' && Boolean(tour?.[index - 1])) ||\n\t\t\t\t\t\t(this.ngxTourShowWhen() === 'hasNext' && Boolean(tour?.[index + 1]))\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!this.thenViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.elseViewRef = null;\n\t\t\t\t\t\t\tif (this.thenTemplateRef) {\n\t\t\t\t\t\t\t\tthis.thenViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.thenTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!this.elseViewRef) {\n\t\t\t\t\t\t\tthis.viewContainer.clear();\n\t\t\t\t\t\t\tthis.thenViewRef = null;\n\t\t\t\t\t\t\tif (this.elseTemplateRef) {\n\t\t\t\t\t\t\t\tthis.elseViewRef = this.viewContainer.createEmbeddedView(\n\t\t\t\t\t\t\t\t\tthis.elseTemplateRef\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\t/**\n\t * Dispose the current subscription\n\t */\n\tprivate dispose(): void {\n\t\tif (this.destroyed$) {\n\t\t\tthis.destroyed$.next();\n\t\t\tthis.destroyed$.complete();\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourStep.html":{"url":"interfaces/NgxTourStep.html","title":"interface - NgxTourStep","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourStep\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            afterVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            beforeVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            content\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cutoutMargin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            delay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disableBackDrop\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offset\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onVisible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            position\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stepClass\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tourItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        afterVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        afterVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run when a step is no longer visible\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        beforeVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        beforeVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right before a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional component to replace the default provided component within the tour step configuration.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The content we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cutoutMargin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cutoutMargin:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional padding we can set for the cutout around an element. By default, this is set to 5px.\nThis will add some additional whitespace within the cutout.\nThis is not the same as the offset, which is the whitespace around the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional extra data we wish to provide to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        delay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional amount of time we want to wait before showing the next step.\nBy default this is 100 ms.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disableBackDrop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disableBackDrop:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether we want to disable the backdrop\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onVisible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onVisible:         NgxTourAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourAction\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional function that will be run right when a step becomes visible.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:         NgxTourStepPosition\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepPosition\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional position where we wish to render the tour step.\nBy default, this is below.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stepClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stepClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    An optional class we can attach to the step\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The title we wish to display on the step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tourItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tourItem:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional corresponding id of the element we wish to highlight. This is the string we pass to the tourItem directive.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { NgxTourStepComponent } from '../abstracts';\nimport { NgxTourItemDirective } from '../directives';\n\nexport type NgxTourDirection = 'next' | 'back';\n\nexport type NgxTourInteraction = NgxTourDirection | 'close';\n\nexport type NgxTourStepPosition = 'above' | 'below' | 'right' | 'left';\n\nexport type NgxTourRegistrationEvent = {\n\ttourItem: string;\n\telement?: NgxTourItemDirective;\n\ttype: 'register' | 'unregister';\n};\n\nexport interface NgxTourRouteOptions {\n\troute: string[];\n\textras: NavigationExtras;\n}\nexport interface NgxTourBackdropClipEvent {\n\tbackdrop: HTMLElement;\n\tcutoutMargin: number;\n\titem?: HTMLElement;\n}\n\nexport type NgxTourAction = (step: NgxTourStep, index: number) => void | Observable;\n\nexport interface NgxTourStep {\n\t/**\n\t * The title we wish to display on the step.\n\t */\n\ttitle: string;\n\n\t/**\n\t * The content we wish to display on the step.\n\t */\n\tcontent: string;\n\n\t/**\n\t * Optional corresponding id of the element we wish to highlight. This is the string we pass to the `tourItem` directive.\n\t */\n\ttourItem?: string;\n\n\t/**\n\t * Optional position where we wish to render the tour step.\n\t *\n\t * By default, this is `below`.\n\t */\n\tposition?: NgxTourStepPosition;\n\n\t/**\n\t * Optional extra data we wish to provide to the step\n\t */\n\tdata?: DataType;\n\n\t/**\n\t * An optional amount of time we want to wait before showing the next step.\n\t *\n\t * By default this is 100 ms.\n\t */\n\tdelay?: number;\n\n\t/**\n\t * An optional function that will be run right before a step becomes visible.\n\t */\n\tbeforeVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run right when a step becomes visible.\n\t */\n\tonVisible?: NgxTourAction;\n\n\t/**\n\t * An optional function that will be run when a step is no longer visible\n\t */\n\tafterVisible?: NgxTourAction;\n\n\t/**\n\t * An optional component to replace the default provided component within the tour step configuration.\n\t */\n\tcomponent?: Type;\n\n\t/**\n\t * Whether we want to disable the backdrop\n\t */\n\tdisableBackDrop?: boolean;\n\n\t/**\n\t * An optional padding we can set for the cutout around an element. By default, this is set to 5px.\n\t * This will add some additional whitespace **within** the cutout.\n\t *\n\t * This is not the same as the `offset`, which is the whitespace **around** the highlighted element.\n\t */\n\tcutoutMargin?: number;\n\n\t/**\n\t * An optional class we can attach to the step\n\t */\n\tstepClass?: string;\n\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t */\n\toffset?: NgxTourStepOffset;\n}\n\nexport type NgxTourStepOffset = {\n\ttop?: number;\n\tbottom?: number;\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTourStepComponent.html":{"url":"directives/NgxTourStepComponent.html","title":"directive - NgxTourStepComponent","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTourStepComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class that defines the minimum properties needed for the step component to be rendered\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnInit\n                        AfterViewInit\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                amountOfSteps\n                            \n                            \n                                    Public\n                                    Readonly\n                                content\n                            \n                            \n                                    Public\n                                    Readonly\n                                currentStep\n                            \n                            \n                                    Public\n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                    Readonly\n                                elementId\n                            \n                            \n                                    Public\n                                handleInteraction\n                            \n                            \n                                    Public\n                                    Readonly\n                                position\n                            \n                            \n                                    \n                                    Protected\n                                rootClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                stepClass\n                            \n                            \n                                    Public\n                                    Readonly\n                                title\n                            \n                            \n                                    Public\n                                    Readonly\n                                titleElement\n                            \n                            \n                                    Public\n                                titleId\n                            \n                            \n                                    Private\n                                    Readonly\n                                tourService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                ngOnInit\n                            \n                            \n                                    \n                                    Public\n                                onEscape\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                amountOfSteps\n                            \n                            \n                                content\n                            \n                            \n                                currentStep\n                            \n                            \n                                data\n                            \n                            \n                                elementId\n                            \n                            \n                                stepClass\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                document:keydown.escape\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        amountOfSteps\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                            \n                        \n                \n                    \n                        The total amount of steps\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                            \n                        \n                \n                    \n                        The content of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        currentStep\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                            \n                        \n                \n                    \n                        The index of the step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                            \n                        \n                \n                    \n                        Optional data we wish to use in a step\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        elementId\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                            \n                        \n                \n                    \n                        The id of the element that the tour-step describes\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        stepClass\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                            \n                        \n                \n                    \n                        A custom step class we can set\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        title\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                            \n                        \n                \n                    \n                        The title of the step\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        class\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            document:keydown.escape\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                \n            \n\n\n            \n                \n                    Close the tour on escape pressed\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:112\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        onEscape\n                        \n                    \n                \n            \n            \n                \n                        \n                    onEscape()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('document:keydown.escape')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:38\n                        \n                    \n\n\n            \n                \n                        Close the tour on escape pressed\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        amountOfSteps\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:83\n                        \n                    \n\n            \n                \n                    The total amount of steps\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        content\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:73\n                        \n                    \n\n            \n                \n                    The content of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        currentStep\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:78\n                        \n                    \n\n            \n                \n                    The index of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        data\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:88\n                        \n                    \n\n            \n                \n                    Optional data we wish to use in a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        elementId\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:53\n                        \n                    \n\n            \n                \n                    The id of the element that the tour-step describes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleInteraction\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OutputEmitterRef\n\n                    \n                \n                \n                    \n                        Default value : output()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:98\n                        \n                    \n\n            \n                \n                    Emits the possible interactions with a step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Default value : input.required()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:63\n                        \n                    \n\n            \n                \n                    The position of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Protected\n                        rootClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('class')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:45\n                        \n                    \n\n            \n                \n                    The ngx-tour-step class of the component\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stepClass\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:93\n                        \n                    \n\n            \n                \n                    A custom step class we can set\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        title\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:68\n                        \n                    \n\n            \n                \n                    The title of the step\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        titleElement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : viewChild>('stepTitle')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:58\n                        \n                    \n\n            \n                \n                    The element of the tour-step that is seen as the title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        titleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     WritableSignal\n\n                    \n                \n                \n                    \n                        Default value : signal('')\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:103\n                        \n                    \n\n            \n                \n                    The aria-labelledby id of the title element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        tourService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(NgxTourService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/inform/src/lib/abstracts/tour-step/tour-step.component.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n    \n\n\n    \n        import {\n\tAfterViewInit,\n\tDirective,\n\tElementRef,\n\tHostBinding,\n\tHostListener,\n\tOnInit,\n\tsignal,\n\tWritableSignal,\n\tinject,\n\tinput,\n\tOutputEmitterRef,\n\toutput,\n\tviewChild,\n} from '@angular/core';\nimport { v4 as uuid } from 'uuid';\n\nimport { NgxTourService } from '../../services';\nimport { NgxTourInteraction, NgxTourStepPosition } from '../../types';\n\n/**\n * An abstract class that defines the minimum properties needed for the step component to be rendered\n */\n@Directive({\n\thost: {\n\t\trole: 'dialog',\n\t\t'[attr.aria-modal]': 'true',\n\t\t'[attr.aria-labelledby]': 'titleId()',\n\t\t'[attr.aria-details]': 'elementId()',\n\t},\n})\nexport abstract class NgxTourStepComponent implements OnInit, AfterViewInit {\n\tprivate readonly tourService = inject(NgxTourService);\n\n\t/**\n\t * Close the tour on escape pressed\n\t */\n\t@HostListener('document:keydown.escape') public onEscape() {\n\t\tthis.tourService.closeTour().subscribe();\n\t}\n\n\t/**\n\t * The ngx-tour-step class of the component\n\t */\n\t@HostBinding('class') protected rootClass: string;\n\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\t/**\n\t * The id of the element that the tour-step describes\n\t */\n\tpublic readonly elementId = input.required();\n\n\t/**\n\t * The element of the tour-step that is seen as the title\n\t */\n\tpublic readonly titleElement = viewChild>('stepTitle');\n\n\t/**\n\t * The position of the step\n\t */\n\tpublic readonly position = input.required();\n\n\t/**\n\t * The title of the step\n\t */\n\tpublic readonly title = input.required();\n\n\t/**\n\t * The content of the step\n\t */\n\tpublic readonly content = input.required();\n\n\t/**\n\t * The index of the step\n\t */\n\tpublic readonly currentStep = input.required();\n\n\t/**\n\t * The total amount of steps\n\t */\n\tpublic readonly amountOfSteps = input.required();\n\n\t/**\n\t * Optional data we wish to use in a step\n\t */\n\tpublic readonly data = input();\n\n\t/**\n\t * A custom step class we can set\n\t */\n\tpublic readonly stepClass = input();\n\n\t/**\n\t * Emits the possible interactions with a step\n\t */\n\tpublic handleInteraction: OutputEmitterRef = output();\n\n\t/**\n\t * The aria-labelledby id of the title element\n\t */\n\tpublic titleId: WritableSignal = signal('');\n\n\tpublic ngOnInit(): void {\n\t\t// Iben: We set the correct host class. As this step is rendered and not changed afterwards, we do not have to adjust this in the onChanges\n\t\tconst position = this.position();\n\t\tconst positionClass = position ? `ngx-tour-step-position-${position}` : '';\n\t\tthis.rootClass = `ngx-tour-step ${positionClass} ${this.stepClass() || ''}`;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: If no title element was found, we throw an error\n\t\tconst titleElement = this.titleElement();\n\t\tif (!titleElement) {\n\t\t\tconsole.error(\n\t\t\t\t'@ibenvandeveire/ngx-inform - NgxTourService: The tour step component does not have an element marked with `stepTitle`. Because of that, the necessary accessibility attributes could not be set. Please add the `stepTitle` tag to the element that represents the title of the step.'\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Connect the aria-labbledby tag to the title element\n\t\tlet id = titleElement.nativeElement.getAttribute('id');\n\n\t\t// Iben: If the title element does not have an id, we generate one\n\t\tif (!id) {\n\t\t\tid = uuid();\n\t\t\ttitleElement.nativeElement.setAttribute('id', id);\n\t\t}\n\n\t\t// Iben: To prevent issues with changeDetection, we use a signal here to update the id\n\t\tthis.titleId.set(id);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTourTokenConfiguration.html":{"url":"interfaces/NgxTourTokenConfiguration.html","title":"interface - NgxTourTokenConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NgxTourTokenConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/inform/src/lib/types/tour.token.type.ts\n        \n\n\n            \n                Description\n            \n            \n                The configuration object to be passed as token to the tour provider\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            component\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        component\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        component:         Type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The component to be used as the tour step.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         NgxTourStepOffset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NgxTourStepOffset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Allow the highlighted element to have additional whitespace around the cutout on the y-axis.\nThis is useful when the highlighted element is under a header or a footer.\nEven though it is possible to provide both a top and bottom offset, only one will be taken into\naccount. If the vertical center of the cutout is closer to the top, the top offset will be used. If\nthe vertical center of the cutout is closer to the bottom, the bottom offset will be used.\nNegative values are allowed. The step(card) will always be displayed within the viewport, even if\nthe offset makes the cutout go out of the viewport.\nThis is not the same as the cutoutMargin, which is the whitespace within the highlighted element.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Type } from '@angular/core';\n\nimport { NgxTourStepComponent } from '../abstracts';\n\nimport { NgxTourStepOffset } from './tour.types';\n\n/**\n * The token type for the tour provider\n */\nexport type NgxTourTokenType = Type | NgxTourTokenConfiguration;\n\n/**\n * The configuration object to be passed as token to the tour provider\n */\nexport interface NgxTourTokenConfiguration {\n\t/**\n\t * The component to be used as the tour step.\n\t */\n\tcomponent: Type;\n\t/**\n\t * Allow the highlighted element to have additional whitespace **around** the cutout on the y-axis.\n\t * This is useful when the highlighted element is under a header or a footer.\n\t *\n\t * Even though it is possible to provide both a `top` and `bottom` offset, only one will be taken into\n\t * account. If the vertical center of the cutout is closer to the top, the `top` offset will be used. If\n\t * the vertical center of the cutout is closer to the bottom, the `bottom` offset will be used.\n\t *\n\t * Negative values are allowed. The step(card) will always be displayed within the viewport, even if\n\t * the offset makes the cutout go out of the viewport.\n\t *\n\t * This is not the same as the `cutoutMargin`, which is the whitespace **within** the highlighted element.\n\t *\n\t * @inheritdoc NgxTourStep.offset\n\t */\n\toffset: NgxTourStepOffset;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridCellDirective.html":{"url":"directives/NgxTreeGridCellDirective.html","title":"directive - NgxTreeGridCellDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridCellDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                A cell directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n            \n                Extends\n            \n            \n                            NgxHasFocusDirective\n            \n\n            \n                Implements\n            \n            \n                        AfterViewInit\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGridCell]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                elementRef\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCell\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridCellRow\n                            \n                            \n                                    Private\n                                    Readonly\n                                parent\n                            \n                            \n                                    Private\n                                row\n                            \n                            \n                                    Protected\n                                hasFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                findFocusableElement\n                            \n                            \n                                    Public\n                                focus\n                            \n                            \n                                    \n                                moveDown\n                            \n                            \n                                    \n                                moveLeft\n                            \n                            \n                                    \n                                moveRight\n                            \n                            \n                                    \n                                moveToBottomControlEnd\n                            \n                            \n                                    \n                                moveToBottomEnd\n                            \n                            \n                                    Private\n                                moveToCell\n                            \n                            \n                                    \n                                moveToFirstCellOfGrid\n                            \n                            \n                                    \n                                moveToFirstColumnOfGrid\n                            \n                            \n                                    \n                                moveToFirstOfRow\n                            \n                            \n                                    \n                                moveToLastCellOfGrid\n                            \n                            \n                                    \n                                moveUp\n                            \n                            \n                                    Public\n                                ngAfterViewInit\n                            \n                            \n                                    Public\n                                handleWhenFocussed\n                            \n                            \n                                    Public\n                                isFocussedOn\n                            \n                            \n                                    \n                                removeFocus\n                            \n                            \n                                    \n                                setFocus\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGridCell\n                            \n                            \n                                ngxTreeGridCellRow\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                keydown.ArrowDown\n                            \n                            \n                                keydown.ArrowLeft\n                            \n                            \n                                keydown.ArrowRight\n                            \n                            \n                                keydown.ArrowUp\n                            \n                            \n                                keydown.control.End\n                            \n                            \n                                keydown.control.Home\n                            \n                            \n                                keydown.End\n                            \n                            \n                                keydown.Home\n                            \n                            \n                                keydown.PageDown\n                            \n                            \n                                keydown.PageUp\n                            \n                            \n                                blur\n                            \n                            \n                                focus\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGridCell\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                            \n                        \n                \n                    \n                        The index of the cell in the row\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridCellRow\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                            \n                        \n                \n                    \n                        The index of the row\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                \n            \n\n\n            \n                \n                    Set focus on the cell below\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowLeft\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                \n            \n\n\n            \n                \n                    Set focus on the previous cell to the left\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowRight\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                \n            \n\n\n            \n                \n                    Set focus on the next cell to the right\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.ArrowUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                \n            \n\n\n            \n                \n                    Set focus on the cell above\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.control.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the same column of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.End\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.Home\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the row\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageDown\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                \n            \n\n\n            \n                \n                    Set focus on the last cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            keydown.PageUp\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                \n            \n\n\n            \n                \n                    Set focus on the first cell of the grid\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            blur\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:25\n\n                \n            \n\n\n            \n                \n                    Remove the hasFocus flag\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focus\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Inherited from         NgxHasFocusDirective\n\n                \n            \n            \n                \n                    Defined in         NgxHasFocusDirective:18\n\n                \n            \n\n\n            \n                \n                    Set the hasFocus flag\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        findFocusableElement\n                        \n                    \n                \n            \n            \n                \n                        \n                    findFocusableElement()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:152\n                        \n                    \n\n\n            \n                \n                        Searches for a focusable element in the cell\n\n\n                        \n                            Returns :     HTMLElement | undefined\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        focus\n                        \n                    \n                \n            \n            \n                \n                        \n                    focus()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:126\n                        \n                    \n\n\n            \n                \n                        Sets focus on the cell or on the first focusable item in the cell\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveDown\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveDown()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:67\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell below\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveLeft\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveLeft(event: Event)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowLeft', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:37\n                        \n                    \n\n\n            \n                \n                        Set focus on the previous cell to the left\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveRight\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveRight()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowRight')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:53\n                        \n                    \n\n\n            \n                \n                        Set focus on the next cell to the right\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomControlEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomControlEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:109\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToBottomEnd\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToBottomEnd()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.End')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:102\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        moveToCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:143\n                        \n                    \n\n\n            \n                \n                        Moves focus to a provided cell in a provided row\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cell we wish to put focus on\n\n\n                                            \n                                        \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowTarget\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe row in which the cell is\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:74\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstColumnOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstColumnOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.control.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:88\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the same column of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToFirstOfRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToFirstOfRow()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.Home')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:81\n                        \n                    \n\n\n            \n                \n                        Set focus on the first cell of the row\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveToLastCellOfGrid\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveToLastCellOfGrid()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.PageDown')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:95\n                        \n                    \n\n\n            \n                \n                        Set focus on the last cell of the grid\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        moveUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveUp()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('keydown.ArrowUp')\n                \n            \n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:60\n                        \n                    \n\n\n            \n                \n                        Set focus on the cell above\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    ngAfterViewInit()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:174\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        handleWhenFocussed\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWhenFocussed(action: () => void)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:34\n\n                        \n                    \n\n\n            \n                \n                        Execute an action when the element has focussed\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided action\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isFocussedOn\n                        \n                    \n                \n            \n            \n                \n                        \n                    isFocussedOn()\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:43\n\n                        \n                    \n\n\n            \n                \n                        Returns when the item has been focussed on\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        removeFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('blur')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:25\n\n                        \n                    \n\n\n            \n                \n                        Remove the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    setFocus()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('focus')\n                \n            \n\n                    \n                        \n                            Inherited from         NgxHasFocusDirective\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxHasFocusDirective:18\n\n                        \n                    \n\n\n            \n                \n                        Set the hasFocus flag\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCell\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:116\n                        \n                    \n\n            \n                \n                    The index of the cell in the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridCellRow\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:121\n                        \n                    \n\n            \n                \n                    The index of the row\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridDirective\n\n                    \n                \n                \n                    \n                        Default value : inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        row\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.cell.directive.ts:32\n                        \n                    \n\n            \n                \n                    The parent row of the cell\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        hasFocus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                Inherited from         NgxHasFocusDirective\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxHasFocusDirective:13\n\n                        \n                    \n\n            \n                \n                    Whether the current element is focussed\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, HostListener, AfterViewInit, inject, input } from '@angular/core';\n\nimport { NgxTreeGridCellTarget, NgxTreeGridRowTarget } from '../../types';\nimport { NgxHasFocusDirective } from '../has-focus-action';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridDirective } from './tree-grid.directive';\n\n/**\n * A cell directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGridCell]',\n\tstandalone: true,\n\thost: {\n\t\t// Iben: Marks the cell as focusable, but only by setting its focus programmatically, not by the tab key\n\t\t'[attr.tabIndex]': '-1',\n\t},\n})\nexport class NgxTreeGridCellDirective extends NgxHasFocusDirective implements AfterViewInit {\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\tprivate readonly parent: NgxTreeGridDirective = inject(NgxTreeGridDirective, {\n\t\toptional: true,\n\t})!;\n\tprivate readonly elementRef = inject(ElementRef);\n\n\t/**\n\t * The parent row of the cell\n\t */\n\tprivate row: NgxTreeGridRowDirective;\n\n\t/**\n\t * Set focus on the previous cell to the left\n\t */\n\t@HostListener('keydown.ArrowLeft', ['$event']) moveLeft(event: Event): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\t// Iben: Stop the event from bubbling so that the row does not open when navigating through the row (see arrowLeft in the NgxTreeGridRowDirective )\n\t\t\tconst ngxTreeGridCell = this.ngxTreeGridCell();\n   if (ngxTreeGridCell === 0) {\n\t\t\t\tevent.stopPropagation();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.moveToCell(ngxTreeGridCell - 1, 'current');\n\t\t});\n\t}\n\n\t/**\n\t * Set focus on the next cell to the right\n\t */\n\t@HostListener('keydown.ArrowRight') moveRight(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell() + 1, 'current');\n\t}\n\n\t/**\n\t * Set focus on the cell above\n\t */\n\t@HostListener('keydown.ArrowUp') moveUp(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'above');\n\t}\n\n\t/**\n\t * Set focus on the cell below\n\t */\n\t@HostListener('keydown.ArrowDown') moveDown(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'below');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the grid\n\t */\n\t@HostListener('keydown.PageUp') moveToFirstCellOfGrid(): void {\n\t\tthis.moveToCell('first', 'first');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the row\n\t */\n\t@HostListener('keydown.Home') moveToFirstOfRow(): void {\n\t\tthis.moveToCell('first', 'current');\n\t}\n\n\t/**\n\t * Set focus on the first cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.Home') moveToFirstColumnOfGrid(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'first');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the grid\n\t */\n\t@HostListener('keydown.PageDown') moveToLastCellOfGrid(): void {\n\t\tthis.moveToCell('last', 'last');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the row\n\t */\n\t@HostListener('keydown.End') moveToBottomEnd(): void {\n\t\tthis.moveToCell('last', 'current');\n\t}\n\n\t/**\n\t * Set focus on the last cell of the same column of the grid\n\t */\n\t@HostListener('keydown.control.End') moveToBottomControlEnd(): void {\n\t\tthis.moveToCell(this.ngxTreeGridCell(), 'last');\n\t}\n\n\t/**\n\t * The index of the cell in the row\n\t */\n\tpublic readonly ngxTreeGridCell = input.required();\n\n\t/**\n\t * The index of the row\n\t */\n\tpublic readonly ngxTreeGridCellRow = input.required();\n\n\t/**\n\t * Sets focus on the cell or on the first focusable item in the cell\n\t */\n\tpublic focus(): void {\n\t\t// Iben: Check if any of the child elements are focusable\n\t\tconst focusableElement = this.findFocusableElement();\n\n\t\t// Iben: If no element was focusable, focus on the current element\n\t\tif (!focusableElement) {\n\t\t\tthis.elementRef.nativeElement.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Moves focus to a provided cell in a provided row\n\t *\n\t * @private\n\t * @param cell - The cell we wish to put focus on\n\t * @param row - The row in which the cell is\n\t */\n\tprivate moveToCell(cell: NgxTreeGridCellTarget, row: NgxTreeGridRowTarget): void {\n\t\tthis.handleWhenFocussed(() => {\n\t\t\tthis.row.getCell(cell, row)?.focus();\n\t\t});\n\t}\n\n\t/**\n\t * Searches for a focusable element in the cell\n\t */\n\tprivate findFocusableElement(): HTMLElement | undefined {\n\t\tlet result: HTMLElement;\n\n\t\t// Iben: Loop over each first-level element of the children\n\t\tfor (const element of [...this.elementRef.nativeElement.children]) {\n\t\t\tif (!result) {\n\t\t\t\t// Iben: Check if we can focus on the element\n        element.focus();\n\n\t\t\t\t// Iben: If the current active element is the same as the element we focussed, on, we break\n\t\t\t\tif (element === document?.activeElement) {\n\t\t\t\t\tresult = element;\n\t\t\t\t\tthis.hasFocus = true;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic ngAfterViewInit(): void {\n\t\t// Iben: We register the cell and the row through the parent, as the td elements are not rendered within the row initially.\n\t\tconst ngxTreeGridCellRow = this.ngxTreeGridCellRow();\n  this.parent?.registerCell(ngxTreeGridCellRow, this);\n\t\tthis.row = this.parent.getRow(ngxTreeGridCellRow);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxTreeGridDirective.html":{"url":"directives/NgxTreeGridDirective.html","title":"directive - NgxTreeGridDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  NgxTreeGridDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                An overarching directive to handle navigation according to the WCAG treegrid pattern\nSee https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxTreeGrid]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGrid\n                            \n                            \n                                    Public\n                                    Readonly\n                                ngxTreeGridExpandable\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    Private\n                                rows\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getFirstRow\n                            \n                            \n                                    Public\n                                getLastRow\n                            \n                            \n                                    Public\n                                getRow\n                            \n                            \n                                    Public\n                                moveTo\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                    Public\n                                registerCell\n                            \n                            \n                                    Public\n                                registerRow\n                            \n                            \n                                    Public\n                                removeRow\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                ngxTreeGrid\n                            \n                            \n                                ngxTreeGridExpandable\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.role\n                            \n                        \n                    \n                \n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        ngxTreeGrid\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                            \n                        \n                \n                    \n                        Whether the current item is a treegrid\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        ngxTreeGridExpandable\n                    \n                \n                \n                    \n                        Required :  true\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                            \n                        \n                \n                    \n                        Whether the treegrid has expandableRows\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getFirstRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFirstRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the first row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getLastRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLastRow()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:76\n                        \n                    \n\n\n            \n                \n                        Returns the last row of the grid\n\n\n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:56\n                        \n                    \n\n\n            \n                \n                        Returns a row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         NgxTreeGridRowDirective\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        moveTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveTo(direction: \"top\" | \"bottom\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:85\n                        \n                    \n\n\n            \n                \n                        Moves the row focus to either the top or the bottom row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                direction\n                                            \n                                                        \"top\" | \"bottom\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether we want to go to the top or the bottom of the grid\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerCell\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerCell(index: number, cell: NgxTreeGridCellDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:94\n                        \n                    \n\n\n            \n                \n                        Registers a a cell to a row of the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                cell\n                                            \n                                                            NgxTreeGridCellDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided cell\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        registerRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerRow(row: NgxTreeGridRowDirective)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:38\n                        \n                    \n\n\n            \n                \n                        Registers a row to the rows array\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                row\n                                            \n                                                            NgxTreeGridRowDirective\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        removeRow\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeRow(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:47\n                        \n                    \n\n\n            \n                \n                        Removes a registered row from the grid\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe index of the provided row\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGrid\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:26\n                        \n                    \n\n            \n                \n                    Whether the current item is a treegrid\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        ngxTreeGridExpandable\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:31\n                        \n                    \n\n            \n                \n                    Whether the treegrid has expandableRows\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"table\" | \"treegrid\"\n\n                    \n                \n                \n                    \n                        Default value : 'table'\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.role')\n                        \n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        rows\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NgxTreeGridRowDirective[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/tree-grid/tree-grid.directive.ts:19\n                        \n                    \n\n            \n                \n                    An array of all rows in the treegrid\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, HostBinding, OnChanges, input } from '@angular/core';\n\nimport { NgxTreeGridRowDirective } from './tree-grid-row.directive';\nimport { NgxTreeGridCellDirective } from './tree-grid.cell.directive';\n\n/**\n * An overarching directive to handle navigation according to the WCAG treegrid pattern\n *\n * See https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/\n */\n@Directive({\n\tselector: '[ngxTreeGrid]',\n\tstandalone: true,\n})\nexport class NgxTreeGridDirective implements OnChanges {\n\t/**\n\t * An array of all rows in the treegrid\n\t */\n\tprivate rows: NgxTreeGridRowDirective[] = [];\n\n\t@HostBinding('attr.role') role: 'table' | 'treegrid' = 'table';\n\n\t/**\n\t * Whether the current item is a treegrid\n\t */\n\tpublic readonly ngxTreeGrid = input.required();\n\n\t/**\n\t * Whether the treegrid has expandableRows\n\t */\n\tpublic readonly ngxTreeGridExpandable = input.required();\n\n\t/**\n\t * Registers a row to the rows array\n\t *\n\t * @param row - The provided row\n\t */\n\tpublic registerRow(row: NgxTreeGridRowDirective): void {\n\t\tthis.rows.push(row);\n\t}\n\n\t/**\n\t * Removes a registered row from the grid\n\t *\n\t * @param index - The index of the provided row\n\t */\n\tpublic removeRow(index: number): void {\n\t\tthis.rows = this.rows.slice(0, index).concat(this.rows.slice(index + 1));\n\t}\n\n\t/**\n\t * Returns a row from the grid\n\t *\n\t * @param index - The index of the row\n\t */\n\tpublic getRow(index: number): NgxTreeGridRowDirective {\n\t\t// Iben: Early exit if the row is not found\n\t\tif (!this.ngxTreeGrid()) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Iben: Return the row\n\t\treturn this.rows[index];\n\t}\n\n\t/**\n\t * Returns the first row of the grid\n\t */\n\tpublic getFirstRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(0);\n\t}\n\n\t/**\n\t * Returns the last row of the grid\n\t */\n\tpublic getLastRow(): NgxTreeGridRowDirective {\n\t\treturn this.getRow(this.rows.length - 1);\n\t}\n\n\t/**\n\t * Moves the row focus to either the top or the bottom row of the grid\n\t *\n\t * @param direction - Whether we want to go to the top or the bottom of the grid\n\t */\n\tpublic moveTo(direction: 'top' | 'bottom') {\n\t\tthis.rows[direction === 'top' ? 0 : this.rows.length - 1]?.focus();\n\t}\n\n\t/**\n\t * Registers a a cell to a row of the grid\n\t *\n\t * @param cell - The provided cell\n\t */\n\tpublic registerCell(index: number, cell: NgxTreeGridCellDirective) {\n\t\tthis.getRow(index)?.registerCell(cell);\n\t}\n\n\tngOnChanges() {\n\t\t// Iben: Set the role based on the tree grid\n\t\tthis.role = this.ngxTreeGrid() ? 'treegrid' : 'table';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NgxValidators.html":{"url":"classes/NgxValidators.html","title":"class - NgxValidators","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NgxValidators\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/forms/src/lib/validators/validators.ts\n        \n\n\n            \n                Description\n            \n            \n                Exported Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                allOrNothingRequired\n                            \n                            \n                                    Static\n                                atLeastOneRequired\n                            \n                            \n                                    Static\n                                chronologicalDates\n                            \n                            \n                                    Static\n                                dateRangeValidator\n                            \n                            \n                                    Static\n                                decimalsAfterComma\n                            \n                            \n                                    Static\n                                dependedRequired\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        allOrNothingRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    allOrNothingRequired(control: FormGroup)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:27\n                        \n                    \n\n\n            \n                \n                        A validator to check if all or none of the values of a form group are filled in.\nParticularly useful in situations where a form group field within itself is optional,\nbut all fields are required in case it does get filled in\nReturns an allOrNothingRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                control\n                                            \n                                                        FormGroup\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA form group control\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidationErrors | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        atLeastOneRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    atLeastOneRequired(options?: AtLeastOneRequiredValidatorOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        A validator to check if at least one of the provided controls of the form group are filled in\nReturns an atLeastOneRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                            AtLeastOneRequiredValidatorOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nAn optional object with configuration options, see below params for more info\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        chronologicalDates\n                        \n                    \n                \n            \n            \n                \n                        \n                    chronologicalDates(startControlKey: string, endControlKey: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:83\n                        \n                    \n\n\n            \n                \n                        A FormGroup validator to check whether a start and end date are chronologically correct\nReturns an incorrectChronologicalDates error on the provided FormGroup and a incorrectChronologicalDate on the endControl\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                startControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the start date value\n\n\n                                            \n                                        \n                                        \n                                                endControlKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    \nThe key of the control containing the end date value\n\n\n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format of the dates provided by the controls, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dateRangeValidator\n                        \n                    \n                \n            \n            \n                \n                        \n                    dateRangeValidator(min: string, max: string, format: string)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:100\n                        \n                    \n\n\n            \n                \n                        Form control validator which validates if a date is between a provided range\nReturns an invalidRange error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                min\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                max\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                format\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'yyyy-MM-dd'\n                                            \n\n                                            \n                                                    \nOptional format used for all 3 dates, by default yyyy-MM-dd\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        decimalsAfterComma\n                        \n                    \n                \n            \n            \n                \n                        \n                    decimalsAfterComma(max: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:70\n                        \n                    \n\n\n            \n                \n                        Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\nReturns an invalidDecimalsAfterComma error on the provided control\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                max\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum number of decimals after the comma\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        dependedRequired\n                        \n                    \n                \n            \n            \n                \n                        \n                    dependedRequired(controls: KeyType[], dependedControlKey: KeyType, matchFunction?: (data?: any) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/forms/src/lib/validators/validators.ts:55\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    KeyType\n                            \n                        \n                    \n\n            \n                \n                        FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\nReturns a hasDependedRequiredError error on the provided FormGroup and a required error on the individual controls\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                controls\n                                            \n                                                        KeyType[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAn array of controls.\n\n\n                                            \n                                        \n                                        \n                                                dependedControlKey\n                                            \n                                                        KeyType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA control within the group which the other controls depend on.\n\n\n                                            \n                                        \n                                        \n                                                matchFunction\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional function the dependedControl should check\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ValidatorFn\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nimport { allOrNothingRequiredValidator } from './all-or-nothing-required/all-or-nothing-required.validator';\nimport {\n\tAtLeastOneRequiredValidatorOptions,\n\tatLeastOneRequiredValidator,\n} from './at-least-one-required/at-least-one-required.validator';\nimport { chronologicalDatesValidator } from './chronological-dates/chronological-dates.validator';\nimport { dateRangeValidator } from './date-range/date-range.validator';\nimport { decimalsAfterCommaValidator } from './decimals-after-comma/decimals-after-comma.validator';\nimport { dependedRequiredValidator } from './depended-required/depended-required.validator';\n\n/**\n * Exported Class\n */\n\nexport class NgxValidators {\n\t/**\n\t * A validator to check if all or none of the values of a form group are filled in.\n\t * Particularly useful in situations where a form group field within itself is optional,\n\t * but all fields are required in case it does get filled in\n\t *\n\t * Returns an `allOrNothingRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param control - A form group control\n\t */\n\tstatic allOrNothingRequired(control: FormGroup): ValidationErrors | null {\n\t\treturn allOrNothingRequiredValidator(control);\n\t}\n\n\t/**\n\t * A validator to check if at least one of the provided controls of the form group are filled in\n\t *\n\t * Returns an `atLeastOneRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param options - An optional object with configuration options, see below params for more info\n\t * @param controlNames - Optional list of controls, if not provided the validator is applied to all controls of the group\n\t * @param conditionalFunction - Optional function the form value needs to return true to for the required to be se\n\t */\n\tstatic atLeastOneRequired(\n\t\toptions?: AtLeastOneRequiredValidatorOptions\n\t): ValidatorFn {\n\t\treturn atLeastOneRequiredValidator(options);\n\t}\n\n\t/**\n\t * FormGroup validator which checks if an array of controls in the control are filled in if the depended control is filled in\n\t *\n\t * Returns a `hasDependedRequiredError` error on the provided FormGroup and a `required` error on the individual controls\n\t *\n\t * @param controls - An array of controls.\n\t * @param dependedControlKey - A control within the group which the other controls depend on.\n\t * @param matchFunction - Optional function the dependedControl should check\n\t */\n\tstatic dependedRequired(\n\t\tcontrols: KeyType[],\n\t\tdependedControlKey: KeyType,\n\t\tmatchFunction?: (data: any) => boolean\n\t): ValidatorFn {\n\t\treturn dependedRequiredValidator(controls, dependedControlKey, matchFunction);\n\t}\n\n\t/**\n\t * Validates whether the inputted value has exceeded the maximum amount of decimals after the comma\n\t *\n\t * Returns an `invalidDecimalsAfterComma` error on the provided control\n\t *\n\t * @param max - The maximum number of decimals after the comma\n\t */\n\tstatic decimalsAfterComma(max: number): ValidatorFn {\n\t\treturn decimalsAfterCommaValidator(max);\n\t}\n\n\t/**\n\t * A FormGroup validator to check whether a start and end date are chronologically correct\n\t *\n\t * Returns an `incorrectChronologicalDates` error on the provided FormGroup and a `incorrectChronologicalDate` on the endControl\n\t *\n\t * @param startControlKey - The key of the control containing the start date value\n\t * @param endControlKey - The key of the control containing the end date value\n\t * @param format - Optional format of the dates provided by the controls, by default yyyy-MM-dd\n\t */\n\tstatic chronologicalDates(\n\t\tstartControlKey: string,\n\t\tendControlKey: string,\n\t\tformat = 'yyyy-MM-dd'\n\t): ValidatorFn {\n\t\treturn chronologicalDatesValidator(startControlKey, endControlKey, format);\n\t}\n\n\t/**\n\t * Form control validator which validates if a date is between a provided range\n\t *\n\t * Returns an `invalidRange` error\n\t *\n\t * @param minDate - Minimum valid date\n\t * @param maxDate - Maximum valid date\n\t * @param format - Optional format used for all 3 dates, by default yyyy-MM-dd\n\t */\n\tstatic dateRangeValidator(min: string, max: string, format = 'yyyy-MM-dd'): ValidatorFn {\n\t\treturn dateRangeValidator(min, max, format);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxWindowService.html":{"url":"injectables/NgxWindowService.html","title":"injectable - NgxWindowService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NgxWindowService\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/core/src/lib/services/window/window.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A service used to access the document and window in a SSR safe way\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentScrollPosition\n                            \n                            \n                                    Public\n                                currentScrollPosition$\n                            \n                            \n                                    Private\n                                currentScrollPositionSubject$\n                            \n                            \n                                    Private\n                                    Readonly\n                                document\n                            \n                            \n                                    Private\n                                    Readonly\n                                platformId\n                            \n                            \n                                    Public\n                                scrollingUp$\n                            \n                            \n                                    Private\n                                scrollingUpSubject$\n                            \n                            \n                                    Public\n                                width$\n                            \n                            \n                                    Private\n                                widthSubject$\n                            \n                            \n                                    Public\n                                window\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                handleContentScroll\n                            \n                            \n                                    Public\n                                hasDocument\n                            \n                            \n                                    Public\n                                isBrowser\n                            \n                            \n                                    Public\n                                runInBrowser\n                            \n                            \n                                    Public\n                                scrollTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        handleContentScroll\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleContentScroll()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:136\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        hasDocument\n                        \n                    \n                \n            \n            \n                \n                        \n                    hasDocument()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Returns whether there is a document present\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    isBrowser()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Returns whether the current platform is a browser\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        runInBrowser\n                        \n                    \n                \n            \n            \n                \n                        \n                    runInBrowser(action: (data: literal type) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:115\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ReturnType\n                            \n                        \n                    \n\n            \n                \n                        Run a provided function only when we're in the browser and not in a server side rendered application\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nFunction we want to run in the browser\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ReturnType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollTo\n                        \n                    \n                \n            \n            \n                \n                        \n                    scrollTo(offset: number)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/core/src/lib/services/window/window.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Scrolls to the provided position of the page\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                            \n                                                    \nOffset to which we want to scroll, scrolls to top when no offset is provided\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:56\n                        \n                    \n\n            \n                \n                    Current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        currentScrollPosition$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.currentScrollPositionSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:50\n                        \n                    \n\n            \n                \n                    Observable of the current scroll position after the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentScrollPositionSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(0)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:35\n                        \n                    \n\n            \n                \n                    Subject to hold the current scroll position\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        document\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Document\n\n                    \n                \n                \n                    \n                        Default value : inject(DOCUMENT)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:15\n                        \n                    \n\n            \n                \n                    Instance of the document if exists\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        platformId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(PLATFORM_ID)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:20\n                        \n                    \n\n            \n                \n                    Instance of the platform detector\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        scrollingUp$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.scrollingUpSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:45\n                        \n                    \n\n            \n                \n                    Observable to track when the scroll has ended\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        scrollingUpSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(true)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:30\n                        \n                    \n\n            \n                \n                    Subject to hold the scroll up event\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        width$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.widthSubject$.asObservable()\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:40\n                        \n                    \n\n            \n                \n                    Observable to get the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        widthSubject$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(1200)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:25\n                        \n                    \n\n            \n                \n                    Subject to hold the window-width, defaults to 1200 when no window is defined\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        window\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Window\n\n                    \n                \n                    \n                        \n                                Defined in libs/angular/core/src/lib/services/window/window.service.ts:61\n                        \n                    \n\n            \n                \n                    The platforms Window object\n\n                \n            \n\n        \n    \n\n\n    \n\n    \n        NgxNgxWindowService\nThis service uses the DOCUMENT injection-token to provide several methods to access both document and window and related information.\nIt is convenient for using the document or window without breaking SSR.\nProperties\nwidth$\nThe window-service exposes a width$ observable to get the window-width. It defaults to 1200 when no window is defined.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public windowWidth$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.windowWidth$ = this.windowService.width$;\n    }\n}scrollingUp$\nThe window-service exposes a scrollingUp$ observable to know when the scroll has ended.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public scrollingUp$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.scrollingUp$ = this.windowService.scrollingUp$;\n    }\n}currentScrollPosition\nThe window-service exposes a currentScrollPosition property that contains the currentScrollPosition after handleContentScroll has been called.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public currentScrollPosition: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.currentScrollPosition = this.windowService.currentScrollPosition;\n    }\n}window\nThe window-service exposes the window property which is a link to the Window object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public window$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.window = this.windowService.window;\n    }\n}document\nThe window-service also exposes the document property which is a link to the Document object.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    public document$: Observable;\n\n    constructor(private windowService: NgxWindowService) {\n        this.document = this.windowService.document;\n    }\n}Methods\nscrollTo\nA scrollTo method is provided to scroll to a position on the page. When there is no window, it will do nothing.\nThe offset is set to 0 by default so triggering the method without a value will scroll to the top of the page.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public somethingHappened(): void {\n        this.windowService.scrollTo(500);\n    }\n}hasDocument\nThe hasDocument-method is provided to check if there is a document.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.hasDocument()) {\n            // do something that depends on the document.\n        }\n    }\n}isBrowser\nThe isBrowser-method is provided to check if the current platform is a browser.\nIt uses the isPlatformBrowser method with the PLATFORM_ID injection-token internally.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        if (this.windowService.isBrowser()) {\n            // do something that depends on the browser.\n        }\n    }\n}runInBrowser\nThe runInBrowser-method is provided to run a specific callback only when in the browser.\nThe callback has access to the window and the document elements provided in its parameters.\nExample :import { NgxWindowService } from '@ibenvandeveire/ngx-core';\n\nexport class YourComponent {\n    constructor(private windowService: NgxWindowService) {}\n\n    public aCoolMethod(): void {\n        this.windowService.runInBrowser(({ browserWindow, browserDocument }) => {\n            // Do something with the browser window or document\n        });\n    }\n}\n    \n\n    \n        import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * A service used to access the document and window in a SSR safe way\n */\n@Injectable({\n\tprovidedIn: 'root',\n})\nexport class NgxWindowService {\n\t/**\n\t * Instance of the document if exists\n\t */\n\tprivate readonly document: Document = inject(DOCUMENT);\n\n\t/**\n\t * Instance of the platform detector\n\t */\n\tprivate readonly platformId = inject(PLATFORM_ID);\n\n\t/**\n\t * Subject to hold the window-width, defaults to 1200 when no window is defined\n\t */\n\tprivate widthSubject$: BehaviorSubject = new BehaviorSubject(1200);\n\n\t/**\n\t * Subject to hold the scroll up event\n\t */\n\tprivate scrollingUpSubject$: BehaviorSubject = new BehaviorSubject(true);\n\n\t/**\n\t * Subject to hold the current scroll position\n\t */\n\tprivate currentScrollPositionSubject$: BehaviorSubject = new BehaviorSubject(0);\n\n\t/**\n\t * Observable to get the window-width, defaults to 1200 when no window is defined\n\t */\n\tpublic width$: Observable = this.widthSubject$.asObservable();\n\n\t/**\n\t * Observable to track when the scroll has ended\n\t */\n\tpublic scrollingUp$: Observable = this.scrollingUpSubject$.asObservable();\n\n\t/**\n\t * Observable of the current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition$: Observable =\n\t\tthis.currentScrollPositionSubject$.asObservable();\n\n\t/**\n\t * Current scroll position after the scroll has ended\n\t */\n\tpublic currentScrollPosition: number = 0;\n\n\t/**\n\t * The platforms Window object\n\t */\n\tpublic window: Window;\n\n\tconstructor() {\n\t\t// Iben: Handle the initial setup of the service\n\t\tif (this.isBrowser() && this.hasDocument()) {\n\t\t\t// Iben: Set the window using the default view\n\t\t\tthis.window = this.document.defaultView as Window;\n\n\t\t\t// Iben: Listen to the scroll event of the document\n\t\t\tthis.document.addEventListener('scroll', this.handleContentScroll.bind(this));\n\n\t\t\t// Iben: Set the current window width\n\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\n\t\t\t// Iben: Listen to the resize event and update the window width\n\t\t\tthis.window.addEventListener('resize', () => {\n\t\t\t\tif (this.window.innerWidth && this.widthSubject$.getValue()) {\n\t\t\t\t\tthis.widthSubject$.next(this.window.innerWidth);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Scrolls to the provided position of the page\n\t *\n\t * @param offset - Offset to which we want to scroll, scrolls to top when no offset is provided\n\t */\n\tpublic scrollTo(offset: number = 0): void {\n\t\tif (!this.window) {\n\t\t\treturn;\n\t\t}\n\t\tthis.window.scrollTo(0, offset);\n\t}\n\n\t/**\n\t * Returns whether there is a document present\n\t */\n\tpublic hasDocument(): boolean {\n\t\treturn !!this.document;\n\t}\n\n\t/**\n\t * Returns whether the current platform is a browser\n\t */\n\tpublic isBrowser(): boolean {\n\t\treturn isPlatformBrowser(this.platformId);\n\t}\n\n\t/**\n\t * Run a provided function only when we're in the browser and not in a server side rendered application\n\t *\n\t * @param action - Function we want to run in the browser\n\t */\n\tpublic runInBrowser(\n\t\taction: (data: { browserWindow: Window; browserDocument: Document }) => ReturnType\n\t): ReturnType {\n\t\tif (this.isBrowser()) {\n\t\t\treturn action({\n\t\t\t\tbrowserWindow: this.window,\n\t\t\t\tbrowserDocument: this.document,\n\t\t\t});\n\t\t}\n\n\t\tconsole.warn('Browser depended function has not run.');\n\n\t\treturn undefined as ReturnType;\n\t}\n\n\t/**\n\t *\n\t *\n\t * @private\n\t * @memberof NgxWindowService\n\t */\n\tprivate handleContentScroll(): void {\n\t\t// Iben: Update the scrollUp subject\n\t\tif (window.scrollY > this.currentScrollPosition) {\n\t\t\tthis.scrollingUpSubject$.next(false);\n\t\t} else {\n\t\t\tthis.scrollingUpSubject$.next(true);\n\t\t}\n\n\t\t// Iben: Update the current scroll position\n\t\tthis.currentScrollPosition = window.scrollY \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpecStoreAssets.html":{"url":"interfaces/SpecStoreAssets.html","title":"interface - SpecStoreAssets","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpecStoreAssets\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-assets.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            channel\n                                        \n                                \n                                \n                                        \n                                            darkMode\n                                        \n                                \n                                \n                                        \n                                            subscriberCount\n                                        \n                                \n                                \n                                        \n                                            videos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        channel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        channel:         BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        darkMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        darkMode:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscriberCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscriberCount:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        videos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        videos:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport { createBaseStoreAssets, createEntityAdapterStoreAssets, createStoreAssets } from '../utils';\n\nexport type DataType = { id: string; url: string };\n\ninterface SpecStoreAssets extends StoreFlowAssets {\n\tchannel: BaseStoreAssets;\n\tvideos: EntityStoreAssets;\n\tsubscriberCount: BaseStoreAssets;\n\tdarkMode: BaseStoreAssets;\n}\n\nexport const StoreSlice = 'YouTube';\n\nexport const { actions, reducers, selectors } = createStoreAssets(StoreSlice, [\n\t{\n\t\tsubSlice: 'channel',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'videos',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t},\n\t{\n\t\tsubSlice: 'subscriberCount',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: 0,\n\t},\n\t{\n\t\tsubSlice: 'darkMode',\n\t\tgenerator: createBaseStoreAssets,\n\t\tinitialValue: false,\n\t},\n]);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SpecStoreService.html":{"url":"injectables/SpecStoreService.html","title":"injectable - SpecStoreService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SpecStoreService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                channel$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                channelLoading$\n                            \n                            \n                                    Public\n                                    Readonly\n                                darkMode$\n                            \n                            \n                                    Private\n                                    Readonly\n                                httpClient\n                            \n                            \n                                    Public\n                                    Readonly\n                                subscriberCount$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videos$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosError$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosErrorMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                videosLoading$\n                            \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                clearChannel\n                            \n                            \n                                    Public\n                                clearVideos\n                            \n                            \n                                    Public\n                                fetchChannel\n                            \n                            \n                                    Public\n                                fetchVideos\n                            \n                            \n                                    Public\n                                getChannel\n                            \n                            \n                                    Public\n                                getVideos\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        clearVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    clearVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    fetchVideos()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getChannel\n                        \n                    \n                \n            \n            \n                \n                        \n                    getChannel()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getVideos\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVideos(actionType: \"set\" | \"add\")\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                actionType\n                                            \n                                                        \"set\" | \"add\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    'set'\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channel$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        channelLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.channel\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        darkMode$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(selectors.darkMode)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        httpClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     HttpClient\n\n                    \n                \n                \n                    \n                        Default value : inject(HttpClient)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        subscriberCount$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.subscriberCount\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videos$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosError$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorFromStore(selectors.videos)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosErrorMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        videosLoading$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                \n                    \n                        Default value : this.selectLoadingFromStore(\n\t\tselectors.videos\n\t)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { NgxStoreService } from '../abstracts';\nimport { dispatchDataToStore } from '../utils';\n\nimport { DataType, actions, selectors } from './store-assets';\n\n@Injectable()\nexport class SpecStoreService extends NgxStoreService {\n\tpublic readonly channel$: Observable = this.selectFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelError$: Observable = this.selectErrorFromStore(\n\t\tselectors.channel\n\t);\n\tpublic readonly channelErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.channel\n\t);\n\n\tpublic readonly videos$: Observable = this.selectFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosLoading$: Observable = this.selectLoadingFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly videosError$: Observable = this.selectErrorFromStore(selectors.videos);\n\tpublic readonly videosErrorMessage$: Observable = this.selectErrorMessageFromStore(\n\t\tselectors.videos\n\t);\n\tpublic readonly subscriberCount$: Observable = this.selectFromStore(\n\t\tselectors.subscriberCount\n\t);\n\tpublic readonly darkMode$: Observable = this.selectFromStore(selectors.darkMode);\n\n\tprivate readonly httpClient: HttpClient = inject(HttpClient);\n\n\tpublic getChannel(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.channel,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => this.channel$));\n\t}\n\n\tpublic clearChannel(): void {\n\t\tthis.store.dispatch(actions.channel.clear());\n\t}\n\n\tpublic getVideos(actionType: 'set' | 'add' = 'set'): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.videos,\n\t\t\tthis.httpClient.get('test'),\n\t\t\tthis.store,\n\t\t\tactionType\n\t\t).pipe(switchMap(() => this.videos$));\n\t}\n\n\tpublic clearVideos(): void {\n\t\tthis.store.dispatch(actions.videos.clear());\n\t}\n\n\tpublic fetchChannel() {\n\t\tthis.store.dispatch(actions.channel.effects.set({ payload: false }));\n\t}\n\n\tpublic fetchVideos() {\n\t\tthis.store.dispatch(actions.videos.effects.set({ payload: 'test' }));\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreAssetsOptions.html":{"url":"interfaces/StoreAssetsOptions.html","title":"interface - StoreAssetsOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreAssetsOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/interfaces/store-generator.ts\n        \n\n\n            \n                Description\n            \n            \n                These objects will be used as a blueprint for our store slices\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            generator\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initialValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selectId\n                                        \n                                \n                                \n                                        \n                                            subSlice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        generator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generator:      | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :      | \n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selectId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selectId:     IdSelector\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IdSelector\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subSlice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subSlice:     SliceKey\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SliceKey\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IdSelector } from '@ngrx/entity';\nimport { ActionReducer, Action } from '@ngrx/store';\n\nimport { BaseStoreAssets } from './base-store';\nimport { EntityStoreAssets } from './entity-store-assets';\nimport {\n\tBaseStoreAssetsGeneratorOptions,\n\tEntityStoreAssetsGeneratorOptions,\n} from './store-assets-generator-options';\n\n/**\n * These objects will be used as a blueprint for our store slices\n *\n * @template SliceKey - The keys of our store\n */\nexport interface StoreAssetsOptions {\n\tsubSlice: SliceKey;\n\tgenerator:\n\t\t| ((options: EntityStoreAssetsGeneratorOptions) => EntityStoreAssets)\n\t\t| ((options: BaseStoreAssetsGeneratorOptions) => BaseStoreAssets);\n\n\tselectId?: IdSelector;\n\tinitialValue?: any;\n}\n\n// Iben: The base type for our flow assets which we'll pass to the create generator\nexport type StoreFlowAssets = Record | BaseStoreAssets>;\n\n// Iben: Type to extract the selectors from the provided ResultType, so that we know if we have a BaseStoreSelector or an EntityStoreSelector, this way\n// we get correct typing in our services\nexport type NgxStoreSelectors = {\n\t[Key in keyof ResultType]: ResultType[Key]['selectors'];\n};\n\n// Iben: Type to extract the actions from the provided ResultType, so that we know if we have a BaseStoreAction or an EntityStoreAction, this way\n// we get correct typing in our services\ntype NgxStoreActions = {\n\t[Key in keyof ResultType]: ResultType[Key]['actions'];\n};\n\n/**\n * The typing of the store of all sub slices\n *\n * @template ResultType - The typing we wish to see for our actions, reducers and selectors\n */\nexport interface NgxStore {\n\tselectors: NgxStoreSelectors;\n\tactions: NgxStoreActions;\n\treducers: ActionReducer;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreEffects.html":{"url":"injectables/StoreEffects.html","title":"injectable - StoreEffects","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreEffects\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/effects.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                actions$\n                            \n                            \n                                    Private\n                                    Readonly\n                                effectsService\n                            \n                            \n                                    Public\n                                fetchChannel$\n                            \n                            \n                                    Public\n                                fetchVideos$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        actions$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Actions\n\n                    \n                \n                \n                    \n                        Default value : inject(Actions)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        effectsService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EffectsService\n\n                    \n                \n                \n                    \n                        Default value : inject(EffectsService)\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchChannel$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        fetchVideos$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t})\n                    \n                \n                    \n                        \n                                Defined in libs/angular/store/src/lib/rxjs/spec/effects.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { Actions, createEffect } from '@ngrx/effects';\n\nimport { handleEffect } from '../operators';\n\nimport { EffectsService } from './effects.service';\nimport { DataType, actions } from './store-assets';\n\n@Injectable()\nexport class StoreEffects {\n\tprivate readonly actions$: Actions = inject(Actions);\n\tprivate readonly effectsService: EffectsService = inject(EffectsService);\n\n\tpublic fetchChannel$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(\n\t\t\t\tactions.channel,\n\t\t\t\t'set',\n\t\t\t\tthis.effectsService.fetchChannel\n\t\t\t)\n\t\t);\n\t});\n\n\tpublic fetchVideos$ = createEffect(() => {\n\t\treturn this.actions$.pipe(\n\t\t\thandleEffect(actions.videos, 'set', this.effectsService.fetchVideos)\n\t\t);\n\t});\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StoreState.html":{"url":"interfaces/StoreState.html","title":"interface - StoreState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StoreState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            StoreFlowAssets\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            isCompleted\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         EntityStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EntityStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCompleted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCompleted:     BaseStoreAssets\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BaseStoreAssets\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StoreStateService.html":{"url":"injectables/StoreStateService.html","title":"injectable - StoreStateService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StoreStateService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/store/src/lib/rxjs/spec/store-state.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            NgxStoreService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stateWrapper\n                            \n                            \n                                    Protected\n                                    Readonly\n                                store\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setCompleted\n                            \n                            \n                                setData\n                            \n                            \n                                setWithError\n                            \n                            \n                                    Public\n                                selectErrorFromStore\n                            \n                            \n                                    Public\n                                selectErrorMessageFromStore\n                            \n                            \n                                    Public\n                                selectFromStore\n                            \n                            \n                                    Public\n                                selectLoadingFromStore\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:31\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setCompleted\n                        \n                    \n                \n            \n            \n                \nsetCompleted(payload: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setData\n                        \n                    \n                \n            \n            \n                \nsetData(payload: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setWithError\n                        \n                    \n                \n            \n            \n                \nsetWithError()\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/store/src/lib/rxjs/spec/store-state.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:60\n\n                        \n                    \n\n\n            \n                \n                        Select the error state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectErrorMessageFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectErrorMessageFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:69\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    ErrorMessage\n                            \n                        \n                    \n\n            \n                \n                        Select the error message state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:42\n\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    StoreItem\n                            \n                        \n                    \n\n            \n                \n                        Select the data of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        selectLoadingFromStore\n                        \n                    \n                \n            \n            \n                \n                        \n                    selectLoadingFromStore(selector: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         NgxStoreService\n\n                        \n                    \n                    \n                        \n                                Defined in         NgxStoreService:51\n\n                        \n                    \n\n\n            \n                \n                        Select the loading state of a store slice\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                selector\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe selector object\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stateWrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StoreState\n\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:13\n\n                        \n                    \n\n            \n                \n                    A wrapper object for the store state selectors\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        store\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Store\n\n                    \n                \n                \n                    \n                        Default value : inject(Store)\n                    \n                \n                        \n                            \n                                Inherited from         NgxStoreService\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxStoreService:15\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of, throwError, switchMap } from 'rxjs';\n\nimport { NgxStoreService } from '../abstracts';\nimport { BaseStoreAssets, EntityStoreAssets, StoreFlowAssets } from '../interfaces';\nimport {\n\tcreateBaseStoreAssets,\n\tcreateEntityAdapterStoreAssets,\n\tcreateStoreAssets,\n\tdispatchDataToStore,\n} from '../utils';\n\ninterface StoreState extends StoreFlowAssets {\n\tdata: EntityStoreAssets;\n\tisCompleted: BaseStoreAssets;\n}\n\nexport const { actions, reducers, selectors } = createStoreAssets('state', [\n\t{\n\t\tsubSlice: 'data',\n\t\tgenerator: createEntityAdapterStoreAssets,\n\t\tselectId: (item) => item,\n\t},\n\t{\n\t\tsubSlice: 'isCompleted',\n\t\tgenerator: createBaseStoreAssets,\n\t},\n]);\n\n@Injectable()\nexport class StoreStateService extends NgxStoreService {\n\tconstructor() {\n\t\tsuper(selectors);\n\t}\n\n\tsetWithError(): Observable {\n\t\treturn dispatchDataToStore(\n\t\t\tactions.data,\n\t\t\tthrowError(() => new Error('This is an error')),\n\t\t\tthis.store\n\t\t).pipe(switchMap(() => throwError(() => new Error('This is an error'))));\n\t}\n\n\tsetData(payload: string[]): Observable {\n\t\treturn dispatchDataToStore(actions.data, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.data$)\n\t\t);\n\t}\n\n\tsetCompleted(payload: boolean): Observable {\n\t\treturn dispatchDataToStore(actions.isCompleted, of(payload), this.store).pipe(\n\t\t\tswitchMap(() => this.state.isCompleted$)\n\t\t);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TableCellTemplate.html":{"url":"interfaces/TableCellTemplate.html","title":"interface - TableCellTemplate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TableCellTemplate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/layout/src/lib/components/table/ngx-table.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cellClass\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            cellTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            footerTemplate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headerTemplate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cellClass\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellClass:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cellTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cellTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        footerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        footerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headerTemplate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headerTemplate:     TemplateRef\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TemplateRef\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CdkTableModule } from '@angular/cdk/table';\nimport { NgTemplateOutlet, NgClass, NgComponentOutlet } from '@angular/common';\nimport {\n\tAfterContentChecked,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tComponent,\n\tHostBinding,\n\tInject,\n\tOnDestroy,\n\tOnInit,\n\tTemplateRef,\n\tWritableSignal,\n\tinject,\n\tsignal,\n\tinput,\n\tOutputEmitterRef,\n\toutput,\n\tcontentChildren,\n\tcontentChild,\n\teffect,\n\tInputSignal,\n\tlinkedSignal,\n\tcomputed,\n\tSignal,\n} from '@angular/core';\nimport {\n\tControlValueAccessor,\n\tFormControl,\n\tFormRecord,\n\tNG_VALUE_ACCESSOR,\n\tReactiveFormsModule,\n} from '@angular/forms';\nimport { isEmpty } from 'lodash';\nimport { Subject } from 'rxjs';\nimport { takeUntil, tap } from 'rxjs/operators';\n\nimport { NgxTreeGrid } from '../../directives';\nimport {\n\tNgxAriaSortPipe,\n\tNgxTableHasObserversPipe,\n\tNgxTableShowHeaderPipe,\n\tNgxTableSortIconPipe,\n} from '../../pipes';\nimport {\n\tHideHeaderRowOption,\n\tNgxTableConfiguration,\n\tNgxTableConfigurationToken,\n\tShowDetailRowOption,\n} from '../../tokens';\nimport { NgxTableCypressDataTags, NgxTableSortEvent } from '../../types';\nimport {\n\tgenerateNgxTableForm,\n\thandleNgxTableHeaderValueChanges,\n\thandleNgxTableValueChanges,\n\tresetNgxTableForm,\n\twriteNgxTableValue,\n} from '../../utils';\nimport { NgxAbstractTableCellDirective } from '../cell';\n\ninterface TableCellTemplate {\n\theaderTemplate?: TemplateRef;\n\tcellTemplate?: TemplateRef;\n\tfooterTemplate?: TemplateRef;\n\tcellClass?: string;\n}\n\n@Component({\n\tselector: 'ngx-table',\n\ttemplateUrl: './ngx-table.component.html',\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n\tstyleUrls: ['./ngx-table.component.scss'],\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tmulti: true,\n\t\t\tuseExisting: NgxTableComponent,\n\t\t},\n\t],\n\timports: [\n\t\tCdkTableModule,\n\t\tNgTemplateOutlet,\n\t\tNgClass,\n\t\tReactiveFormsModule,\n\t\tNgxTableHasObserversPipe,\n\t\tNgxTableSortIconPipe,\n\t\tNgxTableShowHeaderPipe,\n\t\tNgxAriaSortPipe,\n\t\tNgxTreeGrid,\n\t\tNgComponentOutlet,\n\t],\n\thost: {\n\t\t'class.ngx-table-loading': 'loading()',\n\t},\n})\nexport class NgxTableComponent\n\timplements AfterContentChecked, ControlValueAccessor, OnInit, OnDestroy\n{\n\tprivate cdRef: ChangeDetectorRef = inject(ChangeDetectorRef);\n\t@Inject(NgxTableConfigurationToken)\n\tpublic readonly ngxTableConfiguration: NgxTableConfiguration = inject(\n\t\tNgxTableConfigurationToken,\n\t\t{ optional: true }\n\t);\n\n\t/**\n\t * Default class that will be put on the ngx-table component\n\t */\n\t@HostBinding('class') public readonly componentClass =\n\t\tthis.ngxTableConfiguration?.ngxTableClass || '';\n\n\t/**\n\t * A subject to handle the observables when the component gets destroyed\n\t */\n\tprivate readonly destroyed$ = new Subject();\n\t/**\n\t * onTouch function for the control value accessor\n\t */\n\tprivate onTouch: Function = () => {};\n\t/**\n\t * onChanged function for the control value accessor\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tprivate onChanged: Function = (_: any) => {};\n\n\t/**\n\t * Whether or not the form was generated\n\t */\n\tprivate formGenerated: boolean = false;\n\t/**\n\t * The current sorting event\n\t */\n\tprotected currentSortingEvent: WritableSignal = linkedSignal(\n\t\t() => {\n\t\t\tthis.handleCurrentSort(this.currentSorting());\n\n\t\t\treturn this.currentSorting();\n\t\t}\n\t);\n\n\t/**\n\t * Keeps a record with the column and it's templates\n\t */\n\tprotected tableCellTemplateRecord: WritableSignal> = signal(\n\t\t{}\n\t);\n\t/**\n\t * Keeps a record of which columns are sortable\n\t */\n\tprotected sortableTableCellRecord: WritableSignal\n\t> = signal({});\n\t/**\n\t * Keeps a record of which cells have a cypress tag\n\t */\n\tprotected tableCypressRecord: WritableSignal> = signal(\n\t\t{}\n\t);\n\t/**\n\t * Keeps a record of which cells are editable\n\t */\n\tprotected editableTableCellRecord: WritableSignal\n\t> = signal({});\n\n\t/**\n\t * An object with all the open rows\n\t */\n\tprotected openedRows: WritableSignal> = linkedSignal(() => {\n\t\t// Wouter: If all detail rows should be shown by default, we add all indices to the open rows\n\t\tif (this.showDetailRow() === 'always') {\n\t\t\treturn this.data().reduce((previousValue, _, index) => {\n\t\t\t\treturn {\n\t\t\t\t\t...previousValue,\n\t\t\t\t\t[index]: true,\n\t\t\t\t};\n\t\t\t}, {});\n\t\t} else if (\n\t\t\t// Wouter: If the detail row should be shown on single item and there is only one item, we add the first index to the open rows\n\t\t\tthis.showDetailRow() === 'on-single-item' &&\n\t\t\tthis.data().length === 1\n\t\t) {\n\t\t\treturn { 0: true };\n\t\t} else {\n\t\t\t// Iben: If no detail row should be shown due to global config, we reset the open rows\n\t\t\treturn {};\n\t\t}\n\t});\n\n\t/**\n\t * A FormGroup that adds a control for each row\n\t */\n\tprotected readonly rowsFormGroup = new FormRecord>({});\n\n\t/**\n\t * A computed signal to see if we have a form\n\t */\n\tprotected readonly hasForm: Signal = computed(() => {\n\t\t// Iben: Setup the form when the data or selectable state changes\n\t\tif (this.data() && this.selectable()) {\n\t\t\t// Iben: If no form was generated, first generate the form we need\n\t\t\tif (!this.formGenerated) {\n\t\t\t\tgenerateNgxTableForm(this.rowsFormGroup, this.data(), this.selectableKey());\n\n\t\t\t\tthis.formGenerated = true;\n\t\t\t} else {\n\t\t\t\t// Iben: If a form was generated, reset it as required\n\t\t\t\tresetNgxTableForm(\n\t\t\t\t\tthis.rowsFormGroup,\n\t\t\t\t\tthis.data(),\n\t\t\t\t\tthis.selectableKey(),\n\t\t\t\t\tthis.resetFormOnNewData()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn this.formGenerated;\n\t});\n\n\t/**\n\t * A control for the select all option in the header of the table\n\t */\n\tprotected readonly headerControl = new FormControl();\n\n\t/**\n\t * A control for when we use a radio button\n\t */\n\tprotected readonly radioControl = new FormControl();\n\n\t/**\n\t * A list of all defined columns\n\t */\n\tprotected definedColumns: WritableSignal = linkedSignal(() => {\n\t\treturn [\n\t\t\t...(this.selectable() ? ['ngxTableSelectColumn'] : []),\n\t\t\t...(this.columns() || []),\n\t\t\t...(this.actions() || []),\n\t\t\t...(this.showOpenRowState() && this.detailRowTemplate()\n\t\t\t\t? ['ngxOpenRowStateColumn']\n\t\t\t\t: []),\n\t\t];\n\t});\n\n\t/**\n\t * Whether or not there was a footer template set somewhere in one of the cells\n\t */\n\tprotected hasFooterTemplates: WritableSignal = signal(false);\n\n\t/**\n\t * Whether or not there was a row selected\n\t */\n\tpublic selectedRow: WritableSignal = linkedSignal(() => {\n\t\t// Iben: Subscribe to the data changes\n\t\tthis.data();\n\n\t\t// Wouter: Deselect any row that was selected to prevent faulty class toggle.\n\t\treturn undefined;\n\t});\n\n\t/**\n\t * An array of table columns\n\t */\n\tprotected tableColumns: WritableSignal = linkedSignal(() => {\n\t\treturn [...(this.columns() || []), ...(this.actions() || [])];\n\t});\n\n\t/**\n\t * The currently focussed row\n\t */\n\tprotected focussedRow: string;\n\n\t/**\n\t * The currently focussed cell\n\t */\n\tprotected focussedCell: string;\n\n\t/**\n\t * A QueryList of all the table cell templates\n\t */\n\tprotected readonly tableCellTemplates = contentChildren(NgxAbstractTableCellDirective);\n\n\t/**\n\t * A template to provide a detail row\n\t */\n\tprotected readonly detailRowTemplate = contentChild>('detailRowTmpl');\n\n\t/**\n\t * A template to provide an empty view\n\t */\n\tprotected readonly emptyTemplate = contentChild>('emptyTmpl');\n\n\t/**\n\t * A template to provide a loading view\n\t */\n\tprotected readonly loadingTemplate = contentChild>('loadingTmpl');\n\n\t/**\n\t * A template to provide a checkbox template\n\t */\n\n\tprotected checkboxTemplate = contentChild>('checkboxTmpl');\n\n\t/**\n\t * A template to provide a radio button template\n\t */\n\n\tprotected radioTemplate = contentChild>('radioTmpl');\n\n\t/**\n\t * A template to provide a sort template\n\t */\n\n\tprotected sortTemplate = contentChild>('sortTmpl');\n\n\t/**\n\t * A template to provide a open state template\n\t */\n\tprotected readonly openRowStateTemplate = contentChild>('openRowStateTmpl');\n\n\t/**\n\t * A list of all column names we want to represent in the table\n\t */\n\tpublic readonly columns = input([]);\n\n\t/**\n\t * An optional list of all columns we wish to attribute to row actions, which are sorted to the end of the row by default\n\t */\n\tpublic readonly actions = input([]);\n\n\t/**\n\t * The data we wish to render in the table\n\t */\n\tpublic readonly data = input([]);\n\n\t/**\n\t * An optional property that defines whether multiple rows can be open at once.\n\t * By default, this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly allowMultipleOpenRows = input(\n\t\tthis.ngxTableConfiguration?.allowMultipleRowsOpen || false\n\t);\n\n\t/**\n\t * Whether or not rows in the table are selectable\n\t */\n\tpublic readonly selectable = input(false);\n\n\t/**\n\t * In case the rows are selectable, we can pass a key we want to use as return value instead of the index of the row\n\t */\n\tpublic readonly selectableKey = input();\n\n\t/**\n\t * In case the rows are selectable, we pass whether we want a radio button or a checkbox. By default, this is a checkbox\n\t */\n\tpublic readonly selectableType = input('checkbox');\n\n\t/**\n\t * In case the rows are selectable, we can determine whether we want to reset the form based on new data. Setting this to false will add new controls to the FormGroup; but will not remove the earlier controls from the form.\n\t * This is a useful feature for when the data is being filtered or new data is added through a load more mechanic\n\t *\n\t * By default, this is true. This default cannot be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly resetFormOnNewData = input(true);\n\n\t/**\n\t *\n\t * The current sorting event.\n\t */\n\tpublic currentSorting: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want to add a class to the currently opened row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showSelectedOpenRow = input(\n\t\tthis.ngxTableConfiguration?.showSelectedOpenRow || false\n\t);\n\n\t/**\n\t * An optional class to add to the rows of the table\n\t */\n\tpublic readonly rowClass = input();\n\n\t/**\n\t * An optional key that can be used in the data in order to highlight a row. If this property is present and true, the highlight class will be provided.\n\t * By default, this key is ngx-highlight. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly highlightKey = input(\n\t\tthis.ngxTableConfiguration?.highlightKey || 'ngx-highlight'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to show a visual indicator of the open and closed state of a detail row.\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showOpenRowState = input(\n\t\tthis.ngxTableConfiguration?.showOpenRowState || false\n\t);\n\n\t/**\n\t * An optional property to define the default open state of the detail row.\n\t * By default this is 'on-click'. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly showDetailRow = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow || 'on-click'\n\t);\n\n\t/**\n\t * An optional property to define whether we want to emit the row when there's only one item in the table and the showDetailRow is set to `on-single-item`\n\t * By default this is false. The default can be overwritten in the NgxTableConfiguration.\n\t */\n\tpublic readonly emitValueOnSingleItem = input(\n\t\tthis.ngxTableConfiguration?.showDetailRow === 'on-single-item' &&\n\t\t\tthis.ngxTableConfiguration?.emitValueOnSingleItem\n\t);\n\n\t/**\n\t * An optional key to open a row by default upon rendering.\n\t */\n\tpublic defaultRowOpen: InputSignal = input();\n\n\t/**\n\t * An optional property to define whether we want the header to be hidden in certain cases.\n\t * By default this is never. The default can be overwritten in the NgxTableConfiguration\n\t */\n\tpublic readonly hideHeaderWhen = input(\n\t\tthis.ngxTableConfiguration?.hideHeaderWhen || 'never'\n\t);\n\n\t/**\n\t * The loading state of our table\n\t */\n\tpublic loading = input(false);\n\n\t/**\n\t * An optional set of data we pass if the loading state is shown\n\t */\n\tpublic loadingData = input();\n\n\t/**\n\t * An optional set of data we pass if the empty state is shown\n\t */\n\tpublic emptyData = input();\n\n\t/**\n\t * Returns the data of the row that was clicked\n\t */\n\tpublic rowClicked: OutputEmitterRef = output();\n\n\tconstructor() {\n\t\teffect(() => {\n\t\t\tconst openedIndex = this.defaultRowOpen();\n\t\t\t// Wouter: The function findIndex is most likely to be used. It returns\n\t\t\t// -1 if the index was not found.\n\t\t\tif (openedIndex  {\n\t\t\t\tthis.handleRowClicked(this.data()[openedIndex], openedIndex);\n\t\t\t\tthis.cdRef.markForCheck();\n\t\t\t});\n\t\t});\n\n\t\t// Iben: If there's only one item in the data and we open the detail row by default, we emit the row clicked value\n\t\teffect(() => {\n\t\t\tif (\n\t\t\t\tthis.emitValueOnSingleItem() &&\n\t\t\t\tthis.data()?.length === 1 &&\n\t\t\t\tthis.showDetailRow() === 'on-single-item'\n\t\t\t) {\n\t\t\t\tthis.handleRowClicked(this.data()[0], 0);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * WriteValue method for the value accessor\n\t *\n\t * @param value - The value patched to the control\n\t */\n\tpublic writeValue(value: string[] | unknown): void {\n\t\t// Iben: In case we're using radio buttons, we set the radio control and early exit\n\t\tif (this.selectableType() === 'radio') {\n\t\t\tthis.radioControl.patchValue(value, { emitEvent: false });\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Reset the form\n\t\tthis.rowsFormGroup.reset({}, { emitEvent: false });\n\n\t\t// Iben: Early exit if the value is empty or not an array\n\t\tif (!Array.isArray(value) || value.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Patch the value to the form\n\t\tthis.rowsFormGroup.patchValue(writeNgxTableValue(value, this.selectableKey()), {\n\t\t\temitEvent: false,\n\t\t});\n\n\t\t// Wouter: Some rows are not selected, so uncheck the header checkbox\n\t\tif (\n\t\t\tObject.values(this.rowsFormGroup.controls).some(\n\t\t\t\t(control: FormControl) => !control?.value\n\t\t\t)\n\t\t) {\n\t\t\tthis.headerControl.patchValue(false, { emitEvent: false });\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: Set the header checkbox to `checked`, because all rows are selected\n\t\tthis.headerControl.patchValue(true, { emitEvent: false });\n\t}\n\n\t/**\n\t * Register the onChange function\n\t */\n\tpublic registerOnChange(fn: any): void {\n\t\tthis.onChanged = fn;\n\t}\n\n\t/**\n\t * Register the onTouched function\n\t */\n\tpublic registerOnTouched(fn: any): void {\n\t\tthis.onTouch = fn;\n\t}\n\n\t/**\n\t * Handle the disabled state of the form\n\t *\n\t * @param  isDisabled - Whether or not the form is disabled\n\t */\n\tpublic setDisabledState?(isDisabled: boolean): void {\n\t\tif (isDisabled) {\n\t\t\tthis.rowsFormGroup.disable({ emitEvent: false });\n\t\t\tthis.headerControl.disable({ emitEvent: false });\n\t\t\tthis.radioControl.disable({ emitEvent: false });\n\t\t} else {\n\t\t\tthis.rowsFormGroup.enable({ emitEvent: false });\n\t\t\tthis.headerControl.enable({ emitEvent: false });\n\t\t\tthis.radioControl.enable({ emitEvent: false });\n\t\t}\n\t}\n\n\t/**\n\t * Handle a click on a row\n\t *\n\t * @param row - The data of the row that was clicked\n\t * @param index - The index of the row that was clicked\n\t */\n\tpublic handleRowClicked(row: any, index: number) {\n\t\t// Iben: Emit a row click event\n\t\tthis.rowClicked.emit(row);\n\n\t\t// Iben: Handle the selected open row if needed\n\t\tif (this.showSelectedOpenRow()) {\n\t\t\tif (this.selectedRow() === index) {\n\t\t\t\t// Benoit: If you close the selected row, unselect that row\n\t\t\t\tthis.selectedRow.set(undefined);\n\t\t\t} else {\n\t\t\t\tthis.selectedRow.set(index);\n\t\t\t}\n\t\t}\n\t\tthis.handleRowState(index, !this.openedRows()[index] ? 'open' : 'close');\n\t}\n\n\t/**\n\t * Handle the expanded state of a row\n\t *\n\t * @param index - The index of the row\n\t * @param action - Whether the row needs to be opened or closed\n\t */\n\tpublic handleRowState(index: number, action: 'open' | 'close'): void {\n\t\t// Iben: If there's no detail row we early exit\n\t\tif (!this.detailRowTemplate()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Wouter: When the detail row should be shown due to global config, we add the index to the open rows\n\t\tif (\n\t\t\tthis.showDetailRow() === 'always' ||\n\t\t\t(this.showDetailRow() === 'on-single-item' && this.data.length === 1)\n\t\t) {\n\t\t\tthis.openedRows.update((value) => ({ ...value, 0: true }));\n\t\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\t}\n\t\t// Iben: Depending on whether we allow multiple rows to be open at the same time, we toggle the open rows accordingly\n\t\telse if (this.allowMultipleOpenRows()) {\n\t\t\tthis.openedRows.update((value) => ({\n\t\t\t\t...value,\n\t\t\t\tindex: action === 'open',\n\t\t\t}));\n\t\t} else {\n\t\t\tthis.openedRows.set(action === 'open' ? { [index]: true } : {});\n\t\t}\n\t}\n\n\t/**\n\t * Assigns the templates of each cell to the correct columns\n\t */\n\tprivate handleTableCellTemplates(): void {\n\t\t// Iben: Reset the provided records\n\t\tthis.tableCellTemplateRecord.set({});\n\t\tthis.sortableTableCellRecord.set({});\n\t\tthis.tableCypressRecord.set({});\n\t\tthis.editableTableCellRecord.set({});\n\n\t\t// Iben: Loop over all provided table cell templates\n\t\tArray.from(this.tableCellTemplates()).forEach((tableCellTemplate) => {\n\t\t\t// Iben: Early exit in case for some reason the template is undefined\n\t\t\tif (!tableCellTemplate) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Iben: Add the template to the template record for easy access in the table template\n\t\t\tconst {\n\t\t\t\tcolumn: columnInput,\n\t\t\t\theaderTemplate,\n\t\t\t\tcellTemplate,\n\t\t\t\tfooterTemplate,\n\t\t\t\tsortable: sortableInput,\n\t\t\t\tcellClass,\n\t\t\t\tcypressDataTags: cypressDataTagsInput,\n\t\t\t\teditable: editableInput,\n\t\t\t} = tableCellTemplate;\n\t\t\tconst column = columnInput();\n\t\t\tconst sortable = sortableInput();\n\t\t\tconst cypressDataTags = cypressDataTagsInput();\n\t\t\tconst editable = editableInput();\n\n\t\t\tthis.tableCellTemplateRecord.update((value) => {\n\t\t\t\treturn {\n\t\t\t\t\t...value,\n\t\t\t\t\t[column]: {\n\t\t\t\t\t\theaderTemplate,\n\t\t\t\t\t\tcellTemplate,\n\t\t\t\t\t\tfooterTemplate,\n\t\t\t\t\t\tcellClass,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t// Iben: If the column is sortable, we add it to the sortable record\n\t\t\tif (sortable) {\n\t\t\t\tthis.sortableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the column has cypress tags, we add them to the record\n\t\t\tif (cypressDataTags) {\n\t\t\t\tthis.tableCypressRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: cypressDataTags,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Iben: If the cell is editable, we add it to the record\n\t\t\tif (editable) {\n\t\t\t\tthis.editableTableCellRecord.update((value) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...value,\n\t\t\t\t\t\t[column]: tableCellTemplate,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Iben: Check if at least one template has a footer template, so that we know whether or not we have to render the footer row\n\t\tthis.hasFooterTemplates.set(\n\t\t\tArray.from(this.tableCellTemplates()).some((cellTemplate) =>\n\t\t\t\tBoolean(cellTemplate.footerTemplate)\n\t\t\t)\n\t\t);\n\n\t\t// Iben:\n\t\tthis.handleCurrentSort(this.currentSortingEvent());\n\n\t\t// Iben: Detect changes to update the view\n\t\tthis.cdRef.detectChanges();\n\t}\n\n\t/**\n\t * Respond to a click on the sort of a column\n\t *\n\t * @param column - The column we clicked on\n\t */\n\tpublic handleSort(column: string): void {\n\t\t// Iben: If the column is not sortable we early exit\n\t\tif (!this.sortableTableCellRecord()[column]) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: Loop over the sortable columns and reset all columns that don't match with the clicked column\n\t\tObject.entries(this.sortableTableCellRecord()).forEach(([cellName, cell]) => {\n\t\t\tif (cellName === column) {\n\t\t\t\tthis.sortableTableCellRecord()[column].handleSort();\n\t\t\t} else {\n\t\t\t\tcell.resetSortDirection();\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic selectRow(index: number): void {\n\t\tconst selectableKey = this.selectableKey();\n\t\tthis.rowsFormGroup\n\t\t\t.get(selectableKey ? `${this.data()[index][selectableKey]}` : `${index}`)\n\t\t\t.patchValue(true);\n\t}\n\n\t/**\n\t * Handle the changes in sort events\n\t *\n\t * @param event - The new sorting event\n\t */\n\tprivate handleCurrentSort(event: NgxTableSortEvent): void {\n\t\t// Iben: Early exit if the sortable cell record is empty or if the cell already has the sortDirection of the event\n\t\tif (\n\t\t\tisEmpty(\n\t\t\t\tthis.sortableTableCellRecord() ||\n\t\t\t\t\t(event &&\n\t\t\t\t\t\tthis.sortableTableCellRecord()[event.column].sortDirection ===\n\t\t\t\t\t\t\tevent.direction)\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: We reset all the sort directions by default, so all of them are unsorted.\n\t\tObject.values(this.sortableTableCellRecord()).forEach((cell) => cell.resetSortDirection());\n\n\t\t// Iben: If there's no sort event passed, we early exit\n\t\tif (!event) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Iben: In case there was a sorting provided and we set the sorting to the provided column and direction\n\t\tthis.sortableTableCellRecord()[event.column].setSortDirection(event.direction);\n\t}\n\n\t/**\n\t * Setup the columns array\n\t */\n\tprivate handleRowColumns(): void {\n\t\t// Iben: Make sure that the select option, the open row state and the defined actions are correctly placed\n\t\tconst columns = this.columns();\n\t\tconst actions = this.actions();\n\t\tthis.definedColumns.set([\n\t\t\t...(this.selectable() ? ['ngxTableSelectColumn'] : []),\n\t\t\t...(columns || []),\n\t\t\t...(actions || []),\n\t\t\t...(this.showOpenRowState() && this.detailRowTemplate()\n\t\t\t\t? ['ngxOpenRowStateColumn']\n\t\t\t\t: []),\n\t\t]);\n\n\t\t// Iben: Set the actual table columns\n\t\tthis.tableColumns.set([...(columns || []), ...(actions || [])]);\n\t}\n\n\t// Lifecycle methods\n\t// ==============================\n\tpublic ngAfterContentChecked(): void {\n\t\t// Iben: Run with content check so that we can dynamically add templates/columns\n\t\tthis.handleRowColumns();\n\t\tthis.handleTableCellTemplates();\n\t}\n\n\tpublic ngOnInit() {\n\t\t// Iben: Subscribe to the form to handle the selectable behavior\n\t\tthis.rowsFormGroup.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\t// Iben: If not all items are selected, we uncheck the headerControl without emitting a value to prevent an infinite loop in the next subscription\n\t\t\t\t\tthis.headerControl.setValue(\n\t\t\t\t\t\tObject.values(value).every((selected) => selected),\n\t\t\t\t\t\t{ emitEvent: false }\n\t\t\t\t\t);\n\n\t\t\t\t\t// Iben: Emit the current selection and mark the form as touched\\\n\t\t\t\t\tthis.onChanged(handleNgxTableValueChanges(value));\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Listen to the radio control and update the value accordingly\n\t\tthis.radioControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((value) => {\n\t\t\t\t\tthis.onChanged(value);\n\t\t\t\t\tthis.onTouch();\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\n\t\t// Iben: Subscribe to the headerControl to handle multiSelect behaviour\n\t\tthis.headerControl.valueChanges\n\t\t\t.pipe(\n\t\t\t\ttap((selected) => {\n\t\t\t\t\t// Iben: Select all items when this control is selected, if not, unselect them all\n\t\t\t\t\tif (selected) {\n\t\t\t\t\t\tthis.rowsFormGroup.patchValue(\n\t\t\t\t\t\t\thandleNgxTableHeaderValueChanges(this.rowsFormGroup)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.rowsFormGroup.reset();\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\ttakeUntil(this.destroyed$)\n\t\t\t)\n\t\t\t.subscribe();\n\t}\n\n\tpublic ngOnDestroy() {\n\t\tthis.destroyed$.next(null);\n\t\tthis.destroyed$.complete();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestDisplayContentComponent.html":{"url":"components/TestDisplayContentComponent.html","title":"component - TestDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                \n            \n\n\n\n            \n                template\n                Content\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:41\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Content'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorComponent.html":{"url":"components/TestErrorComponent.html","title":"component - TestErrorComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestErrorDataComponent.html":{"url":"components/TestErrorDataComponent.html","title":"component - TestErrorDataComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestErrorDataComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-data-error\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Error {{data()}}\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Error {{data()}}'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestErrorDataComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestLoadingComponent.html":{"url":"components/TestLoadingComponent.html","title":"component - TestLoadingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestLoadingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-loading\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Loading\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Loading'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestLoadingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOfflineComponent.html":{"url":"components/TestOfflineComponent.html","title":"component - TestOfflineComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOfflineComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                    NgxDisplayContentComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-offline\n            \n\n            \n                standalone\n                true\n            \n\n\n\n\n            \n                template\n                Offline\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Public\n                                elementRef\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                            \n                                \n                                    Inherited from         NgxDisplayContentComponent\n\n                                \n                            \n                        \n                            \n                                    Defined in         NgxDisplayContentComponent:13\n\n                            \n                        \n                \n                    \n                        An optional data input to provide data to the fallback components. This property is typed as any.\n\n                    \n                \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:13\n\n                        \n                    \n\n            \n                \n                    An optional data input to provide data to the fallback components. This property is typed as any.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        elementRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef)\n                    \n                \n                        \n                            \n                                Inherited from         NgxDisplayContentComponent\n\n                            \n                        \n                    \n                        \n                                Defined in         NgxDisplayContentComponent:8\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = 'Offline'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOfflineComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TestOverrideDisplayContentComponent.html":{"url":"components/TestOverrideDisplayContentComponent.html","title":"component - TestOverrideDisplayContentComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TestOverrideDisplayContentComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                test-override-data\n            \n\n\n            \n                imports\n                \n                                NgxDisplayContentDirective\n                            CommonModule\n                \n            \n\n\n\n            \n                template\n                \n\tContent\n\n\nCustom loading\n\t\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                conditions\n                            \n                            \n                                    Readonly\n                                errorData\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                conditions\n                            \n                            \n                                errorData\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        conditions\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        errorData\n                    \n                \n                        \n                            \n                                    Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        conditions\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        errorData\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in libs/angular/layout/src/lib/directives/display-content/components/display-content-test.component.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component, input } from '@angular/core';\n\nimport { NgxDisplayContentComponent } from '../../../abstracts';\nimport { NgxDisplayContentConditions } from '../../../types';\nimport { NgxDisplayContentDirective } from '../display-content.directive';\n\n@Component({\n\tselector: 'test-loading',\n\tstandalone: true,\n\ttemplate: 'Loading',\n})\nexport class TestLoadingComponent extends NgxDisplayContentComponent {}\n@Component({\n\tselector: 'test-error',\n\tstandalone: true,\n\ttemplate: 'Error',\n})\nexport class TestErrorComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-offline',\n\tstandalone: true,\n\ttemplate: 'Offline',\n})\nexport class TestOfflineComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data-error',\n\tstandalone: true,\n\ttemplate: 'Error {{data()}}',\n})\nexport class TestErrorDataComponent extends NgxDisplayContentComponent {}\n\n@Component({\n\tselector: 'test-data',\n\ttemplate: 'Content',\n\timports: [NgxDisplayContentDirective],\n})\nexport class TestDisplayContentComponent {\n\treadonly conditions = input();\n}\n\n@Component({\n\tselector: 'test-override-data',\n\ttemplate: `\n\t\t\n\t\t\tContent\n\t\t\n\n\t\tCustom loading\n\t`,\n\timports: [NgxDisplayContentDirective, CommonModule],\n})\nexport class TestOverrideDisplayContentComponent {\n\treadonly conditions = input();\n\treadonly errorData = input();\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '\tContentCustom loading\t'\n    var COMPONENTS = [{'name': 'MockTourHolderComponent', 'selector': 'mock-tour-holder'},{'name': 'MockTourStepComponent', 'selector': 'mock-tour-step-component'},{'name': 'NgxAccordionComponent', 'selector': 'ngx-accordion'},{'name': 'NgxAccordionItemComponent', 'selector': 'ngx-accordion-item'},{'name': 'NgxConfigurableLayoutComponent', 'selector': 'ngx-configurable-layout'},{'name': 'NgxConfigurableLayoutItemComponent', 'selector': 'ngx-configurable-layout-item'},{'name': 'NgxCurrencyTableCellComponent', 'selector': 'ngx-table-currency-cell'},{'name': 'NgxDateTableCellComponent', 'selector': 'ngx-table-date-cell'},{'name': 'NgxI18nEmptyComponent', 'selector': 'ngx-i18n-empty'},{'name': 'NgxImageMarkerComponent', 'selector': 'ngx-image-marker'},{'name': 'NgxMobileLayoutComponent', 'selector': 'ngx-mobile-layout'},{'name': 'NgxTableComponent', 'selector': 'ngx-table'},{'name': 'NgxToastContainerComponent', 'selector': 'ngx-toast-container'},{'name': 'TestDisplayContentComponent', 'selector': 'test-data'},{'name': 'TestErrorComponent', 'selector': 'test-error'},{'name': 'TestErrorDataComponent', 'selector': 'test-data-error'},{'name': 'TestLoadingComponent', 'selector': 'test-loading'},{'name': 'TestOfflineComponent', 'selector': 'test-offline'},{'name': 'TestOverrideDisplayContentComponent', 'selector': 'test-override-data'}];\n    var DIRECTIVES = [{'name': 'DataFormAccessor', 'selector': ''},{'name': 'FocusClickDirective', 'selector': '[focusClick]'},{'name': 'FormAccessor', 'selector': ''},{'name': 'FormAccessorContainer', 'selector': ''},{'name': 'NgxAbstractTableCellDirective', 'selector': 'ngx-abstract-table-cell'},{'name': 'NgxAccessibleAbstractDragAndDropItemDirective', 'selector': ''},{'name': 'NgxAccessibleDragAndDropContainerDirective', 'selector': '[ngxAccessibleDragAndDropContainer]'},{'name': 'NgxAccessibleDragAndDropHostDirective', 'selector': '[ngxAccessibleDragAndDropHost]'},{'name': 'NgxAccessibleDragAndDropItemDirective', 'selector': '[ngxAccessibleDragAndDropItem]'},{'name': 'NgxButtonDirective', 'selector': '[ngxButton]'},{'name': 'NgxCookiesFallBackComponent', 'selector': ''},{'name': 'NgxCypressTagDirective', 'selector': '[cypressTag]'},{'name': 'NgxDisplayContentComponent', 'selector': ''},{'name': 'NgxDisplayContentDirective', 'selector': '[displayContent]'},{'name': 'NgxFormsControlValueAccessor', 'selector': ''},{'name': 'NgxFormsErrorAbstractComponent', 'selector': ''},{'name': 'NgxFormsErrorsDirective', 'selector': '[ngxFormsErrors]'},{'name': 'NgxHasCookieDirective', 'selector': '[hasCookie]'},{'name': 'NgxHasFeatureDirective', 'selector': '[ngxHasFeature]'},{'name': 'NgxHasFocusDirective', 'selector': ''},{'name': 'NgxHasFocusDragAndDropAbstractDirective', 'selector': ''},{'name': 'NgxHasPermissionDirective', 'selector': '[ngxHasPermission]'},{'name': 'NgxIsAuthenticatedDirective', 'selector': '[ngxIsAuthenticated]'},{'name': 'NgxLinkDirective', 'selector': '[ngxLink]'},{'name': 'NgxMediaQueryDirective', 'selector': '[ngxMediaQuery]'},{'name': 'NgxModalAbstractComponent', 'selector': ''},{'name': 'NgxQueryParamFormSyncComponent', 'selector': ''},{'name': 'NgxSaveOnExitComponent', 'selector': ''},{'name': 'NgxTableCellDirective', 'selector': 'ngx-table-cell'},{'name': 'NgxTableOpenRowStateTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSelectTemplateAbstractComponent', 'selector': ''},{'name': 'NgxTableSortTemplateAbstractComponent', 'selector': ''},{'name': 'NgxToastBundlerComponent', 'selector': ''},{'name': 'NgxToastComponent', 'selector': ''},{'name': 'NgxTooltipAbstractComponent', 'selector': ''},{'name': 'NgxTooltipDirective', 'selector': '[ngxTooltip]'},{'name': 'NgxTourItemDirective', 'selector': '[tourItem]'},{'name': 'NgxTourShowWhenDirective', 'selector': '[ngxTourShowWhen]'},{'name': 'NgxTourStepComponent', 'selector': ''},{'name': 'NgxTreeGridCellDirective', 'selector': '[ngxTreeGridCell]'},{'name': 'NgxTreeGridDirective', 'selector': '[ngxTreeGrid]'},{'name': 'NgxTreeGridRowDirective', 'selector': '[ngxTreeGridRow]'}];\n    var ACTUAL_COMPONENT = {'name': 'TestOverrideDisplayContentComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/TransformPipe.html":{"url":"pipes/TransformPipe.html","title":"pipe - TransformPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  TransformPipe\n\n\n\n        \n            Info\n        \n        \n            README\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        transform\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: any, transformer: Function)\n                \n            \n\n\n                    \n                        \n                            Defined in libs/angular/utils/src/lib/pipes/transform/transform.pipe.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    TransformerType\n                            \n                        \n                    \n\n            \n                \n                        Transforms a value based on a provided transform function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided value we wish to transform\n\n\n                                            \n                                        \n                                        \n                                                transformer\n                                            \n                                                            Function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nA provided transform function\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     TransformerType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n    \n        TransformPipe\nThe TransformPipe will transform a given value with the provided transform-function.\nHow to use\nExample :\n  {{ value | transform: toUpperCase }}\nWith a given value 'my text', will result in the following:\nExample :MY TEXT\n    \n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * A pipe to pass a transformer function to. By using this setup, we can use functions without causing rerender issues\n */\n@Pipe({\n\tname: 'transform',\n\tstandalone: true,\n})\nexport class TransformPipe implements PipeTransform {\n\t/**\n\t * Transforms a value based on a provided transform function\n\t *\n\t * @param value - The provided value we wish to transform\n\t * @param transformer - A provided transform function\n\t */\n\tpublic transform(value: any, transformer: Function): TransformerType {\n\t\t// Iben: If no transformer is passed, we return the original value\n\t\tif (!transformer) {\n\t\t\treturn value;\n\t\t}\n\n\t\t// Iben: Transform the value and return\n\t\treturn transformer(value);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TranslationLoaderActionEntity.html":{"url":"interfaces/TranslationLoaderActionEntity.html","title":"interface - TranslationLoaderActionEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TranslationLoaderActionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n        \n\n\n            \n                Description\n            \n            \n                A translation loading action, in which we indicate whether a file has been loaded or not\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TranslationLoaderActionEntity {\n\tid: string;\n\tstate: keyof typeof TranslationLoaderActionStateEnum;\n}\n\n/**\n * The state of a translation loading action\n */\nenum TranslationLoaderActionStateEnum {\n\tLOADING = 'LOADING',\n\tLOADED = 'LOADED',\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : 20.2.0\n        \n            @angular/common : 20.2.1\n        \n            @angular/compiler : 20.2.1\n        \n            @angular/core : 20.2.1\n        \n            @angular/forms : 20.2.1\n        \n            @angular/platform-browser : 20.2.1\n        \n            @angular/platform-browser-dynamic : 20.2.1\n        \n            @angular/router : 20.2.1\n        \n            @ibenvandeveire/ngx-core : 20.1.0\n        \n            @ibenvandeveire/types-authentication : ^1.0.0\n        \n            @ngrx/effects : 20.0.0\n        \n            @ngrx/entity : 20.0.0\n        \n            @ngrx/signals : 20.0.0\n        \n            @ngrx/store : 20.0.0\n        \n            @ngx-translate/core : 17.0.0\n        \n            date-fns : ^4.1.0\n        \n            deepmerge-ts : ^7.1.5\n        \n            lodash : ^4.17.21\n        \n            markerjs-live : ^1.2.1\n        \n            markerjs2 : ^2.32.4\n        \n            obj-clean : ^3.0.1\n        \n            rxjs : ~7.8.0\n        \n            uuid : ^11.1.0\n        \n            vanilla-cookieconsent : ^3.1.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NgxTableSortDirection   (libs/.../sort-direction.enum.ts)\n                        \n                        \n                            TranslationLoaderActionStateEnum   (libs/.../i18n-loading.types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/angular/layout/src/lib/enums/sort-direction.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        NgxTableSortDirection\n                    \n                \n                        \n                            \n                                 ASCENDING\n                            \n                        \n                        \n                            \n                                Value : ASCENDING\n                            \n                        \n                        \n                            \n                                 DESCENDING\n                            \n                        \n                        \n                            \n                                Value : DESCENDING\n                            \n                        \n            \n        \n\n    libs/angular/i18n/src/lib/services/i18n-loading/i18n-loading.types.ts\n    \n        \n            \n                \n                    \n                        \n                        TranslationLoaderActionStateEnum\n                    \n                \n                    \n                        \n                            The state of a translation loading action\n\n                        \n                    \n                        \n                            \n                                 LOADING\n                            \n                        \n                        \n                            \n                                Value : LOADING\n                            \n                        \n                        \n                            \n                                 LOADED\n                            \n                        \n                        \n                            \n                                Value : LOADED\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authentication   (libs/.../authentication.ts)\n                        \n                        \n                            core   (libs/.../core.ts)\n                        \n                        \n                            NgxAuthenticatedHttpInterceptor   (libs/.../authentication.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/javascript/types/authentication/src/lib/authentication.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authentication\n                        \n                    \n                \n            \n            \n                \nauthentication()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/javascript/core/src/lib/core.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        core\n                        \n                    \n                \n            \n            \n                \ncore()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    libs/angular/authentication/src/lib/interceptors/authentication/authentication.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NgxAuthenticatedHttpInterceptor\n                        \n                    \n                \n            \n            \n                \nNgxAuthenticatedHttpInterceptor(request: HttpRequest, next: HttpHandlerFn)\n                \n            \n\n\n\n\n            \n                \n                        An interceptor that will handle any request that needs to be authenticated\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        HttpRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe provided request\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        HttpHandlerFn\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HttpHandler\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n@ibenvandeveire open-source\n@ibenvandeveire open source is a mono-repo providing several of Angular and non-Angular based packages created and maintained by Iben Van de Veire.\nInstallation\nTo setup this project, clone the repo and run npm i to install the dependencies.\nDocumentation\nYou can find the documentation for all of the packages on the Wiki.\nFor more in depth documentation relating to individual components of each package, please consult the Compodoc Documentation\nPackages\n\nutils (@ibenvandeveire/ngx-utils) :\n\nThis Angular package provides several independent utilities to facilitate common use-cases for users and developers.\n\n\nforms (@ibenvandeveire/ngx-forms):\n\nThis Angular package provides multiple utilities for complex form use-cases.\n\n\nstore (@ibenvandeveire/ngx-store):\n\nThis Angular package provides several utils and abstractions to improve the Redux workflow\n\n\ni18n (@ibenvandeveire/ngx-i18n):\n\nThis Angular package provides a lazy-loaded modular approach to translations.\n\n\ncookies (@ibenvandeveire/ngx-cookies):\n\nThis Angular package provides a quick and easy wrapper for CookieConsent V3.\n\n\nlayout (@ibenvandeveire/ngx-layout):\n\nThis Angular package is a collection of Angular components related to layout.\n\n\ntour (@ibenvandeveire/ngx-inform):\n\nThis Angular package provides the tools to build a guided walkthrough of one or more pages, tooltips, modals etc.\n\n\ncore (@ibenvandeveire/ngx-core):\n\nThis Angular package provides the core functionalities for the other packages.\n\n\nrxjs-utils (@ibenvandeveire/rxjs-utils):\n\nThis package provides the common use-cases for RXJS based projects.\n\n\n\nYou can find detailed explanations in their respective README’s.\nContributions\nIn order to contribute to this repository you must:\n\nStart a new branch from main named either fix/PACKAGE/FEATURE-NAME or feat/PACKAGE/FEATURE-NAME.\nCommit all code regarding the fix or feature to this branch, but do not include a version bump. Your commit message should start with either fix(PACKAGE) or feat(PACKAGE) for a fix or feature respectively.\nOpen a PR and add the correct package label, an enhancement or bug tag, the project and milestone.\n\nContributors\n\nBenoît Dossoine\nDenis Valcke\nIben Van de Veire\nWouter Heirstrate\nAbdurrahman Ekinci\nIan Emsens\nFemke Reunes\n\nLicense\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2023 Studio Hyperdrive\nCopyright (c) 2025 Iben Van de Veire\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    42 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    24 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    89 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            License : MIT\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
